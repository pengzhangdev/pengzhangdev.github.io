{
    "docs": [
        {
            "location": "/", 
            "text": "\u91cd\u8981\u901a\u77e5!!\n\n\n\u7531\u4e8e\ncoding\n\u4e0a\u7684Pages\u52a8\u4e0d\u52a8\u5c31\u90e8\u7f72\u5931\u8d25(\u8fd8\u6ca1\u5730\u65b9\u5410\u69fd\u548c\u89e3\u51b3), \u6240\u4ee5\u8be5\u7f51\u7ad9\u7684\u6570\u636e\u53ef\u80fd\u4e0d\u662f\u6700\u65b0\u751a\u81f3\u4e00\u76f4\u65e0\u6cd5\u66f4\u65b0\u6210\u529f.\u9700\u8981\u6700\u65b0\u7684\u6570\u636e\u8bf7\u8bbf\u95ee\ngithub\n, \u5728\u67d0\u4e9b\u7f51\u7edc\u73af\u5883\u4e0b\u901f\u5ea6\u4f1a\u504f\u6162, \u89c1\u8c05. \u65b0\u589e\u52a0\u4e86\u4e00\u4e2a\u7f51\u7ad9\nnetlify\n, \u8fd9\u4e2a\u8ddfgithub\u7684\u7ed1\u5b9a\u7684, \u5e76\u4e14\u5e26\u6709cdn, \u901f\u5ea6\u4f1a\u66f4\u5feb.\n\n\n\u6b22\u8fce\n\n\n\u672c\u7ad9\u867d\u7136\u53d6\u540d\u4e3a\u4e07\u5377\u8305\u5c4b, \u4f46\u5e76\u4e0d\u662f\u4e00\u4e2a\u5728\u7ebf\u9605\u8bfb\u7f51\u7ad9\u6216\u8005\u4e00\u4e2a\u8d2d\u4e66\u7f51\u7ad9. \u5176\u4e07\u5377\u53d6\u81ea\n\u8bfb\u4e66\u7834\u4e07\u5377\n, \u4e43\u662f\u5bf9\u81ea\u6211\u7684\u6fc0\u52b1.\n\u5728\u672a\u6765\u7684\u9053\u8def\u4e0a\u80fd\u591f\u4e00\u76f4\u4fdd\u6301\u9605\u8bfb, \u505a\u4e00\u4e2a\u7ec8\u8eab\u5b66\u4e60\u8005. \u8305\u5c4b\u4e43\u662f\u53d6\u81ea\u8001\u675c\u7684\n\u8305\u5c4b\u4e3a\u79cb\u98ce\u6240\u7834\u6b4c\n, \u4f46\u5e76\u65e0\u8001\u675c\u5fe7\u56fd\u5fe7\u6c11\u7684\u60c5\u6000, \u7eaf\u7cb9\u8868\u8fbe\u6240\u4f4f\u8305\u5c4b\u548c\u5fe7\u5df1.\n\n\n\u4f5c\u8005\u672c\u4eba\u662fIT\u884c\u4e1a\u7684\u8f6f\u4ef6\u5de5\u7a0b\u5e08, \u4f46\u662f\u4e2a\u4eba\u671f\u671b\u6240\u9605\u8bfb\u7684\u4e66\u4e0d\u53ea\u662f\u6280\u672f\u76f8\u5173, \u8be5\u7f51\u7ad9\u8bb0\u8f7d\u7684\u4e5f\u5e76\u4e0d\u662f\u4ec5\u4ec5\u6280\u672f\u7b14\u8bb0.\n\n\n\u5bf9\u4e8e\u6280\u672f\u4ee5\u5916\u7684\u4e66\u7c4d, \u4e2a\u4eba\u504f\u7231\u4e8e\u5386\u53f2(\u7279\u522b\u662f\u4e2d\u56fd\u5386\u53f2)\u7c7b\u4e66\u7c4d\u548c\u63a2\u6848\u7c7b\u4e66\u7c4d. \u4e0b\u9762\u8c08\u8c08\u4e2a\u4eba\u5bf9\u8fd9\u4e24\u7c7b\u4e66\u7c4d\u7684\u4e00\u4e9b\u770b\u6cd5.\n\n\n\u5bf9\u4e8e\u5386\u53f2\u7c7b, \u504f\u7231\u4e2d\u56fd\u5386\u53f2\u7684\u539f\u56e0, \u5c31\u662f\u56e0\u4e3a\u4f5c\u8005\u672c\u4eba\u662f\u4e2d\u56fd\u4eba. \u5148\u8bf4\u8bf4, \u4e0d\u600e\u4e48\u5f85\u89c1\u897f\u65b9\u53f2\u7684\u539f\u56e0\u5427, \u8bb0\u4e0d\u4f4f\u90a3\u4e9b\u4eba\u7269\u7684\u540d\u5b57\u554a(\u76f8\u4fe1\u5f88\u591a\u8bfb\u8005\u8ddf\u4f5c\u8005\u4e00\u6837\u65e0\u6cd5\u8bb0\u4f4f\u897f\u65b9\u4eba\u7684\u540d\u5b57, \u7279\u522b\u662f\u97f3\u8bd1\u540e\u7684\u540d\u5b57). \u672c\u4eba\u662f\u57fa\u7763\u5f92, \u6240\u4ee5\u5bf9\u4e8e\u897f\u65b9\u5386\u53f2\u5012\u662f\u6ca1\u6709\u4efb\u4f55\u504f\u89c1, \u5404\u79cd\u8457\u540d\u7684\u4e8b\u4ef6\u90fd\u77e5\u9053\u4e2a\u5927\u6982, \u7136\u800c\u522b\u95ee\u4e3b\u89d2\u540d\u5b57, \u522b\u95ee\u4e8b\u4ef6\u540d\u5b57, \u522b\u95ee\u5730\u70b9\u540d\u5b57, \u4e00\u6982\u8bb0\u4e0d\u4f4f(\u7528\u4f5c\u8005\u5bb6\u653f\u59d4\u7684\u8bdd\u8bf4, \u8fd9\u662f1\u79d2\u8bb0\u5fc6\u554a). \u8fa3\u4e48, \u4e2d\u56fd\u53e4\u65f6\u5019\u7684\u5386\u53f2\u662f\u4e0d\u662f\u4e00\u5b9a\u90fd\u8bb0\u5f97\u4f4f\u5462?\n\u4e5f\u4e0d\u662f(\u624b\u52a8\u6d41\u6c57). \u4e3e\u4e2a\u7b80\u5355\u4f8b\u5b50\u5427, \u5eb7\u96cd\u4e7e\u4e09\u4e2a\u7687\u5e1d\u7684\u540d\u5b57(\u5bf9\u4e0d\u8d77, \u8bb0\u4e0d\u4f4f), \u5148\u540e\u987a\u5e8f, \u548c\u76db\u4e16\u540d\u5b57, \u4ee5\u4e0a\u90fd\u8bb0\u4e0d\u4f4f.\u4f46\u662f\u554a, \u6c49\u5510\u5b8b\u7684\u5386\u53f2\u57fa\u672c\u8bb0\u5f97. \u603b\u7ed3\u4e00\u53e5\u8bdd\u5c31\u662f, \u6c49\u4eba\u7684\u5386\u53f2\u80fd\u8bb0\u5f97.\n\n\n\u5bf9\u4e8e\u63a2\u6848\u7c7b, \u4e2a\u4eba\u504f\u7231\u65e5\u672c\u7684(\u5fc5\u987b\u70b9\u9898\u4e1c\u91ce).\u4e0d\u7ba1\u662f\u5c0f\u8bf4, \u7535\u89c6\u5267, \u63a2\u6848\u7c7b\u7684\u65e5\u672c\u603b\u662f\u62cd\u7684\u5f88\u597d. \u5e94\u8be5\u8bf4, \u5728\u6c1b\u56f4\u628a\u6211\u4e0a, \u65e5\u672c\u5728\u8fd9\u5757\u6bd4\u8f83\u7cbe\u901a\u5427. \u4ece\u5c0f\u8bf4\u7684\u60ac\u7591\u548c\u5f15\u4eba\u5165\u80dc, \u4ece\u7535\u89c6\u5267\u7684\u80cc\u666f\u97f3\u4e50, \u573a\u666f\u6e32\u67d3, \u90fd\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e9b\u6280\u672f. \u5f53\u7136, \u56fd\u5185\u7684\u60ac\u7591\u5c0f\u8bf4, \u897f\u65b9\u7684\u963f\u838e\u52a0, \u798f\u5c14\u6469\u65af, \u4e5f\u90fd\u7231. \u63d0\u5230\u798f\u5c14\u6469\u65af, \u4e0d\u5f97\u4e0d\u63a8\u4e00\u4e0bBBC\u7684\u8150\u5c14\u83ab\u65af(\u590f\u6d1b\u514b\u7cfb\u5217), \u8fd8\u6709\u7f8e\u5267\u7684\u5973\u7248\u798f\u5c14\u6469\u65af, \u6700\u540e\u9a6c\u4e0a\u5c31\u4e0a\u7684\u65e5\u5267\u7684\u5973\u7248\u798f\u5c14\u6469\u65af\u548c\u5973\u7248\u534e\u751f.\n\n\n\u7f51\u7ad9\u5bfc\u822a\n\n\n\u4e0a\u9762\u7684\u5927\u5bfc\u822a\u680f\u5206\u522b\u6307\u5411\u4e0d\u540c\u7684\u6587\u7ae0\u5206\u7c7b(\u7b14\u8bb0\u5206\u7c7b), \u5b58\u6863\u680f\u5219\u5305\u542b\u672c\u7ad9\u6240\u6709\u6587\u7ae0, \u4e14\u6587\u7ae0\u6309\u7167\u53d1\u8868\u65f6\u95f4\u5012\u53d9.\n\u6587\u7ae0\u9875\u9762\u7684\u5de6\u4fa7\u4e3a\u8be5\u5927\u680f\u76ee\u4e0b\u7684\u6587\u7ae0\u540d\u5b57\u5217\u8868, \u53f3\u4fa7\u4e3a\u8be5\u7bc7\u6587\u7ae0\u7684\u76ee\u5f55.\n\n\n\u5173\u4e8e\u672c\u7ad9\n\n\n\u672c\u7ad9\u662f\u5efa\u5728coding\u548cgithub\u4e0a, \u5185\u5bb9\u662f\u81ea\u5efa\u7684leanote\u7b14\u8bb0\u5bfc\u51fa(\u5176\u5b9e\u90fd\u662fmarkdown, \u590d\u5236\u9ecf\u8d34). \u5efa\u7ad9\u5de5\u5177\u662fmkdocs, \u7136\u540e\u7528\u4e86\nsquidfunk/mkdocs-material\n, \u611f\u5174\u8da3\u53ef\u4ee5\u5728dockerhub\u4e0a\u641c\u7d22\u4e0b.\n\n\n\u5e0c\u671b\u8fd9\u4e2a\u7f51\u7ad9\u80fd\u4e00\u76f4\u5b58\u5728, \u4ee5\u540e\u8001\u4e86\u540e\u80fd\u4f5c\u4e3a\u56de\u5fc6\u5427. \u5728\u8fd9\u4e2a\u57fa\u7840\u4e0a, \u540c\u65f6\u5e0c\u671bcoding\u80fd\u4e00\u76f4\u5b58\u5728, github\u4e5f\u4e00\u76f4\u5728, \u6211\u7684vps\u80fd\u4e00\u76f4\u5728, leanote\u80fd\u4e00\u76f4\u5728, github\u80fd\u4e00\u76f4\u5728. \u6211\u662f\u4e00\u4e2a\u6000\u65e7\u7684\u4eba, \u5e0c\u671b\u8eab\u8fb9\u7684\u4e00\u5207\u90fd\u5728, \u5e0c\u671b\u8eab\u8fb9\u7684\u4e00\u5207\u90fd\u80fd\u8bb0\u5f55\u5728\u8fd9\u4e2a\u7ad9\u70b9\u4e0a.\n\n\n\u611f\u6069\n\n\n\u6000\u7740\u4e00\u9897\u611f\u6069\u7684\u5fc3\u9605\u8bfb\u8fd9\u4e2a\u4e16\u754c\u5e76\u8bb0\u5f55, \u4e0d\u7ba1\u751f\u6d3b\u5982\u4f55, \u5e0c\u671b\u6211\u4eec\u80fd\u4e00\u76f4\u8d70\u4e0b\u53bb.\n\n\n\u5386\u53f2\n\n\n\n\n2018\u5e743\u6708: \u65b0\u5efa\u8be5\u7ad9. \u5f00\u59cb\u9010\u6e10\u5c06leanote\u4e0a\u7684\u7b14\u8bb0\u548c\u8d44\u6599\u8f6c\u79fb\u5230\u8be5\u7ad9\u70b9.", 
            "title": "\u4e07\u5377\u8305\u5c4b"
        }, 
        {
            "location": "/#_1", 
            "text": "\u7531\u4e8e coding \u4e0a\u7684Pages\u52a8\u4e0d\u52a8\u5c31\u90e8\u7f72\u5931\u8d25(\u8fd8\u6ca1\u5730\u65b9\u5410\u69fd\u548c\u89e3\u51b3), \u6240\u4ee5\u8be5\u7f51\u7ad9\u7684\u6570\u636e\u53ef\u80fd\u4e0d\u662f\u6700\u65b0\u751a\u81f3\u4e00\u76f4\u65e0\u6cd5\u66f4\u65b0\u6210\u529f.\u9700\u8981\u6700\u65b0\u7684\u6570\u636e\u8bf7\u8bbf\u95ee github , \u5728\u67d0\u4e9b\u7f51\u7edc\u73af\u5883\u4e0b\u901f\u5ea6\u4f1a\u504f\u6162, \u89c1\u8c05. \u65b0\u589e\u52a0\u4e86\u4e00\u4e2a\u7f51\u7ad9 netlify , \u8fd9\u4e2a\u8ddfgithub\u7684\u7ed1\u5b9a\u7684, \u5e76\u4e14\u5e26\u6709cdn, \u901f\u5ea6\u4f1a\u66f4\u5feb.", 
            "title": "\u91cd\u8981\u901a\u77e5!!"
        }, 
        {
            "location": "/#_2", 
            "text": "\u672c\u7ad9\u867d\u7136\u53d6\u540d\u4e3a\u4e07\u5377\u8305\u5c4b, \u4f46\u5e76\u4e0d\u662f\u4e00\u4e2a\u5728\u7ebf\u9605\u8bfb\u7f51\u7ad9\u6216\u8005\u4e00\u4e2a\u8d2d\u4e66\u7f51\u7ad9. \u5176\u4e07\u5377\u53d6\u81ea \u8bfb\u4e66\u7834\u4e07\u5377 , \u4e43\u662f\u5bf9\u81ea\u6211\u7684\u6fc0\u52b1.\n\u5728\u672a\u6765\u7684\u9053\u8def\u4e0a\u80fd\u591f\u4e00\u76f4\u4fdd\u6301\u9605\u8bfb, \u505a\u4e00\u4e2a\u7ec8\u8eab\u5b66\u4e60\u8005. \u8305\u5c4b\u4e43\u662f\u53d6\u81ea\u8001\u675c\u7684 \u8305\u5c4b\u4e3a\u79cb\u98ce\u6240\u7834\u6b4c , \u4f46\u5e76\u65e0\u8001\u675c\u5fe7\u56fd\u5fe7\u6c11\u7684\u60c5\u6000, \u7eaf\u7cb9\u8868\u8fbe\u6240\u4f4f\u8305\u5c4b\u548c\u5fe7\u5df1.  \u4f5c\u8005\u672c\u4eba\u662fIT\u884c\u4e1a\u7684\u8f6f\u4ef6\u5de5\u7a0b\u5e08, \u4f46\u662f\u4e2a\u4eba\u671f\u671b\u6240\u9605\u8bfb\u7684\u4e66\u4e0d\u53ea\u662f\u6280\u672f\u76f8\u5173, \u8be5\u7f51\u7ad9\u8bb0\u8f7d\u7684\u4e5f\u5e76\u4e0d\u662f\u4ec5\u4ec5\u6280\u672f\u7b14\u8bb0.  \u5bf9\u4e8e\u6280\u672f\u4ee5\u5916\u7684\u4e66\u7c4d, \u4e2a\u4eba\u504f\u7231\u4e8e\u5386\u53f2(\u7279\u522b\u662f\u4e2d\u56fd\u5386\u53f2)\u7c7b\u4e66\u7c4d\u548c\u63a2\u6848\u7c7b\u4e66\u7c4d. \u4e0b\u9762\u8c08\u8c08\u4e2a\u4eba\u5bf9\u8fd9\u4e24\u7c7b\u4e66\u7c4d\u7684\u4e00\u4e9b\u770b\u6cd5.  \u5bf9\u4e8e\u5386\u53f2\u7c7b, \u504f\u7231\u4e2d\u56fd\u5386\u53f2\u7684\u539f\u56e0, \u5c31\u662f\u56e0\u4e3a\u4f5c\u8005\u672c\u4eba\u662f\u4e2d\u56fd\u4eba. \u5148\u8bf4\u8bf4, \u4e0d\u600e\u4e48\u5f85\u89c1\u897f\u65b9\u53f2\u7684\u539f\u56e0\u5427, \u8bb0\u4e0d\u4f4f\u90a3\u4e9b\u4eba\u7269\u7684\u540d\u5b57\u554a(\u76f8\u4fe1\u5f88\u591a\u8bfb\u8005\u8ddf\u4f5c\u8005\u4e00\u6837\u65e0\u6cd5\u8bb0\u4f4f\u897f\u65b9\u4eba\u7684\u540d\u5b57, \u7279\u522b\u662f\u97f3\u8bd1\u540e\u7684\u540d\u5b57). \u672c\u4eba\u662f\u57fa\u7763\u5f92, \u6240\u4ee5\u5bf9\u4e8e\u897f\u65b9\u5386\u53f2\u5012\u662f\u6ca1\u6709\u4efb\u4f55\u504f\u89c1, \u5404\u79cd\u8457\u540d\u7684\u4e8b\u4ef6\u90fd\u77e5\u9053\u4e2a\u5927\u6982, \u7136\u800c\u522b\u95ee\u4e3b\u89d2\u540d\u5b57, \u522b\u95ee\u4e8b\u4ef6\u540d\u5b57, \u522b\u95ee\u5730\u70b9\u540d\u5b57, \u4e00\u6982\u8bb0\u4e0d\u4f4f(\u7528\u4f5c\u8005\u5bb6\u653f\u59d4\u7684\u8bdd\u8bf4, \u8fd9\u662f1\u79d2\u8bb0\u5fc6\u554a). \u8fa3\u4e48, \u4e2d\u56fd\u53e4\u65f6\u5019\u7684\u5386\u53f2\u662f\u4e0d\u662f\u4e00\u5b9a\u90fd\u8bb0\u5f97\u4f4f\u5462?\n\u4e5f\u4e0d\u662f(\u624b\u52a8\u6d41\u6c57). \u4e3e\u4e2a\u7b80\u5355\u4f8b\u5b50\u5427, \u5eb7\u96cd\u4e7e\u4e09\u4e2a\u7687\u5e1d\u7684\u540d\u5b57(\u5bf9\u4e0d\u8d77, \u8bb0\u4e0d\u4f4f), \u5148\u540e\u987a\u5e8f, \u548c\u76db\u4e16\u540d\u5b57, \u4ee5\u4e0a\u90fd\u8bb0\u4e0d\u4f4f.\u4f46\u662f\u554a, \u6c49\u5510\u5b8b\u7684\u5386\u53f2\u57fa\u672c\u8bb0\u5f97. \u603b\u7ed3\u4e00\u53e5\u8bdd\u5c31\u662f, \u6c49\u4eba\u7684\u5386\u53f2\u80fd\u8bb0\u5f97.  \u5bf9\u4e8e\u63a2\u6848\u7c7b, \u4e2a\u4eba\u504f\u7231\u65e5\u672c\u7684(\u5fc5\u987b\u70b9\u9898\u4e1c\u91ce).\u4e0d\u7ba1\u662f\u5c0f\u8bf4, \u7535\u89c6\u5267, \u63a2\u6848\u7c7b\u7684\u65e5\u672c\u603b\u662f\u62cd\u7684\u5f88\u597d. \u5e94\u8be5\u8bf4, \u5728\u6c1b\u56f4\u628a\u6211\u4e0a, \u65e5\u672c\u5728\u8fd9\u5757\u6bd4\u8f83\u7cbe\u901a\u5427. \u4ece\u5c0f\u8bf4\u7684\u60ac\u7591\u548c\u5f15\u4eba\u5165\u80dc, \u4ece\u7535\u89c6\u5267\u7684\u80cc\u666f\u97f3\u4e50, \u573a\u666f\u6e32\u67d3, \u90fd\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e9b\u6280\u672f. \u5f53\u7136, \u56fd\u5185\u7684\u60ac\u7591\u5c0f\u8bf4, \u897f\u65b9\u7684\u963f\u838e\u52a0, \u798f\u5c14\u6469\u65af, \u4e5f\u90fd\u7231. \u63d0\u5230\u798f\u5c14\u6469\u65af, \u4e0d\u5f97\u4e0d\u63a8\u4e00\u4e0bBBC\u7684\u8150\u5c14\u83ab\u65af(\u590f\u6d1b\u514b\u7cfb\u5217), \u8fd8\u6709\u7f8e\u5267\u7684\u5973\u7248\u798f\u5c14\u6469\u65af, \u6700\u540e\u9a6c\u4e0a\u5c31\u4e0a\u7684\u65e5\u5267\u7684\u5973\u7248\u798f\u5c14\u6469\u65af\u548c\u5973\u7248\u534e\u751f.", 
            "title": "\u6b22\u8fce"
        }, 
        {
            "location": "/#_3", 
            "text": "\u4e0a\u9762\u7684\u5927\u5bfc\u822a\u680f\u5206\u522b\u6307\u5411\u4e0d\u540c\u7684\u6587\u7ae0\u5206\u7c7b(\u7b14\u8bb0\u5206\u7c7b), \u5b58\u6863\u680f\u5219\u5305\u542b\u672c\u7ad9\u6240\u6709\u6587\u7ae0, \u4e14\u6587\u7ae0\u6309\u7167\u53d1\u8868\u65f6\u95f4\u5012\u53d9.\n\u6587\u7ae0\u9875\u9762\u7684\u5de6\u4fa7\u4e3a\u8be5\u5927\u680f\u76ee\u4e0b\u7684\u6587\u7ae0\u540d\u5b57\u5217\u8868, \u53f3\u4fa7\u4e3a\u8be5\u7bc7\u6587\u7ae0\u7684\u76ee\u5f55.", 
            "title": "\u7f51\u7ad9\u5bfc\u822a"
        }, 
        {
            "location": "/#_4", 
            "text": "\u672c\u7ad9\u662f\u5efa\u5728coding\u548cgithub\u4e0a, \u5185\u5bb9\u662f\u81ea\u5efa\u7684leanote\u7b14\u8bb0\u5bfc\u51fa(\u5176\u5b9e\u90fd\u662fmarkdown, \u590d\u5236\u9ecf\u8d34). \u5efa\u7ad9\u5de5\u5177\u662fmkdocs, \u7136\u540e\u7528\u4e86 squidfunk/mkdocs-material , \u611f\u5174\u8da3\u53ef\u4ee5\u5728dockerhub\u4e0a\u641c\u7d22\u4e0b.  \u5e0c\u671b\u8fd9\u4e2a\u7f51\u7ad9\u80fd\u4e00\u76f4\u5b58\u5728, \u4ee5\u540e\u8001\u4e86\u540e\u80fd\u4f5c\u4e3a\u56de\u5fc6\u5427. \u5728\u8fd9\u4e2a\u57fa\u7840\u4e0a, \u540c\u65f6\u5e0c\u671bcoding\u80fd\u4e00\u76f4\u5b58\u5728, github\u4e5f\u4e00\u76f4\u5728, \u6211\u7684vps\u80fd\u4e00\u76f4\u5728, leanote\u80fd\u4e00\u76f4\u5728, github\u80fd\u4e00\u76f4\u5728. \u6211\u662f\u4e00\u4e2a\u6000\u65e7\u7684\u4eba, \u5e0c\u671b\u8eab\u8fb9\u7684\u4e00\u5207\u90fd\u5728, \u5e0c\u671b\u8eab\u8fb9\u7684\u4e00\u5207\u90fd\u80fd\u8bb0\u5f55\u5728\u8fd9\u4e2a\u7ad9\u70b9\u4e0a.", 
            "title": "\u5173\u4e8e\u672c\u7ad9"
        }, 
        {
            "location": "/#_5", 
            "text": "\u6000\u7740\u4e00\u9897\u611f\u6069\u7684\u5fc3\u9605\u8bfb\u8fd9\u4e2a\u4e16\u754c\u5e76\u8bb0\u5f55, \u4e0d\u7ba1\u751f\u6d3b\u5982\u4f55, \u5e0c\u671b\u6211\u4eec\u80fd\u4e00\u76f4\u8d70\u4e0b\u53bb.", 
            "title": "\u611f\u6069"
        }, 
        {
            "location": "/#_6", 
            "text": "2018\u5e743\u6708: \u65b0\u5efa\u8be5\u7ad9. \u5f00\u59cb\u9010\u6e10\u5c06leanote\u4e0a\u7684\u7b14\u8bb0\u548c\u8d44\u6599\u8f6c\u79fb\u5230\u8be5\u7ad9\u70b9.", 
            "title": "\u5386\u53f2"
        }, 
        {
            "location": "/about/", 
            "text": "\u672c\u4eba\u7b80\u4ecb\n\n\n\u8003\u8651\u548c\u597d\u4e45, \u8fd8\u662f\u51b3\u5b9a\u4f7f\u7528\u82f1\u6587\u540d\u5b57\u5427. \u719f\u6089\u6211\u7684\u4eba, \u4e5f\u731c\u5f97\u51fa\u6765.\n\n\n\u82f1\u6587\u540d\u5b57: Werther Zhang\n\n\n\u672c\u4eba\u8f6f\u4ef6\u5de5\u7a0b\u5e08, \u6df7\u8ff9\u4e0a\u6d77, \u7b97\u4e0a\u6f02\u8fd8\u662f\u6d77\u6f02\u5462?(--.) \u53cd\u6b63\u5c31\u662f\u5404\u79cd\u52aa\u529b\u8ba9\u81ea\u5df1\u5728\u4e0a\u6d77\u6d3b\u4e0b\u6765.\n\n\n\u6309\u5bb6\u91cc\u653f\u59d4\u5bf9\u6211\u7684\u8bc4\u4ef7, 1s\u8bb0\u5fc6, \u50cf\u4e2a\u50bb\u5b50, \u53ef\u7231, \u8bdd\u5520.\n\n\n\u4f46\u662f\u561b, \u5982\u679c\u662f\u5468\u56f4\u4eba\u7684\u8bc4\u4ef7\u662f, \u6c89\u9ed8, \u5185\u5411.\n\n\n\u4e00\u76f4\u5411\u7740\u8d22\u52a1\u81ea\u7531\u800c\u594b\u6597, \u54c8\u54c8\u54c8.\n\n\n\u672c\u7ad9\u7b80\u4ecb\n\n\n\u5728\u8fd9\u4e2a\u7ad9\u4e4b\u524d, \u6797\u6797\u603b\u603b\u5df2\u7ecf\u5b58\u5728\u597d\u51e0\u4e2a\u4e86, \u8fd9\u662f\u7b2c\u4e00\u4e2a\u771f\u771f\u6b63\u6b63\u51b3\u5b9a\u6301\u7eed\u4e0d\u65ad\u5730\u505a\u4e0b\u53bb, \u505a\u4e00\u8f88\u5b50. \u53ef\u80fd\u57df\u540d\u4f1a\u6539\u53d8(\u5982\u679ccoding\u6216\u8005github\u5012\u4e86), \u4f46\u662f\u5185\u5bb9\u4f1a\u4e00\u76f4\u6301\u7eed. \u76ee\u524d\u7684\u5730\u5740\u4e3a \ngithub\n \u548c \ncoding\n, \u672a\u6765\u53ef\u80fd\u4f1a\u589e\u52a0.\u53ef\u80fd\u6709\u4eba\u4f1a\u95ee, \u4e3a\u4ec0\u4e48\u4e0d\u81ea\u5df1\u4e70\u4e00\u4e2a. \u4f1a\u4e70\u7684, \u4f46\u662f\u8fd9\u4e2a\u5c31\u4f53\u73b0\u4e2a\u4eba\u6027\u683c\u4e86, \u9e21\u86cb\u4e0d\u653e\u5728\u4e00\u4e2a\u7bee\u5b50\u91cc, \u4e0d\u7ba1\u662fvps\u8fd8\u662f\u4ec0\u4e48, \u90fd\u4e0d\u77e5\u9053\u662f\u5426\u80fd\u5b58\u5728\u4e00\u8f88\u5b50, \u65e2\u7136\u6211\u662f\u8ba4\u771f\u5728\u505a\u8fd9\u4ef6\u4e8b, \u90a3\u4e48\u5c31\u5f97\u8003\u8651\u672a\u6765\u5b83\u4eec\u5012\u95ed\u7684\u60c5\u51b5.\n\n\n\u54c8\u54c8, \u4efb\u6027\u5730\u968f\u610f\u8865\u5145, \u540c\u4e8b\u63a8\u8350\u4e86\nnetlify\n, \u7136\u540e\u8ddfgithub\u7ed1\u5b9a\u4e0b, \u610f\u5916\u5730\u597d\u7528, \u800c\u4e14\u8fd8\u6709cdn\u52a0\u901f, \u4e2a\u4eba\u63a8\u8350\u4e0b. \u83ab\u540d\u5176\u5999\u53c8\u591a\u4e2a\u4e00\u4e2a\u5907\u7528\u7ad9\u70b9.\n\n\n\u8865\u5145\u70b9: coding\u7531\u4e8e\u514d\u8d39\u53ea\u6709250M, \u6240\u4ee5, \u56fe\u7247\u8fd9\u4e9b\u4f1a\u5c3d\u53ef\u80fd\u653e\u5728github\u4e0a, \u4ececoding\u53bb\u5f15\u7528. \u5e0c\u671bgithub\u522b\u88ab\u5899\u4e86.", 
            "title": "\u5173\u4e8e"
        }, 
        {
            "location": "/about/#_1", 
            "text": "\u8003\u8651\u548c\u597d\u4e45, \u8fd8\u662f\u51b3\u5b9a\u4f7f\u7528\u82f1\u6587\u540d\u5b57\u5427. \u719f\u6089\u6211\u7684\u4eba, \u4e5f\u731c\u5f97\u51fa\u6765.  \u82f1\u6587\u540d\u5b57: Werther Zhang  \u672c\u4eba\u8f6f\u4ef6\u5de5\u7a0b\u5e08, \u6df7\u8ff9\u4e0a\u6d77, \u7b97\u4e0a\u6f02\u8fd8\u662f\u6d77\u6f02\u5462?(--.) \u53cd\u6b63\u5c31\u662f\u5404\u79cd\u52aa\u529b\u8ba9\u81ea\u5df1\u5728\u4e0a\u6d77\u6d3b\u4e0b\u6765.  \u6309\u5bb6\u91cc\u653f\u59d4\u5bf9\u6211\u7684\u8bc4\u4ef7, 1s\u8bb0\u5fc6, \u50cf\u4e2a\u50bb\u5b50, \u53ef\u7231, \u8bdd\u5520.  \u4f46\u662f\u561b, \u5982\u679c\u662f\u5468\u56f4\u4eba\u7684\u8bc4\u4ef7\u662f, \u6c89\u9ed8, \u5185\u5411.  \u4e00\u76f4\u5411\u7740\u8d22\u52a1\u81ea\u7531\u800c\u594b\u6597, \u54c8\u54c8\u54c8.", 
            "title": "\u672c\u4eba\u7b80\u4ecb"
        }, 
        {
            "location": "/about/#_2", 
            "text": "\u5728\u8fd9\u4e2a\u7ad9\u4e4b\u524d, \u6797\u6797\u603b\u603b\u5df2\u7ecf\u5b58\u5728\u597d\u51e0\u4e2a\u4e86, \u8fd9\u662f\u7b2c\u4e00\u4e2a\u771f\u771f\u6b63\u6b63\u51b3\u5b9a\u6301\u7eed\u4e0d\u65ad\u5730\u505a\u4e0b\u53bb, \u505a\u4e00\u8f88\u5b50. \u53ef\u80fd\u57df\u540d\u4f1a\u6539\u53d8(\u5982\u679ccoding\u6216\u8005github\u5012\u4e86), \u4f46\u662f\u5185\u5bb9\u4f1a\u4e00\u76f4\u6301\u7eed. \u76ee\u524d\u7684\u5730\u5740\u4e3a  github  \u548c  coding , \u672a\u6765\u53ef\u80fd\u4f1a\u589e\u52a0.\u53ef\u80fd\u6709\u4eba\u4f1a\u95ee, \u4e3a\u4ec0\u4e48\u4e0d\u81ea\u5df1\u4e70\u4e00\u4e2a. \u4f1a\u4e70\u7684, \u4f46\u662f\u8fd9\u4e2a\u5c31\u4f53\u73b0\u4e2a\u4eba\u6027\u683c\u4e86, \u9e21\u86cb\u4e0d\u653e\u5728\u4e00\u4e2a\u7bee\u5b50\u91cc, \u4e0d\u7ba1\u662fvps\u8fd8\u662f\u4ec0\u4e48, \u90fd\u4e0d\u77e5\u9053\u662f\u5426\u80fd\u5b58\u5728\u4e00\u8f88\u5b50, \u65e2\u7136\u6211\u662f\u8ba4\u771f\u5728\u505a\u8fd9\u4ef6\u4e8b, \u90a3\u4e48\u5c31\u5f97\u8003\u8651\u672a\u6765\u5b83\u4eec\u5012\u95ed\u7684\u60c5\u51b5.  \u54c8\u54c8, \u4efb\u6027\u5730\u968f\u610f\u8865\u5145, \u540c\u4e8b\u63a8\u8350\u4e86 netlify , \u7136\u540e\u8ddfgithub\u7ed1\u5b9a\u4e0b, \u610f\u5916\u5730\u597d\u7528, \u800c\u4e14\u8fd8\u6709cdn\u52a0\u901f, \u4e2a\u4eba\u63a8\u8350\u4e0b. \u83ab\u540d\u5176\u5999\u53c8\u591a\u4e2a\u4e00\u4e2a\u5907\u7528\u7ad9\u70b9.  \u8865\u5145\u70b9: coding\u7531\u4e8e\u514d\u8d39\u53ea\u6709250M, \u6240\u4ee5, \u56fe\u7247\u8fd9\u4e9b\u4f1a\u5c3d\u53ef\u80fd\u653e\u5728github\u4e0a, \u4ececoding\u53bb\u5f15\u7528. \u5e0c\u671bgithub\u522b\u88ab\u5899\u4e86.", 
            "title": "\u672c\u7ad9\u7b80\u4ecb"
        }, 
        {
            "location": "/zram/", 
            "text": "\u6765\u6e90: https://pengzhangdev.github.io/zram/\n\n\n\u7b80\u4ecb\n\n\n\u5728linux\u5185\u6838\u7684mm\u5b50\u7cfb\u7edf\u4e2d, \u5305\u542b\u4e09\u4e2a\u652f\u6301\u5185\u5b58\u538b\u7f29\u7684\u7ec4\u4ef6, \u5206\u522b\u662fzram, zcache \u548c zswap.\n\n\n\nzswap\n: \u524d\u63d0\u6761\u4ef6\u662f, \u7cfb\u7edf\u4e2d\u5b58\u5728swap\u8bbe\u5907, \u5185\u6838\u7248\u672c\n3.5, \u56e0\u4e3a\u4f9d\u8d56\u4e86frontswap\u7684\u63a5\u53e3, \u7528\u4e8e\u7ba1\u7406swap page.\nzswap\u662f\u4e00\u4e2a\u8f7b\u91cf\u5316\u7684\u540e\u7aef\u67b6\u6784, \u5c06\u8fdb\u7a0b\u5404\u79cd\u4ea4\u6362\u51fa\u7684\u9875\u9762\u8fdb\u884c\u538b\u7f29, \u5e76\u5b58\u50a8\u5728\u4e00\u4e2a\u57fa\u4e8eRAM\u7684\u5185\u7f13\u51b2\u6c60\u4e2d. \u7f13\u51b2\u6c60\u4e0d\u9884\u5206\u914d, \u6709\u6700\u5927\u503c, \u4e14\u5f53\u7f13\u51b2\u6c60\u6ee1\u4e86, LRU\u7684\u5185\u5b58\u9875\u4f1a\u88ab\u5199\u5165swap\u8bbe\u5907. \u4f9d\u8d56swap\u5206\u533a, \u4e0d\u9002\u7528hdtv.\n\n\n\nzcache\n: \u4e0ezswap\u7c7b\u4f3c, \u4f9d\u8d56frontswap\u63a5\u53e3\u548ccleacache\u63a5\u53e3, \u5185\u6838\u7248\u672c\n3.5. \u4e0ezswap\u4e00\u6837, \u5c06\u8fdb\u7a0b\u4ea4\u6362\u51fa\u7684\u9875\u9762\u548c\u6587\u4ef6\u7cfb\u7edf\u7684\u7f13\u51b2\u8fdb\u884c\u538b\u7f29\u5e76\u5b58\u50a8\u5728RAM\u7684\u5185\u5b58\u7f13\u51b2\u6c60\u4e2d, \u5728\u7f13\u51b2\u6c60\u6ee1\u540e, \u5c06\u9875\u9762\u5b58\u5165swap\u5206\u533a\u6216\u8005 RAMster (\u4e00\u79cd\u57fa\u4e8e\u7f51\u7edc\u7684\u5185\u5b58\u6c60\u5171\u4eab\u6280\u672f, \u53ef\u4ee5\u5171\u4eab\u7f51\u7edc\u4e2d\u5176\u4f59\u786c\u4ef6\u7684\u5185\u5b58). zswap\u53ef\u4ee5\u7406\u89e3\u4e3a\u662fzcache\u7684\u5b50\u96c6. \u4e0d\u9002\u7528hdtv.\n\n\n\nzram\n: \u5185\u5b58\u4e2d\u7684swap\u8bbe\u5907, \u5185\u6838\n3.14, \u53ef\u4ee5\u7406\u89e3\u4e3azcache\u7684RAM\u7f13\u51b2\u6c60. \u4f18\u5148\u7ea7\u6700\u9ad8, \u4e0d\u5efa\u8bae\u4e0e\u5176\u4ed6swap\u4e00\u8d77\u4f7f\u7528.\u4e0d\u4f9d\u8d56\u771f\u5b9e\u7684swap\u8bbe\u5907(Nand\u6216\u8005\u7f51\u7edc), \u503e\u5411\u4e8e\u5728\u4f4e\u5185\u5b58\u7684\u5d4c\u5165\u5f0f\u8bbe\u5907\u4e2d\u4f7f\u7528.\n\n\n\n\u7efc\u4e0a, zram\u66f4\u9002\u5408hdtv\u8fd9\u4e2a\u9879\u76ee\n\n\n zram \n\n\nzram\u662f\u5c06\u7cfb\u7edf\u4e2d\u7684\u5185\u5b58\u7684\u4e00\u90e8\u5206\u5185\u5b58\u9694\u79bb\u6210zram\u8bbe\u5907(swap\u8bbe\u5907),\u5bf9\u4e8e\u5c0f\u5185\u5b58\u7684\u8bbe\u5907, \u5728\u4f7f\u7528\u4e0a\u4f1a\u611f\u5185\u5b58\u88ab\u6269\u5927\u4e86.\n\n\nlinux\u5185\u6838\u4e2d\u4e3azram\u63d0\u4f9b\u4e86\u5404\u79cd\u538b\u7f29\u7b97\u6cd5, \u9ed8\u8ba4\u7684\u662fLZO, \u8be5\u7b97\u6cd5\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u90fd\u80fd\u5f88\u597d\u5730\u5e73\u8861\u538b\u7f29\u7387\u548c\u901f\u5ea6. LZO\u4e3b\u8981\u662f\u5728\u901f\u5ea6\u4e0a\u4f18\u5316.\u5728\u4e00\u4e9b\u6bd4\u8f83\u6b63\u5f0f\u7684\u6587\u6863\u4e0a, LZO\u7684\u538b\u7f29\u7387\u5e73\u5747\u4e3a50%. \u4e0b\u9762\u662f\u9488\u5bf9\u5185\u6838\u6e90\u7801(50.6M)\u538b\u7f29\u7684\u4e00\u4e2a\u56fe\u8868, \u7f51\u4e0a\u63d0\u4f9b\u7684.\n\n\nlzop\n:\n \n1.62\n \nseconds\n \nto\n \ncompress\n,\n \n18.0\n \nMB\n,\n \nratio\n=.\n355\n\n\ngzip\n:\n \n19.13\n \nseconds\n,\n \n10.8\n \nMB\n,\n \nratio\n=.\n213\n\n\nbzip2\n:\n \n60.81\n \nseconds\n,\n \n8.46\n \nMB\n,\n \nratio\n=.\n176\n\n\nxz\n:\n \n311.65\n \nseconds\n,\n \n7.33\n \nMB\n,\n \nratio\n=.\n145\n\n\n\n\n\n\n\n\n\u538b\u7f29\u7387\u8ba1\u7b97:\n\u76f8\u5173\u6570\u636e/sys/block/zram0/{\nmem_used_total\n,\norig_data_size\n,\ncompr_data_size\n}\n\n\ncompression radio = orig_data_size / compr_data_size\nreal compr. ratio  = orig_data_size / mem_used_total\n\n\n\n\n\n\n\n\u4f18\u70b9\n\n\n\n\n\u5185\u5b58\u6269\u5927, \u5e73\u5747\u538b\u7f29\u6bd4\u4e3a2.0\n\n\n\u7531\u4e8e\u5728\u5b9e\u73b0\u4e0a, \u5982\u679c\u67d0\u4e2aPAGE\u7684\u538b\u7f29\u7387\u5927\u4e8ePAGE_SIZE * 4 / 3 (kernel 3.10), \u5219\u4e0d\u8fdb\u884c\u538b\u7f29, \u5728\u8bfb\u53d6\u65f6, \u4e5f\u5c31\u7701\u4e0b\u89e3\u538b\u7684\u6d88\u8017. \u4ece\u800c\u63d0\u9ad8\u901f\u5ea6,\u964d\u4f4eCPU\u5360\u7528,\u4f46\u662f\u4f1a\u964d\u4f4e\u538b\u7f29\u7387.\n\n\n\n\n\u7f3a\u70b9\n\n\n\n\nCPU\u5360\u7528\n\n\n\u529f\u8017\u589e\u52a0\n\n\n\u7531\u4e8e\u5360\u7528\u4e00\u90e8\u5206\u5185\u5b58\u4f5c\u4e3azram\u8bbe\u5907, \u5219\u5982\u679czram\u538b\u7f29\u901f\u5ea6\u4e0d\u591f\u5feb, \u53cd\u800c\u66f4\u5bb9\u6613\u5f15\u53d1OOM.(github\u4e0a\u7684\u4e00\u4e2a\u60c5\u51b5, \u65e0\u6570\u636e\u4fe1\u606f, \u5728ZX2000\u4e0a\u672a\u51fa\u73b0\u8be5\u60c5\u51b5)\n\n\n\n\n\u8c03\u6574\u65b9\u6cd5\n\n\nCPU\u5360\u7528\u67e5\u770bkswapd(kswap)\n\n\nCPU\u5360\u7528\u8c03\u6574:\n\n\n\n\n/sys/block/zram0/max_comp_streams \u8bbe\u7f6e\u538b\u7f29\u6d41\u4e2a\u6570. \u9ed8\u8ba4\u4e3a\u6bcf\u4e2aCPU\u5206\u914d1\u4e2a.\n\n\n/sys/block/zram0/comp_algorithm  \u5207\u6362\u538b\u7f29\u7b97\u6cd5, \u5efa\u8bae\u4f7f\u7528\u9ed8\u8ba4\u7684LZO, \u901f\u5ea6\u5feb\n\n\n\n\n\n\n\u6d4b\u8bd5\n\n\n\n\n\u4ee5\u4e0b\u6570\u636e\u662f\u3000\u5728\nZX2000\n\u4e0a, UI\u5207\u6362\u548c\u542f\u52a8\u65b0\u5e94\u7528\u6362, \u6293\u53d6\u7684\u6570\u636e\uff0e\n\n\n\u538b\u7f29\u7387\u76f8\u5173\u7684\u4e09\u4e2a\u503c\u5206\u522b\u4e3a\n\n\n# busybox free                               \n             total       used       free     shared    buffers     cached\nMem:        427400     365136      62264        408        348      72148\n-/+ buffers/cache:     292640     134760\nSwap:       204796     103784     101012\n\n\norig_data_size:\u300090275840\nmem_used_total:  25862144\ncompr_data_size: 21846958\nzero_pages:      1903\n\n\n\n\n\n\n\u538b\u7f29\u7387\u4e3a\uff1a\n\n\ncompression radio(orig_data_size / compr_data_size) = 90275840 / 21846958 = 4.13\nreal compr. ratio (orig_data_size / mem_used_total) = 90275840 / 25862144 = 3.49\n\n\n\n\n\ncpu \u5360\u7528\u6570\u636e\uff1a\n\n\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  3   2% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  0   5% S     1      0K      0K  fg root     kswapd0\n   44  3   1% S     1      0K      0K  fg root     kswapd0\n\n\n\n\n\n5%\u662f\u5728\u542f\u52a8\u65b0Activity\u7684\u65f6\u5019, \u521d\u6b65\u7ed3\u8bba\u662f, CPU\u5360\u7528\u4e0d\u9ad8.\n\n\n\n\u4ee5\u4e0b\u6570\u636e\u662f\u3000\u5728\nZX1800\n\u4e0a, UI\u5207\u6362\u548c\u542f\u52a8\u65b0\u5e94\u7528\u6362, \u6293\u53d6\u7684\u6570\u636e\uff0e\n\n\n\n# ./busybox free                                  \n             total       used       free     shared    buffers     cached\nMem:        427396     422720       4676       1688          0      42412\n-/+ buffers/cache:     380308      47088\nSwap:       204796     112748      92048\n\norig_data_size:  106278912\nmem_used_total:  25624576\ncompr_data_size: 23845230\nzero_pages:      3273\n\n\n\n\n\n\n\u538b\u7f29\u7387\u4e3a\uff1a\n\n\ncompression radio(orig_data_size / compr_data_size) = 106278912 / 23845230 = 4.45\nreal compr. ratio (orig_data_size / mem_used_total) = 106278912 / 25624576 = 4.14\n\n\n\n\n\ncpu \u5360\u7528\u6570\u636e\uff1a\n\n\n   44  3   1% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  0   4% S     1      0K      0K  fg root     kswapd0\n   44  3   1% S     1      0K      0K  fg root     kswapd0\n   44  0   0% S     1      0K      0K  fg root     kswapd0\n   44  1   2% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   1% S     1      0K      0K  fg root     kswapd0\n\n\n\n\n\n\n\n\u5185\u5b58\u7533\u8bf7\u6d4b\u8bd5\n\n\n\u4ee5\u4e0b\u662f\u5728\nzx2000\n\u8bbe\u5907\u4e0a, \u901a\u8fc7\u6bcf\u79d2\u5206\u914d1M\u5185\u5b58\u7684\u65b9\u5f0f, \u5185\u5b58\u4e2d\u6570\u636e\u4e3aurandom\u8bbe\u5907\u6570\u636e, \u6d4b\u8bd5\u5b9e\u9645\u7533\u8bf7\u5185\u5b58\u589e\u52a0\u7684\u503c. \u7edf\u8ba1\u7684\u6570\u636e\u5982\u4e0b.\n\n\n\n\u5728\u7cfb\u7edf\u505c\u7559\u5728\u4e3b\u754c\u9762\u540e, \u5c0f\u7a97\u53e3\u64ad\u53f0, \u5728\u5185\u5b58\u7533\u8bf7\u4f7f\u7528\u4e86167M\u540e, \u89e6\u53d1OOM.\nCPU\u5360\u7528\u5982\u4e0b, \u89e6\u53d1OOM\u65f6, CPU\u5360\u7528\u8fbe\u52308%\n\n\n   44  0   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  3   8% S     1      0K      0K  fg root     kswapd0\n   44  1   8% S     1      0K      0K  fg root     kswapd0\n   44  1   8% S     1      0K      0K  fg root     kswapd0\n\n\n\n\n\n\u5185\u5b58\u5360\u7528\u5982\u4e0b:\n\n\n# busybox free     #\u5f00\u59cb\u65f6\u5185\u5b58                                             \n             total       used       free     shared    buffers     cached\nMem:        427400     423752       3648       2224       2540     105892\n-/+ buffers/cache:     315320     112080\nSwap:       204796          0     204796\n\n# busybox free     # OOM \u65f6\u5185\u5b58                              \n             total       used       free     shared    buffers     cached\nMem:        427400     422908       4492        292        200      11464\n-/+ buffers/cache:     411244      16156\nSwap:       204796     204796          0\n\n\n\n\n\nzram\u4fe1\u606f\u5982\u4e0b:\n\n\n# \u5f00\u59cb\u4f7f\u7528zram\u4e0d\u4e45\n==============================================\nstatus: enabled\ncompression: 1\ndisksize: 200M\ncompr_data_size: 1175K\norig_data_size: 2232K\nmem_used_total: 2232K\nmax_comp_streams: 1\ncomp_algorithm: [lzo]\n\n# \u4e00\u6bb5\u65f6\u95f4\u540e\n==============================================\nstatus: enabled\ncompression: 2\ndisksize: 200M\ncompr_data_size: 3675K\norig_data_size: 11800K\nmem_used_total: 4648K\nmax_comp_streams: 1\ncomp_algorithm: [lzo]\n\n==============================================\nstatus: enabled\ncompression: 3\ndisksize: 200M\ncompr_data_size: 15230K\norig_data_size: 55040K\nmem_used_total: 16624K\nmax_comp_streams: 1\ncomp_algorithm: [lzo] \n\n==============================================\nstatus: enabled\ncompression: 2\ndisksize: 200M\ncompr_data_size: 44355K\norig_data_size: 120788K\nmem_used_total: 46196K\nmax_comp_streams: 1\ncomp_algorithm: [lzo] \n\n==============================================\nstatus: enabled\ncompression: 1\ndisksize: 200M\ncompr_data_size: 137773K\norig_data_size: 200280K\nmem_used_total: 144096K\nmax_comp_streams: 1\ncomp_algorithm: [lzo]\n\n\n\n\n\n\u53ef\u4ee5\u770b\u5230, \u538b\u7f29\u6bd4, \u4ece1 -\n 3 -\n\uff11, \u4e5f\u5c31\u662f\u8bf4\u5728swap\u7a7a\u6216\u8005\u5feb\u6ee1\u662f, \u538b\u7f29\u6bd4\u662f\u6700\u4f4e\u7684, \u4ece\u6700\u540e\u89e6\u53d1OOM\u770b, \u901a\u8fc7\u538b\u7f29\u8282\u7701\u7684\u5185\u5b58\u670960M\u5de6\u53f3. \u5e76\u4e14\u7531\u4e8e1M\u586b\u5145\u7684\u90fd\u662furandom\u8bbe\u5907\u7684\u5185\u5bb9, \u672c\u8eab\u5bfc\u81f4\u538b\u7f29\u6bd4\u6bd4\u6b63\u5e38\u4f7f\u7528\u65f6\u504f\u4f4e(\u51e0\u4e4e\u65e00\u9875, \u6570\u636e\u968f\u673a).\n\n\n\n\u5728\u4e0d\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b\uff0c\u3000\u5185\u5b58\u7533\u8bf7\u572895 M\u7684\u65f6\u5019\uff0c\u3000\u89e6\u53d1\u4e86OOM.\n\n\n # busybox free       # \u5f00\u59cb\u5185\u5b58\u7533\u8bf7\u65f6\u7684\u5185\u5b58                                             \n             total       used       free     shared    buffers     cached\nMem:        427400     422932       4468       2224       2524     103748\n-/+ buffers/cache:     316660     110740\nSwap:            0          0          0\n\n\n# busybox free       # OOM \u65f6\u7684\u5185\u5b58                                            \n             total       used       free     shared    buffers     cached\nMem:        427400     424052       3348       2224         36      16608\n-/+ buffers/cache:     407408      19992\nSwap:            0          0          0\n\n\n\n\n\n\n\n\n\n\u4ee5\u4e0b\u662f\u5728\nzx1800\n\u8bbe\u5907\u4e0a, \u901a\u8fc7\u6bcf\u79d2\u5206\u914d1M\u5185\u5b58\u7684\u65b9\u5f0f, \u5185\u5b58\u4e2d\u6570\u636e\u4e3aurandom\u8bbe\u5907\u6570\u636e, \u6d4b\u8bd5\u5b9e\u9645\u7533\u8bf7\u5185\u5b58\u589e\u52a0\u7684\u503c. \u7edf\u8ba1\u7684\u6570\u636e\u5982\u4e0b.\n\n\n\u5728\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u7533\u8bf7\u5185\u5b58\u8fbe\u5230166M\u65f6, \u89e6\u53d1OOM.\nCPU \u5360\u7528\n\n\n   44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  2   1% S     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% R     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  0   0% S     1      0K      0K  fg root     kswapd0\n   44  1   2% R     1      0K      0K  fg root     kswapd0\n\n\n\n\n\n\u538b\u7f29\u6bd4\u7684\u6570\u636e\u4e0ezx2000 emmc\u76f8\u540c, \u7279\u522b\u662f\u5728zram\u5269\u4f59\u5927\u5c0f\u4e0d\u591a\u65f6, \u538b\u7f29\u6bd4\u5feb\u901f\u7f29\u5c0f\u52301.4(\u4ece3\u964d\u52301)\u5de6\u53f3.\n\u4ee5\u4e0b\u662ffree\u7684\u8f93\u51fa.\n\n\n# ./busybox free           #\u7cfb\u7edf\u542f\u52a8\u5b8c\u6210\u65f6                 \n             total       used       free     shared    buffers     cached\nMem:        427396     422192       5204       2224          4     109536\n-/+ buffers/cache:     312652     114744\nSwap:       204796          0     204796\n\n\n# ./busybox free        # OOM \u65f6\n             total       used       free     shared    buffers     cached\nMem:        427396     423280       4116        264          0      13268\n-/+ buffers/cache:     410012      17384\nSwap:       204796     204796          0\n\n\n\n\n\n\u5728\u4e0d\u5f00\u542fzram\u7684\u60c5\u51b5\u4e0b, \u7533\u8bf7\u7684\u5185\u5b58\u8fbe\u523096M\u65f6\u89e6\u53d1OOM, \u4ee5\u4e0b\u662ffree\u7684\u8f93\u51fa.\n\n\n# ./busybox free         # \u7cfb\u7edf\u542f\u52a8\u5b8c\u6210                      \n             total       used       free     shared    buffers     cached\nMem:        427396     411928      15468       2224          0     107552\n-/+ buffers/cache:     304376     123020\nSwap:            0          0          0\n\n\n# ./busybox free         # \u89e6\u53d1OOM                         \n             total       used       free     shared    buffers     cached\nMem:        427396     419892       7504       2224          0      15372\n-/+ buffers/cache:     404520      22876\nSwap:            0          0          0\n\n\n\n\n\n\u7efc\u4e0a, \u4e0ezx2000\u76f8\u540c, \u53ef\u7528\u5185\u5b58\u589e\u52a070M\u5de6\u53f3.\n\n\nOOM\u6d4b\u8bd5\n\n\n\u57fa\u4e8e\nzx2000\n 8\u670818\u65e5\u7684autobuild\u7cfb\u7edf, \u5728\u5206\u522b\u4e0d\u542f\u7528\u548c\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6d4b\u8bd5\u5bf9OOM\u7684\u5f71\u54cd.\n\n\n\u6267\u884c\u64cd\u4f5c\u5982\u4e0b:\n\n\n\n\n\u91cd\u542f\u7cfb\u7edf.\n\n\n\u901a\u8fc7UI\u754c\u9762\u5206\u522b\u542f\u52a8\u672c\u5730\u89c6\u9891, \u672c\u5730\u97f3\u4e50 \u548c\u672c\u5730\u56fe\u7247\u4e09\u4e2a\u5e94\u7528.\n\n\n\u6309\u9065\u63a7\u5668\u9000\u51fa\u952e, \u56de\u5230\u7535\u89c6\u76f4\u64ad\u754c\u9762.\n\n\n\n\n\u5728\u672a\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6267\u884c\u4ee5\u4e0a\u64cd\u4f5c, \u5fc5\u5b9a\u89e6\u53d1OOM. \u5728\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6267\u884c\u4ee5\u4e0a\u64cd\u4f5c, \u672a\u89e6\u53d1OOM.\n\n\n\n\n\n\u57fa\u4e8e\nzx1800\n 8\u670818\u65e5\u7684autobuild\u7cfb\u7edf, \u5728\u5206\u522b\u4e0d\u542f\u7528\u548c\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6d4b\u8bd5\u5bf9OOM\u7684\u5f71\u54cd.\n\n\n\u6267\u884c\u64cd\u4f5c\u5982\u4e0b:\n\n\n\n\n\u91cd\u542f\u7cfb\u7edf.\n\n\n\u901a\u8fc7UI\u754c\u9762\u5206\u522b\u542f\u52a8\u672c\u5730\u89c6\u9891, \u672c\u5730\u97f3\u4e50 \u548c\u672c\u5730\u56fe\u7247\u4e09\u4e2a\u5e94\u7528.\n\n\n\u6309\u9065\u63a7\u5668\u9000\u51fa\u952e, \u56de\u5230\u7535\u89c6\u76f4\u64ad\u754c\u9762.\n\n\n\n\n\u5728\u672a\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6267\u884c\u4ee5\u4e0a\u64cd\u4f5c, \u5fc5\u5b9a\u89e6\u53d1OOM. \u5e76\u4e14\u5728\u4ee5\u4e0a\u6b65\u9aa4\u4e4b\u540e, \u91cd\u590d\u6309\u5bfc\u89c6\u952e\u548c\u9000\u51fa\u952e, \u975e\u5e38\u5361, \u751a\u81f3\u9ed1\u5c4f\u51e0\u79d2\u949f.\n\u5728\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6267\u884c\u4ee5\u4e0a\u64cd\u4f5c, \u4e0d\u4f1a\u89e6\u53d1OOM. \u5e76\u4e14\u5728\u4ee5\u4e0a\u6b65\u9aa4\u4e4b\u540e, \u91cd\u590d\u6309\u5bfc\u89c6\u952e\u548c\u9000\u51fa\u952e, \u53ea\u6709\u7b2c\u4e00\u6b21\u5bfc\u89c6\u952e\u5361\u987f, \u4e4b\u540e\u90fd\u4e0d\u5361.\n\n\n \u5728Android\u542f\u7528\u65b9\u6cd5 \n\n\nhttps://source.android.com/devices/tech/perf/low-ram\n\n\n\u4e0a\u9762\u8fd9\u4e2a\u94fe\u63a5\u662fAndroid\u5b98\u7f51\u7ed9\u51fa\u6765\u7684\u5bf9\u4e8e\u4f4e\u5185\u5b58\u8bbe\u5907(512M)\u7684\u5185\u5b58\u4f18\u5316\u5efa\u8bae(\u5185\u6838/\u7cfb\u7edf/\u5e94\u7528\u7b49), \u5176\u4e2d\u6709\u5728Android\u4e0a\u542f\u7528zram\u7684\u6574\u4e2a\u914d\u7f6e\u6d41\u7a0b.\n\n\n\u5728hisi\u63d0\u4f9b\u7684TVOS2.0\u4ee3\u7801\u4e2d, \u5df2\u7ecf\u5b9e\u73b0Android\u5b98\u65b9\u63d0\u4f9b\u7684\u5185\u5b58\u4f18\u5316\u5efa\u8bae, \u8fdb\u884c\u4e86\u4f18\u5316, \u5176\u4e2d\u5305\u62eczram\u7684\u914d\u7f6e, \u53ef\u4ee5\u76f4\u63a5\u53c2\u8003\u4e5f\u4f7f\u7528.\n\n\n\u5b98\u65b9\u5efa\u8bae, \u4f7f\u7528\u603b\u5185\u5b58\u7684 30%-50% \u4f5c\u4e3azram, \u6309\u7167\u538b\u7f29\u7387\u4e3a50%\u8ba1\u7b97, \u5219\u5185\u5b58\u589e\u52a030%-50%\u5de6\u53f3.\n\n\nSwap to zRAM\n\n\nzRAM swap can increase the amount of memory available in the system by compressing memory pages and putting them in a dynamically allocated swap area of memory.\n\n\nAgain, since this is trading off CPU time for a small increase in memory, you should be careful about measuring the performance impact zRAM swap has on your system.\n\n\nAndroid handles swap to zRAM at several levels:\n\n\nFirst, the following kernel options must be enabled to use zRAM swap effectively:\n    CONFIG_SWAP\n    CONFIG_CGROUP_MEM_RES_CTLR\n    CONFIG_CGROUP_MEM_RES_CTLR_SWAP\n    CONFIG_ZRAM\nThen, you should add a line that looks like this to your fstab:\n\n/dev/block/zram0 none swap defaults zramsize=\nsize in bytes\n,swapprio=\nswap partition priority\n\n\n    zramsize is mandatory and indicates how much uncompressed memory you want the zram area to hold. Compression ratios in the 30-50% range are usually observed.\n    swapprio is optional and not needed if you don\nt have more than one swap area.\n\nYou should also be sure to label the associated block device as a swap_block_device in the device-specific sepolicy/file_contexts so that it is treated properly by SELinux.\n\n/dev/block/zram0 u:object_r:swap_block_device:s0\n\nBy default, the Linux kernel swaps in 8 pages of memory at a time. When using ZRAM, the incremental cost of reading 1 page at a time is negligible and may help in case the device is under extreme memory pressure. To read only 1 page at a time, add the following to your init.rc:\n\nwrite /proc/sys/vm/page-cluster 0\n\nIn your init.rc after the mount_all /fstab.X line, add:\n\nswapon_all /fstab.X\n\nThe memory cgroups are automatically configured at boot time if the feature is enabled in kernel.\nIf memory cgroups are available, the ActivityManager will mark lower priority threads as being more swappable than other threads. If memory is needed, the Android kernel will start migrating memory pages to zRAM swap, giving a higher priority to those memory pages that have been marked by ActivityManager.\n\n\n\n\n\n\n\n\n\n\n \u6210\u529f\u4f8b\u5b50 \n\n\n\n\nchrome os\n\n\ndebian/ubuntu\n\n\n\u7b2c\u4e09\u65b9Android ROM \u548c TV", 
            "title": "zram"
        }, 
        {
            "location": "/zram/#_1", 
            "text": "\u5728linux\u5185\u6838\u7684mm\u5b50\u7cfb\u7edf\u4e2d, \u5305\u542b\u4e09\u4e2a\u652f\u6301\u5185\u5b58\u538b\u7f29\u7684\u7ec4\u4ef6, \u5206\u522b\u662fzram, zcache \u548c zswap.  zswap : \u524d\u63d0\u6761\u4ef6\u662f, \u7cfb\u7edf\u4e2d\u5b58\u5728swap\u8bbe\u5907, \u5185\u6838\u7248\u672c 3.5, \u56e0\u4e3a\u4f9d\u8d56\u4e86frontswap\u7684\u63a5\u53e3, \u7528\u4e8e\u7ba1\u7406swap page.\nzswap\u662f\u4e00\u4e2a\u8f7b\u91cf\u5316\u7684\u540e\u7aef\u67b6\u6784, \u5c06\u8fdb\u7a0b\u5404\u79cd\u4ea4\u6362\u51fa\u7684\u9875\u9762\u8fdb\u884c\u538b\u7f29, \u5e76\u5b58\u50a8\u5728\u4e00\u4e2a\u57fa\u4e8eRAM\u7684\u5185\u7f13\u51b2\u6c60\u4e2d. \u7f13\u51b2\u6c60\u4e0d\u9884\u5206\u914d, \u6709\u6700\u5927\u503c, \u4e14\u5f53\u7f13\u51b2\u6c60\u6ee1\u4e86, LRU\u7684\u5185\u5b58\u9875\u4f1a\u88ab\u5199\u5165swap\u8bbe\u5907. \u4f9d\u8d56swap\u5206\u533a, \u4e0d\u9002\u7528hdtv.  zcache : \u4e0ezswap\u7c7b\u4f3c, \u4f9d\u8d56frontswap\u63a5\u53e3\u548ccleacache\u63a5\u53e3, \u5185\u6838\u7248\u672c 3.5. \u4e0ezswap\u4e00\u6837, \u5c06\u8fdb\u7a0b\u4ea4\u6362\u51fa\u7684\u9875\u9762\u548c\u6587\u4ef6\u7cfb\u7edf\u7684\u7f13\u51b2\u8fdb\u884c\u538b\u7f29\u5e76\u5b58\u50a8\u5728RAM\u7684\u5185\u5b58\u7f13\u51b2\u6c60\u4e2d, \u5728\u7f13\u51b2\u6c60\u6ee1\u540e, \u5c06\u9875\u9762\u5b58\u5165swap\u5206\u533a\u6216\u8005 RAMster (\u4e00\u79cd\u57fa\u4e8e\u7f51\u7edc\u7684\u5185\u5b58\u6c60\u5171\u4eab\u6280\u672f, \u53ef\u4ee5\u5171\u4eab\u7f51\u7edc\u4e2d\u5176\u4f59\u786c\u4ef6\u7684\u5185\u5b58). zswap\u53ef\u4ee5\u7406\u89e3\u4e3a\u662fzcache\u7684\u5b50\u96c6. \u4e0d\u9002\u7528hdtv.  zram : \u5185\u5b58\u4e2d\u7684swap\u8bbe\u5907, \u5185\u6838 3.14, \u53ef\u4ee5\u7406\u89e3\u4e3azcache\u7684RAM\u7f13\u51b2\u6c60. \u4f18\u5148\u7ea7\u6700\u9ad8, \u4e0d\u5efa\u8bae\u4e0e\u5176\u4ed6swap\u4e00\u8d77\u4f7f\u7528.\u4e0d\u4f9d\u8d56\u771f\u5b9e\u7684swap\u8bbe\u5907(Nand\u6216\u8005\u7f51\u7edc), \u503e\u5411\u4e8e\u5728\u4f4e\u5185\u5b58\u7684\u5d4c\u5165\u5f0f\u8bbe\u5907\u4e2d\u4f7f\u7528.  \u7efc\u4e0a, zram\u66f4\u9002\u5408hdtv\u8fd9\u4e2a\u9879\u76ee", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/zram/#zram", 
            "text": "zram\u662f\u5c06\u7cfb\u7edf\u4e2d\u7684\u5185\u5b58\u7684\u4e00\u90e8\u5206\u5185\u5b58\u9694\u79bb\u6210zram\u8bbe\u5907(swap\u8bbe\u5907),\u5bf9\u4e8e\u5c0f\u5185\u5b58\u7684\u8bbe\u5907, \u5728\u4f7f\u7528\u4e0a\u4f1a\u611f\u5185\u5b58\u88ab\u6269\u5927\u4e86.  linux\u5185\u6838\u4e2d\u4e3azram\u63d0\u4f9b\u4e86\u5404\u79cd\u538b\u7f29\u7b97\u6cd5, \u9ed8\u8ba4\u7684\u662fLZO, \u8be5\u7b97\u6cd5\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u90fd\u80fd\u5f88\u597d\u5730\u5e73\u8861\u538b\u7f29\u7387\u548c\u901f\u5ea6. LZO\u4e3b\u8981\u662f\u5728\u901f\u5ea6\u4e0a\u4f18\u5316.\u5728\u4e00\u4e9b\u6bd4\u8f83\u6b63\u5f0f\u7684\u6587\u6863\u4e0a, LZO\u7684\u538b\u7f29\u7387\u5e73\u5747\u4e3a50%. \u4e0b\u9762\u662f\u9488\u5bf9\u5185\u6838\u6e90\u7801(50.6M)\u538b\u7f29\u7684\u4e00\u4e2a\u56fe\u8868, \u7f51\u4e0a\u63d0\u4f9b\u7684.  lzop :   1.62   seconds   to   compress ,   18.0   MB ,   ratio =. 355  gzip :   19.13   seconds ,   10.8   MB ,   ratio =. 213  bzip2 :   60.81   seconds ,   8.46   MB ,   ratio =. 176  xz :   311.65   seconds ,   7.33   MB ,   ratio =. 145    \u538b\u7f29\u7387\u8ba1\u7b97:\n\u76f8\u5173\u6570\u636e/sys/block/zram0/{ mem_used_total , orig_data_size , compr_data_size }  compression radio = orig_data_size / compr_data_size\nreal compr. ratio  = orig_data_size / mem_used_total", 
            "title": " zram "
        }, 
        {
            "location": "/zram/#_2", 
            "text": "\u5185\u5b58\u6269\u5927, \u5e73\u5747\u538b\u7f29\u6bd4\u4e3a2.0  \u7531\u4e8e\u5728\u5b9e\u73b0\u4e0a, \u5982\u679c\u67d0\u4e2aPAGE\u7684\u538b\u7f29\u7387\u5927\u4e8ePAGE_SIZE * 4 / 3 (kernel 3.10), \u5219\u4e0d\u8fdb\u884c\u538b\u7f29, \u5728\u8bfb\u53d6\u65f6, \u4e5f\u5c31\u7701\u4e0b\u89e3\u538b\u7684\u6d88\u8017. \u4ece\u800c\u63d0\u9ad8\u901f\u5ea6,\u964d\u4f4eCPU\u5360\u7528,\u4f46\u662f\u4f1a\u964d\u4f4e\u538b\u7f29\u7387.", 
            "title": "\u4f18\u70b9"
        }, 
        {
            "location": "/zram/#_3", 
            "text": "CPU\u5360\u7528  \u529f\u8017\u589e\u52a0  \u7531\u4e8e\u5360\u7528\u4e00\u90e8\u5206\u5185\u5b58\u4f5c\u4e3azram\u8bbe\u5907, \u5219\u5982\u679czram\u538b\u7f29\u901f\u5ea6\u4e0d\u591f\u5feb, \u53cd\u800c\u66f4\u5bb9\u6613\u5f15\u53d1OOM.(github\u4e0a\u7684\u4e00\u4e2a\u60c5\u51b5, \u65e0\u6570\u636e\u4fe1\u606f, \u5728ZX2000\u4e0a\u672a\u51fa\u73b0\u8be5\u60c5\u51b5)", 
            "title": "\u7f3a\u70b9"
        }, 
        {
            "location": "/zram/#_4", 
            "text": "CPU\u5360\u7528\u67e5\u770bkswapd(kswap)  CPU\u5360\u7528\u8c03\u6574:   /sys/block/zram0/max_comp_streams \u8bbe\u7f6e\u538b\u7f29\u6d41\u4e2a\u6570. \u9ed8\u8ba4\u4e3a\u6bcf\u4e2aCPU\u5206\u914d1\u4e2a.  /sys/block/zram0/comp_algorithm  \u5207\u6362\u538b\u7f29\u7b97\u6cd5, \u5efa\u8bae\u4f7f\u7528\u9ed8\u8ba4\u7684LZO, \u901f\u5ea6\u5feb", 
            "title": "\u8c03\u6574\u65b9\u6cd5"
        }, 
        {
            "location": "/zram/#_5", 
            "text": "\u4ee5\u4e0b\u6570\u636e\u662f\u3000\u5728 ZX2000 \u4e0a, UI\u5207\u6362\u548c\u542f\u52a8\u65b0\u5e94\u7528\u6362, \u6293\u53d6\u7684\u6570\u636e\uff0e \n\u538b\u7f29\u7387\u76f8\u5173\u7684\u4e09\u4e2a\u503c\u5206\u522b\u4e3a  # busybox free                               \n             total       used       free     shared    buffers     cached\nMem:        427400     365136      62264        408        348      72148\n-/+ buffers/cache:     292640     134760\nSwap:       204796     103784     101012\n\n\norig_data_size:\u300090275840\nmem_used_total:  25862144\ncompr_data_size: 21846958\nzero_pages:      1903  \n\u538b\u7f29\u7387\u4e3a\uff1a  compression radio(orig_data_size / compr_data_size) = 90275840 / 21846958 = 4.13\nreal compr. ratio (orig_data_size / mem_used_total) = 90275840 / 25862144 = 3.49  cpu \u5360\u7528\u6570\u636e\uff1a     44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  3   2% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  0   5% S     1      0K      0K  fg root     kswapd0\n   44  3   1% S     1      0K      0K  fg root     kswapd0  5%\u662f\u5728\u542f\u52a8\u65b0Activity\u7684\u65f6\u5019, \u521d\u6b65\u7ed3\u8bba\u662f, CPU\u5360\u7528\u4e0d\u9ad8.  \n\u4ee5\u4e0b\u6570\u636e\u662f\u3000\u5728 ZX1800 \u4e0a, UI\u5207\u6362\u548c\u542f\u52a8\u65b0\u5e94\u7528\u6362, \u6293\u53d6\u7684\u6570\u636e\uff0e  # ./busybox free                                  \n             total       used       free     shared    buffers     cached\nMem:        427396     422720       4676       1688          0      42412\n-/+ buffers/cache:     380308      47088\nSwap:       204796     112748      92048\n\norig_data_size:  106278912\nmem_used_total:  25624576\ncompr_data_size: 23845230\nzero_pages:      3273  \n\u538b\u7f29\u7387\u4e3a\uff1a  compression radio(orig_data_size / compr_data_size) = 106278912 / 23845230 = 4.45\nreal compr. ratio (orig_data_size / mem_used_total) = 106278912 / 25624576 = 4.14  cpu \u5360\u7528\u6570\u636e\uff1a     44  3   1% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  0   4% S     1      0K      0K  fg root     kswapd0\n   44  3   1% S     1      0K      0K  fg root     kswapd0\n   44  0   0% S     1      0K      0K  fg root     kswapd0\n   44  1   2% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   1% S     1      0K      0K  fg root     kswapd0", 
            "title": "\u6d4b\u8bd5"
        }, 
        {
            "location": "/zram/#_6", 
            "text": "\u4ee5\u4e0b\u662f\u5728 zx2000 \u8bbe\u5907\u4e0a, \u901a\u8fc7\u6bcf\u79d2\u5206\u914d1M\u5185\u5b58\u7684\u65b9\u5f0f, \u5185\u5b58\u4e2d\u6570\u636e\u4e3aurandom\u8bbe\u5907\u6570\u636e, \u6d4b\u8bd5\u5b9e\u9645\u7533\u8bf7\u5185\u5b58\u589e\u52a0\u7684\u503c. \u7edf\u8ba1\u7684\u6570\u636e\u5982\u4e0b.  \n\u5728\u7cfb\u7edf\u505c\u7559\u5728\u4e3b\u754c\u9762\u540e, \u5c0f\u7a97\u53e3\u64ad\u53f0, \u5728\u5185\u5b58\u7533\u8bf7\u4f7f\u7528\u4e86167M\u540e, \u89e6\u53d1OOM.\nCPU\u5360\u7528\u5982\u4e0b, \u89e6\u53d1OOM\u65f6, CPU\u5360\u7528\u8fbe\u52308%     44  0   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  3   8% S     1      0K      0K  fg root     kswapd0\n   44  1   8% S     1      0K      0K  fg root     kswapd0\n   44  1   8% S     1      0K      0K  fg root     kswapd0  \u5185\u5b58\u5360\u7528\u5982\u4e0b:  # busybox free     #\u5f00\u59cb\u65f6\u5185\u5b58                                             \n             total       used       free     shared    buffers     cached\nMem:        427400     423752       3648       2224       2540     105892\n-/+ buffers/cache:     315320     112080\nSwap:       204796          0     204796\n\n# busybox free     # OOM \u65f6\u5185\u5b58                              \n             total       used       free     shared    buffers     cached\nMem:        427400     422908       4492        292        200      11464\n-/+ buffers/cache:     411244      16156\nSwap:       204796     204796          0  zram\u4fe1\u606f\u5982\u4e0b:  # \u5f00\u59cb\u4f7f\u7528zram\u4e0d\u4e45\n==============================================\nstatus: enabled\ncompression: 1\ndisksize: 200M\ncompr_data_size: 1175K\norig_data_size: 2232K\nmem_used_total: 2232K\nmax_comp_streams: 1\ncomp_algorithm: [lzo]\n\n# \u4e00\u6bb5\u65f6\u95f4\u540e\n==============================================\nstatus: enabled\ncompression: 2\ndisksize: 200M\ncompr_data_size: 3675K\norig_data_size: 11800K\nmem_used_total: 4648K\nmax_comp_streams: 1\ncomp_algorithm: [lzo]\n\n==============================================\nstatus: enabled\ncompression: 3\ndisksize: 200M\ncompr_data_size: 15230K\norig_data_size: 55040K\nmem_used_total: 16624K\nmax_comp_streams: 1\ncomp_algorithm: [lzo] \n\n==============================================\nstatus: enabled\ncompression: 2\ndisksize: 200M\ncompr_data_size: 44355K\norig_data_size: 120788K\nmem_used_total: 46196K\nmax_comp_streams: 1\ncomp_algorithm: [lzo] \n\n==============================================\nstatus: enabled\ncompression: 1\ndisksize: 200M\ncompr_data_size: 137773K\norig_data_size: 200280K\nmem_used_total: 144096K\nmax_comp_streams: 1\ncomp_algorithm: [lzo]  \u53ef\u4ee5\u770b\u5230, \u538b\u7f29\u6bd4, \u4ece1 -  3 - \uff11, \u4e5f\u5c31\u662f\u8bf4\u5728swap\u7a7a\u6216\u8005\u5feb\u6ee1\u662f, \u538b\u7f29\u6bd4\u662f\u6700\u4f4e\u7684, \u4ece\u6700\u540e\u89e6\u53d1OOM\u770b, \u901a\u8fc7\u538b\u7f29\u8282\u7701\u7684\u5185\u5b58\u670960M\u5de6\u53f3. \u5e76\u4e14\u7531\u4e8e1M\u586b\u5145\u7684\u90fd\u662furandom\u8bbe\u5907\u7684\u5185\u5bb9, \u672c\u8eab\u5bfc\u81f4\u538b\u7f29\u6bd4\u6bd4\u6b63\u5e38\u4f7f\u7528\u65f6\u504f\u4f4e(\u51e0\u4e4e\u65e00\u9875, \u6570\u636e\u968f\u673a).  \n\u5728\u4e0d\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b\uff0c\u3000\u5185\u5b58\u7533\u8bf7\u572895 M\u7684\u65f6\u5019\uff0c\u3000\u89e6\u53d1\u4e86OOM.   # busybox free       # \u5f00\u59cb\u5185\u5b58\u7533\u8bf7\u65f6\u7684\u5185\u5b58                                             \n             total       used       free     shared    buffers     cached\nMem:        427400     422932       4468       2224       2524     103748\n-/+ buffers/cache:     316660     110740\nSwap:            0          0          0\n\n\n# busybox free       # OOM \u65f6\u7684\u5185\u5b58                                            \n             total       used       free     shared    buffers     cached\nMem:        427400     424052       3348       2224         36      16608\n-/+ buffers/cache:     407408      19992\nSwap:            0          0          0    \u4ee5\u4e0b\u662f\u5728 zx1800 \u8bbe\u5907\u4e0a, \u901a\u8fc7\u6bcf\u79d2\u5206\u914d1M\u5185\u5b58\u7684\u65b9\u5f0f, \u5185\u5b58\u4e2d\u6570\u636e\u4e3aurandom\u8bbe\u5907\u6570\u636e, \u6d4b\u8bd5\u5b9e\u9645\u7533\u8bf7\u5185\u5b58\u589e\u52a0\u7684\u503c. \u7edf\u8ba1\u7684\u6570\u636e\u5982\u4e0b.  \u5728\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u7533\u8bf7\u5185\u5b58\u8fbe\u5230166M\u65f6, \u89e6\u53d1OOM.\nCPU \u5360\u7528     44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  2   1% S     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% R     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  0   0% S     1      0K      0K  fg root     kswapd0\n   44  1   2% R     1      0K      0K  fg root     kswapd0  \u538b\u7f29\u6bd4\u7684\u6570\u636e\u4e0ezx2000 emmc\u76f8\u540c, \u7279\u522b\u662f\u5728zram\u5269\u4f59\u5927\u5c0f\u4e0d\u591a\u65f6, \u538b\u7f29\u6bd4\u5feb\u901f\u7f29\u5c0f\u52301.4(\u4ece3\u964d\u52301)\u5de6\u53f3.\n\u4ee5\u4e0b\u662ffree\u7684\u8f93\u51fa.  # ./busybox free           #\u7cfb\u7edf\u542f\u52a8\u5b8c\u6210\u65f6                 \n             total       used       free     shared    buffers     cached\nMem:        427396     422192       5204       2224          4     109536\n-/+ buffers/cache:     312652     114744\nSwap:       204796          0     204796\n\n\n# ./busybox free        # OOM \u65f6\n             total       used       free     shared    buffers     cached\nMem:        427396     423280       4116        264          0      13268\n-/+ buffers/cache:     410012      17384\nSwap:       204796     204796          0  \u5728\u4e0d\u5f00\u542fzram\u7684\u60c5\u51b5\u4e0b, \u7533\u8bf7\u7684\u5185\u5b58\u8fbe\u523096M\u65f6\u89e6\u53d1OOM, \u4ee5\u4e0b\u662ffree\u7684\u8f93\u51fa.  # ./busybox free         # \u7cfb\u7edf\u542f\u52a8\u5b8c\u6210                      \n             total       used       free     shared    buffers     cached\nMem:        427396     411928      15468       2224          0     107552\n-/+ buffers/cache:     304376     123020\nSwap:            0          0          0\n\n\n# ./busybox free         # \u89e6\u53d1OOM                         \n             total       used       free     shared    buffers     cached\nMem:        427396     419892       7504       2224          0      15372\n-/+ buffers/cache:     404520      22876\nSwap:            0          0          0  \u7efc\u4e0a, \u4e0ezx2000\u76f8\u540c, \u53ef\u7528\u5185\u5b58\u589e\u52a070M\u5de6\u53f3.", 
            "title": "\u5185\u5b58\u7533\u8bf7\u6d4b\u8bd5"
        }, 
        {
            "location": "/zram/#oom", 
            "text": "\u57fa\u4e8e zx2000  8\u670818\u65e5\u7684autobuild\u7cfb\u7edf, \u5728\u5206\u522b\u4e0d\u542f\u7528\u548c\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6d4b\u8bd5\u5bf9OOM\u7684\u5f71\u54cd.  \u6267\u884c\u64cd\u4f5c\u5982\u4e0b:   \u91cd\u542f\u7cfb\u7edf.  \u901a\u8fc7UI\u754c\u9762\u5206\u522b\u542f\u52a8\u672c\u5730\u89c6\u9891, \u672c\u5730\u97f3\u4e50 \u548c\u672c\u5730\u56fe\u7247\u4e09\u4e2a\u5e94\u7528.  \u6309\u9065\u63a7\u5668\u9000\u51fa\u952e, \u56de\u5230\u7535\u89c6\u76f4\u64ad\u754c\u9762.   \u5728\u672a\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6267\u884c\u4ee5\u4e0a\u64cd\u4f5c, \u5fc5\u5b9a\u89e6\u53d1OOM. \u5728\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6267\u884c\u4ee5\u4e0a\u64cd\u4f5c, \u672a\u89e6\u53d1OOM.   \u57fa\u4e8e zx1800  8\u670818\u65e5\u7684autobuild\u7cfb\u7edf, \u5728\u5206\u522b\u4e0d\u542f\u7528\u548c\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6d4b\u8bd5\u5bf9OOM\u7684\u5f71\u54cd.  \u6267\u884c\u64cd\u4f5c\u5982\u4e0b:   \u91cd\u542f\u7cfb\u7edf.  \u901a\u8fc7UI\u754c\u9762\u5206\u522b\u542f\u52a8\u672c\u5730\u89c6\u9891, \u672c\u5730\u97f3\u4e50 \u548c\u672c\u5730\u56fe\u7247\u4e09\u4e2a\u5e94\u7528.  \u6309\u9065\u63a7\u5668\u9000\u51fa\u952e, \u56de\u5230\u7535\u89c6\u76f4\u64ad\u754c\u9762.   \u5728\u672a\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6267\u884c\u4ee5\u4e0a\u64cd\u4f5c, \u5fc5\u5b9a\u89e6\u53d1OOM. \u5e76\u4e14\u5728\u4ee5\u4e0a\u6b65\u9aa4\u4e4b\u540e, \u91cd\u590d\u6309\u5bfc\u89c6\u952e\u548c\u9000\u51fa\u952e, \u975e\u5e38\u5361, \u751a\u81f3\u9ed1\u5c4f\u51e0\u79d2\u949f.\n\u5728\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6267\u884c\u4ee5\u4e0a\u64cd\u4f5c, \u4e0d\u4f1a\u89e6\u53d1OOM. \u5e76\u4e14\u5728\u4ee5\u4e0a\u6b65\u9aa4\u4e4b\u540e, \u91cd\u590d\u6309\u5bfc\u89c6\u952e\u548c\u9000\u51fa\u952e, \u53ea\u6709\u7b2c\u4e00\u6b21\u5bfc\u89c6\u952e\u5361\u987f, \u4e4b\u540e\u90fd\u4e0d\u5361.", 
            "title": "OOM\u6d4b\u8bd5"
        }, 
        {
            "location": "/zram/#android", 
            "text": "https://source.android.com/devices/tech/perf/low-ram \n\u4e0a\u9762\u8fd9\u4e2a\u94fe\u63a5\u662fAndroid\u5b98\u7f51\u7ed9\u51fa\u6765\u7684\u5bf9\u4e8e\u4f4e\u5185\u5b58\u8bbe\u5907(512M)\u7684\u5185\u5b58\u4f18\u5316\u5efa\u8bae(\u5185\u6838/\u7cfb\u7edf/\u5e94\u7528\u7b49), \u5176\u4e2d\u6709\u5728Android\u4e0a\u542f\u7528zram\u7684\u6574\u4e2a\u914d\u7f6e\u6d41\u7a0b. \n\u5728hisi\u63d0\u4f9b\u7684TVOS2.0\u4ee3\u7801\u4e2d, \u5df2\u7ecf\u5b9e\u73b0Android\u5b98\u65b9\u63d0\u4f9b\u7684\u5185\u5b58\u4f18\u5316\u5efa\u8bae, \u8fdb\u884c\u4e86\u4f18\u5316, \u5176\u4e2d\u5305\u62eczram\u7684\u914d\u7f6e, \u53ef\u4ee5\u76f4\u63a5\u53c2\u8003\u4e5f\u4f7f\u7528. \n\u5b98\u65b9\u5efa\u8bae, \u4f7f\u7528\u603b\u5185\u5b58\u7684 30%-50% \u4f5c\u4e3azram, \u6309\u7167\u538b\u7f29\u7387\u4e3a50%\u8ba1\u7b97, \u5219\u5185\u5b58\u589e\u52a030%-50%\u5de6\u53f3. \nSwap to zRAM  zRAM swap can increase the amount of memory available in the system by compressing memory pages and putting them in a dynamically allocated swap area of memory.  Again, since this is trading off CPU time for a small increase in memory, you should be careful about measuring the performance impact zRAM swap has on your system.  Android handles swap to zRAM at several levels:  First, the following kernel options must be enabled to use zRAM swap effectively:\n    CONFIG_SWAP\n    CONFIG_CGROUP_MEM_RES_CTLR\n    CONFIG_CGROUP_MEM_RES_CTLR_SWAP\n    CONFIG_ZRAM\nThen, you should add a line that looks like this to your fstab:\n\n/dev/block/zram0 none swap defaults zramsize= size in bytes ,swapprio= swap partition priority \n\n    zramsize is mandatory and indicates how much uncompressed memory you want the zram area to hold. Compression ratios in the 30-50% range are usually observed.\n    swapprio is optional and not needed if you don t have more than one swap area.\n\nYou should also be sure to label the associated block device as a swap_block_device in the device-specific sepolicy/file_contexts so that it is treated properly by SELinux.\n\n/dev/block/zram0 u:object_r:swap_block_device:s0\n\nBy default, the Linux kernel swaps in 8 pages of memory at a time. When using ZRAM, the incremental cost of reading 1 page at a time is negligible and may help in case the device is under extreme memory pressure. To read only 1 page at a time, add the following to your init.rc:\n\nwrite /proc/sys/vm/page-cluster 0\n\nIn your init.rc after the mount_all /fstab.X line, add:\n\nswapon_all /fstab.X\n\nThe memory cgroups are automatically configured at boot time if the feature is enabled in kernel.\nIf memory cgroups are available, the ActivityManager will mark lower priority threads as being more swappable than other threads. If memory is needed, the Android kernel will start migrating memory pages to zRAM swap, giving a higher priority to those memory pages that have been marked by ActivityManager.", 
            "title": " \u5728Android\u542f\u7528\u65b9\u6cd5 "
        }, 
        {
            "location": "/zram/#_7", 
            "text": "chrome os  debian/ubuntu  \u7b2c\u4e09\u65b9Android ROM \u548c TV", 
            "title": " \u6210\u529f\u4f8b\u5b50 "
        }, 
        {
            "location": "/android8-partiton-table/", 
            "text": "\u6765\u6e90: https://pengzhangdev.github.io/android8-partiton-table/\n\n\n\u5dee\u5f02\u7b80\u8ff0 \n\n\n\u5728Android8.0\u4e4b\u540e, \u5c31\u5b58\u5728\u4e24\u5957\u5206\u533a\u8868, \u5206\u522b\u5bf9\u5e94\u7684\u662fA/B\u7cfb\u7edf\u548c\u975eA/B\u7cfb\u7edf.\n\n\n\n\n\u975eA/B\u7cfb\u7edf\u7684\u5206\u533a\u8868\u4e0e\u4e4b\u524d\u5206\u533a\u8868\u4e00\u6837, \u6ca1\u6709\u53d8\u5316.\n\n\nA/B\u7cfb\u7edf\u7684\u5206\u533a\u8868, \u662f\u672c\u6587\u7684\u4e3b\u8981\u63cf\u8ff0\u70b9.\n\n\n\n\n\u6240\u8c13\u7684A/B\u7cfb\u7edf, \u662f\u6307\u8bbe\u5907\u4e0a\u5b58\u5728\u4e24\u5957\u7cfb\u7edf, \u5176\u5206\u533a\u540d\u4e5f\u662f\u5b58\u5728\n_a\n \u548c \n_b\n \u7684\u533a\u522b.\u4e24\u5957\u7cfb\u7edf\u4e2d, \u53ea\u6709\u4e00\u5957\u4e3aactive, \u8fd0\u884c\u72b6\u6001, \u800c\u5347\u7ea7\u5219\u6267\u884c\u5728\u53e6\u4e00\u5957\u7cfb\u7edf\u7684\u5206\u533a\u4e2d. \u4ece\u800c\u8fbe\u5230, \u4e0d\u7ba1\u5347\u7ea7\u6210\u529f\u4e0e\u5426, \u603b\u6709\u4e00\u5957\u7cfb\u7edf\u4fdd\u8bc1\u80fd\u4f7f\u7528.\n\n\n\u800c\u5237\u673a, \u5305\u62ec\u6302\u65f6\u7684\u5206\u533a\u8868\u4e2d, \u90fd\u4e0d\u4f1a\u6dfb\u52a0\u540e\u7f00(\n_a\n\u6216\n_b\n). \u53ea\u6709\u5728fastboot\u5237\u673a\u65f6, \u6216\u8005\u5728init\u6302\u8f7d\u65f6, \u627e\u5230active\u7684slot, \u5728\u6307\u5b9a\u5206\u533a\u540d\u5b57\u540e\u9762\u6dfb\u52a0\u540e\u7f00\u5e76\u6302\u8f7d. \u6240\u4ee5, \u5355\u7eaf\u4ece\u6e90\u7801\u6216\u8005\u5237\u673a\u5305\u662f\u65e0\u6cd5\u6307\u5b9a\u54ea\u4e9b\u5206\u533a\u88ab\u6307\u5b9a\u4e3aA/B\u4e86.\n\n\n\nA/B\u7cfb\u7edf\u5e26\u6765\u7684\u597d\u5904\u662f:\n\n\n\n\n\u65e0\u7f1d\u5347\u7ea7, \u4e0d\u9700\u8981\u518d\u8fdb\u5165recovery\u8fdb\u884c\u5347\u7ea7.\n\n\n\u53cc\u7cfb\u7edf\u5907\u4efd, \u4e0d\u7ba1\u662f\u7cfb\u7edf\u5347\u7ea7\u5931\u8d25, \u8fd8\u662f\u88ab\u7834\u574f, \u90fd\u53ef\u4ee5\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u7cfb\u7edf, \u786e\u4fdd\u7528\u6237\u8bbe\u5907\u7684\u6b63\u5e38\u4f7f\u7528.\n\n\n\n\n\u5206\u533a\u8868\u4e0e\u5176\u5185\u5bb9\n\n\n\u4e0b\u9762\u4e3b\u8981\u9488\u5bf9pixel\u8bbe\u5907\u8fdb\u884c\u5206\u6790, \u4e5f\u5c31\u662fAndroid8\u7684\u6e90\u7801\u4e2dmarlin\u8bbe\u5907.\n\n\n\u5237\u673a\u6587\u4ef6\u548c\u5237\u673a\u65b9\u5f0f \n\n\n\u9996\u5148\u6211\u4eec\u770b\u4e0bandroid\u5b98\u7f51\u63d0\u4f9b\u7684marlin\u8bbe\u5907\u5237\u673a\u6587\u4ef6. \u4e0b\u9762\u662f\u57fa\u5e26\u548cbootloader\u7684\u5237\u673a\u6587\u4ef6.\n\n\n\n\n\nzip\u5305\u4e2d\u7684\u6587\u4ef6\u5982\u4e0b.\n\n\n\n\n\n\u5982\u679c\u5355\u7eaf\u6309\u7167\u4e4b\u524d\u5bf9\u8be5zip\u5305\u6587\u4ef6\u7684\u7406\u89e3, \u6587\u4ef6\u540d\u5b57\u5c31\u662f\u5bf9\u5e94\u7684\u5206\u533a\u540d. \u7136\u800c\u5728A/B\u7cfb\u7edf\u4e2d, \u5374\u5e76\u4e0d\u662f\u5982\u6b64. \u800c\u662f\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219\u67e5\u627eA/B\u5206\u533a.\n\n\n\u9996\u5148, \u6700\u5148\u6ce8\u610f\u5230\u7684\u662f\u4e24\u4e2asystem\u5927\u5c0f\u4e0d\u4e00\u81f4, \u4f46\u662f\u8fd9\u4e2a\u5c55\u5f00\u6765\u8bb2\u6709\u70b9\u591a, \u6211\u4eec\u5148\u628aA/B\u7cfb\u7edf\u5237\u673a\u7684\u7b2c\u4e00\u4e2a\u89c4\u5219\u4ecb\u7ecd\u4ee5\u4e0b, \u4ee3\u7801\u5728\u540e\u6587\u4ecb\u7ecd\u7b2c\u4e8c\u4e2a\u89c4\u5219\u65f6\u53ef\u4ee5\u540c\u65f6\u770b\u5230.\n\n\nA/B\u7cfb\u7edffastboot\u5237\u673a\u65f6, \u5982\u679c\u6ca1\u6709\u6307\u5b9aslot, \u5219\u9ed8\u8ba4\u5237\u5165\u7684\u662factive\u7684slot, \u6bd4\u5982\u5982\u679cbootloader\u6807\u8bb0\u4e3aslot A \u4e3aactive, \u5219\u6240\u6709\u5206\u533a\u9ed8\u8ba4\u5237\u5165slot A, \u4e5f\u5c31\u662f\u8bf4\nboot_a\n, \nsystem_a\n \u7b49. \u4f46\u662f, \u5982\u679cbootloader\u53cd\u9988\u67d0\u4e2a\u5206\u533a\u6ca1\u6709\u533a\u5206A/B, \u5219\u9ed8\u8ba4\u76f4\u63a5\u5237\u5165\u8be5\u5206\u533a. \u6bd4\u5982 vendor \u65e0\u533a\u5206A/B, \u5219\u76f4\u63a5\u5237\u5165vendor.\n\n\n\u7136\u540e, \u6211\u4eec\u5173\u6ce8\u4e0b\nsystem.img\n\u548c\nsystem_other.img\n, \u5982\u679c\u5355\u7eaf\u7406\u89e3\u4e3a\u8fd9\u4e24\u4e2aimage\u5206\u522b\u5237\u5165A/B\u5206\u533a, \u5219\u5927\u5c0f\u4e5f\u5b8c\u5168\u5bf9\u5e94\u4e0d\u4e0a. \u5927\u5c0f\u95ee\u9898, \u6211\u4eec\u7a0d\u540e\u518d\u770b, \u5148\u7814\u7a76\u4e0b\nsystem_other.img\n\u5237\u5165\u54ea\u4e2a\u5206\u533a.\n\n\nstatic struct {\n    char img_name[17];\n    char sig_name[17];\n    char part_name[9];\n    bool is_optional;\n    bool is_secondary;\n} images[] = {\n    {\nboot.img\n, \nboot.sig\n, \nboot\n, false, false},\n    {\nboot_other.img\n, \nboot.sig\n, \nboot\n, true, true},\n    {\nrecovery.img\n, \nrecovery.sig\n, \nrecovery\n, true, false},\n    {\nsystem.img\n, \nsystem.sig\n, \nsystem\n, false, false},\n    {\nsystem_other.img\n, \nsystem.sig\n, \nsystem\n, true, true},\n    {\nvendor.img\n, \nvendor.sig\n, \nvendor\n, true, false},\n    {\nvendor_other.img\n, \nvendor.sig\n, \nvendor\n, true, true},\n};\n\n\n\n\n\n\u5176\u4e2d \nis_secondary\n \u5982\u679c\u4e3atrue, \u5219\u610f\u5473\u7740\u8f93\u5165\u975eactive slot.\n\n\n    \nif\n \n(!\nskip_secondary\n)\n \n{\n         \n//\n \n\u9ed8\u8ba4\n \nfalse\n\n        \nif\n \n(slot_override\n \n!=\n \n)\n \n{\n  \n//\n \n\u5237\u673a\u65f6\n \n\u4e3a\n \n\n            \nsecondary\n \n=\n \nget_other_slot(transport,\n \nslot_override)\n;\n\n        \n}\n \nelse\n \n{\n\n            \nsecondary\n \n=\n \nget_other_slot(transport)\n;\n \n//\n \n\u83b7\u53d6\u975eactive\n \nslot\n\n        \n}\n\n        \nif\n \n(\nsecondary\n \n==\n \n)\n \n{\n\n            \nif\n \n(supports_AB(transport))\n \n{\n\n                \nfprintf(stderr,\n \nWarning\n:\n \nCould\n \nnot\n \ndetermine\n \nslot\n \nfor\n \nsecondary\n \nimages\n.\n \nIgnoring\n.\n\\\nn\n);\n\n\n            }\n\n\n            skip_secondary = true;\n\n\n        }\n\n\n    }\n\n\n    for (size_t i = 0; i \n arraysize(images); ++i) {\n\n\n        const char* slot = slot_override.c_str();\n\n\n        if (images\n[\ni\n]\n.is_secondary) {\n\n\n            if (!skip_secondary) {\n\n\n                slot = secondary.c_str(); //\u6307\u5b9a\u4e3a\u975eactive slot\n\n\n            } else {\n\n\n                continue;\n\n\n            }\n\n\n        }\n\n\n\n        int fd = unzip_to_file(zip, images\n[\ni\n]\n.img_name);\n\n\n        if (fd == -1) {\n\n\n            if (images\n[\ni\n]\n.is_optional) {\n\n\n                continue;\n\n\n            }\n\n\n            CloseArchive(zip);\n\n\n            exit(1); // unzip_to_file already explained why.\n\n\n        }\n\n\n        fastboot_buffer buf;\n\n\n        if (!load_buf_fd(transport, fd, \nbuf)) {\n\n\n            die(\ncannot\n \nload\n \n%\ns\n \nfrom\n \nflash\n:\n \n%\ns\n,\n \nimages\n[\ni\n]\n.\nimg_name\n,\n \nstrerror\n(\nerrno\n));\n\n        \n}\n\n\n        \nauto\n \nupdate\n \n=\n \n[\n]\n(\nconst\n \nstd\n::\nstring\n \npartition\n)\n \n{\n\n            \ndo_update_signature(zip,\n \nimages\n[\ni\n]\n.sig_name)\n;\n\n            \nif\n \n(erase_first\n \n \nneeds_erase(transport,\n \npartition.c_str()))\n \n{\n\n                \nfb_queue_erase(partition.c_str())\n;\n\n            \n}\n\n            \nflash_buf\n(\npartition\n.\nc_str\n(),\n \nbuf\n);\n\n            \n/* not closing the fd here since the sparse code keeps the fd around\n\n\n             * but hasn\nt mmaped data yet. The tmpfile will get cleaned up when the\n\n\n             * program exits.\n\n\n             */\n\n        \n}\n;\n\n        \ndo_for_partitions\n(\ntransport\n,\n \nimages\n[\ni\n]\n.\npart_name\n,\n \nslot\n,\n \nupdate\n,\n \nfalse\n);\n\n    \n}\n\n\n\n\n\n\n\u6240\u4ee5, \nsystem_other.img\n \u4f1a\u5237\u5165\u975eactive slot, \u5982\u679cactive\u4e3aa. \u5219\u5237\u5165\nsystem_b\n. \n\n\n\u5728\u786e\u5b9a\nsystem_other.img\n\u4f1a\u5237\u5165\u53e6\u4e00\u4e2aslot\u540e, \u6309\u7167\u7b2c\u4e00\u4e2a\u89c4\u5219(\u53ea\u5237active\u7684slot), \u5219\u53ef\u4ee5\u57fa\u672c\u731c\u6d4b, \nsystem_other.img\n\u4e2d\u7684\u5185\u5bb9\u4e0d\u662f\u7528\u4e8e\u542f\u52a8\u7cfb\u7edf\u7684, \u6216\u8005\u4e0d\u662f\u5b8c\u6574\u7cfb\u7edf.\n\n\n\n\n\u5bf9\u6bd4, \u5176\u5185\u5bb9\u5dee\u5f02, \nsystem_other.img\n \u4e2d, \u53ea\u6709 app \u548c \npriv-app\n\u76ee\u5f55.\nsystem_other.img\n\u7684\u76ee\u5f55\u4e2d\u53ea\u5b58\u5728odex\u548cvdex\u6587\u4ef6, \u4e5f\u5c31\u662fapp\u4f18\u5316\u8fc7\u7684\u6587\u4ef6, \u5e76\u4e14\u989d\u5916\u591a\u4e00\u4e2a\u6587\u4ef6\nsystem-other-odex-marker\n. \u8fd9\u4e2a\u6587\u4ef6\u662f\u4e2a\u7ebf\u7d22, \u6240\u4ee5, \u521d\u6b65\u53ef\u4ee5\u5224\u65ad, \u7cfb\u7edf\u542f\u52a8\u540e\u4e00\u5b9a\u4f1a\u4ece\nsystem_b\n\u5c06\u8fd9\u4e9b\u6570\u636e\u590d\u5236\u5230/data/\u4e0b.\n\n\n\u4e0b\u9762\u6211\u4eec\u770b\u4e0b\u8fd9\u4e2a\u6587\u4ef6\u7684\u4f5c\u7528\u548c\u5982\u4f55copy.\n\n\non property:sys.cppreopt=requested \n property:ro.boot.slot_suffix=_a\n    mount ext4 /dev/block/bootdevice/by-name/system_b /postinstall ro nosuid nodev noexec\n    exec - root -- /system/bin/cppreopts.sh /postinstall\n    # Optional script to copy additional preloaded content to data directory\n    exec - system system -- /system/bin/preloads_copy.sh /postinstall\n    umount /postinstall\n    setprop sys.cppreopt finished\n\non property:sys.cppreopt=requested \n property:ro.boot.slot_suffix=_b\n    mount ext4 /dev/block/bootdevice/by-name/system_a /postinstall ro nosuid nodev noexec\n    exec - root -- /system/bin/cppreopts.sh /postinstall\n    # Optional script to copy additional preloaded content to data directory\n    exec - system system -- /system/bin/preloads_copy.sh /postinstall\n    umount /postinstall\n    setprop sys.cppreopt finished\n\n\n\n\n\n\u5728\u542f\u52a8\u4e3a\u4efb\u4f55\u4e4b\u4e00\u65f6, \u4f1a\u4ece\u53e6\u4e00\u4e2aslot\u6302\u8f7d\u5230/postinstall, \u7136\u540e\u4f7f\u7528cppreopts.sh, \u5c06odexvdex\u6587\u4ef6\u62f7\u8d1d\u5230\n/data/\ndalvik-cache/\nisa\n/\nxiam, isa\u662f\u786c\u4ef6\u67b6\u6784(arm64/arm32).\n\u800c \npreloads_copy.sh\n \u4f1a\u5c06\nsystem_other\n\u4e2d\u7684preloads\u6587\u4ef6\u62f7\u8d1d\u5230/data/preloads/ \u76ee\u5f55\u4e0b.\n\n\n\u57fa\u4e8e\u4ee5\u4e0asystem\u7684\u673a\u5236, \u5728\u5237\u673a\u65f6, \u5b9e\u9645\u53ea\u5237\u5165\u4e00\u5957\u7cfb\u7edf\u5230active slot\u4e2d, \u7136\u540e\u4ece\u53e6\u4e00\u5957\u7cfb\u7edf\u4e2d\u7684system\u5206\u533a\u5c06\u4f18\u5316\u540e\u7684dex\u5305\u62f7\u8d1d\u5230data\u5206\u533a\u4e0b,. \u4e0e\u4e4b\u524d\u7684\u5dee\u5f02\u662f, \u8fde\u5e94\u7528\u7684\u7f16\u8bd1\u548c\u4f18\u5316\u90fd\u5728host\u7aef\u5b8c\u6210, android8\u7684\u542f\u52a8\u901f\u5ea6\u5c06\u975e\u5e38\u5feb.\n\n\n\u6e90\u7801\u548c\u5206\u533a\u5927\u5c0f \n\n\n\u4ecerecovery\u7684fstab\u4e2d,\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7684\u5206\u533a\u8868\u5982\u4e0b:\n\n\n/dev/block/platform/soc/624000.ufshc/by-name/system_a\n/dev/block/platform/soc/624000.ufshc/by-name/system_b\n/dev/block/platform/soc/624000.ufshc/by-name/vendor_a\n/dev/block/platform/soc/624000.ufshc/by-name/vendor_b\n/dev/block/platform/soc/624000.ufshc/by-name/userdata\n/dev/block/platform/soc/624000.ufshc/by-name/boot_a\n/dev/block/platform/soc/624000.ufshc/by-name/boot_b\n\n\n\n\n\n\u4f46\u4ee5\u4e0a\u5206\u533a\u8868\u5728\u4e3b\u7cfb\u7edf\u4e2d\u65e0\u6cd5\u770b\u5230, \u6216\u8005\u8bf4\u4e3b\u7cfb\u7edf\u4e2d\u53ea\u6709\u5728vendor\u4e0b\u5b58\u5728fstab, \u5176\u4ed6\u5730\u65b9\u5e76\u6ca1\u6709, \u800cvendor\u4e0b\u7684fstab\u5185\u5bb9\u5982\u4e0b, \u662f\u7531vendor\u5e95\u4e0b\u7684init.{device}.rc \u6302\u8f7d.\n\n\n/dev/block/platform/soc/624000.ufshc/by-name/system     /                   ext4    ro,barrier=1                wait,slotselect,verify\n/dev/block/platform/soc/624000.ufshc/by-name/modem      /firmware/radio     vfat    ro,shortname=lower,uid=1000,gid=0,dmask=227,fmask=337,context=u:object_r:firmware_file:s0   wait,slotselect\n/dev/block/platform/soc/624000.ufshc/by-name/userdata   /data               ext4    noatime,nosuid,nodev,barrier=1,noauto_da_alloc  latemount,wait,check,formattable,fileencryption=ice,quota\n/dev/block/zram0                                        none                swap    defaults                    zramsize=536870912,max_comp_streams=4\n/dev/block/platform/soc/624000.ufshc/by-name/misc       /misc               emmc    defaults                    defaults\n/devices/*/xhci-hcd.0.auto/usb*                         auto                vfat    defaults                    voldmanaged=usb:auto\n\n\n\n\n\n\u521d\u6b65\u5224\u65ad, \u5176\u6709\u7528\u7684\u5185\u5bb9\u662f\u7ed9vold\u7684\u6302\u8f7d\u4fe1\u606f\u548c\u57fa\u5e26\u5206\u533a. \u4f46\u4e0d\u7ba1\u600e\u4e48\u770b\u81f3\u5c11\u7f3a\u5c11\u4e86vendor\u6302\u8f7d\u7684\u4fe1\u606f. \u800c\u4e14fstab\u5728vendor\u5206\u533a\u4e0b, \u5219\u610f\u5473\u7740vendor\u7684\u6302\u8f7d\u5c06\u63d0\u524d\u5230\u548cboot\u540c\u4e2a\u7ea7\u522b. \u6ca1\u9519, \u65b0\u5f15\u5165\u4e86\u4e00\u4e2a\nearly-mounted\n, \u800c\u5206\u533a\u8868\u662f\u5728 device tree \u4e2d, \u4e5f\u5c31\u662f\u542f\u52a8\u540e, \u5728 \n/proc/device-tree/firmware/android/fstab/vendor\n. \n\u4e0a\u6587\u7684fstab\u8fd8\u7ed9\u6211\u4eec\u4e00\u4e2a\u4fe1\u606f, \u6807\u5fd7\u4f4d\nslotselect\n, \u610f\u5473\u8fd9system\u5206\u533a\u662f\u5206A/B\u7cfb\u7edf\u7684\u5e76\u4e14\u7531init\u6839\u636eactive\u7684slot\u9009\u62e9\u5bf9\u5e94\u7684\u771f\u5b9e\u5206\u533a\u8def\u5f84(\u540e\u7f00'_a'\u6216'_b')\u8fdb\u884c\u6302\u8f7d.\n\n\n\u6211\u4eec\u5728\u770b\u4e00\u773csystem\u5206\u533a, \u5176\u6302\u8f7d\u70b9\u662f / .  \u6ca1\u9519, \u5728Android8\u4e4b\u540e, system\u5206\u533a\u7684\u786e\u662f\u88ab\u6302\u8f7d\u5230 /, \u4e5f\u5c31\u662f\u8bf4, system\u5206\u533a\u5305\u542b\u4e86rootfs, \u5176\u5185\u5bb9\u5982\u4e0b.\n\n\ntotal 1724\ndrwxr-xr-x. 21 root    root       4096 Sep  8 18:30 .\ndrwxrwxrwx  25 werther werther   32768 Sep 19 13:15 ..\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 acct\ndrwxrwx--x.  2 werther werther    4096 Sep  8 15:49 bt_firmware\nlrw-r--r--.  1 root    root         50 Sep  8 18:30 bugreports -\n /data/user_de/0/com.android.shell/files/bugreports\nlrw-r--r--.  1 root    root         11 Sep  8 18:30 cache -\n /data/cache\nlrw-r--r--.  1 root    root         13 Sep  8 18:30 charger -\n /sbin/charger\ndr-x------.  2 root    root       4096 Sep  8 15:49 config\nlrw-r--r--.  1 root    root         17 Sep  8 18:30 d -\n /sys/kernel/debug\ndrwxrwx--x.  2 werther werther    4096 Sep  8 15:49 data\nlrw-------.  1 root    root         23 Sep  8 18:30 default.prop -\n system/etc/prop.default\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 dev\nlrw-r--r--.  1 root    root         15 Sep  8 18:30 dsp -\n /vendor/lib/dsp\nlrw-r--r--.  1 root    root         11 Sep  8 18:30 etc -\n /system/etc\ndrwxr-xr-x.  3 root    root       4096 Sep  8 15:49 firmware\n-rwxr-x---.  1 root       2000 1559136 Sep  8 18:11 init\n-rwxr-x---.  1 root       2000     996 Sep  8 15:49 init.environ.rc\n-rwxr-x---.  1 root       2000   26830 Sep  8 15:49 init.rc\n-rwxr-x---.  1 root       2000     141 Sep  8 15:49 init.recovery.marlin.rc\n-rwxr-x---.  1 root       2000    7623 Sep  8 15:49 init.usb.configfs.rc\n-rwxr-x---.  1 root       2000    5715 Sep  8 15:49 init.usb.rc\n-rwxr-x---.  1 root       2000     497 Sep  8 15:49 init.zygote32.rc\n-rwxr-x---.  1 root       2000     847 Sep  8 15:49 init.zygote64_32.rc\ndrwx------.  2 root    root      16384 Sep  8 18:30 lost+found\ndrwxr-xr-x.  2 root    werther    4096 Sep  8 15:49 mnt\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 oem\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 persist\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 postinstall\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 proc\ndrwxr-xr-x.  3 root    root       4096 Sep  8 15:48 res\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 root\ndrwxr-x---.  2 root       2000    4096 Sep  8 18:11 sbin\nlrw-r--r--.  1 root    root         21 Sep  8 18:30 sdcard -\n /storage/self/primary\ndrwxr-x--x.  2 root       1028    4096 Sep  8 15:49 storage\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 sys\ndrwxr-xr-x. 16 root    root       4096 Sep  8 18:30 system\n-rw-r--r--.  1 root    root       4849 Sep  8 15:49 ueventd.rc\ndrwxr-xr-x.  2 root       2000    4096 Sep  8 15:49 vendor\n-rw-r--r--.  1 root    root        524 Sep  8 15:50 verity_key\n\n\n\n\n\n\u90a3\u4e48, \u8fd9\u4e9b\u53d8\u5316\u662f\u5982\u4f55\u505a\u5230\u7684, \u5e76\u4e14, \u4e3a\u4ec0\u4e48system.img\u4e2d\u8981\u5305\u542brootfs? \u6211\u4eec\u5728\u540e\u6587\u4f1a\u63d0\u5230.\n\n\n\n\u6211\u4eec\u6765\u770b\u4e0bAndroid\u5b98\u65b9\u7f51\u7ad9\u7ed9\u51fa\u7684\u4ece\u666e\u901a\u5206\u533a\u5207\u6362\u5230A/B\u5206\u533a, \u5bf9\u4e8e\u5206\u533a\u5927\u5c0f\u7684\u5f71\u54cd.\n\n\n\n\n\n\n\n\nPixel Partitions Size\n\n\nA/B\n\n\nNon-A/B\n\n\n\n\n\n\n\n\n\n\nBootloader\n\n\n50*2\n\n\n50\n\n\n\n\n\n\nBoot\n\n\n32*2\n\n\n32\n\n\n\n\n\n\nRecovery\n\n\n0\n\n\n32\n\n\n\n\n\n\nCache\n\n\n0\n\n\n100\n\n\n\n\n\n\nRadio\n\n\n70*2\n\n\n70\n\n\n\n\n\n\nVendor\n\n\n300*2\n\n\n300\n\n\n\n\n\n\nSystem\n\n\n2048*2\n\n\n4096\n\n\n\n\n\n\nTotal\n\n\n5000\n\n\n4680\n\n\n\n\n\n\n\n\n\u4ece\u8fd9\u5f20\u8868\u4e0a,\u6211\u4eec\u770b\u5230pixel\u5206\u533a\u7684A/B\u7cfb\u7edf\u5305\u62ec bootloader, boot, radio, vendor, system.\n\n\n\u5206\u533a\u8868\u6539\u53d8\u5bf9\u7cfb\u7edf\u903b\u8f91\u7684\u5f71\u54cd\n\n\n\u8fd9\u91cc\u603b\u7ed3\u4e0b\u4ee5\u4e0a\u5206\u533a\u8868\u7684\u6539\u53d8:\n\n\n\n\n\u6ca1\u6709recovery\u5206\u533a\u548ccache\u5206\u533a.\n\n\nvendor\u5206\u533a\u63d0\u524d\u6302\u8f7d(\u4e0d\u662f\u5728fstab\u6587\u4ef6\u4e2d\u4e2d\u6302\u8f7d, \u5728 device tree\u4e2d\u6307\u5b9a)\n\n\n\u771f\u5b9e\u5206\u533a\u540d\u5b57\u5b58\u5728\n_a\n\u548c\n_b\n\u540e\u7f00.\n\n\n\n\n \u6302\u8f7d\u5206\u533a\u65b9\u5f0f\u6539\u53d8 \n\n\nearly-mounted\n\u4ee3\u7801\u89c1 \ninit_first_stage.cpp\n\n\u5728init\u7b2c\u4e00\u6b21\u542f\u52a8\u65f6, \u4f1a\u8c03\u7528\nDoFirstStageMount\n, \u548c\u4e00\u4e9b\u73af\u5883\u7684\u914d\u7f6e. \u5b8c\u6210\u540e\u518d\u6b21\u8fd0\u884cinit, \u8fdb\u5165\u7b2c\u4e8c\u9636\u6bb5\u7684\u6267\u884c. \u800c\u7b2c\u4e8c\u9636\u6bb5\u5b9e\u9645\u4e0a\u5c31\u662f\u8ddf\u4ee5\u524d\u7684Android\u5904\u7406\u65b9\u5f0f\u4e00\u6837.\n\n\n\u6302\u8f7d\u65f6\u9009\u62e9slot\u7684\u4ee3\u7801\u89c1init\u7684\nDoFirstStageMount\n\n\u5237\u673a\u65f6\u9009\u62e9slog\u7684\u4ee3\u7801\u89c1fastboot, \u4e5f\u53ef\u89c1\u4e0a\u9762\u8d34\u7684\u4ee3\u7801.\n\n\nboot\u5305\u542brecovery\u529f\u80fd\n\n\n\u9996\u5148, \u5347\u7ea7\u5207\u6362\u6210A/B\u65e0\u7f1d\u5347\u7ea7, \u5177\u4f53\u8bf4\u660e\u8bf7\u53c2\u8003recovery8\u7684\u6587\u6863.\n\u4f46\u662f, recovery\u7684\u529f\u80fd\u5e76\u4e0d\u6b62\u662f\u5347\u7ea7, \u8fd8\u5305\u62ec\u6062\u590d, \u5982\u5176\u540d\u5b57.\n\n\n\u4e3a\u4e86\u652f\u6301\u6062\u590d\u51fa\u5382\u8bbe\u7f6e\u7684\u529f\u80fd, recovery\u7684\u529f\u80fd\u88ab\u96c6\u6210\u5230\u4e86boot\u4e2d, bootloader\u5728\u8fdb\u5165recovery\u7684\u65f6\u5019, \u8fdb\u7684\u662fboot\u5206\u533a, \u4f46\u662f\u4f20\u7684\u53c2\u6570\u4e0d\u5305\u542b\nskip_initramfs\n. \n\u6b63\u5e38\u542f\u52a8\u5230android\u7cfb\u7edf\u65f6\u7684\u542f\u52a8\u53c2\u6570.\n\n\nskip_initramfs rootwait ro init=/init root=\n/dev/dm-0 dm=system none ro,0 1 android-verity \npublic-key-id\n \npath-to-system-partition\n\n\n\n\n\n\n\u8fd9\u91cc\u8bbe\u7f6e\u7684\nskip_initramfs\n, \u662f\u901a\u77e5\u5185\u6838, \u8df3\u8fc7boot\u4e2d\u7684ramdisk. \u8fd9\u4e2a\u53c2\u6570\u662fandroid\u6dfb\u52a0\u7684, \u6807\u51c6\u5185\u6838\u4e0d\u652f\u6301. \n\u7136\u540e\u6211\u4eec\u89e3\u6790\u4e0b\u5269\u4f59\u53c2\u6570, \u4e3b\u8981\u662froot\u53c2\u6570. \u8fd9\u91cc\u53ef\u4ee5\u770b\u5230, root\u6307\u5b9a\u7684\u662fsystem\u5206\u533a. \u4e5f\u5c31\u662f\u8bf4, \u6839\u5206\u533a\u5c31\u662f\u4ee5system\u5206\u533a.\n\n\n\u7136\u540e\u6211\u4eec\u770b\u4e0b\u542f\u52a8recovery\u65f6\u7684\u53c2\u6570.\n\n\nrootwait init=/init ro\n\n\n\n\n\n\u8fd9\u91cc\u56e0\u4e3a\u6ca1\u6307\u5b9a\nskip_initramfs\n, \u6240\u4ee5, \u4f1a\u76f4\u63a5\u8bfb\u53d6boot\u5206\u533a\u4e2d\u7684ramdisk.\n\n\n\u8fdb\u4e00\u6b65\u7684\u7406\u89e3\u5c31\u662f, boot.img\u5305\u542b\u7684\u662f\u4ee5\u524drecovery\u7684\u5185\u5bb9, \u529f\u80fd\u53ea\u6709\u6062\u590d\u51fa\u5382\u8bbe\u7f6e. \u800c\u539f\u6765\u7684boot\u4e0esystem\u5408\u5e76\u4e3asystem.img.\n\n\n\u7f16\u8bd1\u53c2\u6570\u6539\u53d8\n\n\nhttps://source.android.com/devices/tech/ota/ab_implement\n\n\n\u5fc5\u987b\u5b9a\u4e49\u5b58\u6863\u53c2\u6570\u5982\u4e0b:\n\n\n    AB_OTA_UPDATER := true\n    AB_OTA_PARTITIONS := \\\n      boot \\\n      system \\\n      vendor\n    *and other partitions updated through update_engine (radio, bootloader, etc.)*\n    BOARD_BUILD_SYSTEM_ROOT_IMAGE := true\n    TARGET_NO_RECOVERY := true\n    BOARD_USES_RECOVERY_AS_BOOT := true\n    PRODUCT_PACKAGES += \\\n      update_engine \\\n      update_verifier\n\n*For an example, refer to /device/google/marlin/+/android-7.1.0_r1/device-common.mk. You can optionally conduct the post-install (but pre-reboot) dex2oat step described in Compiling. *\n\n\n\n\n\n\u5fc5\u987b\u4e0d\u5b9a\u4e49\u7684\u53c2\u6570\u5982\u4e0b:\n\n\n    BOARD_RECOVERYIMAGE_PARTITION_SIZE\n    BOARD_CACHEIMAGE_PARTITION_SIZE\n    BOARD_CACHEIMAGE_FILE_SYSTEM_TYPE", 
            "title": "Android8\u5206\u533a\u8868\u5206\u6790"
        }, 
        {
            "location": "/android8-partiton-table/#_1", 
            "text": "\u5728Android8.0\u4e4b\u540e, \u5c31\u5b58\u5728\u4e24\u5957\u5206\u533a\u8868, \u5206\u522b\u5bf9\u5e94\u7684\u662fA/B\u7cfb\u7edf\u548c\u975eA/B\u7cfb\u7edf.   \u975eA/B\u7cfb\u7edf\u7684\u5206\u533a\u8868\u4e0e\u4e4b\u524d\u5206\u533a\u8868\u4e00\u6837, \u6ca1\u6709\u53d8\u5316.  A/B\u7cfb\u7edf\u7684\u5206\u533a\u8868, \u662f\u672c\u6587\u7684\u4e3b\u8981\u63cf\u8ff0\u70b9.   \u6240\u8c13\u7684A/B\u7cfb\u7edf, \u662f\u6307\u8bbe\u5907\u4e0a\u5b58\u5728\u4e24\u5957\u7cfb\u7edf, \u5176\u5206\u533a\u540d\u4e5f\u662f\u5b58\u5728 _a  \u548c  _b  \u7684\u533a\u522b.\u4e24\u5957\u7cfb\u7edf\u4e2d, \u53ea\u6709\u4e00\u5957\u4e3aactive, \u8fd0\u884c\u72b6\u6001, \u800c\u5347\u7ea7\u5219\u6267\u884c\u5728\u53e6\u4e00\u5957\u7cfb\u7edf\u7684\u5206\u533a\u4e2d. \u4ece\u800c\u8fbe\u5230, \u4e0d\u7ba1\u5347\u7ea7\u6210\u529f\u4e0e\u5426, \u603b\u6709\u4e00\u5957\u7cfb\u7edf\u4fdd\u8bc1\u80fd\u4f7f\u7528.  \u800c\u5237\u673a, \u5305\u62ec\u6302\u65f6\u7684\u5206\u533a\u8868\u4e2d, \u90fd\u4e0d\u4f1a\u6dfb\u52a0\u540e\u7f00( _a \u6216 _b ). \u53ea\u6709\u5728fastboot\u5237\u673a\u65f6, \u6216\u8005\u5728init\u6302\u8f7d\u65f6, \u627e\u5230active\u7684slot, \u5728\u6307\u5b9a\u5206\u533a\u540d\u5b57\u540e\u9762\u6dfb\u52a0\u540e\u7f00\u5e76\u6302\u8f7d. \u6240\u4ee5, \u5355\u7eaf\u4ece\u6e90\u7801\u6216\u8005\u5237\u673a\u5305\u662f\u65e0\u6cd5\u6307\u5b9a\u54ea\u4e9b\u5206\u533a\u88ab\u6307\u5b9a\u4e3aA/B\u4e86.  \nA/B\u7cfb\u7edf\u5e26\u6765\u7684\u597d\u5904\u662f:   \u65e0\u7f1d\u5347\u7ea7, \u4e0d\u9700\u8981\u518d\u8fdb\u5165recovery\u8fdb\u884c\u5347\u7ea7.  \u53cc\u7cfb\u7edf\u5907\u4efd, \u4e0d\u7ba1\u662f\u7cfb\u7edf\u5347\u7ea7\u5931\u8d25, \u8fd8\u662f\u88ab\u7834\u574f, \u90fd\u53ef\u4ee5\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u7cfb\u7edf, \u786e\u4fdd\u7528\u6237\u8bbe\u5907\u7684\u6b63\u5e38\u4f7f\u7528.", 
            "title": "\u5dee\u5f02\u7b80\u8ff0 "
        }, 
        {
            "location": "/android8-partiton-table/#_2", 
            "text": "\u4e0b\u9762\u4e3b\u8981\u9488\u5bf9pixel\u8bbe\u5907\u8fdb\u884c\u5206\u6790, \u4e5f\u5c31\u662fAndroid8\u7684\u6e90\u7801\u4e2dmarlin\u8bbe\u5907.", 
            "title": "\u5206\u533a\u8868\u4e0e\u5176\u5185\u5bb9"
        }, 
        {
            "location": "/android8-partiton-table/#_3", 
            "text": "\u9996\u5148\u6211\u4eec\u770b\u4e0bandroid\u5b98\u7f51\u63d0\u4f9b\u7684marlin\u8bbe\u5907\u5237\u673a\u6587\u4ef6. \u4e0b\u9762\u662f\u57fa\u5e26\u548cbootloader\u7684\u5237\u673a\u6587\u4ef6.   \nzip\u5305\u4e2d\u7684\u6587\u4ef6\u5982\u4e0b.   \u5982\u679c\u5355\u7eaf\u6309\u7167\u4e4b\u524d\u5bf9\u8be5zip\u5305\u6587\u4ef6\u7684\u7406\u89e3, \u6587\u4ef6\u540d\u5b57\u5c31\u662f\u5bf9\u5e94\u7684\u5206\u533a\u540d. \u7136\u800c\u5728A/B\u7cfb\u7edf\u4e2d, \u5374\u5e76\u4e0d\u662f\u5982\u6b64. \u800c\u662f\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219\u67e5\u627eA/B\u5206\u533a.  \u9996\u5148, \u6700\u5148\u6ce8\u610f\u5230\u7684\u662f\u4e24\u4e2asystem\u5927\u5c0f\u4e0d\u4e00\u81f4, \u4f46\u662f\u8fd9\u4e2a\u5c55\u5f00\u6765\u8bb2\u6709\u70b9\u591a, \u6211\u4eec\u5148\u628aA/B\u7cfb\u7edf\u5237\u673a\u7684\u7b2c\u4e00\u4e2a\u89c4\u5219\u4ecb\u7ecd\u4ee5\u4e0b, \u4ee3\u7801\u5728\u540e\u6587\u4ecb\u7ecd\u7b2c\u4e8c\u4e2a\u89c4\u5219\u65f6\u53ef\u4ee5\u540c\u65f6\u770b\u5230.  A/B\u7cfb\u7edffastboot\u5237\u673a\u65f6, \u5982\u679c\u6ca1\u6709\u6307\u5b9aslot, \u5219\u9ed8\u8ba4\u5237\u5165\u7684\u662factive\u7684slot, \u6bd4\u5982\u5982\u679cbootloader\u6807\u8bb0\u4e3aslot A \u4e3aactive, \u5219\u6240\u6709\u5206\u533a\u9ed8\u8ba4\u5237\u5165slot A, \u4e5f\u5c31\u662f\u8bf4 boot_a ,  system_a  \u7b49. \u4f46\u662f, \u5982\u679cbootloader\u53cd\u9988\u67d0\u4e2a\u5206\u533a\u6ca1\u6709\u533a\u5206A/B, \u5219\u9ed8\u8ba4\u76f4\u63a5\u5237\u5165\u8be5\u5206\u533a. \u6bd4\u5982 vendor \u65e0\u533a\u5206A/B, \u5219\u76f4\u63a5\u5237\u5165vendor.  \u7136\u540e, \u6211\u4eec\u5173\u6ce8\u4e0b system.img \u548c system_other.img , \u5982\u679c\u5355\u7eaf\u7406\u89e3\u4e3a\u8fd9\u4e24\u4e2aimage\u5206\u522b\u5237\u5165A/B\u5206\u533a, \u5219\u5927\u5c0f\u4e5f\u5b8c\u5168\u5bf9\u5e94\u4e0d\u4e0a. \u5927\u5c0f\u95ee\u9898, \u6211\u4eec\u7a0d\u540e\u518d\u770b, \u5148\u7814\u7a76\u4e0b system_other.img \u5237\u5165\u54ea\u4e2a\u5206\u533a.  static struct {\n    char img_name[17];\n    char sig_name[17];\n    char part_name[9];\n    bool is_optional;\n    bool is_secondary;\n} images[] = {\n    { boot.img ,  boot.sig ,  boot , false, false},\n    { boot_other.img ,  boot.sig ,  boot , true, true},\n    { recovery.img ,  recovery.sig ,  recovery , true, false},\n    { system.img ,  system.sig ,  system , false, false},\n    { system_other.img ,  system.sig ,  system , true, true},\n    { vendor.img ,  vendor.sig ,  vendor , true, false},\n    { vendor_other.img ,  vendor.sig ,  vendor , true, true},\n};  \u5176\u4e2d  is_secondary  \u5982\u679c\u4e3atrue, \u5219\u610f\u5473\u7740\u8f93\u5165\u975eactive slot.       if   (! skip_secondary )   {           //   \u9ed8\u8ba4   false \n         if   (slot_override   !=   )   {    //   \u5237\u673a\u65f6   \u4e3a   \n             secondary   =   get_other_slot(transport,   slot_override) ; \n         }   else   { \n             secondary   =   get_other_slot(transport) ;   //   \u83b7\u53d6\u975eactive   slot \n         } \n         if   ( secondary   ==   )   { \n             if   (supports_AB(transport))   { \n                 fprintf(stderr,   Warning :   Could   not   determine   slot   for   secondary   images .   Ignoring . \\ n );              }              skip_secondary = true;          }      }      for (size_t i = 0; i   arraysize(images); ++i) {          const char* slot = slot_override.c_str();          if (images [ i ] .is_secondary) {              if (!skip_secondary) {                  slot = secondary.c_str(); //\u6307\u5b9a\u4e3a\u975eactive slot              } else {                  continue;              }          }          int fd = unzip_to_file(zip, images [ i ] .img_name);          if (fd == -1) {              if (images [ i ] .is_optional) {                  continue;              }              CloseArchive(zip);              exit(1); // unzip_to_file already explained why.          }          fastboot_buffer buf;          if (!load_buf_fd(transport, fd,  buf)) {              die( cannot   load   % s   from   flash :   % s ,   images [ i ] . img_name ,   strerror ( errno )); \n         } \n\n         auto   update   =   [ ] ( const   std :: string   partition )   { \n             do_update_signature(zip,   images [ i ] .sig_name) ; \n             if   (erase_first     needs_erase(transport,   partition.c_str()))   { \n                 fb_queue_erase(partition.c_str()) ; \n             } \n             flash_buf ( partition . c_str (),   buf ); \n             /* not closing the fd here since the sparse code keeps the fd around               * but hasn t mmaped data yet. The tmpfile will get cleaned up when the               * program exits.               */ \n         } ; \n         do_for_partitions ( transport ,   images [ i ] . part_name ,   slot ,   update ,   false ); \n     }   \u6240\u4ee5,  system_other.img  \u4f1a\u5237\u5165\u975eactive slot, \u5982\u679cactive\u4e3aa. \u5219\u5237\u5165 system_b .   \u5728\u786e\u5b9a system_other.img \u4f1a\u5237\u5165\u53e6\u4e00\u4e2aslot\u540e, \u6309\u7167\u7b2c\u4e00\u4e2a\u89c4\u5219(\u53ea\u5237active\u7684slot), \u5219\u53ef\u4ee5\u57fa\u672c\u731c\u6d4b,  system_other.img \u4e2d\u7684\u5185\u5bb9\u4e0d\u662f\u7528\u4e8e\u542f\u52a8\u7cfb\u7edf\u7684, \u6216\u8005\u4e0d\u662f\u5b8c\u6574\u7cfb\u7edf.   \u5bf9\u6bd4, \u5176\u5185\u5bb9\u5dee\u5f02,  system_other.img  \u4e2d, \u53ea\u6709 app \u548c  priv-app \u76ee\u5f55. system_other.img \u7684\u76ee\u5f55\u4e2d\u53ea\u5b58\u5728odex\u548cvdex\u6587\u4ef6, \u4e5f\u5c31\u662fapp\u4f18\u5316\u8fc7\u7684\u6587\u4ef6, \u5e76\u4e14\u989d\u5916\u591a\u4e00\u4e2a\u6587\u4ef6 system-other-odex-marker . \u8fd9\u4e2a\u6587\u4ef6\u662f\u4e2a\u7ebf\u7d22, \u6240\u4ee5, \u521d\u6b65\u53ef\u4ee5\u5224\u65ad, \u7cfb\u7edf\u542f\u52a8\u540e\u4e00\u5b9a\u4f1a\u4ece system_b \u5c06\u8fd9\u4e9b\u6570\u636e\u590d\u5236\u5230/data/\u4e0b.  \u4e0b\u9762\u6211\u4eec\u770b\u4e0b\u8fd9\u4e2a\u6587\u4ef6\u7684\u4f5c\u7528\u548c\u5982\u4f55copy.  on property:sys.cppreopt=requested   property:ro.boot.slot_suffix=_a\n    mount ext4 /dev/block/bootdevice/by-name/system_b /postinstall ro nosuid nodev noexec\n    exec - root -- /system/bin/cppreopts.sh /postinstall\n    # Optional script to copy additional preloaded content to data directory\n    exec - system system -- /system/bin/preloads_copy.sh /postinstall\n    umount /postinstall\n    setprop sys.cppreopt finished\n\non property:sys.cppreopt=requested   property:ro.boot.slot_suffix=_b\n    mount ext4 /dev/block/bootdevice/by-name/system_a /postinstall ro nosuid nodev noexec\n    exec - root -- /system/bin/cppreopts.sh /postinstall\n    # Optional script to copy additional preloaded content to data directory\n    exec - system system -- /system/bin/preloads_copy.sh /postinstall\n    umount /postinstall\n    setprop sys.cppreopt finished  \u5728\u542f\u52a8\u4e3a\u4efb\u4f55\u4e4b\u4e00\u65f6, \u4f1a\u4ece\u53e6\u4e00\u4e2aslot\u6302\u8f7d\u5230/postinstall, \u7136\u540e\u4f7f\u7528cppreopts.sh, \u5c06odexvdex\u6587\u4ef6\u62f7\u8d1d\u5230 /data/\ndalvik-cache/ isa / xiam, isa\u662f\u786c\u4ef6\u67b6\u6784(arm64/arm32).\n\u800c  preloads_copy.sh  \u4f1a\u5c06 system_other \u4e2d\u7684preloads\u6587\u4ef6\u62f7\u8d1d\u5230/data/preloads/ \u76ee\u5f55\u4e0b.  \u57fa\u4e8e\u4ee5\u4e0asystem\u7684\u673a\u5236, \u5728\u5237\u673a\u65f6, \u5b9e\u9645\u53ea\u5237\u5165\u4e00\u5957\u7cfb\u7edf\u5230active slot\u4e2d, \u7136\u540e\u4ece\u53e6\u4e00\u5957\u7cfb\u7edf\u4e2d\u7684system\u5206\u533a\u5c06\u4f18\u5316\u540e\u7684dex\u5305\u62f7\u8d1d\u5230data\u5206\u533a\u4e0b,. \u4e0e\u4e4b\u524d\u7684\u5dee\u5f02\u662f, \u8fde\u5e94\u7528\u7684\u7f16\u8bd1\u548c\u4f18\u5316\u90fd\u5728host\u7aef\u5b8c\u6210, android8\u7684\u542f\u52a8\u901f\u5ea6\u5c06\u975e\u5e38\u5feb.", 
            "title": "\u5237\u673a\u6587\u4ef6\u548c\u5237\u673a\u65b9\u5f0f "
        }, 
        {
            "location": "/android8-partiton-table/#_4", 
            "text": "\u4ecerecovery\u7684fstab\u4e2d,\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7684\u5206\u533a\u8868\u5982\u4e0b:  /dev/block/platform/soc/624000.ufshc/by-name/system_a\n/dev/block/platform/soc/624000.ufshc/by-name/system_b\n/dev/block/platform/soc/624000.ufshc/by-name/vendor_a\n/dev/block/platform/soc/624000.ufshc/by-name/vendor_b\n/dev/block/platform/soc/624000.ufshc/by-name/userdata\n/dev/block/platform/soc/624000.ufshc/by-name/boot_a\n/dev/block/platform/soc/624000.ufshc/by-name/boot_b  \u4f46\u4ee5\u4e0a\u5206\u533a\u8868\u5728\u4e3b\u7cfb\u7edf\u4e2d\u65e0\u6cd5\u770b\u5230, \u6216\u8005\u8bf4\u4e3b\u7cfb\u7edf\u4e2d\u53ea\u6709\u5728vendor\u4e0b\u5b58\u5728fstab, \u5176\u4ed6\u5730\u65b9\u5e76\u6ca1\u6709, \u800cvendor\u4e0b\u7684fstab\u5185\u5bb9\u5982\u4e0b, \u662f\u7531vendor\u5e95\u4e0b\u7684init.{device}.rc \u6302\u8f7d.  /dev/block/platform/soc/624000.ufshc/by-name/system     /                   ext4    ro,barrier=1                wait,slotselect,verify\n/dev/block/platform/soc/624000.ufshc/by-name/modem      /firmware/radio     vfat    ro,shortname=lower,uid=1000,gid=0,dmask=227,fmask=337,context=u:object_r:firmware_file:s0   wait,slotselect\n/dev/block/platform/soc/624000.ufshc/by-name/userdata   /data               ext4    noatime,nosuid,nodev,barrier=1,noauto_da_alloc  latemount,wait,check,formattable,fileencryption=ice,quota\n/dev/block/zram0                                        none                swap    defaults                    zramsize=536870912,max_comp_streams=4\n/dev/block/platform/soc/624000.ufshc/by-name/misc       /misc               emmc    defaults                    defaults\n/devices/*/xhci-hcd.0.auto/usb*                         auto                vfat    defaults                    voldmanaged=usb:auto  \u521d\u6b65\u5224\u65ad, \u5176\u6709\u7528\u7684\u5185\u5bb9\u662f\u7ed9vold\u7684\u6302\u8f7d\u4fe1\u606f\u548c\u57fa\u5e26\u5206\u533a. \u4f46\u4e0d\u7ba1\u600e\u4e48\u770b\u81f3\u5c11\u7f3a\u5c11\u4e86vendor\u6302\u8f7d\u7684\u4fe1\u606f. \u800c\u4e14fstab\u5728vendor\u5206\u533a\u4e0b, \u5219\u610f\u5473\u7740vendor\u7684\u6302\u8f7d\u5c06\u63d0\u524d\u5230\u548cboot\u540c\u4e2a\u7ea7\u522b. \u6ca1\u9519, \u65b0\u5f15\u5165\u4e86\u4e00\u4e2a early-mounted , \u800c\u5206\u533a\u8868\u662f\u5728 device tree \u4e2d, \u4e5f\u5c31\u662f\u542f\u52a8\u540e, \u5728  /proc/device-tree/firmware/android/fstab/vendor . \n\u4e0a\u6587\u7684fstab\u8fd8\u7ed9\u6211\u4eec\u4e00\u4e2a\u4fe1\u606f, \u6807\u5fd7\u4f4d slotselect , \u610f\u5473\u8fd9system\u5206\u533a\u662f\u5206A/B\u7cfb\u7edf\u7684\u5e76\u4e14\u7531init\u6839\u636eactive\u7684slot\u9009\u62e9\u5bf9\u5e94\u7684\u771f\u5b9e\u5206\u533a\u8def\u5f84(\u540e\u7f00'_a'\u6216'_b')\u8fdb\u884c\u6302\u8f7d.  \u6211\u4eec\u5728\u770b\u4e00\u773csystem\u5206\u533a, \u5176\u6302\u8f7d\u70b9\u662f / .  \u6ca1\u9519, \u5728Android8\u4e4b\u540e, system\u5206\u533a\u7684\u786e\u662f\u88ab\u6302\u8f7d\u5230 /, \u4e5f\u5c31\u662f\u8bf4, system\u5206\u533a\u5305\u542b\u4e86rootfs, \u5176\u5185\u5bb9\u5982\u4e0b.  total 1724\ndrwxr-xr-x. 21 root    root       4096 Sep  8 18:30 .\ndrwxrwxrwx  25 werther werther   32768 Sep 19 13:15 ..\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 acct\ndrwxrwx--x.  2 werther werther    4096 Sep  8 15:49 bt_firmware\nlrw-r--r--.  1 root    root         50 Sep  8 18:30 bugreports -  /data/user_de/0/com.android.shell/files/bugreports\nlrw-r--r--.  1 root    root         11 Sep  8 18:30 cache -  /data/cache\nlrw-r--r--.  1 root    root         13 Sep  8 18:30 charger -  /sbin/charger\ndr-x------.  2 root    root       4096 Sep  8 15:49 config\nlrw-r--r--.  1 root    root         17 Sep  8 18:30 d -  /sys/kernel/debug\ndrwxrwx--x.  2 werther werther    4096 Sep  8 15:49 data\nlrw-------.  1 root    root         23 Sep  8 18:30 default.prop -  system/etc/prop.default\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 dev\nlrw-r--r--.  1 root    root         15 Sep  8 18:30 dsp -  /vendor/lib/dsp\nlrw-r--r--.  1 root    root         11 Sep  8 18:30 etc -  /system/etc\ndrwxr-xr-x.  3 root    root       4096 Sep  8 15:49 firmware\n-rwxr-x---.  1 root       2000 1559136 Sep  8 18:11 init\n-rwxr-x---.  1 root       2000     996 Sep  8 15:49 init.environ.rc\n-rwxr-x---.  1 root       2000   26830 Sep  8 15:49 init.rc\n-rwxr-x---.  1 root       2000     141 Sep  8 15:49 init.recovery.marlin.rc\n-rwxr-x---.  1 root       2000    7623 Sep  8 15:49 init.usb.configfs.rc\n-rwxr-x---.  1 root       2000    5715 Sep  8 15:49 init.usb.rc\n-rwxr-x---.  1 root       2000     497 Sep  8 15:49 init.zygote32.rc\n-rwxr-x---.  1 root       2000     847 Sep  8 15:49 init.zygote64_32.rc\ndrwx------.  2 root    root      16384 Sep  8 18:30 lost+found\ndrwxr-xr-x.  2 root    werther    4096 Sep  8 15:49 mnt\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 oem\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 persist\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 postinstall\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 proc\ndrwxr-xr-x.  3 root    root       4096 Sep  8 15:48 res\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 root\ndrwxr-x---.  2 root       2000    4096 Sep  8 18:11 sbin\nlrw-r--r--.  1 root    root         21 Sep  8 18:30 sdcard -  /storage/self/primary\ndrwxr-x--x.  2 root       1028    4096 Sep  8 15:49 storage\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 sys\ndrwxr-xr-x. 16 root    root       4096 Sep  8 18:30 system\n-rw-r--r--.  1 root    root       4849 Sep  8 15:49 ueventd.rc\ndrwxr-xr-x.  2 root       2000    4096 Sep  8 15:49 vendor\n-rw-r--r--.  1 root    root        524 Sep  8 15:50 verity_key  \u90a3\u4e48, \u8fd9\u4e9b\u53d8\u5316\u662f\u5982\u4f55\u505a\u5230\u7684, \u5e76\u4e14, \u4e3a\u4ec0\u4e48system.img\u4e2d\u8981\u5305\u542brootfs? \u6211\u4eec\u5728\u540e\u6587\u4f1a\u63d0\u5230.  \n\u6211\u4eec\u6765\u770b\u4e0bAndroid\u5b98\u65b9\u7f51\u7ad9\u7ed9\u51fa\u7684\u4ece\u666e\u901a\u5206\u533a\u5207\u6362\u5230A/B\u5206\u533a, \u5bf9\u4e8e\u5206\u533a\u5927\u5c0f\u7684\u5f71\u54cd.     Pixel Partitions Size  A/B  Non-A/B      Bootloader  50*2  50    Boot  32*2  32    Recovery  0  32    Cache  0  100    Radio  70*2  70    Vendor  300*2  300    System  2048*2  4096    Total  5000  4680     \u4ece\u8fd9\u5f20\u8868\u4e0a,\u6211\u4eec\u770b\u5230pixel\u5206\u533a\u7684A/B\u7cfb\u7edf\u5305\u62ec bootloader, boot, radio, vendor, system.", 
            "title": "\u6e90\u7801\u548c\u5206\u533a\u5927\u5c0f "
        }, 
        {
            "location": "/android8-partiton-table/#_5", 
            "text": "\u8fd9\u91cc\u603b\u7ed3\u4e0b\u4ee5\u4e0a\u5206\u533a\u8868\u7684\u6539\u53d8:   \u6ca1\u6709recovery\u5206\u533a\u548ccache\u5206\u533a.  vendor\u5206\u533a\u63d0\u524d\u6302\u8f7d(\u4e0d\u662f\u5728fstab\u6587\u4ef6\u4e2d\u4e2d\u6302\u8f7d, \u5728 device tree\u4e2d\u6307\u5b9a)  \u771f\u5b9e\u5206\u533a\u540d\u5b57\u5b58\u5728 _a \u548c _b \u540e\u7f00.", 
            "title": "\u5206\u533a\u8868\u6539\u53d8\u5bf9\u7cfb\u7edf\u903b\u8f91\u7684\u5f71\u54cd"
        }, 
        {
            "location": "/android8-partiton-table/#_6", 
            "text": "early-mounted \u4ee3\u7801\u89c1  init_first_stage.cpp \n\u5728init\u7b2c\u4e00\u6b21\u542f\u52a8\u65f6, \u4f1a\u8c03\u7528 DoFirstStageMount , \u548c\u4e00\u4e9b\u73af\u5883\u7684\u914d\u7f6e. \u5b8c\u6210\u540e\u518d\u6b21\u8fd0\u884cinit, \u8fdb\u5165\u7b2c\u4e8c\u9636\u6bb5\u7684\u6267\u884c. \u800c\u7b2c\u4e8c\u9636\u6bb5\u5b9e\u9645\u4e0a\u5c31\u662f\u8ddf\u4ee5\u524d\u7684Android\u5904\u7406\u65b9\u5f0f\u4e00\u6837.  \u6302\u8f7d\u65f6\u9009\u62e9slot\u7684\u4ee3\u7801\u89c1init\u7684 DoFirstStageMount \n\u5237\u673a\u65f6\u9009\u62e9slog\u7684\u4ee3\u7801\u89c1fastboot, \u4e5f\u53ef\u89c1\u4e0a\u9762\u8d34\u7684\u4ee3\u7801.", 
            "title": " \u6302\u8f7d\u5206\u533a\u65b9\u5f0f\u6539\u53d8 "
        }, 
        {
            "location": "/android8-partiton-table/#bootrecovery", 
            "text": "\u9996\u5148, \u5347\u7ea7\u5207\u6362\u6210A/B\u65e0\u7f1d\u5347\u7ea7, \u5177\u4f53\u8bf4\u660e\u8bf7\u53c2\u8003recovery8\u7684\u6587\u6863.\n\u4f46\u662f, recovery\u7684\u529f\u80fd\u5e76\u4e0d\u6b62\u662f\u5347\u7ea7, \u8fd8\u5305\u62ec\u6062\u590d, \u5982\u5176\u540d\u5b57.  \u4e3a\u4e86\u652f\u6301\u6062\u590d\u51fa\u5382\u8bbe\u7f6e\u7684\u529f\u80fd, recovery\u7684\u529f\u80fd\u88ab\u96c6\u6210\u5230\u4e86boot\u4e2d, bootloader\u5728\u8fdb\u5165recovery\u7684\u65f6\u5019, \u8fdb\u7684\u662fboot\u5206\u533a, \u4f46\u662f\u4f20\u7684\u53c2\u6570\u4e0d\u5305\u542b skip_initramfs . \n\u6b63\u5e38\u542f\u52a8\u5230android\u7cfb\u7edf\u65f6\u7684\u542f\u52a8\u53c2\u6570.  skip_initramfs rootwait ro init=/init root= /dev/dm-0 dm=system none ro,0 1 android-verity  public-key-id   path-to-system-partition   \u8fd9\u91cc\u8bbe\u7f6e\u7684 skip_initramfs , \u662f\u901a\u77e5\u5185\u6838, \u8df3\u8fc7boot\u4e2d\u7684ramdisk. \u8fd9\u4e2a\u53c2\u6570\u662fandroid\u6dfb\u52a0\u7684, \u6807\u51c6\u5185\u6838\u4e0d\u652f\u6301. \n\u7136\u540e\u6211\u4eec\u89e3\u6790\u4e0b\u5269\u4f59\u53c2\u6570, \u4e3b\u8981\u662froot\u53c2\u6570. \u8fd9\u91cc\u53ef\u4ee5\u770b\u5230, root\u6307\u5b9a\u7684\u662fsystem\u5206\u533a. \u4e5f\u5c31\u662f\u8bf4, \u6839\u5206\u533a\u5c31\u662f\u4ee5system\u5206\u533a. \n\u7136\u540e\u6211\u4eec\u770b\u4e0b\u542f\u52a8recovery\u65f6\u7684\u53c2\u6570.  rootwait init=/init ro  \u8fd9\u91cc\u56e0\u4e3a\u6ca1\u6307\u5b9a skip_initramfs , \u6240\u4ee5, \u4f1a\u76f4\u63a5\u8bfb\u53d6boot\u5206\u533a\u4e2d\u7684ramdisk.  \u8fdb\u4e00\u6b65\u7684\u7406\u89e3\u5c31\u662f, boot.img\u5305\u542b\u7684\u662f\u4ee5\u524drecovery\u7684\u5185\u5bb9, \u529f\u80fd\u53ea\u6709\u6062\u590d\u51fa\u5382\u8bbe\u7f6e. \u800c\u539f\u6765\u7684boot\u4e0esystem\u5408\u5e76\u4e3asystem.img.", 
            "title": "boot\u5305\u542brecovery\u529f\u80fd"
        }, 
        {
            "location": "/android8-partiton-table/#_7", 
            "text": "https://source.android.com/devices/tech/ota/ab_implement  \u5fc5\u987b\u5b9a\u4e49\u5b58\u6863\u53c2\u6570\u5982\u4e0b:      AB_OTA_UPDATER := true\n    AB_OTA_PARTITIONS := \\\n      boot \\\n      system \\\n      vendor\n    *and other partitions updated through update_engine (radio, bootloader, etc.)*\n    BOARD_BUILD_SYSTEM_ROOT_IMAGE := true\n    TARGET_NO_RECOVERY := true\n    BOARD_USES_RECOVERY_AS_BOOT := true\n    PRODUCT_PACKAGES += \\\n      update_engine \\\n      update_verifier\n\n*For an example, refer to /device/google/marlin/+/android-7.1.0_r1/device-common.mk. You can optionally conduct the post-install (but pre-reboot) dex2oat step described in Compiling. *  \u5fc5\u987b\u4e0d\u5b9a\u4e49\u7684\u53c2\u6570\u5982\u4e0b:      BOARD_RECOVERYIMAGE_PARTITION_SIZE\n    BOARD_CACHEIMAGE_PARTITION_SIZE\n    BOARD_CACHEIMAGE_FILE_SYSTEM_TYPE", 
            "title": "\u7f16\u8bd1\u53c2\u6570\u6539\u53d8"
        }, 
        {
            "location": "/Android-AB-system-update/", 
            "text": "\u6765\u6e90:https://pengzhangdev.github.io/Android-AB-system-update/\n\n\n A/B\u7cfb\u7edf\u7b80\u4ecb \n\n\n\n\u987e\u540d\u601d\u4e49, \nA/B\n\u7cfb\u7edf\u5c31\u662f\u6307\u7ec8\u7aef\u8bbe\u5907\u4e0a\u5b58\u5728\u4e24\u5957\u7cfb\u7edf,(userdata\u53ea\u6709\u4e00\u4efd, \u88ab\u4e24\u5957\u7cfb\u7edf\u5171\u7528). \u7b80\u5355\u6765\u8bb2, \u53ef\u4ee5\u7406\u89e3\u4e3a, \u5b58\u5728\u4e00\u5957\u7cfb\u7edf\u5206\u533a, \u4e00\u5957\u5907\u4efd\u5206\u533a, \u4e24\u5957\u7cfb\u7edf\u90fd\u53ef\u4ee5\u88ab\u542f\u52a8, \u4e24\u5957\u7cfb\u7edf\u7684\u7248\u672c\u53f7\u53ef\u4ee5\u4e00\u6837, \u4e5f\u53ef\u4ee5\u4e00\u5957\u65e7, \u4e00\u5957\u65b0. \u800c\u5347\u7ea7\u5c31\u662f\u5c06\u65e7\u7684\u7cfb\u7edf\u5347\u7ea7\u5230\u65b0\u7248\u672c.\n\n\nA/B\u7cfb\u7edf\u5b9e\u73b0\u4e86\u65e0\u7f1d\u5347\u7ea7(Seamless System Updates), \u5b58\u5728\u5982\u4e0b\u7279\u70b9:\n\n\n\n\n\u7ec8\u7aef\u8bbe\u5907\u5728\u51fa\u5382\u65f6\u6709\u4e24\u5957\u8bbe\u5907\u53ef\u4ee5\u5de5\u4f5c, \u5728\u5347\u7ea7\u51fa\u73b0\u5f02\u5e38\u6216\u8005\u51fa\u9519\u65f6, \u59cb\u7ec8\u786e\u4fdd\u7cfb\u7edf\u5b58\u5728\u4e00\u5957\u8bbe\u5907\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c.\n\n\n\u7cfb\u7edf\u5728\u540e\u53f0\u8fdb\u884c\u5347\u7ea7, \u66f4\u65b0\u5230\u53e6\u4e00\u5957\u7cfb\u7edf, \u7528\u6237\u4e0d\u4f1a\u88ab\u6253\u65ad. \u5728\u66f4\u65b0\u5b8c\u6210\u540e, \u7528\u6237\u5728\u4e0b\u6b21\u91cd\u542f\u624b\u673a\u65f6, \u5c31\u4f1a\u8fdb\u5165\u65b0\u7cfb\u7edf.\n\n\n\u5728 dm-verity \u6216\u8005\u5176\u4ed6\u6821\u9a8c\u65b9\u5f0f\u68c0\u6d4b\u5230\u7cfb\u7edf\u987a\u574f\u6216\u5f02\u5e38\u540e, \u53ef\u4ee5\u91cd\u542f\u56de\u5230\u5347\u7ea7\u524d\u7684\u7cfb\u7edf, \u786e\u4fdd\u7528\u6237\u4f7f\u7528\u4e0d\u53d7\u5f71\u54cd.\n\n\n\n\nAndroid8.0\u7684\u4ee3\u7801\u7f16\u8bd1\u65f6, \u5728BoardConfig\u6709\u5bf9\u5e94\u7684\u9009\u9879\u6765\u63a7\u5236\u662f\u7f16\u8bd1\u6210A/B\u7cfb\u7edf\u8fd8\u662f\u6b63\u5e38\u5355\u7cfb\u7edf. \u7531\u4e8e\u65b0\u7cfb\u7edf\u8ddf\u539f\u6765\u7684OTA\u5347\u7ea7\u7cfb\u7edf\u5b58\u5728\u5927\u4e0d\u540c, \u5bfc\u81f4\u65e0\u6cd5\u901a\u8fc7\u4ee5\u524d\u7684OTA\u5347\u7ea7\u65b9\u5f0f(\u5b89\u5168\u5730)\u5347\u7ea7\u5230A/B\u7cfb\u7edf.\n\n\n\u800cA/B\u7cfb\u7edf\u5347\u7ea7, \u662f\u7531\u8fd0\u884c\u4e8eAndroid\u540e\u53f0\u7684\nupdate_engine\n\u548c \nslot a\n, \nslot b\n\u4e24\u5957\u7cfb\u7edf\u5171\u540c\u5b8c\u6210. \u5728\u542f\u52a8\u5176\u4e2d\u4e00\u5957\u7cfb\u7edf\u7684\u60c5\u51b5\u4e0b, \nupdate_engine\n\u5728\u540e\u53f0\u4e0e\u670d\u52a1\u5668\u901a\u4fe1\u4e0b\u8f7d\u5347\u7ea7\u6d41\u5e76\u66f4\u65b0\u5230\u53e6\u4e00\u5957\u7cfb\u7edf.\n\n\nA/B \u7cfb\u7edf\u5347\u7ea7\u4e3b\u8981\u6d89\u53ca\u5982\u4e0b4\u4e2a\u65b9\u9762:\n\n\n\n\n\u5206\u533a\u9009\u62e9(slots), \u5373\u9009\u62e9\u54ea\u4e2a\u7cfb\u7edf.\n\n\nupdate_engine\n, \u5373\u5347\u7ea7\u6d41\u4e0b\u8f7d\u548c\u5347\u7ea7\n\n\nbootloader\u4ea4\u4e92, \u5373\u5982\u4f55\u901a\u77e5bootloader\u5207\u6362slot\n\n\nota\u5305\u751f\u6210.\n\n\n\n\n\n \u5206\u533a\u9009\u62e9 \n\n\n\n\n\u5206\u533a\u8868\u548c\u5206\u533a\u5185\u5bb9\u53d8\u5316\n\n\n\n\n\u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u8003 \nAndroid8 \u5206\u533a\u8868\u548c\u5206\u533a\u76f8\u5173\u64cd\u4f5c\n. \u8fd9\u91cc\u7b80\u5355\u603b\u7ed3\u4e0b\u5206\u533a\u8868\u4e0a\u8ddf\u5355\u7cfb\u7edf\u7684\u5dee\u5f02.\n\u8fd9\u91cc\u4ee5boot,system, vendor\u548cmodem\u5b58\u5728\u4e24\u5957\u7cfb\u7edf\u4e3a\u4f8b\u5b50, \u5176\u4f59\u5206\u533a\u6309\u7167\u6700\u5c0f\u5206\u533a\u8868.\n\n\n\n\n\n\n\n\n\u5355\u7cfb\u7edf\u5206\u533a\u8868\n\n\nA/B\u7cfb\u7edf\u5206\u533a\u8868\n\n\n\u529f\u80fd\u63cf\u8ff0\n\n\n\n\n\n\n\n\n\n\nbootloader\n\n\nbootloader\n\n\n\u5f15\u5bfclinux\u7cfb\u7edf\n\n\n\n\n\n\nmisc\n\n\nmisc\n\n\nAndroid\u7cfb\u7edf\u4e0erecovery, bootloade\u901a\u4fe1\u7684\u6570\u636e\n\n\n\n\n\n\nboot\n\n\n-\n\n\n\u5b58\u653eAndroid\u7684kernel\u548cramdisk\n\n\n\n\n\n\n-\n\n\nboot_a\n\n\n\u5b58\u653eAndroid\u7684kernel\u548c\u5355\u7cfb\u7edf\u4e2drecovery\u7684ramdisk\n\n\n\n\n\n\n-\n\n\nboot_b\n\n\n\u5b58\u653eAndroid\u7684kernel\u548c\u5355\u7cfb\u7edf\u4e2drecovery\u7684ramdisk\n\n\n\n\n\n\nsystem\n\n\n-\n\n\nAndroid\u7cfb\u7edf\u5e94\u7528, \u5e93\u548c\u8d44\u6e90\u6587\u4ef6.\n\n\n\n\n\n\n-\n\n\nsystem_a\n\n\n\u5b58\u653e\u5355\u7cfb\u7edfboot\u4e2d\u7684ramdisk\u548csystem\u4e2d\u7684\u5e94\u7528, \u5e93\u548c\u8d44\u6e90\u6587\u4ef6\n\n\n\n\n\n\n-\n\n\nsystem_b\n\n\n\u5b58\u653e\u5355\u7cfb\u7edfboot\u4e2d\u7684ramdisk\u548csystem\u4e2d\u7684\u5e94\u7528, \u5e93\u548c\u8d44\u6e90\u6587\u4ef6\n\n\n\n\n\n\n-\n\n\nvendor_a\n\n\n\u5b58\u653e\u5382\u5546\u7684\u914d\u7f6e, \u53ef\u6267\u884c\u7a0b\u5e8f, \u5e93, \u76ee\u5f55\u7ed3\u6784\u4e0e/system/\u4e00\u81f4\n\n\n\n\n\n\n-\n\n\nvendor_b\n\n\n\u5b58\u653e\u5382\u5546\u7684\u914d\u7f6e, \u53ef\u6267\u884c\u7a0b\u5e8f, \u5e93, \u76ee\u5f55\u7ed3\u6784\u4e0e/system/\u4e00\u81f4\n\n\n\n\n\n\ncache\n\n\n-\n\n\n\u4e34\u65f6\u5b58\u653e\u6570\u636e, \u901a\u5e38\u4e34\u65f6\u5b58\u653e\u4e0b\u8f7d, \u5907\u4efd\u548c\u5347\u7ea7\u5305\n\n\n\n\n\n\nrecovery\n\n\n-\n\n\n\u5b58\u653erecovery\u7cfb\u7edf\u7684kernel\u548cramdisk\n\n\n\n\n\n\nuserdata\n\n\nuserdata\n\n\n\u5b58\u653e\u7528\u6237\u6570\u636e\n\n\n\n\n\n\n\n\n\u6240\u8c13\u7684A/B\u7cfb\u7edf\u5206\u533a, \u5c31\u662f\u5728\u539f\u6709\u5206\u533a\u540d\u5b57\u540e\u5417\u6dfb\u52a0\n_a\n \u548c \n_b\n, \u5728\u5237\u673a, \u6216\u8005\u7cfb\u7edf\u542f\u52a8\u7684\u65f6\u5019, \u6839\u636ebootloader\u7684\u53c2\u6570\u6dfb\u52a0\u540e\u7f00, \u9009\u62e9\u6b63\u786e\u7684\u7cfb\u7edf. misc\u5206\u533a\u5728A/B\u7cfb\u7edf\u4e2d\u53d8\u6210\u4e00\u4e2a\u53ef\u6709\u53ef\u65e0\u7684\u5b58\u5728, \u56e0\u4e3a\u5176\u529f\u80fd\u53ea\u662f\u4f20\u9012\u6062\u590d\u51fa\u5382\u8bbe\u7f6e\u7684\u53c2\u6570, \u800crecovery\u7684\u529f\u80fd\u4e5f\u53ea\u5269\u4e0b\u6062\u590d\u51fa\u5382\u8bbe\u7f6e, \u6240\u4ee5, \u672c\u8d28\u4e0a, \u6ca1\u5fc5\u8981\u518d\u57fa\u4e8emisc\u4f20\u9012\u53c2\u6570\u4e86.\n\n\n\n\u7cfb\u7edf\u5206\u533a\u5c5e\u6027\n\n\n\nbootloader\u4e3a\u4e86\u5224\u65ad\u4e00\u4e2a\u7cfb\u7edf(slot)\u662f\u5426\u4e3a\u53ef\u4ee5\u542f\u52a8\u7684\u72b6\u6001, \u9700\u8981\u4e3a\u5176\u5b9a\u4e49\u5bf9\u5e94\u7684\u5c5e\u6027(\u72b6\u6001). \u5176\u72b6\u6001\u8bf4\u660e\u5982\u4e0b:\n\n\n\n\nactive. \u6d3b\u52a8\u5206\u533a\u6807\u8bc6, \u6392\u4ed6, \u4ee3\u8868\u8be5\u5206\u533a\u4e3a\u542f\u52a8\u5206\u533a, bootloader\u603b\u4f1a\u9009\u62e9\u8be5\u5206\u533a.\n\n\nbootable. \u8868\u793a\u8be5slot\u7684\u5206\u533a\u5b58\u5728\u4e00\u5957\u53ef\u80fd\u53ef\u4ee5\u542f\u52a8\u7684\u7cfb\u7edf.\n\n\nsuccessful. \u8868\u793a\u8be5slot\u7684\u7cfb\u7edf\u80fd\u6b63\u5e38\u542f\u52a8.\n\n\nunbootable. \u4ee3\u8868\u8be5\u5206\u533a\u635f\u574f\u7684, \u65e0\u6cd5\u542f\u52a8, \u5728\u5347\u7ea7\u8fc7\u7a0b\u603b\u88ab\u6807\u8bb0, \u8be5\u6807\u8bb0\u7b49\u6548\u4e8e\u4ee5\u4e0a\u6807\u8bb0\u88ab\u6e05\u7a7a. \u800cactive\u6807\u8bb0\u4f1a\u5c06\u8be5\u6807\u8bb0\u6e05\u7a7a.\n\n\n\n\nslot a\n \u548c \nslot b\n, \u53ea\u6709\u4e00\u4e2a\u662factive, \u5b83\u4eec\u53ef\u4ee5\u540c\u65f6\u6709 bootable \u548c successful \u5c5e\u6027.\n\n\n\n\n\nbootloader\u68c0\u6d4b\u52301\u4e2a\u6216\u80052\u4e2aslot\u90fd\u662fbootable\u7684\u72b6\u6001.\n\n\n\u9009\u62e9active\u7684slot\u6216\u8005\u9009\u62e9successful\u7684slot\u8fdb\u884c\u5c1d\u8bd5\u542f\u52a8.\n\n\n\u542f\u52a8\u6210\u529f\u7684\u6807\u8bb0\u662f, dm-verity \u6210\u529f.\n\n\n\u7531\u4e8e\u542f\u52a8\u6210\u529f, \u5219\u8be5slot\u88ab\u6807\u8bb0\u4e3asuccessful\u548cactive\n\n\n\u7531\u4e8e\u542f\u52a8\u5931\u8d25, \u5219\u8bbe\u7f6e\u8be5slot\u4e3aunbootable, \u5e76\u8bbe\u7f6e\u53e6\u4e00\u4e2aslot\u4e3aactive, \u8fdb\u884c\u4e0b\u4e00\u6b21\u5c1d\u8bd5.\n\n\n\n\n\n\n\n\n\u5347\u7ea7\u6d41\u4e0b\u8f7d\u548c\u5347\u7ea7\n\n\n\n\n\u9996\u5148, \u6211\u4eec\u770b\u4e0b\u5347\u7ea7\u5305\u7684\u5185\u5bb9. \u5728A/B\u5347\u7ea7\u7684\u60c5\u51b5\u4e0b, \u5347\u7ea7\u5305\u5185\u5bb9\u5982\u4e0b:\n\n\nPath = aosp_marlin-ota-eng.builder.zip\nType = zip\nComment = signed by SignApk\nPhysical Size = 384694679\n\n   Date      Time    Attr         Size   Compressed  Name\n------------------- ----- ------------ ------------  ------------------------\n2009-01-01 00:00:00 .....          360          360  META-INF/com/android/metadata\n2009-01-01 00:00:00 .....          107          107  care_map.txt\n2009-01-01 00:00:00 .....    384690699    384690699  payload.bin\n2009-01-01 00:00:00 .....          154          154  payload_properties.txt\n2009-01-01 00:00:00 .....         1675          943  META-INF/com/android/otacert\n------------------- ----- ------------ ------------  ------------------------\n                             384692995    384692263  5 files, 0 folders\n\n\n\n\n\n\n\n\u4e0b\u8f7d\u548c\u5347\u7ea7\u7a0b\u5e8f\u662f\nupdate_engine\n, \u6765\u81eachrome os, \u4ee3\u7801\u4e2d\u5927\u91cf\u5b58\u5728dbus\u548cchrome os\u7684\u75d5\u8ff9, \u800cAndroid\u4e0a\u6539\u7a0b\u5e8f\u662f\u57fa\u4e8ebinde\u8fdb\u884c\u901a\u4fe1. \u4e0e\u539f\u5148\u7684ota\u5347\u7ea7\u4e0d\u540c, \u8be5\u5347\u7ea7\u5305\u4e2d\u4e0d\u5305\u542bupdater, \u4e5f\u5c31\u662f\u8bf4, \u5347\u7ea7\u7684\u903b\u8f91\u5728\u8bbe\u5907\u7aef\u800c\u4e0d\u662f\u5728\u5347\u7ea7\u5305\u4e2d. \u5982\u679c\u719f\u6089ota\u5347\u7ea7\u7684\u8bdd, \u8fd9\u4e2a\u5347\u7ea7\u5305\u4e2d\u7684\u6570\u636e\u8ddf\u5757\u5347\u7ea7\u6570\u636e\u51e0\u4e4e\u4e00\u6837, \u521d\u6b65\u5224\u65ad\u7528\u7684\u662f\u5757\u5347\u7ea7.\n\u90a3\u4e48, \u5982\u679c\u6709\u65b0\u7684\u9700\u6c42, \u6bd4\u5982\u6b64\u6b21\u66f4\u65b0\u9700\u8981\u8c03\u6574\u6570\u636e\u5e93, \u662f\u5982\u4f55\u505a\u5230\u7684? \u8bf7\u67e5\u770b\u540e\u6587\u7b2c\u4e8c\u6b65\u5347\u7ea7.\n\n\n\n\u6574\u4e2a\u5347\u7ea7\u5206\u4e3a\u4e94\u6b65:\n\n\n\n\n\u4e0b\u8f7d\u5347\u7ea7\u5305, \u6216\u8005\u5347\u7ea7\u6d41. Android8 \u65b0\u652f\u6301\u4e86\u6d41\u5f0f\u5347\u7ea7, \u53ef\u4ee5\u8fb9\u4e0b\u8fb9\u5347.\n\n\n\u7b2c\u4e00\u6b65\u5347\u7ea7. \u4e5f\u5c31\u662f, \nupdate_engine\n\u6267\u884c\u7684\u5347\u7ea7\u903b\u8f91, \u57fa\u672c\u7684\u6570\u636e\u5199\u5165.\n\n\n\u6821\u9a8c\u5199\u5165\u6570\u636e. \u786e\u4fdd\u4e0a\u4e00\u6b65\u5199\u5165\u6570\u636e\u53ef\u9760\u5b8c\u6574.\n\n\n\u7b2c\u4e8c\u6b65\u5347\u7ea7. \u4e5f\u5c31\u662f, \u6302\u8f7d\u65b0\u70e7\u5199\u7684\u5206\u533a, \u5e76\u6267\u884c\u5176\u4e2d\u7684\u6307\u5b9a\u811a\u672c(\u7a0b\u5e8f)\u8fdb\u884c\u540e\u7eed\u66f4\u65b0\u64cd\u4f5c.\n\n\n\u5e94\u7528\u4f18\u5316.  \u7531\u4e8e\u5b58\u5728A/B\u65b0\u65e7\u4e24\u5957\u7cfb\u7edf, \u6240\u4ee5, data\u5e95\u4e0b\u4e5f\u5b58\u5728\u4e24\u5957odex/vdex.\n\n\n\n\n\u524d4\u6b65, \u57fa\u4e8e\u4e00\u79cdpipe\u7684\u6846\u67b6\u5b9e\u73b0, \u6bcf\u4e00\u6b65\u90fd\u662f\u4e00\u4e2aaction, \u522b\u94fe\u63a5\u5230actio list\u4e2d, \u524d\u540e\u4e24\u4e2aaction\u901a\u8fc7pipe\u673a\u5236\u8fdb\u884c\u6570\u636e\u901a\u4fe1. \u4e5f\u5c31\u662f\u8bf4, \u524d\u4e00\u4e2aaction\u7684\u8f93\u51fa\u9ed8\u8ba4\u53d8\u6210\u540e\u4e00\u4e2aaction\u7684\u8f93\u5165. action\u7684\u6267\u884c\u51fd\u6570\u662f\nPerformAction()\n. \u901a\u8fc7\nHasInputObject()\n\u548c\nHasOutputPipe()\n\u5224\u65ad\u662f\u5426\u6709\u8f93\u5165\u548c\u8f93\u51fa\u6d41, \u800c\nGetInputObject()\n\u63a5\nSetOutputObject()\n\u5206\u522b\u662f\u8bfb\u53d6\u548c\u5199\u5165pipe.\n\n\nupdate_engine\n \u7684 Androidmk\u76ee\u6807, \u4f9d\u8d56\u548c\u5bf9\u5e94\u6e90\u7801\u6587\u4ef6\u5982\u4e0b.\n\n\n# \u9759\u6001\u5e93\u6a21\u5757\nSTATIC_LIBRARIES:\n    update_metadata-protos      (host, target)\n    libpayload_consumer         (host, target)\n    libupdate_engine_android    (target)\n    libpayload_generator        (host, target)\n\n# \u53ef\u6267\u884c\u6a21\u5757\nEXECUTABLES:\n    update_engine           (target)\n    update_engine_sideload      (target)\n    update_engine_client        (target)\n    delta_generator         (host)\n\n# \u5171\u4eab\u5e93\u6a21\u5757\nSHARED_LIBRARIES:\n    libupdate_engine_client     (target)\n\n# \u9884\u7f16\u8bd1\u6a21\u5757\nPREBUILT:\n    updater.json            (target)\n    brillo_update_payload       (host)\n\n\n\n\n\n\u4ece\u4e0a\u6587\u7684\u76ee\u6807\u53ef\u4ee5\u83b7\u53d6\u5982\u4e0b\u4fe1\u606f:\n\n\n\n\npayload \u4e2d\u7684\u6587\u4ef6\u7ed3\u6784\u662fprotos\n\n\n\u53ef\u6267\u884c\u6587\u4ef6\u662f \nupdate_engine\n, \u800c \nupdate_engine_client\n \u662f\u5ba2\u6237\u7aef, \nupdate_engine_sideload\n \u662frecovery\u6a21\u5f0f\u4e0b\u901a\u8fc7usb\u66f4\u65b0.\n\n\ndelta_generator\n \u7528\u4e8e\u751f\u6210payload\n\n\n\u5b8c\u6574\u7684Android.mk\u4e2d, \u5b58\u5728\u6807\u8bb0\u4e3a\nlocal_use_omaha\n, \u53ea\u6709\u5728 \nPRODUCT_IOT\n \u7269\u8054\u7f51\u65f6, \u624d\u542f\u7528, \u7f16\u8bd1\u83b7\u5f97\u7684\u662fdbus\u7248\u672c\u7684\nupdate_engine\n.\n\n\n\n\n\u4f9d\u8d56\u5173\u7cfb\u5982\u4e0b:\n\n\nupdate_engine (target)\n  --\n libupdate_engine_android\n    --\n libpayload_consumer\n      --\n update_metadata-protos\n\nupdate_engine_sideload (target)\n  --\n update_engine_sideload\n    --\n update_metadata-protos\n\nupdate_engine_client (target)\n\ndelta_generator (host)\n  --\n libpayload_generator\n    --\n libpayload_consumer\n      --\n update_metadata-protos\n\n\n\n\n\n\u6e90\u7801\u5217\u8868\u5982\u4e0b:\n\n\nupdate_metadata-protos (STATIC_LIBRARIES)\n  --\n update_metadata.proto\n\nlibpayload_consumer (STATIC_LIBRARIES)\n  --\n common/action_processor.cc\n      common/boot_control_stub.cc\n      common/clock.cc\n      common/constants.cc\n      common/cpu_limiter.cc\n      common/error_code_utils.cc\n      common/hash_calculator.cc\n      common/http_common.cc\n      common/http_fetcher.cc\n      common/file_fetcher.cc\n      common/hwid_override.cc\n      common/multi_range_http_fetcher.cc\n      common/platform_constants_android.cc\n      common/prefs.cc\n      common/subprocess.cc\n      common/terminator.cc\n      common/utils.cc\n      payload_consumer/bzip_extent_writer.cc\n      payload_consumer/delta_performer.cc\n      payload_consumer/download_action.cc\n      payload_consumer/extent_writer.cc\n      payload_consumer/file_descriptor.cc\n      payload_consumer/file_writer.cc\n      payload_consumer/filesystem_verifier_action.cc\n      payload_consumer/install_plan.cc\n      payload_consumer/payload_constants.cc\n      payload_consumer/payload_verifier.cc\n      payload_consumer/postinstall_runner_action.cc\n      payload_consumer/xz_extent_writer.cc\n\nlibupdate_engine_android (STATIC_LIBRARIES)\n  --\n binder_bindings/android/os/IUpdateEngine.aidl\n      binder_bindings/android/os/IUpdateEngineCallback.aidl\n      binder_service_android.cc\n      boot_control_android.cc\n      certificate_checker.cc\n      daemon.cc\n      daemon_state_android.cc\n      hardware_android.cc\n      libcurl_http_fetcher.cc\n      network_selector_android.cc\n      proxy_resolver.cc\n      update_attempter_android.cc\n      update_status_utils.cc\n      utils_android.cc\n\nupdate_engine (EXECUTABLES)\n  --\n main.cc\n\nupdate_engine_sideload (EXECUTABLES)\n  --\n boot_control_android.cc\n      hardware_android.cc\n      network_selector_stub.cc\n      proxy_resolver.cc\n      sideload_main.cc\n      update_attempter_android.cc\n      update_status_utils.cc\n      utils_android.cc\n      boot_control_recovery_stub.cc\n\nupdate_engine_client (EXECUTABLES)\n  --\n binder_bindings/android/os/IUpdateEngine.aidl\n      binder_bindings/android/os/IUpdateEngineCallback.aidl\n      common/error_code_utils.cc\n      update_engine_client_android.cc\n      update_status_utils.cc\n\nlibpayload_generator (SHARED_LIBRARIES)\n  --\n payload_generator/ab_generator.cc\n      payload_generator/annotated_operation.cc\n      payload_generator/blob_file_writer.cc\n      payload_generator/block_mapping.cc\n      payload_generator/bzip.cc\n      payload_generator/cycle_breaker.cc\n      payload_generator/delta_diff_generator.cc\n      payload_generator/delta_diff_utils.cc\n      payload_generator/ext2_filesystem.cc\n      payload_generator/extent_ranges.cc\n      payload_generator/extent_utils.cc\n      payload_generator/full_update_generator.cc\n      payload_generator/graph_types.cc\n      payload_generator/graph_utils.cc\n      payload_generator/inplace_generator.cc\n      payload_generator/payload_file.cc\n      payload_generator/payload_generation_config.cc\n      payload_generator/payload_signer.cc\n      payload_generator/raw_filesystem.cc\n      payload_generator/tarjan.cc\n      payload_generator/topological_sort.cc\n      payload_generator/xz_android.cc\n\ndelta_generator (EXECUTABLES)\n  --\n payload_generator/generate_delta_main.cc\n\n\n\n\n\n \u4e0b\u8f7d \n\n\n\u4e0b\u8f7d\u76f8\u5173\u4e0e\u670d\u52a1\u5668\u4ea4\u4e92\u7684\u903b\u8f91: \ndelta_performer.cc\n\n\n\u5347\u7ea7\u6d41(\u5305)\u7684\u4e0b\u8f7d, \u5206\u4e3a\u4e24\u4e2a\u6a21\u5f0f:\n\n\n\n\n\u4e0b\u8f7dzip\u5305\u5230data\u5206\u533a.\n\n\n\u4e0b\u8f7d\u5347\u7ea7\u6d41, \u8fb9\u4e0b\u8fb9\u5347\u7ea7.\n\n\n\n\n( \u4ecechrome os\u4ee3\u7801\u770b, \u5176\u5347\u7ea7\u670d\u52a1\u5668\u662fomaha server, \u53ef\u4ee5\u53c2\u8003\u770b\u4e0b\u5bf9\u4e8e\u6211\u4eec\u7684\u5347\u7ea7\u670d\u52a1\u5668\u662f\u5426\u6709\u5e2e\u52a9.\nhttps://github.com/Crystalnix/omaha-server\nhttps://github.com/Crystalnix/omaha-server/wiki\n)\n\n\npayload \u6570\u636e\u7ed3\u6784:\n\n\nversion 1:\n| \nC\nr\nA\nU\n | version(8) | manifestSize(8) | manifest(manifestSize) | rawData | payloadSignatureMessageSize | payloadSignatureMessage(payloadSignatureMessageSize) |\n\nversion 2:\n| \nC\nr\nA\nU\n | version(8) | manifestSize(8) | MetadataSignatureSize(4) | manifest(manifestSize) | medatadataSignatureMessage(MetadataSignatureSize) | rawData | payloadSignatureMessageSize | payloadSignatureMessage(payloadSignatureMessageSize) |\n\n\n\n\n\n\u5176\u4e2d medatadataSignatureMessage \u6821\u9a8c\u7684\u662f\u5176\u4e4b\u524d\u7684\u6240\u6709\u6570\u636e, \u800c payloadSignatureMessage \u6821\u9a8c\u7684\u662f payloadSignatureMessageSize \u4e4b\u524d\u7684\u6240\u6709\u6570\u636e.\n\n\n\u800c manifest \u662fprotobuff, \u5176\u4e2d\u5305\u542b\u4e00\u7ec4\u6307\u4ee4\u96c6, \u4e5f\u5c31\u662f\u4ee5\u524drecovery \u5757\u5347\u7ea7\u7684\u4e00\u7cfb\u5217\u6307\u4ee4. rawData\u662f\u88ab\u66f4\u65b0\u6570\u636e, \u6307\u4ee4\u4f1a\u4ecerawData\u6307\u5b9a\u4f4d\u7f6e\u8bfb\u53d6\u6570\u636e\u5e76\u5e94\u7528\u5230\u76ee\u6807\u5206\u533a\u7684\u6307\u5b9a\u4f4d\u7f6e.\n\n\nmetadata\u7684\u6570\u636e\u662fprotobuf, \u6570\u636e\u7ed3\u6784\u4e3a update_metadata.proto\n\n\n\u4e0b\u8f7d\u5b58\u5728\u4e24\u79cd\u6a21\u5f0f, p2p\u548c\u666e\u901a\u4e0b\u8f7d.\n\n\n\u4e0b\u8f7d\u5230data\u5206\u533a\u7684\u903b\u8f91\u4e0e\u4e4b\u524dota\u5347\u7ea7\u4e0b\u8f7d\u5347\u7ea7\u5305\u7684\u903b\u8f91\u4e00\u81f4. \nupdate_engine\n\u5c06\u5347\u7ea7\u5305\u4e0b\u8f7d\u5230\u672c\u5730.  \u4e0b\u9762\u5148\u4ecb\u7ecd\u8fb9\u4e0b\u8fb9\u5347\u7ea7\u7684\u903b\u8f91.\n\n\n\u4e0b\u8f7d\u5230data\u5206\u533a\n\n\n\u4e0b\u8f7d\u5230data\u5206\u533a\u7684\u5b9e\u73b0\u4e0d\u518d\nupdate_engine\n\u4e2d, \u800c\u5982\u679c\u662f\u9884\u5148\u4e0b\u8f7d\u5b8c\u6210\u7684payload, \u901a\u8fc7\nfile://\n\u7684url\u4f20\u9012\u7ed9\nupdate_engine\n, \u540e\u7eed\u903b\u8f91\u4e0e\u8fb9\u4e0b\u8fb9\u5347\u7ea7\u4e00\u6837.\n\n\n\u800cjava\u5c42\u7684UpdateEngine.java\u7684API, \u66b4\u9732\u5230\u4e86\u7cfb\u7edf\u7684jar\u5305\u4e2d, \u5e76\u672a\u627e\u5230\u8c03\u7528\u8005, \u4e5f\u5c31\u662f\u8bf4, \u8fd9\u5757\u903b\u8f91\u662f\u975e\u5f00\u6e90\u7684, \u6211\u4eec\u65e0\u6cd5\u83b7\u5f97.\n\n\n\u8fb9\u4e0b\u8fb9\u5347\n\n\n\u6240\u8c13\u8fb9\u4e0b\u8fb9\u5347, \u5c31\u662f\u5c06\u5347\u7ea7\u6570\u636e\u4e0b\u8f7d\u5230\u5185\u5b58\u4e2d, \u5e76\u5728\u5185\u5b58\u4e2d\u5b8c\u6210\u76f8\u5e94\u5904\u7406, \u6700\u540e\u5199\u5165\u76ee\u6807\u5206\u533a.\n\n\n\u4e0b\u9762\u662f\u8fb9\u4e0b\u8fb9\u5347\u7684\u5ba2\u6237\u7aef\u6267\u884c\u547d\u4ee4.\n\n\n# update_engine_client \\\n--payload=http://xxx/android/full-ota/payload.bin \\\n--update \\\n--headers=\n\\\n  FILE_HASH=ozGgyQEddkI5Zax+Wbjo6I/PCR8PEZka9gGd0nWa+oY= \\\n  FILE_SIZE=282344983\n  METADATA_HASH=GLIKfE6KRwylWMHsNadG/Q8iy5f786WTatvMdBlpOPg= \\\n  METADATA_SIZE=26723 \\\n\n\n\n\n\n\n\n\u5728Pixel\u624b\u673a\u4e0a\u5347\u7ea7\u7684\u8f93\u51falog\u5982\u9644\u4ef6\nupdate_engine.log\n, \u611f\u5174\u8da3\u7684\u7ae5\u978b\u53ef\u4ee5\u770b\u4e0b, \u5176\u4e2d\u5305\u542b\u4e86\u5404\u4e2a\u9636\u6bb5\u7684\u884c\u4e3a.\n\n\n\u5176\u4e2dheader\u540e\u9762\u7684\u5185\u5bb9, \u8ddf\u5347\u7ea7\u5305\u4e2d\u7684\npayload_properties.txt\n \u6587\u4ef6\u5185\u5bb9\u4e00\u6837. \u5404\u5b57\u6bb5\u7684\u4f5c\u7528\u53ef\u4ee5\u53c2\u8003\u524d\u6587payload\u7684\u5934\u6570\u636e\u683c\u5f0f\u6765\u7406\u89e3\u5177\u4f53\u6821\u9a8c\u7684\u6570\u636e\u4f4d.\n\n\nupdate_engine\n \u9996\u5148\u5b9a\u4e49\u4e00\u7cfb\u5217\u7684action:\n\n\n\n\ndownload_action\n: \u4e0b\u8f7d\u6a21\u5757, \u8d1f\u8d23\u8fb9\u4e0b\u8fb9\u5347\u7ea7.\n\n\nfilesystem_verifier_action\n: \u6587\u4ef6\u7cfb\u7edf\u6821\u9a8c\u6a21\u5757, \u8d1f\u8d23\u5347\u7ea7\u5b8c\u6210\u540e\u6821\u9a8c\u6570\u636e\u7684\u5b8c\u6574\u6027\n\n\npostinstall_runner_action\n: \u540e\u5347\u7ea7\u6a21\u5757, \u4e00\u4e9b\u811a\u672c\u6216\u53ef\u6267\u884c\u7a0b\u5e8f\u5728\u7cfb\u7edf\u5347\u7ea7\u5b8c\u6210\u540e\u6267\u884c.\n\n\n\n\n\u4ee5\u4e0aaction\u901a\u8fc7\u7c7b\u4f3cpipeline\u7684\u5f62\u5f0f\u7ec4\u7ec7, \u524d\u4e00\u4e2aaction\u7684\u8f93\u51fa\u4f5c\u4e3a\u540e\u4e00\u4e2aaction\u7684\u8f93\u5165. \u800c\u5728\u5176\u4e2d\u4f20\u9012\u7684\u6570\u636e\u662f\ninstall_plan_\n, \u8be5\u6570\u636e\u5305\u542b\u4e86payload(\u5347\u7ea7\u6570\u636e)\u7684\u6240\u6709\u4fe1\u606f(\u64cd\u4f5c\u5206\u533a, url, \u6821\u9a8c\u4fe1\u606f\u7b49), \u90e8\u5206\u4fe1\u606f\u7531\u540e\u9762\u7684action\u6267\u884c\u540e\u63d0\u4f9b.\n\u6240\u6709\u7684action, \u5176\u6267\u884c\u5165\u53e3\u51fd\u6570\u662f\nPerformAction()\n, \u901a\u8fc7\u8fd9\u4e2a\u51fd\u6570, \u53ef\u4ee5\u66f4\u7ec6\u81f4\u5730\u4e86\u89e3\u8f93\u5165\u8f93\u51fa\u6570\u636e\u548c\u8be5action\u7684\u5177\u4f53\u529f\u80fd.\n\n\n\u672c\u6bb5\u5185\u5bb9\u7740\u91cd\u4ecb\u7ecd\ndownload_action\n, \u5176\u4f59\u6a21\u5757\u5728\u540e\u9762\u4ecb\u7ecd.\n\n\n\n\n\n\n1. \u8bfb\u53d6\u6570\u636e. \u8fd9\u91cc\u5e76\u4e0d\u662f\u6b63\u5e38\u7684read, \u8be5\u51fd\u6570\u662f\u4e2a\u4e0b\u8f7d\u7684Write\u56de\u8c03, \u800c\u8bfb\u53d6\u6570\u636e\u5728\u4ee3\u7801\u4e0a\u7684\u771f\u5b9e\u884c\u4e3a\u662f, \u8fd4\u56de\u9519\u8bef\u8868\u793a\u6570\u636e\u4e0d\u591f, \u7ee7\u7eed\u8bfb\u53d6, \u800c\u5df2\u7ecf\u8bfb\u53d6\u7684\u6570\u636e\u5b58\u653e\u5728buffer\u4e2d.\n2. \u89e3\u6790manifest. \u5c31\u662f\u4e0a\u6587\u4e2dpayload\u7684\u5934, \u5305\u542b\u6821\u9a8c\u4fe1\u606f\u548c\u6267\u884c\u7684\u6307\u4ee4\u96c6, \u8fd8\u6709\u6240\u6709\u64cd\u4f5c\u7684\u5206\u533a\u6821\u9a8c\u503c\u7b49.\n3. \u6253\u5f00\u5206\u533a\u8bbe\u5907. \u6839\u636e\u5347\u7ea7\u7c7b\u578b, \u5982\u679c\u662f\u5168\u91cf\u5347\u7ea7(manifest\u4e2d\u5305\u542b\u8be5\u4fe1\u606f), \u5219\u6253\u5f00\u88ab\u5347\u7ea7\u8bbe\u5907\u5206\u533a, \u5982\u679c\u662f\u589e\u91cf\u5347\u7ea7, \u6253\u5f00\u5f53\u524d\u8fd0\u884c\u8bbe\u5907\u5206\u533a\u548c\u88ab\u5347\u7ea7\u76ee\u6807\u5206\u533a.\n4. \u83b7\u53d6\u6307\u4ee4\u5217\u8868. \u662f\u4ecemanifest\u4e2d\u83b7\u53d6. \u4e0d\u540c\u6307\u4ee4, \u683c\u5f0f\u4e0d\u540c, \u4f46\u57fa\u672c\u683c\u5f0f\u662f \nsrc:offset:size\n, \u6307\u5b9a\u64cd\u4f5c\u6e90/\u76ee\u6807, \u504f\u79fb\u548c\u5927\u5c0f.\n5. \u7531\u4e8e1\u63d0\u5230\u7684, \u5728\u6570\u636e\u4e0d\u591f\u65f6\u4f1a\u9000\u51fa, \u6240\u4ee5, \u4f1a\u4fdd\u5b58\u5f53\u524d\u5df2\u7ecf\u6267\u884c\u5230\u7684\u6307\u4ee4, \u5e76\u83b7\u53d6\u4e0b\u4e00\u4e2a\u6307\u4ee4\u4fe1\u606f, \u8fd9\u91cc\u4fe1\u606f\u91cd\u70b9\u662f, \u9700\u8981\u8bfb\u53d6\u7684payload\u4e2doffset\u548csize. \u7531\u4e8epayload\u4e2d\u7684\u5347\u7ea7\u6570\u636e\u662f\u8ddf\u6307\u4ee4\u4e00\u8d77\u751f\u6210\u7684, \u6240\u4ee5, \u5176\u6570\u636e\u7684\u504f\u79fb\u5b8c\u5168\u53ef\u4ee5\u8ddf\u6307\u4ee4\u7684\u987a\u5e8f\u4e00\u81f4, \u4fdd\u8bc1\u4e0d\u4f1a\u51fa\u73b0\u8bfb\u6307\u9488\u8df3\u52a8, \u4e5f\u5c31\u4e0d\u9700\u8981p2p\u652f\u6301.\n6. \u6267\u884c\u6307\u4ee4. \u57fa\u672c\u6307\u4ee4\u53ef\u4ee5\u67e5\u770b\u4ee3\u7801, \u4e0e\u5757\u5347\u7ea7\u6307\u4ee4\u4e00\u6837.\n\n\n\u4e0b\u9762\u662f\u5347\u7ea7\u65f6\u6570\u636e\u7684\u5408\u6210\u56fe.\n\n\n\n\n\n\u8fd9\u5e45\u56fe\u5c55\u793a\u7684\u662f\u5347\u7ea7\u6570\u636e\u7684\u5408\u6210. \u5982\u679c\u662f\u5168\u91cf\u5347\u7ea7, source\u4e3a\u7a7a, \u5219payload\u76f4\u63a5\u5199\u5165target. \u4f46\u4e0e\u4e00\u822c\u5206\u533a\u70e7\u5199\u8fd8\u662f\u6709\u4e9b\u5dee\u5f02, \u5e76\u4e0d\u4f1a\u64e6\u9664target, \u800c\u662f\u6309\u7167\u504f\u79fb\u548c\u5927\u5c0f\u76f4\u63a5\u5199\u5165.\u800c\u5982\u679c\u662f\u589e\u91cf\u5347\u7ea7, \u5219\u662f\u57fa\u4e8e\u5f53\u524d\u8fd0\u884c\u7cfb\u7edf\u4e3asource, \u4e0epayload\u7684\u6570\u636e\u5408\u5e76\u5199\u5165target.\n\n\n\u6240\u4ee5, \u4e0d\u7ba1\u662f\u5168\u91cf\u5347\u7ea7\u8fd8\u662f\u589e\u91cf\u5347\u7ea7, \u65ad\u7535\u540e\u90fd\u53ef\u4ee5\u4ece\u5934\u5f00\u59cb\u518d\u5347\u7ea7.\n\n\n \u6821\u9a8c \n\n\n\n\n\n\n\n\n\n\n\u83b7\u53d6\u8f93\u5165\u6570\u636e. \u662f\u6307\u83b7\u53d6\u4ece\ndownload_action\n\u5b8c\u6210\u540e\u7684\u6570\u636e, \u5305\u542b\u88ab\u5347\u7ea7\u5206\u533a\u53ca\u5176\u54c8\u5e0c\u503c\u7b49.\n\n\n\u5f00\u59cb\u6821\u9a8c\u88ab\u5347\u7ea7\u5206\u533a. \u5355\u7eaf\u4ece\u5206\u533a\u8bfb\u53d6\u5757\u6570\u636e\u5e76\u4e0epayload\u4e2d\u5b58\u653e\u7684\u8fdb\u884c\u6bd4\u5bf9\u6821\u9a8c.\n\n\n\u5f00\u59cb\u6821\u9a8c\u5f53\u524dslot\u6e90\u5206\u533a. \u8fd9\u4e2a\u662f\u9488\u5bf9\u589e\u91cf\u5347\u7ea7\u7684. \u5728\u6821\u9a8c\u76ee\u6807\u5206\u533a\u5931\u8d25\u540e, \u6821\u9a8c\u6e90\u5206\u533a.\u6b64\u5904\u6821\u9a8c\u7684\u76ee\u7684\u4e0d\u662f\u5224\u65ad\u5f53\u524d\u8fd0\u884c\u7684\u5206\u533a\u662f\u5426\u5408\u6cd5(\u542f\u52a8\u65f6, \u7531\u5176\u4ed6\u6a21\u5757\u6821\u9a8c), \u800c\u662f\u5224\u65ad\u4e0b\u8f7d\u7684payload\u662f\u5426\u4e0e\u5f53\u524d\u7cfb\u7edf\u5339\u914d(\u670d\u52a1\u5668\u7aef\u653e\u9519\u5347\u7ea7\u6587\u4ef6).\n\n\n\u6807\u8bb0\u4f20\u8f93\u5931\u8d25. \u8fd9\u91cc\u662f\u57283\u7684\u57fa\u7840\u4e0a, \u5c06\u5f53\u524dpayload\u7684\u4e0b\u8f7durl\u6807\u8bb0\u5931\u8d25, \u5e76\u589e\u52a0\u5931\u8d25\u6b21\u6570. \u5728\u8fbe\u5230\u4e00\u5b9a\u6b21\u6570\u540e(\u670d\u52a1\u7aef\u914d\u7f6e), \u4e0d\u518d\u4ece\u8be5url\u83b7\u53d6\u5347\u7ea7\u6570\u636e, \u8df3\u5f80\u4e0b\u4e00\u4e2aurl.\n\n\n\n\n post install \n\n\n\u5404\u4e2a\u5206\u533a\u90fd\u53ef\u4ee5\u6307\u5b9apostinstall, \u800cpostinstall\u811a\u672c\u662f\u5728\ndownload_action\n\u89e3\u6790mainifest\u65f6\u89e3\u6790\u5e76\u83b7\u5f97. \u5728\u5b9a\u4e49\u6267\u884cpostinstall\u4f46\u53c8\u65e0\u811a\u672c\u6307\u5b9a\u65f6, \u9ed8\u8ba4postinstall\u811a\u672c\u662f\u5206\u533a\u6839\u76ee\u5f55\u4e0b\u7684\npostinst\n\n\n\u5728Chrome OS\u4e2d, postinstall \u662f\u5141\u8bb8\u5bf9\u5206\u533a\u6267\u884c\u5757\u5199\u5165\u64cd\u4f5c\u7684,\u4f46\u662f\u5728Android, \u6302\u8f7d\u5206\u533a\u88ab\u6267\u884c\u6807\u8bb0\u4e3a\u53ea\u8bfb, \u5e76\u4e14\u4e5f\u6302\u8f7d\u6210\u53ea\u8bfb, \u4e5f\u5c31\u662f\u8bf4, \u4e0d\u5141\u8bb8\u5bf9\u88ab\u5347\u7ea7\u5206\u533a\u505a\u4fee\u6539(\u5c31\u7b97\u4fee\u6539\u4e86, \u4e4b\u540e\u6821\u9a8c\u4f9d\u7136\u53ef\u80fd\u51fa\u9519). postinstall\u7684\u811a\u672c\u662f\u76f4\u63a5\u57fa\u4e8e\u5f53\u524d\u88ab\u5347\u7ea7\u7cfb\u7edf\u6267\u884c, \u5e76\u672achroot, \u6240\u4ee5, postinstall\u811a\u672c\u5fc5\u987b\u80fd\u591f\u88ab\u4fdd\u8bc1\u8fd0\u884c\u5728\u88ab\u5347\u7ea7\u7cfb\u7edf\u4e2d. \u6240\u4ee5, \u4e00\u822c\u662f\u7eaf\u9759\u6001\u7684\u53ef\u6267\u884c\u7a0b\u5e8f, \u800c\u4e14\u5176\u529f\u80fd\u5728android\u4e0a\u4e5f\u88ab\u5f31\u5316\u4e86.\n\n\n odex\u4f18\u5316 \n\n\n\u5728\u4ee5\u4e0a\u5168\u90e8\u5b8c\u6210\u540e, \u7cfb\u7edf\u5c06\u6807\u8bb0slot\u4e3a\u88ab\u5347\u7ea7\u7cfb\u7edf, \u5e76\u5728\u4e0b\u6b21\u91cd\u542f\u540e, \u8fdb\u5165\u5347\u7ea7\u540e\u7684\u7cfb\u7edf, \u6821\u9a8c\u5e76\u4f18\u5316. \u8fd9\u65f6\u5019\u5982\u679c\u6821\u9a8c\u5931\u8d25, \u5219\u8fd8\u4f1a\u56de\u5230\u539f\u5148\u7cfb\u7edf. \u5219\u8be5\u60c5\u51b5\u5b58\u5728data\u4e0b\u5e94\u7528\u6570\u636e\u5df2\u7ecf\u88ab\u4f18\u5316\u4e3a\u65b0\u7248\u672c\u6216\u8005\u4f18\u5316\u5230\u4e00\u534a\u7684\u95ee\u9898. \u8ddf\u4e86\u4e0b\u76f8\u5173\u4ee3\u7801\u548c\u7f51\u4e0a\u7684\u8d44\u6599, \u7ed3\u8bba\u5982\u4e0b.\n\n\n\u5728A/B\u5347\u7ea7\u5b8c\u6210\u8fdb\u5165\u65b0\u7cfb\u7edf\u540e, dexopt\u7684\u53c2\u6570\u662fspeed-profile, \u800c\u8be5\u53c2\u6570\u7684\u542b\u4e49\u5c31\u662f\u6839\u636e\u201c\u70ed\u4ee3\u7801\u201d\u7684profile\u914d\u7f6e\u6765\u7f16\u8bd1. \u90a3\u4e48\u95ee\u9898\u5c31\u662f\u8fd9\u4e2aprofile\u7684\u751f\u6210,\u548c\u4ec0\u4e48\u65f6\u5019\u6267\u884c\u589e\u91cf\u7f16\u8bd1.\n\n\n\n\nprofile\u5728\u8fbe\u5230\u4e00\u5b9a\u6761\u4ef6\u540e\u5199\u5165/data/, \u76ee\u524d\u4ece\u4ee3\u7801\u770b, \u5df2\u77e5\u7684\u4e00\u4e2a\u6761\u4ef6\u662f\u5927\u5c0f\n50K\u65f6, \u5199\u5165\u6587\u4ef6. \u800c\u5728\u5df2\u7ecf\u5b58\u5728\u8be5\u6587\u4ef6\u7684\u60c5\u51b5\u4e0b, \u4f1a\u4f18\u5148\u52a0\u8f7d, \u5982\u679c\u52a0\u8f7d\u5931\u8d25, \u5219\u5220\u9664\u5e76\u91cd\u65b0\u751f\u6210.\n\n\n\u6267\u884c\u589e\u91cf\u7f16\u8bd1\u7684\u65f6\u95f4\u662f, \u673a\u5728\u5145\u7535\uff0b\u7a7a\u95f2\uff0b\u56db\u4e2a\u5c0f\u65f6\u95f4\u9694\u7b49\u591a\u4e2a\u6761\u4ef6\u4e0b, \u5728\u540e\u53f0\u5b8c\u6210.\n\n\n\n\n\n\u4e5f\u5c31\u662f\u8bf4, \u5728AB\u7cfb\u7edf\u5347\u7ea7\u5b8c\u6210\u65f6, \u4e0d\u4f1a\u6267\u884c\u7f16\u8bd1, \u53ea\u4f1a\u6267\u884cprofile\u7684\u751f\u6210. \u800c\u5728\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u88ab\u68c0\u6d4b\u5230\u7cfb\u7edf\u6821\u9a8c\u5931\u8d25, \u5219\u4f1a\u56de\u5230\u4e0a\u4e00\u7248\u672c\u7cfb\u7edf.\n\n\nbootloader\u4ea4\u4e92\n\n\n\n\n\u4f20\u7edf\u7684Android\u4e0ebootloader\u901a\u4fe1\u662f\u901a\u8fc7misc\u5206\u533a. \u7136\u800c\u5728A/B\u7cfb\u7edf\u4e2d, \u6570\u636e\u5e76\u4e0d\u662f\u5b58\u5728misc\u5206\u533a, \u800c\u4e14\u5b58\u653e\u4f4d\u7f6e\u7531\u5382\u5546\u5b9a\u4e49, \u63a5\u53e3\u5728\nhardware/libhardware/include/hardware/boot_control.h\n. \u5176\u7ed3\u6784\u4f53\u662f \nboot_control_module_t\n, \u5305\u542b\u4e86\u6240\u6709\u8bbe\u7f6e\u4ee5\u4e0aslot\u72b6\u6001\u7684\u63a5\u53e3.\n\n\n\u4e0b\u9762\u4ecb\u7ecd\u4e0b\u4e0d\u540c\u5382\u5546\nboot_control\n\u7684\u5b9e\u73b0.\n\n\n\nqcom\u7684\u5b9e\u73b0\n\n\n\n\u4ee3\u7801\u4f4d\u7f6e:  \nhardware/qcom/bootctrl/boot_control.cpp\n\nqcom\u7684\u5b9e\u73b0\u662f, \u76f4\u63a5\u5c06A/B\u5206\u533a\u7684\u5c5e\u6027, \u5199\u5165\u7684gpt\u5206\u533a\u8868\u7684boot\u5206\u533a(\nboot_a\n\u548c\nboot_b\n).qcom\u673a\u9876\u76d2gpt\u8868\u7684\u5206\u6790:http://blog.csdn.net/guyongqiangx/article/details/68924436\n\n\n\n\n\n\n\u4e0a\u56fe\u662fqcom\u673a\u9876\u76d2gpt\u5206\u533a\u8868\u7684\u4fe1\u606f, \u5728Entry\u4e2d\u67e5\u627e\u5230\u5206\u533a\nboot_a\n\u548c\nboot_b\n, \u63d0\u53d6\u5176\u5c5e\u6027.\n\u4ece LAB 2 \u5f00\u59cb\u5b58\u653e\u7684\u662fGPT\u5206\u533a\u7684\u8be6\u7ec6\u4fe1\u606f\nPartition Entry\n, \u5355\u4e2a\nPartition Entry\n\u5360128\u4e2a\u5b57\u8282, \u4ece\u7b2c48\u4e2a\u5b57\u8282\u5f00\u59cb\u5b58\u653e\u7684\u662f\u5206\u533a\u5c5e\u6027, \u800cA/B\u7cfb\u7edf\u7684\u5206\u533a\u5c5e\u6027\u4e5f\u662f\u5b58\u653e\u5728\u8fd9\u4e2a\u4f4d\u7f6e.\n\n\n\u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u5230, qcom\u7684\u5b9e\u73b0, \u6ca1\u6709bootable\u7684\u6807\u8bb0\u4f4d, \u53d6\u800c\u4ee3\u4e4b\u7684\u662funbootable.\n\n\n\ngoogle\u7684\u53c2\u8003\u5b9e\u73b0\n\n\n\n\u4ee3\u7801\u4f4d\u7f6e\nsystem/extras/boot_control_copy/boot_control_copy.c\n\n\ngoogle\u7684\u53c2\u8003\u5b9e\u73b0\u590d\u7528\u4e86misc\u5206\u533a\u7684\nbootloader_message\n(recovery\u4e0ebootloader\u901a\u4fe1\u7684\u5206\u533a). \u6574\u4e2amisc\u5206\u533a\u7684\u6570\u636e\u7ed3\u6784\u56fe\u5982\u4e0b.\n\n\n\n\n\n\n\n\n\nfsmgr\u4f7f\u7528, \u5728\u8bbe\u7f6e\u6307\u5b9aslot\u4e3aactive\u65f6, \u540c\u65f6\u5c06\u5bf9\u5e94\u540e\u7f00\u8bbe\u7f6e\u5230\u8be5\u5b57\u6bb5. fsmgr\u5728\u6302\u8f7d\u5206\u533a\u65f6,\u901a\u8fc7\u8be5\u5b57\u6bb5\u62fc\u6210\u5b8c\u6210\u7684\u5206\u533a\u8def\u5f84.\n\n\nMagic Numbe. \u7528\u6765\u786e\u5b9a\u8be5\u6570\u636e\u7aef\u7684\u5408\u6cd5, \u5fc5\u987b\u662f 'B', 'C' , 'c' (\"\nboot_control\n copy\" \u7684\u7f29\u5199)\n\n\n\u63a5\u53e3\u7248\u672c\u53f7\n\n\nactive\u72b6\u6001\u7684slot\u53f7, \u5728\u8be5\u5b9e\u73b0\u4e2d\u53ea\u6709 0 \u6216 1.\n\n\n0 \u4e3a \u7b2c\u4e00\u4e2aslot, 1 \u4e3a\u7b2c\u4e8c\u4e2aslot, \u8bbe\u7f6eslot\u7684bootable/unbootable\u72b6\u6001.\n\n\n\n\n\u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa, \u5e76\u6ca1\u6709\u53ef\u4ee5\u6807\u8bb0\u4e3asuccessful\u7684\u4f4d, \u901a\u8fc7\u4ee3\u7801\u4e5f\u53d1\u73b0, \u5176\u5b9e\u73b0\u4e3a\u7a7a, \u4e5f\u5c31\u662f\u8bf4, \u5e76\u6ca1\u6709\u5b9e\u73b0\u8be5\u72b6\u6001.\n\n\n\u5982\u679c\u6ce8\u610f\u5230\u4ee3\u7801, \u5728\nmodule_setActiveBootSlot\n\u540e\u534a\u6bb5, \u4f1a\u5c06active\u72b6\u6001\u7684\nboot_X\n\u5206\u533a\u5185\u5bb9\u62f7\u8d1d\u5230boot\u5206\u533a. \u4e5f\u5c31\u662f\u8bf4, \u7cfb\u7edf\u5b58\u5728\u4e09\u4e2a\u5206\u533a(boot, \nboot_a\n, \nboot_b\n), \u88ab\u8bbe\u7f6e\u4e3aactive\u7684\u5206\u533a\u4f1a\u88ab\u62f7\u8d1d\u5230boot\u5206\u533a, \u518d\u7ed3\u5408\nmodule_getCurrentSlot\n\u7684\u5b9e\u73b0(\u4ece/system\u5206\u533a\u83b7\u53d6\u6302\u8f7d\u4fe1\u606f) ,\u4ece\u8fd9\u4e24\u6bb5\u4ee3\u7801\u53ef\u4ee5\u63a8\u6d4b\u51fa\u4e24\u4e2a\u7ed3\u8bba:\n\n\n\n\nA/B\u7cfb\u7edf\u53ef\u4ee5\u4e0d\u5347\u7ea7firmware(bootloader), \u6216\u8005\u8bf4google\u7684\u8be5\u5b9e\u73b0\u6700\u521d\u662f\u4e3a\u4e86\u517c\u5bb9\u8001\u7684bootloader.\n\n\nboot.img\u4e2d\u7684ramdisk\u53ef\u4ee5\u8fd8\u662fboot\u7684ramdisk.\n\n\n\n\n\u4f46\u662f, \u4e0d\u786e\u5b9a\u53c2\u8003\u4ee3\u7801\u662f\u5426\u80fd\u6b63\u5e38\u8fd0\u884c. \u4f46\u662f\u5355\u7eaf\u4ece\u4ee5\u4e0a\u4ee3\u7801\u770b, \u9664\u4e86\u5206\u533a, A/B\u7cfb\u7edf\u7684\u542f\u52a8, \u6302\u8f7d, \u90fd\u53ef\u4ee5\u5728\u7528\u6237\u5c42\u641e\u5b9a. \u4f46\u662f\u5e26\u6765\u7684\u540e\u679c\u5c31\u662f, \u5982\u679cbootloader\u542f\u52a8boot\u5931\u8d25, \u5219\u65e0\u6cd5\u5207\u6362\u5230\u53e6\u4e00\u4e2aslot.\n\n\n\u5347\u7ea7\u5305\u751f\u6210\n\n\n\u5347\u7ea7\u5305\u5236\u4f5c\u5de5\u5177\u4e0d\u518d\u652f\u6301 \u57fa\u4e8e\u6587\u4ef6\u7684\u5347\u7ea7, \u5f53\u524d\u53ea\u652f\u6301ab\u5347\u7ea7\u548c\u5757\u5347\u7ea7.\n\n\n\u5757\u5347\u7ea7\u548cab\u5347\u7ea7\u5728\u751f\u6210\u6570\u636e\u6587\u4ef6\u548c\u811a\u672c\u4e0a\u539f\u7406\u662f\u4e00\u6837\u7684, \u53ea\u662f\u5728\u751f\u6210\u5347\u7ea7\u6570\u636e\u65f6\u5b58\u5728\u5dee\u5f02.\n\n\nAB\u5347\u7ea7payload\u5236\u4f5c\u903b\u8f91\u5728\u5347\u7ea7\u5305\u5236\u4f5c\u811a\u672c\u7684\nWriteABOTAPackageWithBrilloScript\n, \u800c\u771f\u6b63payload\u751f\u6210\u7684\u903b\u8f91\u5728\u51fd\u6570\nGenerateUpdatePayloadFile\n.\n\n\n\u6d41\u7a0b\u5982\u4e0b:\n\n\n\n\u751f\u6210payload\u6307\u4ee4\u89c4\u5219:\n\n\n\nAB\u5347\u7ea7\u603b\u6d41\u7a0b\u56fe", 
            "title": "AB\u7cfb\u7edf\u5347\u7ea7"
        }, 
        {
            "location": "/Android-AB-system-update/#ab", 
            "text": "\u987e\u540d\u601d\u4e49,  A/B \u7cfb\u7edf\u5c31\u662f\u6307\u7ec8\u7aef\u8bbe\u5907\u4e0a\u5b58\u5728\u4e24\u5957\u7cfb\u7edf,(userdata\u53ea\u6709\u4e00\u4efd, \u88ab\u4e24\u5957\u7cfb\u7edf\u5171\u7528). \u7b80\u5355\u6765\u8bb2, \u53ef\u4ee5\u7406\u89e3\u4e3a, \u5b58\u5728\u4e00\u5957\u7cfb\u7edf\u5206\u533a, \u4e00\u5957\u5907\u4efd\u5206\u533a, \u4e24\u5957\u7cfb\u7edf\u90fd\u53ef\u4ee5\u88ab\u542f\u52a8, \u4e24\u5957\u7cfb\u7edf\u7684\u7248\u672c\u53f7\u53ef\u4ee5\u4e00\u6837, \u4e5f\u53ef\u4ee5\u4e00\u5957\u65e7, \u4e00\u5957\u65b0. \u800c\u5347\u7ea7\u5c31\u662f\u5c06\u65e7\u7684\u7cfb\u7edf\u5347\u7ea7\u5230\u65b0\u7248\u672c.  A/B\u7cfb\u7edf\u5b9e\u73b0\u4e86\u65e0\u7f1d\u5347\u7ea7(Seamless System Updates), \u5b58\u5728\u5982\u4e0b\u7279\u70b9:   \u7ec8\u7aef\u8bbe\u5907\u5728\u51fa\u5382\u65f6\u6709\u4e24\u5957\u8bbe\u5907\u53ef\u4ee5\u5de5\u4f5c, \u5728\u5347\u7ea7\u51fa\u73b0\u5f02\u5e38\u6216\u8005\u51fa\u9519\u65f6, \u59cb\u7ec8\u786e\u4fdd\u7cfb\u7edf\u5b58\u5728\u4e00\u5957\u8bbe\u5907\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c.  \u7cfb\u7edf\u5728\u540e\u53f0\u8fdb\u884c\u5347\u7ea7, \u66f4\u65b0\u5230\u53e6\u4e00\u5957\u7cfb\u7edf, \u7528\u6237\u4e0d\u4f1a\u88ab\u6253\u65ad. \u5728\u66f4\u65b0\u5b8c\u6210\u540e, \u7528\u6237\u5728\u4e0b\u6b21\u91cd\u542f\u624b\u673a\u65f6, \u5c31\u4f1a\u8fdb\u5165\u65b0\u7cfb\u7edf.  \u5728 dm-verity \u6216\u8005\u5176\u4ed6\u6821\u9a8c\u65b9\u5f0f\u68c0\u6d4b\u5230\u7cfb\u7edf\u987a\u574f\u6216\u5f02\u5e38\u540e, \u53ef\u4ee5\u91cd\u542f\u56de\u5230\u5347\u7ea7\u524d\u7684\u7cfb\u7edf, \u786e\u4fdd\u7528\u6237\u4f7f\u7528\u4e0d\u53d7\u5f71\u54cd.   Android8.0\u7684\u4ee3\u7801\u7f16\u8bd1\u65f6, \u5728BoardConfig\u6709\u5bf9\u5e94\u7684\u9009\u9879\u6765\u63a7\u5236\u662f\u7f16\u8bd1\u6210A/B\u7cfb\u7edf\u8fd8\u662f\u6b63\u5e38\u5355\u7cfb\u7edf. \u7531\u4e8e\u65b0\u7cfb\u7edf\u8ddf\u539f\u6765\u7684OTA\u5347\u7ea7\u7cfb\u7edf\u5b58\u5728\u5927\u4e0d\u540c, \u5bfc\u81f4\u65e0\u6cd5\u901a\u8fc7\u4ee5\u524d\u7684OTA\u5347\u7ea7\u65b9\u5f0f(\u5b89\u5168\u5730)\u5347\u7ea7\u5230A/B\u7cfb\u7edf.  \u800cA/B\u7cfb\u7edf\u5347\u7ea7, \u662f\u7531\u8fd0\u884c\u4e8eAndroid\u540e\u53f0\u7684 update_engine \u548c  slot a ,  slot b \u4e24\u5957\u7cfb\u7edf\u5171\u540c\u5b8c\u6210. \u5728\u542f\u52a8\u5176\u4e2d\u4e00\u5957\u7cfb\u7edf\u7684\u60c5\u51b5\u4e0b,  update_engine \u5728\u540e\u53f0\u4e0e\u670d\u52a1\u5668\u901a\u4fe1\u4e0b\u8f7d\u5347\u7ea7\u6d41\u5e76\u66f4\u65b0\u5230\u53e6\u4e00\u5957\u7cfb\u7edf.  A/B \u7cfb\u7edf\u5347\u7ea7\u4e3b\u8981\u6d89\u53ca\u5982\u4e0b4\u4e2a\u65b9\u9762:   \u5206\u533a\u9009\u62e9(slots), \u5373\u9009\u62e9\u54ea\u4e2a\u7cfb\u7edf.  update_engine , \u5373\u5347\u7ea7\u6d41\u4e0b\u8f7d\u548c\u5347\u7ea7  bootloader\u4ea4\u4e92, \u5373\u5982\u4f55\u901a\u77e5bootloader\u5207\u6362slot  ota\u5305\u751f\u6210.", 
            "title": " A/B\u7cfb\u7edf\u7b80\u4ecb "
        }, 
        {
            "location": "/Android-AB-system-update/#_1", 
            "text": "", 
            "title": " \u5206\u533a\u9009\u62e9 "
        }, 
        {
            "location": "/Android-AB-system-update/#_2", 
            "text": "\u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u8003  Android8 \u5206\u533a\u8868\u548c\u5206\u533a\u76f8\u5173\u64cd\u4f5c . \u8fd9\u91cc\u7b80\u5355\u603b\u7ed3\u4e0b\u5206\u533a\u8868\u4e0a\u8ddf\u5355\u7cfb\u7edf\u7684\u5dee\u5f02.\n\u8fd9\u91cc\u4ee5boot,system, vendor\u548cmodem\u5b58\u5728\u4e24\u5957\u7cfb\u7edf\u4e3a\u4f8b\u5b50, \u5176\u4f59\u5206\u533a\u6309\u7167\u6700\u5c0f\u5206\u533a\u8868.     \u5355\u7cfb\u7edf\u5206\u533a\u8868  A/B\u7cfb\u7edf\u5206\u533a\u8868  \u529f\u80fd\u63cf\u8ff0      bootloader  bootloader  \u5f15\u5bfclinux\u7cfb\u7edf    misc  misc  Android\u7cfb\u7edf\u4e0erecovery, bootloade\u901a\u4fe1\u7684\u6570\u636e    boot  -  \u5b58\u653eAndroid\u7684kernel\u548cramdisk    -  boot_a  \u5b58\u653eAndroid\u7684kernel\u548c\u5355\u7cfb\u7edf\u4e2drecovery\u7684ramdisk    -  boot_b  \u5b58\u653eAndroid\u7684kernel\u548c\u5355\u7cfb\u7edf\u4e2drecovery\u7684ramdisk    system  -  Android\u7cfb\u7edf\u5e94\u7528, \u5e93\u548c\u8d44\u6e90\u6587\u4ef6.    -  system_a  \u5b58\u653e\u5355\u7cfb\u7edfboot\u4e2d\u7684ramdisk\u548csystem\u4e2d\u7684\u5e94\u7528, \u5e93\u548c\u8d44\u6e90\u6587\u4ef6    -  system_b  \u5b58\u653e\u5355\u7cfb\u7edfboot\u4e2d\u7684ramdisk\u548csystem\u4e2d\u7684\u5e94\u7528, \u5e93\u548c\u8d44\u6e90\u6587\u4ef6    -  vendor_a  \u5b58\u653e\u5382\u5546\u7684\u914d\u7f6e, \u53ef\u6267\u884c\u7a0b\u5e8f, \u5e93, \u76ee\u5f55\u7ed3\u6784\u4e0e/system/\u4e00\u81f4    -  vendor_b  \u5b58\u653e\u5382\u5546\u7684\u914d\u7f6e, \u53ef\u6267\u884c\u7a0b\u5e8f, \u5e93, \u76ee\u5f55\u7ed3\u6784\u4e0e/system/\u4e00\u81f4    cache  -  \u4e34\u65f6\u5b58\u653e\u6570\u636e, \u901a\u5e38\u4e34\u65f6\u5b58\u653e\u4e0b\u8f7d, \u5907\u4efd\u548c\u5347\u7ea7\u5305    recovery  -  \u5b58\u653erecovery\u7cfb\u7edf\u7684kernel\u548cramdisk    userdata  userdata  \u5b58\u653e\u7528\u6237\u6570\u636e     \u6240\u8c13\u7684A/B\u7cfb\u7edf\u5206\u533a, \u5c31\u662f\u5728\u539f\u6709\u5206\u533a\u540d\u5b57\u540e\u5417\u6dfb\u52a0 _a  \u548c  _b , \u5728\u5237\u673a, \u6216\u8005\u7cfb\u7edf\u542f\u52a8\u7684\u65f6\u5019, \u6839\u636ebootloader\u7684\u53c2\u6570\u6dfb\u52a0\u540e\u7f00, \u9009\u62e9\u6b63\u786e\u7684\u7cfb\u7edf. misc\u5206\u533a\u5728A/B\u7cfb\u7edf\u4e2d\u53d8\u6210\u4e00\u4e2a\u53ef\u6709\u53ef\u65e0\u7684\u5b58\u5728, \u56e0\u4e3a\u5176\u529f\u80fd\u53ea\u662f\u4f20\u9012\u6062\u590d\u51fa\u5382\u8bbe\u7f6e\u7684\u53c2\u6570, \u800crecovery\u7684\u529f\u80fd\u4e5f\u53ea\u5269\u4e0b\u6062\u590d\u51fa\u5382\u8bbe\u7f6e, \u6240\u4ee5, \u672c\u8d28\u4e0a, \u6ca1\u5fc5\u8981\u518d\u57fa\u4e8emisc\u4f20\u9012\u53c2\u6570\u4e86.", 
            "title": "\u5206\u533a\u8868\u548c\u5206\u533a\u5185\u5bb9\u53d8\u5316"
        }, 
        {
            "location": "/Android-AB-system-update/#_3", 
            "text": "bootloader\u4e3a\u4e86\u5224\u65ad\u4e00\u4e2a\u7cfb\u7edf(slot)\u662f\u5426\u4e3a\u53ef\u4ee5\u542f\u52a8\u7684\u72b6\u6001, \u9700\u8981\u4e3a\u5176\u5b9a\u4e49\u5bf9\u5e94\u7684\u5c5e\u6027(\u72b6\u6001). \u5176\u72b6\u6001\u8bf4\u660e\u5982\u4e0b:   active. \u6d3b\u52a8\u5206\u533a\u6807\u8bc6, \u6392\u4ed6, \u4ee3\u8868\u8be5\u5206\u533a\u4e3a\u542f\u52a8\u5206\u533a, bootloader\u603b\u4f1a\u9009\u62e9\u8be5\u5206\u533a.  bootable. \u8868\u793a\u8be5slot\u7684\u5206\u533a\u5b58\u5728\u4e00\u5957\u53ef\u80fd\u53ef\u4ee5\u542f\u52a8\u7684\u7cfb\u7edf.  successful. \u8868\u793a\u8be5slot\u7684\u7cfb\u7edf\u80fd\u6b63\u5e38\u542f\u52a8.  unbootable. \u4ee3\u8868\u8be5\u5206\u533a\u635f\u574f\u7684, \u65e0\u6cd5\u542f\u52a8, \u5728\u5347\u7ea7\u8fc7\u7a0b\u603b\u88ab\u6807\u8bb0, \u8be5\u6807\u8bb0\u7b49\u6548\u4e8e\u4ee5\u4e0a\u6807\u8bb0\u88ab\u6e05\u7a7a. \u800cactive\u6807\u8bb0\u4f1a\u5c06\u8be5\u6807\u8bb0\u6e05\u7a7a.   slot a  \u548c  slot b , \u53ea\u6709\u4e00\u4e2a\u662factive, \u5b83\u4eec\u53ef\u4ee5\u540c\u65f6\u6709 bootable \u548c successful \u5c5e\u6027.   bootloader\u68c0\u6d4b\u52301\u4e2a\u6216\u80052\u4e2aslot\u90fd\u662fbootable\u7684\u72b6\u6001.  \u9009\u62e9active\u7684slot\u6216\u8005\u9009\u62e9successful\u7684slot\u8fdb\u884c\u5c1d\u8bd5\u542f\u52a8.  \u542f\u52a8\u6210\u529f\u7684\u6807\u8bb0\u662f, dm-verity \u6210\u529f.  \u7531\u4e8e\u542f\u52a8\u6210\u529f, \u5219\u8be5slot\u88ab\u6807\u8bb0\u4e3asuccessful\u548cactive  \u7531\u4e8e\u542f\u52a8\u5931\u8d25, \u5219\u8bbe\u7f6e\u8be5slot\u4e3aunbootable, \u5e76\u8bbe\u7f6e\u53e6\u4e00\u4e2aslot\u4e3aactive, \u8fdb\u884c\u4e0b\u4e00\u6b21\u5c1d\u8bd5.", 
            "title": "\u7cfb\u7edf\u5206\u533a\u5c5e\u6027"
        }, 
        {
            "location": "/Android-AB-system-update/#_4", 
            "text": "\u9996\u5148, \u6211\u4eec\u770b\u4e0b\u5347\u7ea7\u5305\u7684\u5185\u5bb9. \u5728A/B\u5347\u7ea7\u7684\u60c5\u51b5\u4e0b, \u5347\u7ea7\u5305\u5185\u5bb9\u5982\u4e0b:  Path = aosp_marlin-ota-eng.builder.zip\nType = zip\nComment = signed by SignApk\nPhysical Size = 384694679\n\n   Date      Time    Attr         Size   Compressed  Name\n------------------- ----- ------------ ------------  ------------------------\n2009-01-01 00:00:00 .....          360          360  META-INF/com/android/metadata\n2009-01-01 00:00:00 .....          107          107  care_map.txt\n2009-01-01 00:00:00 .....    384690699    384690699  payload.bin\n2009-01-01 00:00:00 .....          154          154  payload_properties.txt\n2009-01-01 00:00:00 .....         1675          943  META-INF/com/android/otacert\n------------------- ----- ------------ ------------  ------------------------\n                             384692995    384692263  5 files, 0 folders   \u4e0b\u8f7d\u548c\u5347\u7ea7\u7a0b\u5e8f\u662f update_engine , \u6765\u81eachrome os, \u4ee3\u7801\u4e2d\u5927\u91cf\u5b58\u5728dbus\u548cchrome os\u7684\u75d5\u8ff9, \u800cAndroid\u4e0a\u6539\u7a0b\u5e8f\u662f\u57fa\u4e8ebinde\u8fdb\u884c\u901a\u4fe1. \u4e0e\u539f\u5148\u7684ota\u5347\u7ea7\u4e0d\u540c, \u8be5\u5347\u7ea7\u5305\u4e2d\u4e0d\u5305\u542bupdater, \u4e5f\u5c31\u662f\u8bf4, \u5347\u7ea7\u7684\u903b\u8f91\u5728\u8bbe\u5907\u7aef\u800c\u4e0d\u662f\u5728\u5347\u7ea7\u5305\u4e2d. \u5982\u679c\u719f\u6089ota\u5347\u7ea7\u7684\u8bdd, \u8fd9\u4e2a\u5347\u7ea7\u5305\u4e2d\u7684\u6570\u636e\u8ddf\u5757\u5347\u7ea7\u6570\u636e\u51e0\u4e4e\u4e00\u6837, \u521d\u6b65\u5224\u65ad\u7528\u7684\u662f\u5757\u5347\u7ea7.\n\u90a3\u4e48, \u5982\u679c\u6709\u65b0\u7684\u9700\u6c42, \u6bd4\u5982\u6b64\u6b21\u66f4\u65b0\u9700\u8981\u8c03\u6574\u6570\u636e\u5e93, \u662f\u5982\u4f55\u505a\u5230\u7684? \u8bf7\u67e5\u770b\u540e\u6587\u7b2c\u4e8c\u6b65\u5347\u7ea7.  \u6574\u4e2a\u5347\u7ea7\u5206\u4e3a\u4e94\u6b65:   \u4e0b\u8f7d\u5347\u7ea7\u5305, \u6216\u8005\u5347\u7ea7\u6d41. Android8 \u65b0\u652f\u6301\u4e86\u6d41\u5f0f\u5347\u7ea7, \u53ef\u4ee5\u8fb9\u4e0b\u8fb9\u5347.  \u7b2c\u4e00\u6b65\u5347\u7ea7. \u4e5f\u5c31\u662f,  update_engine \u6267\u884c\u7684\u5347\u7ea7\u903b\u8f91, \u57fa\u672c\u7684\u6570\u636e\u5199\u5165.  \u6821\u9a8c\u5199\u5165\u6570\u636e. \u786e\u4fdd\u4e0a\u4e00\u6b65\u5199\u5165\u6570\u636e\u53ef\u9760\u5b8c\u6574.  \u7b2c\u4e8c\u6b65\u5347\u7ea7. \u4e5f\u5c31\u662f, \u6302\u8f7d\u65b0\u70e7\u5199\u7684\u5206\u533a, \u5e76\u6267\u884c\u5176\u4e2d\u7684\u6307\u5b9a\u811a\u672c(\u7a0b\u5e8f)\u8fdb\u884c\u540e\u7eed\u66f4\u65b0\u64cd\u4f5c.  \u5e94\u7528\u4f18\u5316.  \u7531\u4e8e\u5b58\u5728A/B\u65b0\u65e7\u4e24\u5957\u7cfb\u7edf, \u6240\u4ee5, data\u5e95\u4e0b\u4e5f\u5b58\u5728\u4e24\u5957odex/vdex.   \u524d4\u6b65, \u57fa\u4e8e\u4e00\u79cdpipe\u7684\u6846\u67b6\u5b9e\u73b0, \u6bcf\u4e00\u6b65\u90fd\u662f\u4e00\u4e2aaction, \u522b\u94fe\u63a5\u5230actio list\u4e2d, \u524d\u540e\u4e24\u4e2aaction\u901a\u8fc7pipe\u673a\u5236\u8fdb\u884c\u6570\u636e\u901a\u4fe1. \u4e5f\u5c31\u662f\u8bf4, \u524d\u4e00\u4e2aaction\u7684\u8f93\u51fa\u9ed8\u8ba4\u53d8\u6210\u540e\u4e00\u4e2aaction\u7684\u8f93\u5165. action\u7684\u6267\u884c\u51fd\u6570\u662f PerformAction() . \u901a\u8fc7 HasInputObject() \u548c HasOutputPipe() \u5224\u65ad\u662f\u5426\u6709\u8f93\u5165\u548c\u8f93\u51fa\u6d41, \u800c GetInputObject() \u63a5 SetOutputObject() \u5206\u522b\u662f\u8bfb\u53d6\u548c\u5199\u5165pipe.  update_engine  \u7684 Androidmk\u76ee\u6807, \u4f9d\u8d56\u548c\u5bf9\u5e94\u6e90\u7801\u6587\u4ef6\u5982\u4e0b.  # \u9759\u6001\u5e93\u6a21\u5757\nSTATIC_LIBRARIES:\n    update_metadata-protos      (host, target)\n    libpayload_consumer         (host, target)\n    libupdate_engine_android    (target)\n    libpayload_generator        (host, target)\n\n# \u53ef\u6267\u884c\u6a21\u5757\nEXECUTABLES:\n    update_engine           (target)\n    update_engine_sideload      (target)\n    update_engine_client        (target)\n    delta_generator         (host)\n\n# \u5171\u4eab\u5e93\u6a21\u5757\nSHARED_LIBRARIES:\n    libupdate_engine_client     (target)\n\n# \u9884\u7f16\u8bd1\u6a21\u5757\nPREBUILT:\n    updater.json            (target)\n    brillo_update_payload       (host)  \u4ece\u4e0a\u6587\u7684\u76ee\u6807\u53ef\u4ee5\u83b7\u53d6\u5982\u4e0b\u4fe1\u606f:   payload \u4e2d\u7684\u6587\u4ef6\u7ed3\u6784\u662fprotos  \u53ef\u6267\u884c\u6587\u4ef6\u662f  update_engine , \u800c  update_engine_client  \u662f\u5ba2\u6237\u7aef,  update_engine_sideload  \u662frecovery\u6a21\u5f0f\u4e0b\u901a\u8fc7usb\u66f4\u65b0.  delta_generator  \u7528\u4e8e\u751f\u6210payload  \u5b8c\u6574\u7684Android.mk\u4e2d, \u5b58\u5728\u6807\u8bb0\u4e3a local_use_omaha , \u53ea\u6709\u5728  PRODUCT_IOT  \u7269\u8054\u7f51\u65f6, \u624d\u542f\u7528, \u7f16\u8bd1\u83b7\u5f97\u7684\u662fdbus\u7248\u672c\u7684 update_engine .   \u4f9d\u8d56\u5173\u7cfb\u5982\u4e0b:  update_engine (target)\n  --  libupdate_engine_android\n    --  libpayload_consumer\n      --  update_metadata-protos\n\nupdate_engine_sideload (target)\n  --  update_engine_sideload\n    --  update_metadata-protos\n\nupdate_engine_client (target)\n\ndelta_generator (host)\n  --  libpayload_generator\n    --  libpayload_consumer\n      --  update_metadata-protos  \u6e90\u7801\u5217\u8868\u5982\u4e0b:  update_metadata-protos (STATIC_LIBRARIES)\n  --  update_metadata.proto\n\nlibpayload_consumer (STATIC_LIBRARIES)\n  --  common/action_processor.cc\n      common/boot_control_stub.cc\n      common/clock.cc\n      common/constants.cc\n      common/cpu_limiter.cc\n      common/error_code_utils.cc\n      common/hash_calculator.cc\n      common/http_common.cc\n      common/http_fetcher.cc\n      common/file_fetcher.cc\n      common/hwid_override.cc\n      common/multi_range_http_fetcher.cc\n      common/platform_constants_android.cc\n      common/prefs.cc\n      common/subprocess.cc\n      common/terminator.cc\n      common/utils.cc\n      payload_consumer/bzip_extent_writer.cc\n      payload_consumer/delta_performer.cc\n      payload_consumer/download_action.cc\n      payload_consumer/extent_writer.cc\n      payload_consumer/file_descriptor.cc\n      payload_consumer/file_writer.cc\n      payload_consumer/filesystem_verifier_action.cc\n      payload_consumer/install_plan.cc\n      payload_consumer/payload_constants.cc\n      payload_consumer/payload_verifier.cc\n      payload_consumer/postinstall_runner_action.cc\n      payload_consumer/xz_extent_writer.cc\n\nlibupdate_engine_android (STATIC_LIBRARIES)\n  --  binder_bindings/android/os/IUpdateEngine.aidl\n      binder_bindings/android/os/IUpdateEngineCallback.aidl\n      binder_service_android.cc\n      boot_control_android.cc\n      certificate_checker.cc\n      daemon.cc\n      daemon_state_android.cc\n      hardware_android.cc\n      libcurl_http_fetcher.cc\n      network_selector_android.cc\n      proxy_resolver.cc\n      update_attempter_android.cc\n      update_status_utils.cc\n      utils_android.cc\n\nupdate_engine (EXECUTABLES)\n  --  main.cc\n\nupdate_engine_sideload (EXECUTABLES)\n  --  boot_control_android.cc\n      hardware_android.cc\n      network_selector_stub.cc\n      proxy_resolver.cc\n      sideload_main.cc\n      update_attempter_android.cc\n      update_status_utils.cc\n      utils_android.cc\n      boot_control_recovery_stub.cc\n\nupdate_engine_client (EXECUTABLES)\n  --  binder_bindings/android/os/IUpdateEngine.aidl\n      binder_bindings/android/os/IUpdateEngineCallback.aidl\n      common/error_code_utils.cc\n      update_engine_client_android.cc\n      update_status_utils.cc\n\nlibpayload_generator (SHARED_LIBRARIES)\n  --  payload_generator/ab_generator.cc\n      payload_generator/annotated_operation.cc\n      payload_generator/blob_file_writer.cc\n      payload_generator/block_mapping.cc\n      payload_generator/bzip.cc\n      payload_generator/cycle_breaker.cc\n      payload_generator/delta_diff_generator.cc\n      payload_generator/delta_diff_utils.cc\n      payload_generator/ext2_filesystem.cc\n      payload_generator/extent_ranges.cc\n      payload_generator/extent_utils.cc\n      payload_generator/full_update_generator.cc\n      payload_generator/graph_types.cc\n      payload_generator/graph_utils.cc\n      payload_generator/inplace_generator.cc\n      payload_generator/payload_file.cc\n      payload_generator/payload_generation_config.cc\n      payload_generator/payload_signer.cc\n      payload_generator/raw_filesystem.cc\n      payload_generator/tarjan.cc\n      payload_generator/topological_sort.cc\n      payload_generator/xz_android.cc\n\ndelta_generator (EXECUTABLES)\n  --  payload_generator/generate_delta_main.cc", 
            "title": "\u5347\u7ea7\u6d41\u4e0b\u8f7d\u548c\u5347\u7ea7"
        }, 
        {
            "location": "/Android-AB-system-update/#_5", 
            "text": "\u4e0b\u8f7d\u76f8\u5173\u4e0e\u670d\u52a1\u5668\u4ea4\u4e92\u7684\u903b\u8f91:  delta_performer.cc  \u5347\u7ea7\u6d41(\u5305)\u7684\u4e0b\u8f7d, \u5206\u4e3a\u4e24\u4e2a\u6a21\u5f0f:   \u4e0b\u8f7dzip\u5305\u5230data\u5206\u533a.  \u4e0b\u8f7d\u5347\u7ea7\u6d41, \u8fb9\u4e0b\u8fb9\u5347\u7ea7.   ( \u4ecechrome os\u4ee3\u7801\u770b, \u5176\u5347\u7ea7\u670d\u52a1\u5668\u662fomaha server, \u53ef\u4ee5\u53c2\u8003\u770b\u4e0b\u5bf9\u4e8e\u6211\u4eec\u7684\u5347\u7ea7\u670d\u52a1\u5668\u662f\u5426\u6709\u5e2e\u52a9.\nhttps://github.com/Crystalnix/omaha-server\nhttps://github.com/Crystalnix/omaha-server/wiki\n)  payload \u6570\u636e\u7ed3\u6784:  version 1:\n|  C r A U  | version(8) | manifestSize(8) | manifest(manifestSize) | rawData | payloadSignatureMessageSize | payloadSignatureMessage(payloadSignatureMessageSize) |\n\nversion 2:\n|  C r A U  | version(8) | manifestSize(8) | MetadataSignatureSize(4) | manifest(manifestSize) | medatadataSignatureMessage(MetadataSignatureSize) | rawData | payloadSignatureMessageSize | payloadSignatureMessage(payloadSignatureMessageSize) |  \u5176\u4e2d medatadataSignatureMessage \u6821\u9a8c\u7684\u662f\u5176\u4e4b\u524d\u7684\u6240\u6709\u6570\u636e, \u800c payloadSignatureMessage \u6821\u9a8c\u7684\u662f payloadSignatureMessageSize \u4e4b\u524d\u7684\u6240\u6709\u6570\u636e.  \u800c manifest \u662fprotobuff, \u5176\u4e2d\u5305\u542b\u4e00\u7ec4\u6307\u4ee4\u96c6, \u4e5f\u5c31\u662f\u4ee5\u524drecovery \u5757\u5347\u7ea7\u7684\u4e00\u7cfb\u5217\u6307\u4ee4. rawData\u662f\u88ab\u66f4\u65b0\u6570\u636e, \u6307\u4ee4\u4f1a\u4ecerawData\u6307\u5b9a\u4f4d\u7f6e\u8bfb\u53d6\u6570\u636e\u5e76\u5e94\u7528\u5230\u76ee\u6807\u5206\u533a\u7684\u6307\u5b9a\u4f4d\u7f6e.  metadata\u7684\u6570\u636e\u662fprotobuf, \u6570\u636e\u7ed3\u6784\u4e3a update_metadata.proto  \u4e0b\u8f7d\u5b58\u5728\u4e24\u79cd\u6a21\u5f0f, p2p\u548c\u666e\u901a\u4e0b\u8f7d.  \u4e0b\u8f7d\u5230data\u5206\u533a\u7684\u903b\u8f91\u4e0e\u4e4b\u524dota\u5347\u7ea7\u4e0b\u8f7d\u5347\u7ea7\u5305\u7684\u903b\u8f91\u4e00\u81f4.  update_engine \u5c06\u5347\u7ea7\u5305\u4e0b\u8f7d\u5230\u672c\u5730.  \u4e0b\u9762\u5148\u4ecb\u7ecd\u8fb9\u4e0b\u8fb9\u5347\u7ea7\u7684\u903b\u8f91.", 
            "title": " \u4e0b\u8f7d "
        }, 
        {
            "location": "/Android-AB-system-update/#data", 
            "text": "\u4e0b\u8f7d\u5230data\u5206\u533a\u7684\u5b9e\u73b0\u4e0d\u518d update_engine \u4e2d, \u800c\u5982\u679c\u662f\u9884\u5148\u4e0b\u8f7d\u5b8c\u6210\u7684payload, \u901a\u8fc7 file:// \u7684url\u4f20\u9012\u7ed9 update_engine , \u540e\u7eed\u903b\u8f91\u4e0e\u8fb9\u4e0b\u8fb9\u5347\u7ea7\u4e00\u6837.  \u800cjava\u5c42\u7684UpdateEngine.java\u7684API, \u66b4\u9732\u5230\u4e86\u7cfb\u7edf\u7684jar\u5305\u4e2d, \u5e76\u672a\u627e\u5230\u8c03\u7528\u8005, \u4e5f\u5c31\u662f\u8bf4, \u8fd9\u5757\u903b\u8f91\u662f\u975e\u5f00\u6e90\u7684, \u6211\u4eec\u65e0\u6cd5\u83b7\u5f97.", 
            "title": "\u4e0b\u8f7d\u5230data\u5206\u533a"
        }, 
        {
            "location": "/Android-AB-system-update/#_6", 
            "text": "\u6240\u8c13\u8fb9\u4e0b\u8fb9\u5347, \u5c31\u662f\u5c06\u5347\u7ea7\u6570\u636e\u4e0b\u8f7d\u5230\u5185\u5b58\u4e2d, \u5e76\u5728\u5185\u5b58\u4e2d\u5b8c\u6210\u76f8\u5e94\u5904\u7406, \u6700\u540e\u5199\u5165\u76ee\u6807\u5206\u533a. \n\u4e0b\u9762\u662f\u8fb9\u4e0b\u8fb9\u5347\u7684\u5ba2\u6237\u7aef\u6267\u884c\u547d\u4ee4.  # update_engine_client \\\n--payload=http://xxx/android/full-ota/payload.bin \\\n--update \\\n--headers= \\\n  FILE_HASH=ozGgyQEddkI5Zax+Wbjo6I/PCR8PEZka9gGd0nWa+oY= \\\n  FILE_SIZE=282344983\n  METADATA_HASH=GLIKfE6KRwylWMHsNadG/Q8iy5f786WTatvMdBlpOPg= \\\n  METADATA_SIZE=26723 \\   \u5728Pixel\u624b\u673a\u4e0a\u5347\u7ea7\u7684\u8f93\u51falog\u5982\u9644\u4ef6 update_engine.log , \u611f\u5174\u8da3\u7684\u7ae5\u978b\u53ef\u4ee5\u770b\u4e0b, \u5176\u4e2d\u5305\u542b\u4e86\u5404\u4e2a\u9636\u6bb5\u7684\u884c\u4e3a.  \u5176\u4e2dheader\u540e\u9762\u7684\u5185\u5bb9, \u8ddf\u5347\u7ea7\u5305\u4e2d\u7684 payload_properties.txt  \u6587\u4ef6\u5185\u5bb9\u4e00\u6837. \u5404\u5b57\u6bb5\u7684\u4f5c\u7528\u53ef\u4ee5\u53c2\u8003\u524d\u6587payload\u7684\u5934\u6570\u636e\u683c\u5f0f\u6765\u7406\u89e3\u5177\u4f53\u6821\u9a8c\u7684\u6570\u636e\u4f4d.  update_engine  \u9996\u5148\u5b9a\u4e49\u4e00\u7cfb\u5217\u7684action:   download_action : \u4e0b\u8f7d\u6a21\u5757, \u8d1f\u8d23\u8fb9\u4e0b\u8fb9\u5347\u7ea7.  filesystem_verifier_action : \u6587\u4ef6\u7cfb\u7edf\u6821\u9a8c\u6a21\u5757, \u8d1f\u8d23\u5347\u7ea7\u5b8c\u6210\u540e\u6821\u9a8c\u6570\u636e\u7684\u5b8c\u6574\u6027  postinstall_runner_action : \u540e\u5347\u7ea7\u6a21\u5757, \u4e00\u4e9b\u811a\u672c\u6216\u53ef\u6267\u884c\u7a0b\u5e8f\u5728\u7cfb\u7edf\u5347\u7ea7\u5b8c\u6210\u540e\u6267\u884c.   \u4ee5\u4e0aaction\u901a\u8fc7\u7c7b\u4f3cpipeline\u7684\u5f62\u5f0f\u7ec4\u7ec7, \u524d\u4e00\u4e2aaction\u7684\u8f93\u51fa\u4f5c\u4e3a\u540e\u4e00\u4e2aaction\u7684\u8f93\u5165. \u800c\u5728\u5176\u4e2d\u4f20\u9012\u7684\u6570\u636e\u662f install_plan_ , \u8be5\u6570\u636e\u5305\u542b\u4e86payload(\u5347\u7ea7\u6570\u636e)\u7684\u6240\u6709\u4fe1\u606f(\u64cd\u4f5c\u5206\u533a, url, \u6821\u9a8c\u4fe1\u606f\u7b49), \u90e8\u5206\u4fe1\u606f\u7531\u540e\u9762\u7684action\u6267\u884c\u540e\u63d0\u4f9b.\n\u6240\u6709\u7684action, \u5176\u6267\u884c\u5165\u53e3\u51fd\u6570\u662f PerformAction() , \u901a\u8fc7\u8fd9\u4e2a\u51fd\u6570, \u53ef\u4ee5\u66f4\u7ec6\u81f4\u5730\u4e86\u89e3\u8f93\u5165\u8f93\u51fa\u6570\u636e\u548c\u8be5action\u7684\u5177\u4f53\u529f\u80fd.  \u672c\u6bb5\u5185\u5bb9\u7740\u91cd\u4ecb\u7ecd download_action , \u5176\u4f59\u6a21\u5757\u5728\u540e\u9762\u4ecb\u7ecd.   \n1. \u8bfb\u53d6\u6570\u636e. \u8fd9\u91cc\u5e76\u4e0d\u662f\u6b63\u5e38\u7684read, \u8be5\u51fd\u6570\u662f\u4e2a\u4e0b\u8f7d\u7684Write\u56de\u8c03, \u800c\u8bfb\u53d6\u6570\u636e\u5728\u4ee3\u7801\u4e0a\u7684\u771f\u5b9e\u884c\u4e3a\u662f, \u8fd4\u56de\u9519\u8bef\u8868\u793a\u6570\u636e\u4e0d\u591f, \u7ee7\u7eed\u8bfb\u53d6, \u800c\u5df2\u7ecf\u8bfb\u53d6\u7684\u6570\u636e\u5b58\u653e\u5728buffer\u4e2d.\n2. \u89e3\u6790manifest. \u5c31\u662f\u4e0a\u6587\u4e2dpayload\u7684\u5934, \u5305\u542b\u6821\u9a8c\u4fe1\u606f\u548c\u6267\u884c\u7684\u6307\u4ee4\u96c6, \u8fd8\u6709\u6240\u6709\u64cd\u4f5c\u7684\u5206\u533a\u6821\u9a8c\u503c\u7b49.\n3. \u6253\u5f00\u5206\u533a\u8bbe\u5907. \u6839\u636e\u5347\u7ea7\u7c7b\u578b, \u5982\u679c\u662f\u5168\u91cf\u5347\u7ea7(manifest\u4e2d\u5305\u542b\u8be5\u4fe1\u606f), \u5219\u6253\u5f00\u88ab\u5347\u7ea7\u8bbe\u5907\u5206\u533a, \u5982\u679c\u662f\u589e\u91cf\u5347\u7ea7, \u6253\u5f00\u5f53\u524d\u8fd0\u884c\u8bbe\u5907\u5206\u533a\u548c\u88ab\u5347\u7ea7\u76ee\u6807\u5206\u533a.\n4. \u83b7\u53d6\u6307\u4ee4\u5217\u8868. \u662f\u4ecemanifest\u4e2d\u83b7\u53d6. \u4e0d\u540c\u6307\u4ee4, \u683c\u5f0f\u4e0d\u540c, \u4f46\u57fa\u672c\u683c\u5f0f\u662f  src:offset:size , \u6307\u5b9a\u64cd\u4f5c\u6e90/\u76ee\u6807, \u504f\u79fb\u548c\u5927\u5c0f.\n5. \u7531\u4e8e1\u63d0\u5230\u7684, \u5728\u6570\u636e\u4e0d\u591f\u65f6\u4f1a\u9000\u51fa, \u6240\u4ee5, \u4f1a\u4fdd\u5b58\u5f53\u524d\u5df2\u7ecf\u6267\u884c\u5230\u7684\u6307\u4ee4, \u5e76\u83b7\u53d6\u4e0b\u4e00\u4e2a\u6307\u4ee4\u4fe1\u606f, \u8fd9\u91cc\u4fe1\u606f\u91cd\u70b9\u662f, \u9700\u8981\u8bfb\u53d6\u7684payload\u4e2doffset\u548csize. \u7531\u4e8epayload\u4e2d\u7684\u5347\u7ea7\u6570\u636e\u662f\u8ddf\u6307\u4ee4\u4e00\u8d77\u751f\u6210\u7684, \u6240\u4ee5, \u5176\u6570\u636e\u7684\u504f\u79fb\u5b8c\u5168\u53ef\u4ee5\u8ddf\u6307\u4ee4\u7684\u987a\u5e8f\u4e00\u81f4, \u4fdd\u8bc1\u4e0d\u4f1a\u51fa\u73b0\u8bfb\u6307\u9488\u8df3\u52a8, \u4e5f\u5c31\u4e0d\u9700\u8981p2p\u652f\u6301.\n6. \u6267\u884c\u6307\u4ee4. \u57fa\u672c\u6307\u4ee4\u53ef\u4ee5\u67e5\u770b\u4ee3\u7801, \u4e0e\u5757\u5347\u7ea7\u6307\u4ee4\u4e00\u6837. \n\u4e0b\u9762\u662f\u5347\u7ea7\u65f6\u6570\u636e\u7684\u5408\u6210\u56fe.   \u8fd9\u5e45\u56fe\u5c55\u793a\u7684\u662f\u5347\u7ea7\u6570\u636e\u7684\u5408\u6210. \u5982\u679c\u662f\u5168\u91cf\u5347\u7ea7, source\u4e3a\u7a7a, \u5219payload\u76f4\u63a5\u5199\u5165target. \u4f46\u4e0e\u4e00\u822c\u5206\u533a\u70e7\u5199\u8fd8\u662f\u6709\u4e9b\u5dee\u5f02, \u5e76\u4e0d\u4f1a\u64e6\u9664target, \u800c\u662f\u6309\u7167\u504f\u79fb\u548c\u5927\u5c0f\u76f4\u63a5\u5199\u5165.\u800c\u5982\u679c\u662f\u589e\u91cf\u5347\u7ea7, \u5219\u662f\u57fa\u4e8e\u5f53\u524d\u8fd0\u884c\u7cfb\u7edf\u4e3asource, \u4e0epayload\u7684\u6570\u636e\u5408\u5e76\u5199\u5165target.  \u6240\u4ee5, \u4e0d\u7ba1\u662f\u5168\u91cf\u5347\u7ea7\u8fd8\u662f\u589e\u91cf\u5347\u7ea7, \u65ad\u7535\u540e\u90fd\u53ef\u4ee5\u4ece\u5934\u5f00\u59cb\u518d\u5347\u7ea7.", 
            "title": "\u8fb9\u4e0b\u8fb9\u5347"
        }, 
        {
            "location": "/Android-AB-system-update/#_7", 
            "text": "\u83b7\u53d6\u8f93\u5165\u6570\u636e. \u662f\u6307\u83b7\u53d6\u4ece download_action \u5b8c\u6210\u540e\u7684\u6570\u636e, \u5305\u542b\u88ab\u5347\u7ea7\u5206\u533a\u53ca\u5176\u54c8\u5e0c\u503c\u7b49.  \u5f00\u59cb\u6821\u9a8c\u88ab\u5347\u7ea7\u5206\u533a. \u5355\u7eaf\u4ece\u5206\u533a\u8bfb\u53d6\u5757\u6570\u636e\u5e76\u4e0epayload\u4e2d\u5b58\u653e\u7684\u8fdb\u884c\u6bd4\u5bf9\u6821\u9a8c.  \u5f00\u59cb\u6821\u9a8c\u5f53\u524dslot\u6e90\u5206\u533a. \u8fd9\u4e2a\u662f\u9488\u5bf9\u589e\u91cf\u5347\u7ea7\u7684. \u5728\u6821\u9a8c\u76ee\u6807\u5206\u533a\u5931\u8d25\u540e, \u6821\u9a8c\u6e90\u5206\u533a.\u6b64\u5904\u6821\u9a8c\u7684\u76ee\u7684\u4e0d\u662f\u5224\u65ad\u5f53\u524d\u8fd0\u884c\u7684\u5206\u533a\u662f\u5426\u5408\u6cd5(\u542f\u52a8\u65f6, \u7531\u5176\u4ed6\u6a21\u5757\u6821\u9a8c), \u800c\u662f\u5224\u65ad\u4e0b\u8f7d\u7684payload\u662f\u5426\u4e0e\u5f53\u524d\u7cfb\u7edf\u5339\u914d(\u670d\u52a1\u5668\u7aef\u653e\u9519\u5347\u7ea7\u6587\u4ef6).  \u6807\u8bb0\u4f20\u8f93\u5931\u8d25. \u8fd9\u91cc\u662f\u57283\u7684\u57fa\u7840\u4e0a, \u5c06\u5f53\u524dpayload\u7684\u4e0b\u8f7durl\u6807\u8bb0\u5931\u8d25, \u5e76\u589e\u52a0\u5931\u8d25\u6b21\u6570. \u5728\u8fbe\u5230\u4e00\u5b9a\u6b21\u6570\u540e(\u670d\u52a1\u7aef\u914d\u7f6e), \u4e0d\u518d\u4ece\u8be5url\u83b7\u53d6\u5347\u7ea7\u6570\u636e, \u8df3\u5f80\u4e0b\u4e00\u4e2aurl.", 
            "title": " \u6821\u9a8c "
        }, 
        {
            "location": "/Android-AB-system-update/#post-install", 
            "text": "\u5404\u4e2a\u5206\u533a\u90fd\u53ef\u4ee5\u6307\u5b9apostinstall, \u800cpostinstall\u811a\u672c\u662f\u5728 download_action \u89e3\u6790mainifest\u65f6\u89e3\u6790\u5e76\u83b7\u5f97. \u5728\u5b9a\u4e49\u6267\u884cpostinstall\u4f46\u53c8\u65e0\u811a\u672c\u6307\u5b9a\u65f6, \u9ed8\u8ba4postinstall\u811a\u672c\u662f\u5206\u533a\u6839\u76ee\u5f55\u4e0b\u7684 postinst  \u5728Chrome OS\u4e2d, postinstall \u662f\u5141\u8bb8\u5bf9\u5206\u533a\u6267\u884c\u5757\u5199\u5165\u64cd\u4f5c\u7684,\u4f46\u662f\u5728Android, \u6302\u8f7d\u5206\u533a\u88ab\u6267\u884c\u6807\u8bb0\u4e3a\u53ea\u8bfb, \u5e76\u4e14\u4e5f\u6302\u8f7d\u6210\u53ea\u8bfb, \u4e5f\u5c31\u662f\u8bf4, \u4e0d\u5141\u8bb8\u5bf9\u88ab\u5347\u7ea7\u5206\u533a\u505a\u4fee\u6539(\u5c31\u7b97\u4fee\u6539\u4e86, \u4e4b\u540e\u6821\u9a8c\u4f9d\u7136\u53ef\u80fd\u51fa\u9519). postinstall\u7684\u811a\u672c\u662f\u76f4\u63a5\u57fa\u4e8e\u5f53\u524d\u88ab\u5347\u7ea7\u7cfb\u7edf\u6267\u884c, \u5e76\u672achroot, \u6240\u4ee5, postinstall\u811a\u672c\u5fc5\u987b\u80fd\u591f\u88ab\u4fdd\u8bc1\u8fd0\u884c\u5728\u88ab\u5347\u7ea7\u7cfb\u7edf\u4e2d. \u6240\u4ee5, \u4e00\u822c\u662f\u7eaf\u9759\u6001\u7684\u53ef\u6267\u884c\u7a0b\u5e8f, \u800c\u4e14\u5176\u529f\u80fd\u5728android\u4e0a\u4e5f\u88ab\u5f31\u5316\u4e86.", 
            "title": " post install "
        }, 
        {
            "location": "/Android-AB-system-update/#odex", 
            "text": "\u5728\u4ee5\u4e0a\u5168\u90e8\u5b8c\u6210\u540e, \u7cfb\u7edf\u5c06\u6807\u8bb0slot\u4e3a\u88ab\u5347\u7ea7\u7cfb\u7edf, \u5e76\u5728\u4e0b\u6b21\u91cd\u542f\u540e, \u8fdb\u5165\u5347\u7ea7\u540e\u7684\u7cfb\u7edf, \u6821\u9a8c\u5e76\u4f18\u5316. \u8fd9\u65f6\u5019\u5982\u679c\u6821\u9a8c\u5931\u8d25, \u5219\u8fd8\u4f1a\u56de\u5230\u539f\u5148\u7cfb\u7edf. \u5219\u8be5\u60c5\u51b5\u5b58\u5728data\u4e0b\u5e94\u7528\u6570\u636e\u5df2\u7ecf\u88ab\u4f18\u5316\u4e3a\u65b0\u7248\u672c\u6216\u8005\u4f18\u5316\u5230\u4e00\u534a\u7684\u95ee\u9898. \u8ddf\u4e86\u4e0b\u76f8\u5173\u4ee3\u7801\u548c\u7f51\u4e0a\u7684\u8d44\u6599, \u7ed3\u8bba\u5982\u4e0b. \n\u5728A/B\u5347\u7ea7\u5b8c\u6210\u8fdb\u5165\u65b0\u7cfb\u7edf\u540e, dexopt\u7684\u53c2\u6570\u662fspeed-profile, \u800c\u8be5\u53c2\u6570\u7684\u542b\u4e49\u5c31\u662f\u6839\u636e\u201c\u70ed\u4ee3\u7801\u201d\u7684profile\u914d\u7f6e\u6765\u7f16\u8bd1. \u90a3\u4e48\u95ee\u9898\u5c31\u662f\u8fd9\u4e2aprofile\u7684\u751f\u6210,\u548c\u4ec0\u4e48\u65f6\u5019\u6267\u884c\u589e\u91cf\u7f16\u8bd1.   profile\u5728\u8fbe\u5230\u4e00\u5b9a\u6761\u4ef6\u540e\u5199\u5165/data/, \u76ee\u524d\u4ece\u4ee3\u7801\u770b, \u5df2\u77e5\u7684\u4e00\u4e2a\u6761\u4ef6\u662f\u5927\u5c0f 50K\u65f6, \u5199\u5165\u6587\u4ef6. \u800c\u5728\u5df2\u7ecf\u5b58\u5728\u8be5\u6587\u4ef6\u7684\u60c5\u51b5\u4e0b, \u4f1a\u4f18\u5148\u52a0\u8f7d, \u5982\u679c\u52a0\u8f7d\u5931\u8d25, \u5219\u5220\u9664\u5e76\u91cd\u65b0\u751f\u6210.  \u6267\u884c\u589e\u91cf\u7f16\u8bd1\u7684\u65f6\u95f4\u662f, \u673a\u5728\u5145\u7535\uff0b\u7a7a\u95f2\uff0b\u56db\u4e2a\u5c0f\u65f6\u95f4\u9694\u7b49\u591a\u4e2a\u6761\u4ef6\u4e0b, \u5728\u540e\u53f0\u5b8c\u6210.   \u4e5f\u5c31\u662f\u8bf4, \u5728AB\u7cfb\u7edf\u5347\u7ea7\u5b8c\u6210\u65f6, \u4e0d\u4f1a\u6267\u884c\u7f16\u8bd1, \u53ea\u4f1a\u6267\u884cprofile\u7684\u751f\u6210. \u800c\u5728\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u88ab\u68c0\u6d4b\u5230\u7cfb\u7edf\u6821\u9a8c\u5931\u8d25, \u5219\u4f1a\u56de\u5230\u4e0a\u4e00\u7248\u672c\u7cfb\u7edf.", 
            "title": " odex\u4f18\u5316 "
        }, 
        {
            "location": "/Android-AB-system-update/#bootloader", 
            "text": "\u4f20\u7edf\u7684Android\u4e0ebootloader\u901a\u4fe1\u662f\u901a\u8fc7misc\u5206\u533a. \u7136\u800c\u5728A/B\u7cfb\u7edf\u4e2d, \u6570\u636e\u5e76\u4e0d\u662f\u5b58\u5728misc\u5206\u533a, \u800c\u4e14\u5b58\u653e\u4f4d\u7f6e\u7531\u5382\u5546\u5b9a\u4e49, \u63a5\u53e3\u5728 hardware/libhardware/include/hardware/boot_control.h . \u5176\u7ed3\u6784\u4f53\u662f  boot_control_module_t , \u5305\u542b\u4e86\u6240\u6709\u8bbe\u7f6e\u4ee5\u4e0aslot\u72b6\u6001\u7684\u63a5\u53e3.  \u4e0b\u9762\u4ecb\u7ecd\u4e0b\u4e0d\u540c\u5382\u5546 boot_control \u7684\u5b9e\u73b0.", 
            "title": "bootloader\u4ea4\u4e92"
        }, 
        {
            "location": "/Android-AB-system-update/#qcom", 
            "text": "\u4ee3\u7801\u4f4d\u7f6e:   hardware/qcom/bootctrl/boot_control.cpp \nqcom\u7684\u5b9e\u73b0\u662f, \u76f4\u63a5\u5c06A/B\u5206\u533a\u7684\u5c5e\u6027, \u5199\u5165\u7684gpt\u5206\u533a\u8868\u7684boot\u5206\u533a( boot_a \u548c boot_b ).qcom\u673a\u9876\u76d2gpt\u8868\u7684\u5206\u6790:http://blog.csdn.net/guyongqiangx/article/details/68924436   \n\u4e0a\u56fe\u662fqcom\u673a\u9876\u76d2gpt\u5206\u533a\u8868\u7684\u4fe1\u606f, \u5728Entry\u4e2d\u67e5\u627e\u5230\u5206\u533a boot_a \u548c boot_b , \u63d0\u53d6\u5176\u5c5e\u6027.\n\u4ece LAB 2 \u5f00\u59cb\u5b58\u653e\u7684\u662fGPT\u5206\u533a\u7684\u8be6\u7ec6\u4fe1\u606f Partition Entry , \u5355\u4e2a Partition Entry \u5360128\u4e2a\u5b57\u8282, \u4ece\u7b2c48\u4e2a\u5b57\u8282\u5f00\u59cb\u5b58\u653e\u7684\u662f\u5206\u533a\u5c5e\u6027, \u800cA/B\u7cfb\u7edf\u7684\u5206\u533a\u5c5e\u6027\u4e5f\u662f\u5b58\u653e\u5728\u8fd9\u4e2a\u4f4d\u7f6e.  \u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u5230, qcom\u7684\u5b9e\u73b0, \u6ca1\u6709bootable\u7684\u6807\u8bb0\u4f4d, \u53d6\u800c\u4ee3\u4e4b\u7684\u662funbootable.", 
            "title": "qcom\u7684\u5b9e\u73b0"
        }, 
        {
            "location": "/Android-AB-system-update/#google", 
            "text": "\u4ee3\u7801\u4f4d\u7f6e system/extras/boot_control_copy/boot_control_copy.c  google\u7684\u53c2\u8003\u5b9e\u73b0\u590d\u7528\u4e86misc\u5206\u533a\u7684 bootloader_message (recovery\u4e0ebootloader\u901a\u4fe1\u7684\u5206\u533a). \u6574\u4e2amisc\u5206\u533a\u7684\u6570\u636e\u7ed3\u6784\u56fe\u5982\u4e0b.     fsmgr\u4f7f\u7528, \u5728\u8bbe\u7f6e\u6307\u5b9aslot\u4e3aactive\u65f6, \u540c\u65f6\u5c06\u5bf9\u5e94\u540e\u7f00\u8bbe\u7f6e\u5230\u8be5\u5b57\u6bb5. fsmgr\u5728\u6302\u8f7d\u5206\u533a\u65f6,\u901a\u8fc7\u8be5\u5b57\u6bb5\u62fc\u6210\u5b8c\u6210\u7684\u5206\u533a\u8def\u5f84.  Magic Numbe. \u7528\u6765\u786e\u5b9a\u8be5\u6570\u636e\u7aef\u7684\u5408\u6cd5, \u5fc5\u987b\u662f 'B', 'C' , 'c' (\" boot_control  copy\" \u7684\u7f29\u5199)  \u63a5\u53e3\u7248\u672c\u53f7  active\u72b6\u6001\u7684slot\u53f7, \u5728\u8be5\u5b9e\u73b0\u4e2d\u53ea\u6709 0 \u6216 1.  0 \u4e3a \u7b2c\u4e00\u4e2aslot, 1 \u4e3a\u7b2c\u4e8c\u4e2aslot, \u8bbe\u7f6eslot\u7684bootable/unbootable\u72b6\u6001.   \u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa, \u5e76\u6ca1\u6709\u53ef\u4ee5\u6807\u8bb0\u4e3asuccessful\u7684\u4f4d, \u901a\u8fc7\u4ee3\u7801\u4e5f\u53d1\u73b0, \u5176\u5b9e\u73b0\u4e3a\u7a7a, \u4e5f\u5c31\u662f\u8bf4, \u5e76\u6ca1\u6709\u5b9e\u73b0\u8be5\u72b6\u6001.  \u5982\u679c\u6ce8\u610f\u5230\u4ee3\u7801, \u5728 module_setActiveBootSlot \u540e\u534a\u6bb5, \u4f1a\u5c06active\u72b6\u6001\u7684 boot_X \u5206\u533a\u5185\u5bb9\u62f7\u8d1d\u5230boot\u5206\u533a. \u4e5f\u5c31\u662f\u8bf4, \u7cfb\u7edf\u5b58\u5728\u4e09\u4e2a\u5206\u533a(boot,  boot_a ,  boot_b ), \u88ab\u8bbe\u7f6e\u4e3aactive\u7684\u5206\u533a\u4f1a\u88ab\u62f7\u8d1d\u5230boot\u5206\u533a, \u518d\u7ed3\u5408 module_getCurrentSlot \u7684\u5b9e\u73b0(\u4ece/system\u5206\u533a\u83b7\u53d6\u6302\u8f7d\u4fe1\u606f) ,\u4ece\u8fd9\u4e24\u6bb5\u4ee3\u7801\u53ef\u4ee5\u63a8\u6d4b\u51fa\u4e24\u4e2a\u7ed3\u8bba:   A/B\u7cfb\u7edf\u53ef\u4ee5\u4e0d\u5347\u7ea7firmware(bootloader), \u6216\u8005\u8bf4google\u7684\u8be5\u5b9e\u73b0\u6700\u521d\u662f\u4e3a\u4e86\u517c\u5bb9\u8001\u7684bootloader.  boot.img\u4e2d\u7684ramdisk\u53ef\u4ee5\u8fd8\u662fboot\u7684ramdisk.   \u4f46\u662f, \u4e0d\u786e\u5b9a\u53c2\u8003\u4ee3\u7801\u662f\u5426\u80fd\u6b63\u5e38\u8fd0\u884c. \u4f46\u662f\u5355\u7eaf\u4ece\u4ee5\u4e0a\u4ee3\u7801\u770b, \u9664\u4e86\u5206\u533a, A/B\u7cfb\u7edf\u7684\u542f\u52a8, \u6302\u8f7d, \u90fd\u53ef\u4ee5\u5728\u7528\u6237\u5c42\u641e\u5b9a. \u4f46\u662f\u5e26\u6765\u7684\u540e\u679c\u5c31\u662f, \u5982\u679cbootloader\u542f\u52a8boot\u5931\u8d25, \u5219\u65e0\u6cd5\u5207\u6362\u5230\u53e6\u4e00\u4e2aslot.", 
            "title": "google\u7684\u53c2\u8003\u5b9e\u73b0"
        }, 
        {
            "location": "/Android-AB-system-update/#_8", 
            "text": "\u5347\u7ea7\u5305\u5236\u4f5c\u5de5\u5177\u4e0d\u518d\u652f\u6301 \u57fa\u4e8e\u6587\u4ef6\u7684\u5347\u7ea7, \u5f53\u524d\u53ea\u652f\u6301ab\u5347\u7ea7\u548c\u5757\u5347\u7ea7.  \u5757\u5347\u7ea7\u548cab\u5347\u7ea7\u5728\u751f\u6210\u6570\u636e\u6587\u4ef6\u548c\u811a\u672c\u4e0a\u539f\u7406\u662f\u4e00\u6837\u7684, \u53ea\u662f\u5728\u751f\u6210\u5347\u7ea7\u6570\u636e\u65f6\u5b58\u5728\u5dee\u5f02.  AB\u5347\u7ea7payload\u5236\u4f5c\u903b\u8f91\u5728\u5347\u7ea7\u5305\u5236\u4f5c\u811a\u672c\u7684 WriteABOTAPackageWithBrilloScript , \u800c\u771f\u6b63payload\u751f\u6210\u7684\u903b\u8f91\u5728\u51fd\u6570 GenerateUpdatePayloadFile .  \u6d41\u7a0b\u5982\u4e0b:  \u751f\u6210payload\u6307\u4ee4\u89c4\u5219:", 
            "title": "\u5347\u7ea7\u5305\u751f\u6210"
        }, 
        {
            "location": "/Android-AB-system-update/#ab_1", 
            "text": "", 
            "title": "AB\u5347\u7ea7\u603b\u6d41\u7a0b\u56fe"
        }, 
        {
            "location": "/Android-memory-debug/", 
            "text": "Android\u5185\u5b58\u8c03\u8bd5\u5de5\u5177\u603b\u7ed3\n\n\n\u6765\u6e90: https://pengzhangdev.github.io/Android-memory-debug/\n\n\n\u7d22\u5f15\n\n\n\n\n\u7cfb\u7edf\u5185\u5b58\u5206\u6790, \u6240\u6709\u8fdb\u7a0b\u5185\u5b58\u5206\u6790\n\n\n\u57fa\u672c\u7684\nlogcat\n\u8f93\u51fa\u4e2d\u53ef\u80fd\u5305\u542b\u7684GC\u76f8\u5173\u4fe1\u606f, \u53ef\u4ee5\u4f5c\u4e3a\u7cfb\u7edf\u6216\u67d0\u4e9b\u5e94\u7528\u5185\u5b58\u72b6\u51b5\u7684\u53c2\u8003\u4f9d\u636e.\n\n\n\u5728SystemServer\u542f\u52a8\u7684\u60c5\u51b5\u4e0b, \u8fd8\u53ef\u4ee5\u901a\u8fc7 \ndumpsys meminfo\n \u4eceframework\u5c42\u89d2\u5ea6\u67e5\u770b\u7cfb\u7edf\u5185\u5b58\u7684\u72b6\u51b5, \u8be5\u90e8\u5206\u4fe1\u606f\u4e0e\u4ece\u7cfb\u7edf\u89d2\u5ea6\u83b7\u53d6\u7684\u4fe1\u606f\u5b58\u5728\u5dee\u5f02.\n\n\n\u5bf9\u4e8e\u9700\u8981\u6392\u5e8f\u5e76\u67e5\u627e\u5185\u5b58\u5360\u7528\u6700\u591a\u7684\u8fdb\u7a0b, \u63a8\u8350\u4f7f\u7528\u547d\u4ee4 \nprocrank\n\n\n\u5728\u5b9e\u5728\u7f3a\u5c11\u5de5\u5177, \u6216\u8005RD\u77e5\u9053\u9700\u8981\u4ec0\u4e48\u4fe1\u606f\u7684\u60c5\u51b5\u4e0b, \u53ef\u4ee5\u67e5\u770b\n/proc/meminfo\n\n\n\u5982\u679c\u9700\u8981\u8fde\u7eed\u76d1\u63a7\u7cfb\u7edf\u7684\u72b6\u6001(\u5185\u5b58/CPU\u7b49), \u53ef\u4ee5\u8003\u8651\u5de5\u5177\nvmstat\n\n\n\u5982\u679c\u9700\u8981\u4ece\u5171\u4eab\u5e93\u6216\u8005\u5171\u4eab\u5185\u5b58\u7684\u89d2\u5ea6\u5206\u6790\u5176\u5185\u5b58\u5360\u7528\u7684\u60c5\u51b5, \u53ef\u4ee5\u8003\u8651\u7528 \nlibrank\n, \u5f53\u7136, \u5982\u679c\u5b58\u5728host\u7aef\u7684\u5206\u6790\u5de5\u5177, \u5219\u8be5\u5de5\u5177\u7684\u8f93\u51fa\u53ef\u4ee5\u9876\u66ff\nprocrank\n\u548c\nprocmem\n.\n\n\n\u5982\u679c\u9700\u8981\u67e5\u770b\u7cfb\u7edf\u4e2d\u54ea\u4e9b\u5171\u4eab\u6587\u4ef6\u522b\u901a\u8fc7\u7f3a\u9875\u9519\u8bef\u7684\u65b9\u5f0f\u8bfb\u5230\u5185\u5b58, \u53ef\u4ee5\u4f7f\u7528\u5de5\u5177\ndumpcache\n\n\n\u5982\u679c\u5b9e\u5728\u4e0d\u77e5\u9053bug\u539f\u56e0\u6216\u8005\u95ee\u9898\u53ef\u80fd\u8ddf\u81ea\u5df1\u65e0\u5173, \u5efa\u8bae\u4f7f\u7528 \nbugreport\n, \u4f9b\u5176\u4ed6RD\u534f\u52a9\u5206\u6790\u95ee\u9898.\n\n\n\n\n\n\n\u6307\u5b9a\u5e94\u7528(dalvik\u8fdb\u7a0b)\u5185\u5b58\u5206\u6790\n\n\ndumpsys meminfo \u5e94\u7528\u5185\u5b58\n \u8f93\u51fa\u5f53\u524d\u8fdb\u7a0b/\u5e94\u7528\u7684\u6240\u6709\u5185\u5b58\u5360\u7528\u60c5\u51b5. \u5efa\u8bae\u53ea\u9488\u5bf9dalvik\u5c42\u7684\u8fdb\u7a0b.\n\n\n\n\n\n\n\u6307\u5b9anative\u8fdb\u7a0b\u5185\u5b58\u5206\u6790\n\n\nnative\u7684\u5355\u4e2a\u8fdb\u7a0b\u5185\u5b58\u5206\u6790\u5efa\u8bae\u4f7f\u7528 \nprocmem\n\u548c \nshowmap\n. \nshowmap\n \u989d\u5916\u8f93\u51fa\u4e86\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4, \u53ef\u4ee5\u8f85\u52a9\u67e5\u770b\u7531\u4e8e\u865a\u62df\u5730\u5740\u7a7a\u95f4\u5f15\u8d77\u7684\u5185\u5b58\u95ee\u9898.\n\n\n\n\n\n\n\u5e94\u7528\u5185\u5b58\u6cc4\u9732\n\n\n\u5c11\u90e8\u5206\u7684\u6cc4\u9732, \u6bd4\u5982\u6570\u636e\u5e93/activity\u7b49, \u901a\u8fc7\ndumpsys meminfo \u5e94\u7528\u5185\u5b58\n, \u4f46\u53ea\u80fd\u77e5\u9053\u5b58\u5728\u6cc4\u9732.\n\n\n\u5e94\u7528\u5728\u5f00\u542f \nstrictmode\n \u7684\u60c5\u51b5\u4e0b, \u53ef\u4ee5\u53d1\u73b0\u66f4\u591a\u7684\u8d44\u6e90\u6cc4\u9732\u60c5\u51b5. \u4f46\u4ec5\u9650\u4e8e\u53d1\u73b0.\n\n\n\u4e00\u4e2a\u6bd4\u8f83\u63a8\u8350\u7684\u7528\u4e8e\u5b9a\u4e49\u5e94\u7528\u5185\u5b58\u6cc4\u9732\u7684\u5de5\u5177\u662f \nLeakCanary\n\n\n\n\n\n\nnative\u8fdb\u7a0b\u5185\u5b58\u6cc4\u9732\n\n\n\u57fa\u4e8ebionic\u7684\u5185\u5b58\u6cc4\u9732\u5206\u6790\u5de5\u5177\n, \u8be5\u5de5\u5177\u5bf9\u4e8eRD\u4f7f\u7528\u8981\u6c42\u504f\u9ad8.\n\n\n\n\n\n\nbugreport \u4fe1\u606f\u5206\u6790\n\n\n\u89c1\u5916\u90e8\u6587\u6863.\n\n\n\n\n\n\n\n\n\u57fa\u7840\u6982\u5ff5\n\n\nVSS - Virtual Set Size \u865a\u62df\u8017\u7528\u5185\u5b58\uff08\u5305\u542b\u5171\u4eab\u5e93\u5360\u7528\u7684\u5185\u5b58\uff09\nRSS - Resident Set Size \u5b9e\u9645\u4f7f\u7528\u7269\u7406\u5185\u5b58\uff08\u5305\u542b\u5171\u4eab\u5e93\u5360\u7528\u7684\u5185\u5b58\uff09\nPSS - Proportional Set Size \u5b9e\u9645\u4f7f\u7528\u7684\u7269\u7406\u5185\u5b58, USS + \u6bd4\u4f8b\u5206\u914d\u5171\u4eab\u5e93\u5360\u7528\u7684\u5185\u5b58\uff08[\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u5171\u4eab\u7684\u5185\u5b58(RSS - USS)] / [\u5206\u4eab\u5171\u4eab\u5185\u5b58\u7684\u8fdb\u7a0b\u6570\u91cf]\uff09.\nUSS - Unique Set Size \u8fdb\u7a0b\u72ec\u81ea\u5360\u7528\u7684\u7269\u7406\u5185\u5b58\uff08\u4e0d\u5305\u542b\u5171\u4eab\u5e93\u5360\u7528\u7684\u5185\u5b58\uff09\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u5982\u679c\u770b\u8fdb\u7a0b\u72ec\u5360\u5185\u5b58\uff0c\u3000\u5219\u4f7f\u7528USS. \u4f46\u662f\u4e00\u822c\u8003\u8651\u5230\u5171\u4eab\u5185\u5b58\u7684\u60c5\u51b5, \u5927\u90e8\u5206\u90fd\u662f\u4f9d\u636ePSS\u67e5\u770b\u5bf9\u5e94\u8fdb\u7a0b\u7684\u5185\u5b58\u5360\u7528.\n\n\n\nshared clean: \u5e72\u51c0\u7684\u5171\u4eab\u6570\u636e, \u4e5f\u5c31\u662f\u8bf4, \u5f53\u524d\u6709\u591a\u4e2a\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u6307\u5411\u8be5\u7269\u7406\u7a7a\u95f4, \u4e14\u5f53\u524d\u8fdb\u7a0b\u7a7a\u95f4\u8be5\u6570\u636e\u4e0edisk\u4e0a\u4e00\u81f4.\nshared dirty: \u810f\u5171\u4eab\u6570\u636e, \u4e0e\u4e0a\u9762\u5bf9\u5e94, \u8be5\u8fdb\u7a0b\u7a7a\u95f4\u7684\u5171\u4eab\u6570\u636e\u4e0edisk\u4e0a\u6570\u636e\u4e0d\u4e00\u81f4.\nprivate clean: \u8fdb\u7a0b\u79c1\u6709\u5e72\u51c0\u6570\u636e, \u4e0edisk\u6570\u636e\u4e00\u81f4.\nprivate dirty: \u8fdb\u7a0b\u79c1\u6709\u810f\u6570\u636e, \u4e0edisk\u6570\u636e\u4e0d\u4e00\u81f4.\n\n\n\n\n\n\u7cfb\u7edf\u5185\u5b58\u4fe1\u606f\u5206\u6790\n\n\nlogcat \u8f93\u51fa \n\n\ndalvik\u65e5\u5fd7\u6253\u5370\n\n\n\u573a\u666f: \u5728\u5e94\u7528\u968f\u673a\u51fa\u73b0\u6162\u65f6, \u53ef\u4ee5\u770b\u770b\u90a3\u6bb5\u65f6\u95f4logcat\u7684\u8f93\u51fa, \u662f\u5426\u5305\u542bGC\u7684\u4e00\u4e9b\u4fe1\u606f. GC\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5e94\u7528\u6162, \u800c\u7cfb\u7edf\u53d1\u8d77\u7684GC\u5219\u610f\u5473\u7740\u5185\u5b58\u4e0d\u591f, \u53ef\u80fd\u51fa\u73b0\u4ece\u78c1\u76d8\u52a0\u8f7d\u7684\u60c5\u51b5.\n\n\n\u5728logcat\u4e2d\u4f1a\u6253\u5370dalvik\u7684\u5783\u573e\u56de\u6536\u4fe1\u606f.\n\n\nD/dalvikvm: \nGC_Reason\n \nAmount_freed\n, \nHeap_stats\n, \nExternal_memory_stats\n, \nPause_time\n\nD/dalvikvm( 9050): GC_CONCURRENT freed 2049K, 65% free 3571K/9991K, external 4703K/5261K, paused 2ms+2ms\n\n\n\n\n\n\n\nGC_Reason\n:\n\n\n\nGC_CONCURRENT\n\n    \u5728\u60a8\u7684\u5806\u5f00\u59cb\u5360\u7528\u5185\u5b58\u65f6\u53ef\u4ee5\u91ca\u653e\u5185\u5b58\u7684\u5e76\u53d1\u5783\u573e\u56de\u6536\u3002\n\nGC_FOR_MALLOC\n\n    \u5806\u5df2\u6ee1\u800c\u7cfb\u7edf\u4e0d\u5f97\u4e0d\u505c\u6b62\u60a8\u7684\u5e94\u7528\u5e76\u56de\u6536\u5185\u5b58\u65f6\uff0c\u60a8\u7684\u5e94\u7528\u5c1d\u8bd5\u5206\u914d\u5185\u5b58\u800c\u5f15\u8d77\u7684\u5783\u573e\u56de\u6536\u3002\n\nGC_HPROF_DUMP_HEAP\n\n    \u5f53\u60a8\u8bf7\u6c42\u521b\u5efa HPROF \u6587\u4ef6\u6765\u5206\u6790\u5806\u65f6\u51fa\u73b0\u7684\u5783\u573e\u56de\u6536\u3002\n\nGC_EXPLICIT\n\n    \u663e\u5f0f\u5783\u573e\u56de\u6536\uff0c\u4f8b\u5982\u5f53\u60a8\u8c03\u7528 gc() \u65f6\uff08\u60a8\u5e94\u907f\u514d\u8c03\u7528\uff0c\u800c\u5e94\u4fe1\u4efb\u5783\u573e\u56de\u6536\u4f1a\u6839\u636e\u9700\u8981\u8fd0\u884c\uff09\u3002\n\nGC_EXTERNAL_ALLOC\n\n    \u8fd9\u4ec5\u9002\u7528\u4e8e API \u7ea7\u522b 10 \u53ca\u66f4\u4f4e\u7ea7\u522b\uff08\u66f4\u65b0\u7248\u672c\u4f1a\u5728 Dalvik \u5806\u4e2d\u5206\u914d\u4efb\u4f55\u5185\u5b58\uff09\u3002\u5916\u90e8\u5206\u914d\u5185\u5b58\u7684\u5783\u573e\u56de\u6536\uff08\u4f8b\u5982\u5b58\u50a8\u5728\u539f\u751f\u5185\u5b58\u6216 NIO \u5b57\u8282\u7f13\u51b2\u533a\u4e2d\u7684\u50cf\u7d20\u6570\u636e\uff09\u3002 \n\n\n\nAmount_freed\n:\n\n\n\u4ece\u6b64\u6b21\u5783\u573e\u56de\u6536\u4e2d\u56de\u6536\u7684\u5185\u5b58\u91cf\u3002\n\n\n\nHeap_stats\n:\n\n\n\n\u5806\u7684\u53ef\u7528\u7a7a\u95f4\u767e\u5206\u6bd4\u4e0e\uff08\u6d3b\u52a8\u5bf9\u8c61\u6570\u91cf\uff09/\uff08\u5806\u603b\u5927\u5c0f\uff09\u3002\n\n\n\n\nExternal_memory_stats\n:\n\n\n\nAPI \u7ea7\u522b 10 (Android3.0 \u4ee5\u4e0b)\u53ca\u66f4\u4f4e\u7ea7\u522b\u7684\u5916\u90e8\u5206\u914d\u5185\u5b58\uff08\u5df2\u5206\u914d\u5185\u5b58\u91cf\uff09/\uff08\u53d1\u751f\u56de\u6536\u7684\u9650\u503c\uff09. \u800c\u65b0API\u4e2d, \u7edf\u4e00\u7531dalvik\u7ba1\u7406.\n\n\n\n\nPause_time\n\n\n\n\n\u5806\u8d8a\u5927\uff0c\u6682\u505c\u65f6\u95f4\u8d8a\u957f\u3002\u5e76\u53d1\u6682\u505c\u65f6\u95f4\u663e\u793a\u4e86\u4e24\u4e2a\u6682\u505c\uff1a\u4e00\u4e2a\u51fa\u73b0\u5728\u56de\u6536\u5f00\u59cb\u65f6\uff0c\u53e6\u4e00\u4e2a\u51fa\u73b0\u5728\u56de\u6536\u5feb\u8981\u5b8c\u6210\u65f6\u3002\n\n\n\nart\u65e5\u5fd7\u6253\u5370\n\n\n\u4e0e Dalvik \u4e0d\u540c\uff0cART \u4e0d\u4f1a\u4e3a\u672a\u660e\u786e\u8bf7\u6c42\u7684\u5783\u573e\u56de\u6536\u8bb0\u5f55\u6d88\u606f\u3002\u53ea\u6709\u5728\u8ba4\u4e3a\u5783\u573e\u56de\u6536\u901f\u5ea6\u8f83\u6162\u65f6\u624d\u4f1a\u6253\u5370\u5783\u573e\u56de\u6536\u3002\u66f4\u786e\u5207\u5730\u8bf4\uff0c\u4ec5\u5728\u5783\u573e\u56de\u6536\u6682\u505c\u65f6\u95f4\u8d85\u8fc7 5ms \u6216\u5783\u573e\u56de\u6536\u6301\u7eed\u65f6\u95f4\u8d85\u8fc7 100ms \u65f6\u3002\u5982\u679c\u5e94\u7528\u672a\u5904\u4e8e\u53ef\u5bdf\u89c9\u7684\u6682\u505c\u8fdb\u7a0b\u72b6\u6001\uff0c\u90a3\u4e48\u5176\u5783\u573e\u56de\u6536\u4e0d\u4f1a\u88ab\u89c6\u4e3a\u8f83\u6162\u3002\u59cb\u7ec8\u4f1a\u8bb0\u5f55\u663e\u5f0f\u5783\u573e\u56de\u6536\u3002\n\n\nI/art: \nGC_Reason\n \nGC_Name\n \nObjects_freed\n(\nSize_freed\n) AllocSpace Objects, \nLarge_objects_freed\n(\nLarge_object_size_freed\n) \nHeap_stats\n LOS objects, \nPause_time(s)\n\n\nI/art : Explicit concurrent mark sweep GC freed 104710(7MB) AllocSpace objects, 21(416KB) LOS objects, 33% free, 25MB/38MB, paused 1.230ms total 67.216ms\n\n\n\n\n\nGC_Reason\n:\n\n\n\nConcurrent\n\n    \u4e0d\u4f1a\u6682\u505c\u5e94\u7528\u7ebf\u7a0b\u7684\u5e76\u53d1\u5783\u573e\u56de\u6536\u3002\u6b64\u5783\u573e\u56de\u6536\u5728\u540e\u53f0\u7ebf\u7a0b\u4e2d\u8fd0\u884c\uff0c\u800c\u4e14\u4e0d\u4f1a\u963b\u6b62\u5206\u914d\u3002\n\nAlloc\n\n    \u60a8\u7684\u5e94\u7528\u5728\u5806\u5df2\u6ee1\u65f6\u5c1d\u8bd5\u5206\u914d\u5185\u5b58\u5f15\u8d77\u7684\u5783\u573e\u56de\u6536\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5206\u914d\u7ebf\u7a0b\u4e2d\u53d1\u751f\u4e86\u5783\u573e\u56de\u6536\u3002\n\nExplicit\n\n    \u7531\u5e94\u7528\u660e\u786e\u8bf7\u6c42\u7684\u5783\u573e\u56de\u6536\uff0c\u4f8b\u5982\uff0c\u901a\u8fc7\u8c03\u7528 gc() \u6216 gc()\u3002\u4e0e Dalvik \u76f8\u540c\uff0c\u5728 ART \u4e2d\uff0c\u6700\u4f73\u505a\u6cd5\u662f\u60a8\u5e94\u4fe1\u4efb\u5783\u573e\u56de\u6536\u5e76\u907f\u514d\u8bf7\u6c42\u663e\u5f0f\u5783\u573e\u56de\u6536\uff08\u5982\u679c\u53ef\u80fd\uff09\u3002\u4e0d\u5efa\u8bae\u4f7f\u7528\u663e\u5f0f\u5783\u573e\u56de\u6536\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f1a\u963b\u6b62\u5206\u914d\u7ebf\u7a0b\u5e76\u4e0d\u5fc5\u8981\u5730\u6d6a\u8d39 CPU \u5468\u671f\u3002\u5982\u679c\u663e\u5f0f\u5783\u573e\u56de\u6536\u5bfc\u81f4\u5176\u4ed6\u7ebf\u7a0b\u88ab\u62a2\u5360\uff0c\u90a3\u4e48\u5b83\u4eec\u4e5f\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5361\u987f\uff08\u5e94\u7528\u4e2d\u51fa\u73b0\u95f4\u65ad\u3001\u6296\u52a8\u6216\u6682\u505c\uff09\u3002\n\nNativeAlloc\n\n    \u539f\u751f\u5206\u914d\uff08\u5982\u4f4d\u56fe\u6216 RenderScript \u5206\u914d\u5bf9\u8c61\uff09\u5bfc\u81f4\u51fa\u73b0\u539f\u751f\u5185\u5b58\u538b\u529b\uff0c\u8fdb\u800c\u5f15\u8d77\u7684\u56de\u6536\u3002\n\nCollectorTransition\n\n    \u7531\u5806\u8f6c\u6362\u5f15\u8d77\u7684\u56de\u6536\uff1b\u6b64\u56de\u6536\u7531\u8fd0\u884c\u65f6\u5207\u6362\u5783\u573e\u56de\u6536\u5f15\u8d77\u3002\u56de\u6536\u5668\u8f6c\u6362\u5305\u62ec\u5c06\u6240\u6709\u5bf9\u8c61\u4ece\u7a7a\u95f2\u5217\u8868\u7a7a\u95f4\u590d\u5236\u5230\u78b0\u649e\u6307\u9488\u7a7a\u95f4\uff08\u53cd\u4e4b\u4ea6\u7136\uff09\u3002\u5f53\u524d\uff0c\u56de\u6536\u5668\u8f6c\u6362\u4ec5\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\u51fa\u73b0\uff1a\u5728 RAM \u8f83\u5c0f\u7684\u8bbe\u5907\u4e0a\uff0c\u5e94\u7528\u5c06\u8fdb\u7a0b\u72b6\u6001\u4ece\u53ef\u5bdf\u89c9\u7684\u6682\u505c\u72b6\u6001\u53d8\u66f4\u4e3a\u53ef\u5bdf\u89c9\u7684\u975e\u6682\u505c\u72b6\u6001\uff08\u53cd\u4e4b\u4ea6\u7136\uff09\u3002 \n\nHomogeneousSpaceCompact\n\n    \u9f50\u6027\u7a7a\u95f4\u538b\u7f29\u662f\u7a7a\u95f2\u5217\u8868\u7a7a\u95f4\u5230\u7a7a\u95f2\u5217\u8868\u7a7a\u95f4\u538b\u7f29\uff0c\u901a\u5e38\u5728\u5e94\u7528\u8fdb\u5165\u5230\u53ef\u5bdf\u89c9\u7684\u6682\u505c\u8fdb\u7a0b\u72b6\u6001\u65f6\u53d1\u751f\u3002\u8fd9\u6837\u505a\u7684\u4e3b\u8981\u539f\u56e0\u662f\u51cf\u5c11 RAM \u4f7f\u7528\u91cf\u5e76\u5bf9\u5806\u8fdb\u884c\u788e\u7247\u6574\u7406\u3002 \n\nDisableMovingGc\n\n    \u8fd9\u4e0d\u662f\u771f\u6b63\u7684\u5783\u573e\u56de\u6536\u539f\u56e0\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u53d1\u751f\u5e76\u53d1\u5806\u538b\u7f29\u65f6\uff0c\u7531\u4e8e\u4f7f\u7528\u4e86 GetPrimitiveArrayCritical\uff0c\u56de\u6536\u906d\u5230\u963b\u6b62\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5f3a\u70c8\u5efa\u8bae\u4e0d\u8981\u4f7f\u7528 GetPrimitiveArrayCritical\uff0c\u56e0\u4e3a\u5b83\u5728\u79fb\u52a8\u56de\u6536\u5668\u65b9\u9762\u5177\u6709\u9650\u5236\u3002 \n\nHeapTrim\n\n    \u8fd9\u4e0d\u662f\u5783\u573e\u56de\u6536\u539f\u56e0\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u5806\u4fee\u526a\u5b8c\u6210\u4e4b\u524d\u56de\u6536\u4f1a\u4e00\u76f4\u53d7\u5230\u963b\u6b62\u3002 \n\n\nGC_Name\n:\n\n\n\nART \u5177\u6709\u53ef\u4ee5\u8fd0\u884c\u7684\u591a\u79cd\u4e0d\u540c\u7684\u5783\u573e\u56de\u6536\u3002 \n\n\nConcurrent mark sweep (CMS)\n\n    \u6574\u4e2a\u5806\u56de\u6536\u5668\uff0c\u4f1a\u91ca\u653e\u548c\u56de\u6536\u6620\u50cf\u7a7a\u95f4\u4ee5\u5916\u7684\u6240\u6709\u5176\u4ed6\u7a7a\u95f4\u3002\n\nConcurrent partial mark sweep\n\n    \u51e0\u4e4e\u6574\u4e2a\u5806\u56de\u6536\u5668\uff0c\u4f1a\u56de\u6536\u9664\u4e86\u6620\u50cf\u7a7a\u95f4\u548c zygote \u7a7a\u95f4\u4ee5\u5916\u7684\u6240\u6709\u5176\u4ed6\u7a7a\u95f4\u3002 \n\nConcurrent sticky mark sweep\n\n    \u751f\u6210\u56de\u6536\u5668\uff0c\u53ea\u80fd\u91ca\u653e\u81ea\u4e0a\u6b21\u5783\u573e\u56de\u6536\u4ee5\u6765\u5206\u914d\u7684\u5bf9\u8c61\u3002\u6b64\u5783\u573e\u56de\u6536\u6bd4\u5b8c\u6574\u6216\u90e8\u5206\u6807\u8bb0\u6e05\u9664\u8fd0\u884c\u5f97\u66f4\u9891\u7e41\uff0c\u56e0\u4e3a\u5b83\u66f4\u5feb\u901f\u4e14\u6682\u505c\u65f6\u95f4\u66f4\u77ed\u3002 \n\nMarksweep + semispace\n\n    \u975e\u5e76\u53d1\u3001\u590d\u5236\u5783\u573e\u56de\u6536\uff0c\u7528\u4e8e\u5806\u8f6c\u6362\u4ee5\u53ca\u9f50\u6027\u7a7a\u95f4\u538b\u7f29\uff08\u5bf9\u5806\u8fdb\u884c\u788e\u7247\u6574\u7406\uff09\u3002 \n\n\nObjects_freed\n:\n\n\n\u6b64\u6b21\u5783\u573e\u56de\u6536\u4ece\u975e\u5927\u578b\u5bf9\u8c61\u7a7a\u95f4\u56de\u6536\u7684\u5bf9\u8c61\u6570\u91cf\u3002\n\n\nSize_freed\n:\n\n\n\u6b64\u6b21\u5783\u573e\u56de\u6536\u4ece\u975e\u5927\u578b\u5bf9\u8c61\u7a7a\u95f4\u56de\u6536\u7684\u5b57\u8282\u6570\u91cf\u3002\n\n\nLarge_objects_freed\n:\n\n\n\u6b64\u6b21\u5783\u573e\u56de\u6536\u4ece\u5927\u578b\u5bf9\u8c61\u7a7a\u95f4\u56de\u6536\u7684\u5bf9\u8c61\u6570\u91cf\u3002\n\n\nLarge_object_size_freed\n:\n\n\n\u6b64\u6b21\u5783\u573e\u56de\u6536\u4ece\u5927\u578b\u5bf9\u8c61\u7a7a\u95f4\u56de\u6536\u7684\u5b57\u8282\u6570\u91cf\u3002\n\n\nHeap_stats\n\n\n\u7a7a\u95f2\u767e\u5206\u6bd4\u4e0e\uff08\u6d3b\u52a8\u5bf9\u8c61\u6570\u91cf\uff09/\uff08\u5806\u603b\u5927\u5c0f\uff09\u3002\n\n\nPause_time(s)\n\n\n\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6682\u505c\u65f6\u95f4\u4e0e\u5783\u573e\u56de\u6536\u8fd0\u884c\u65f6\u4fee\u6539\u7684\u5bf9\u8c61\u5f15\u7528\u6570\u91cf\u6210\u6b63\u6bd4\u3002\u5f53\u524d\uff0cART CMS \u5783\u573e\u56de\u6536\u4ec5\u5728\u5783\u573e\u56de\u6536\u5373\u5c06\u5b8c\u6210\u65f6\u6682\u505c\u4e00\u6b21\u3002\u79fb\u52a8\u7684\u5783\u573e\u56de\u6536\u6682\u505c\u65f6\u95f4\u8f83\u957f\uff0c\u4f1a\u5728\u5927\u90e8\u5206\u5783\u573e\u56de\u6536\u671f\u95f4\u6301\u7eed\u51fa\u73b0\u3002\n\n\nandroid\u81ea\u5e26\u5de5\u5177\n\n\ndumpsys meminfo \n\n\nhttps://developer.android.com/studio/profile/investigate-ram.html\nhttp://gityuan.com/2016/01/02/memory-analysis-command/\n\n\n\u573a\u666f: \u67e5\u770bdalvik\u7b49\u533a\u57df\u5185\u5b58\u60c5\u51b5.\n\n\nroot@zx1800:/data # dumpsys meminfo\nApplications Memory Usage (kB):                                           --- \u4ee5\u4e0b\u5185\u5b58\u5355\u4f4d\nUptime: 618252294 Realtime: 618252294                                     --- Realtime: \u7cfb\u7edf\u542f\u52a8\u5f00\u59cb\u8ba1\u65f6, \u5305\u542b\u4f11\u7720, \u51c6\u786e\u6027\u4f9d\u8d56\u9a71\u52a8\u5b9e\u73b0. \u5728\u9a71\u52a8\u65e0\u5b9e\u73b0\u65f6, \u4f7f\u7528Uptime.\n                                                                          --- Uptime: \u7cfb\u7edf\u542f\u52a8\u5f00\u59cb\u8ba1\u65f6, \u4e0d\u5305\u542b\u4f11\u7720.\n\nTotal PSS by process:                                                     --- \u6240\u6709\u8fdb\u7a0b PSS \u5360\u7528\u6392\u5e8f\n    24712 kB: system (pid 445)\n    19600 kB: com.china_liantong.upgrade (pid 2660)\n    17500 kB: com.china_liantong.video (pid 3002 / activities)\n    11100 kB: com.china_liantong.oam (pid 999)\n    10627 kB: com.china_liantong.channelmanagerservice (pid 961)\n     8733 kB: com.china_liantong.live.service.LiveService (pid 2086)\n     8394 kB: com.china_liantong.ocnadservice (pid 942)\n     7622 kB: com.android.systemui (pid 677)\n     6708 kB: dhcpcd (pid 639)\n     6541 kB: com.china_liantong.epg (pid 1235)\n     6286 kB: android.process.media (pid 2041)\n     5691 kB: com.china_liantong.airsharingservice (pid 2063)\n     4466 kB: dvbserver (pid 211)\n     4041 kB: mediaserver (pid 196)\n     3890 kB: com.china_liantong.xmppservice (pid 887)\n     3354 kB: com.china_liantong.tvmediaplayerservice (pid 905)\n     3239 kB: com.china_liantong.launcher:SettingContentProvider (pid 1165)\n     2466 kB: surfaceflinger (pid 183)\n     2214 kB: com.china_liantong.inputmethod.pinyin (pid 773)\n     2122 kB: com.china_liantong.dtvsyskeyservice (pid 980)\n     1955 kB: logd (pid 178)\n     1943 kB: com.china_liantong.tvframe (pid 1066)\n     1847 kB: com.china_liantong.playback (pid 923)\n     1640 kB: zygote (pid 220)\n      615 kB: sdcard (pid 1698)\n      473 kB: netd (pid 191)\n      415 kB: sysinfod (pid 184)\n      392 kB: vold (pid 182)\n      364 kB: developed (pid 222)\n      356 kB: adbd (pid 224)\n      350 kB: sh (pid 12684)\n      285 kB: /init (pid 1)\n      279 kB: dvbresourceserver (pid 210)\n      261 kB: sdcard (pid 223)\n      258 kB: avsettingd (pid 215)\n      240 kB: sh (pid 1325)\n      164 kB: ueventd (pid 159)\n      135 kB: keystore (pid 201)\n       82 kB: servicemanager (pid 181)\n       81 kB: installd (pid 199)\n       76 kB: healthd (pid 179)\n       62 kB: lmkd (pid 180)\n       26 kB: drmserver (pid 195)\n       26 kB: systemtaskd (pid 202)\n       22 kB: frontpaneld (pid 207)\n       15 kB: common_time (pid 189)\n       15 kB: frontpadserver (pid 216)\n       15 kB: dcaseventsvr (pid 219)\n        9 kB: sh (pid 190)\n        9 kB: debuggerd (pid 192)\n\nTotal PSS by OOM adjustment:                                              --- \u4ee5OOM\u7c7b\u522b\u5212\u5206(TODO: \u6bcf\u4e2a\u7c7b\u522b\u4f9d\u636e\u548c\u542b\u4e49)\n    26301 kB: Native\n                6708 kB: dhcpcd (pid 639)\n                4466 kB: dvbserver (pid 211)\n                4041 kB: mediaserver (pid 196)\n                2466 kB: surfaceflinger (pid 183)\n                1955 kB: logd (pid 178)\n                1640 kB: zygote (pid 220)\n                 615 kB: sdcard (pid 1698)\n                 473 kB: netd (pid 191)\n                 415 kB: sysinfod (pid 184)\n                 392 kB: vold (pid 182)\n                 364 kB: developed (pid 222)\n                 356 kB: adbd (pid 224)\n                 350 kB: sh (pid 12684)\n                 285 kB: /init (pid 1)\n                 279 kB: dvbresourceserver (pid 210)\n                 261 kB: sdcard (pid 223)\n                 258 kB: avsettingd (pid 215)\n                 240 kB: sh (pid 1325)\n                 164 kB: ueventd (pid 159)\n                 135 kB: keystore (pid 201)\n                  82 kB: servicemanager (pid 181)\n                  81 kB: installd (pid 199)\n                  76 kB: healthd (pid 179)\n                  62 kB: lmkd (pid 180)\n                  26 kB: drmserver (pid 195)\n                  26 kB: systemtaskd (pid 202)\n                  22 kB: frontpaneld (pid 207)\n                  15 kB: common_time (pid 189)\n                  15 kB: frontpadserver (pid 216)\n                  15 kB: dcaseventsvr (pid 219)\n                   9 kB: sh (pid 190)\n                   9 kB: debuggerd (pid 192)\n    24712 kB: System\n               24712 kB: system (pid 445)\n    48956 kB: Persistent\n               11100 kB: com.china_liantong.oam (pid 999)\n               10627 kB: com.china_liantong.channelmanagerservice (pid 961)\n                8394 kB: com.china_liantong.ocnadservice (pid 942)\n                7622 kB: com.android.systemui (pid 677)\n                3890 kB: com.china_liantong.xmppservice (pid 887)\n                3354 kB: com.china_liantong.tvmediaplayerservice (pid 905)\n                2122 kB: com.china_liantong.dtvsyskeyservice (pid 980)\n                1847 kB: com.china_liantong.playback (pid 923)\n    27280 kB: Foreground\n               17500 kB: com.china_liantong.video (pid 3002 / activities)\n                6541 kB: com.china_liantong.epg (pid 1235)\n                3239 kB: com.china_liantong.launcher:SettingContentProvider (pid 1165)\n     1943 kB: Visible\n                1943 kB: com.china_liantong.tvframe (pid 1066)\n     2214 kB: Perceptible\n                2214 kB: com.china_liantong.inputmethod.pinyin (pid 773)\n     6286 kB: Home\n                6286 kB: android.process.media (pid 2041)\n    34024 kB: B Services  (\u6ce8\u91ca: \u8001\u65e7\u7684, \u4e0d\u592a\u53ef\u80fd\u88ab\u4f7f\u7528\u5230\u7684\u670d\u52a1\u8fdb\u7a0b)\n               19600 kB: com.china_liantong.upgrade (pid 2660)\n                8733 kB: com.china_liantong.live.service.LiveService (pid 2086)\n                5691 kB: com.china_liantong.airsharingservice (pid 2063)\n\nTotal PSS by category:                                               --- \u4ee5 category \u5212\u5206\n    49530 kB: Native\n    35318 kB: Dalvik\n    26569 kB: .so mmap\n    17158 kB: .oat mmap\n    16357 kB: .art mmap\n     8144 kB: .dex mmap\n     6671 kB: Stack\n     2822 kB: Dalvik Other\n     2635 kB: Other mmap\n     2160 kB: .ttf mmap\n     1892 kB: Other dev\n     1581 kB: Unknown\n      843 kB: .apk mmap\n       36 kB: EGL mtrack\n        0 kB: Cursor\n        0 kB: Ashmem\n        0 kB: Gfx dev\n        0 kB: .jar mmap\n        0 kB: GL mtrack\n        0 kB: Other mtrack\n\nTotal RAM: 443652 kB (status critical)\n Free RAM: 137634 kB (40310 cached pss + 9492 cached kernel + 87832 free)\n Used RAM: 168782 kB (131406 used pss + 37376 kernel)\n Lost RAM: 137236 kB\n     ZRAM: 10684 kB physical used for 32252 kB in swap (196604 kB total swap)\n           \u538b\u7f29\u540e\u5185\u5b58\u5360\u7528             \u88ab\u538b\u7f29\u5185\u5b58\n      KSM: 39500 kB saved from shared 5844 kB\n           85420 kB unshared; 99276 kB volatile\n   Tuning: 96 (large 96), oom 10240 kB, restore limit 3413 kB (low-ram)\n\n\n\n\n\nprocrank \n\n\n\u573a\u666f: \u67e5\u770b\u5404\u4e2a\u8fdb\u7a0b\u7684PSS/USS \u5e76\u6bd4\u8f83\n\n\nshell@zx1800:/ # procrank\n  PID       Vss      Rss      Pss      Uss  cmdline\n  884   589628K   89320K   30444K   23128K  com.china_liantong.launcher\n  447   617060K   74620K   25695K   20904K  system_server\n 1139   572780K   61160K   14848K   10160K  com.china_liantong.browserreceiver\n  209   125160K   25312K   13834K   12696K  /system/bin/dvbserver\n 1180   549556K   65992K   12433K    6192K  com.china_liantong.upgrade\n  807   554556K   48092K    9636K    7160K  com.china_liantong.ocnadservice\n  222   516596K   54256K    8960K    3152K  zygote\n  864   547692K   47220K    8431K    6024K  com.china_liantong.oam\n  827   552092K   46208K    8180K    5840K  com.china_liantong.channelmanagerservice\n  223    71580K   18580K    7156K    3928K  /system/bin/developed\n  955   529948K   44620K    6591K    4000K  com.china_liantong.epg\n  534   525112K   41324K    6233K    3816K  com.android.systemui\n  516   523764K   39424K    5949K    3884K  android.process.media\n  183    55092K   17936K    5935K    4284K  /system/bin/surfaceflinger\n 1066   525392K   41296K    5140K    2712K  com.china_liantong.live.service.LiveService\n  771   529900K   40224K    4864K    2888K  com.china_liantong.tvmediaplayerservice\n  753   525476K   37228K    4681K    2804K  com.china_liantong.xmppservice\n  201    53500K   12232K    4421K    3460K  /system/bin/mediaserver\n 1206   521008K   36324K    4288K    2580K  com.china_liantong.mytv\n  979   527892K   36256K    4201K    2080K  com.china_liantong.launcher:SettingContentProvider\n 1095   526240K   36480K    4145K    2368K  com.china_liantong.airsharingservice\n  601   518952K   37128K    3898K    1984K  com.china_liantong.inputmethod.pinyin\n  789   526912K   32468K    3309K    1832K  com.china_liantong.playback\n 1048   520468K   32616K    2799K     968K  com.china_liantong.live\n  846   525972K   32620K    2787K    1336K  com.china_liantong.dtvsyskeyservice\n 1252   519376K   31716K    2687K    1260K  com.china_liantong.video\n  907   524920K   32120K    2676K    1236K  com.china_liantong.tvframe\n  511    19896K    5168K    2350K    1208K  /system/bin/dhcpcd\n  210    25496K    6480K    1662K    1316K  /system/bin/avsettingd\n  178    18252K    2596K    1509K    1476K  /system/bin/logd\n  199    23564K    4880K    1273K    1004K  /system/bin/drmserver\n  217    18936K    2864K     826K     740K  /system/bin/frontpadserver\n  182    19568K    3176K     816K     636K  /system/bin/vold\n  205    12508K    2804K     718K     572K  /system/bin/keystore\n  184    16580K    2580K     681K     536K  /system/bin/sysinfod\n  197    21796K    1672K     538K     480K  /system/bin/netd\n 2135     9192K    1100K     532K     520K  procrank\n  189    17484K    1748K     481K     420K  /system/bin/common_time\n  208    17492K    1792K     479K     436K  /system/bin/dvbresourceserver\n  220    16400K    1672K     434K     388K  /system/bin/dcaseventsvr\n  225    16980K     508K     416K     416K  /sbin/adbd\n  224    15412K    1048K     356K     336K  /system/bin/sdcard\n 1434     9324K    1020K     338K     244K  sh\n  186    14820K     428K     336K     332K  /sbin/watchdog\n    1     8860K     396K     327K     316K  /init\n 1428     9324K    1008K     326K     232K  /system/bin/sh\n  206    14460K    1036K     310K     288K  /system/bin/systemtaskd\n  203     9412K    1012K     272K     248K  /system/bin/installd\n  207    14456K     992K     266K     244K  /system/bin/frontpaneld\n  179     9828K     316K     260K     256K  /sbin/healthd\n  180    10624K    1664K     184K     116K  /system/bin/lmkd\n  181     9460K     792K      98K      76K  /system/bin/servicemanager\n  198    10056K    1108K      64K      28K  /system/bin/debuggerd\n  160     8852K      56K      11K       4K  /sbin/ueventd\n                           ------   ------  ------\n                          230106K  155544K  TOTAL\n\nRAM: 443652K total, 38684K free, 0K buffers, 98768K cached, 1384K shmem, 21560K slab\n\n\n\n\n\ncat /proc/meminfo \n\n\n\u573a\u666f: \u7cfb\u7edf\u5185\u5b58\u8be6\u7ec6\u4fe1\u606f\n\n\nshell@zx1800:/ # cat /proc/meminfo                                             \nMemTotal:         443652 kB                      --- \u7cfb\u7edf\u53ef\u89c1\u7684\u603b\u7269\u7406\u5185\u5b58\nMemFree:           38584 kB                      --- \u7cfb\u7edf\u4e2d\u672a\u4f7f\u7528\u7684\u7269\u7406\u5185\u5b58\nMemAvailable:     125556 kB                      --- \u53ef\u7528\u5185\u5b58 = MemFree + Cached + Buffers\nBuffers:               0 kB                      --- \u7528\u4e8e\u6587\u4ef6\u7f13\u51b2\u7684\u5185\u5b58\u5927\u5c0f\nCached:            98768 kB                      --- \u7528\u4e8e\u9ad8\u901f\u7f13\u5b58\u5668\u5360\u7528\u7684\u5185\u5b58\u5927\u5c0f\nSwapCached:          128 kB                      --- \u7528\u4e8e\u9ad8\u901f\u7f13\u5b58\u5668\u5360\u7528\u7684swap\u5927\u5c0f\nActive:           143160 kB                      --- \u6d3b\u8dc3\u4f7f\u7528\u4e2d\u7684\u5185\u5b58, \u4e00\u822c\u4e0d\u4f1a\u56de\u6536. = anon + file\nInactive:          87104 kB                      --- \u6700\u8fd1\u672a\u88ab\u4f7f\u7528\u7684\u5185\u5b58, \u53ef\u4ee5\u88ab\u56de\u6536. = anon + file\nActive(anon):      94348 kB\nInactive(anon):    38532 kB\nActive(file):      48812 kB\nInactive(file):    48572 kB\nUnevictable:           0 kB                      \nMlocked:               0 kB\nHighTotal:             0 kB                      \nHighFree:              0 kB\nLowTotal:         443652 kB\nLowFree:           38584 kB\nSwapTotal:        196604 kB                      --- swap\u5206\u533a\u5927\u5c0f\nSwapFree:         193784 kB                      --- swap\u5206\u533a\u5269\u4f59\u7a7a\u95f4\nDirty:                 0 kB                      \nWriteback:             0 kB\nAnonPages:        131492 kB                      --- \u533f\u540d\u9875\nMapped:            90688 kB                      --- map\u7684\u5185\u5b58\nShmem:              1384 kB                      --- \u5171\u4eab\u5185\u5b58, \u8ddf\u6587\u4ef6\u65e0\u5173\u7684\nSlab:              21604 kB                      --- kernel slab\u5206\u914d\u5668\nSReclaimable:       5464 kB\nSUnreclaim:        16140 kB\nKernelStack:        5424 kB                      --- \u5185\u6838\u6808\nPageTables:         7932 kB                      --- \u7ba1\u7406\u9875\u7684\u6570\u636e\u7ed3\u6784\u5927\u5c0f\nNFS_Unstable:          0 kB\nBounce:                0 kB\nWritebackTmp:          0 kB\nCommitLimit:      418428 kB\nCommitted_AS:    8764944 kB\nVmallocTotal:     565248 kB\nVmallocUsed:       55952 kB\nVmallocChunk:     472068 kB\n\n\n\n\n\nvmstat \n\n\n\u573a\u666f: \u76d1\u63a7\u7cfb\u7edf\u72b6\u6001.\n\n\n\u8be5\u5de5\u5177\u53ef\u4ee5\u67e5\u770b\u7cfb\u7edf\u5185\u5b58\u4fe1\u606f, \u8fdb\u7a0b\u961f\u5217, \u7cfb\u7edf\u5207\u6362, CPU\u65f6\u95f4\u5360\u6bd4\u7b49\u4fe1\u606f, \u5468\u671f\u6027\u52a8\u6001\u8f93\u51fa.\n\n\nprocs  memory                       system          cpu              \n r  b    free mapped   anon   slab    in   cs  flt  us ni sy id wa ir\n \n0\n  \n0\n   \n38628\n  \n90844\n \n131992\n  \n21688\n  \n5268\n \n10257\n    \n0\n   \n5\n  \n0\n  \n6\n \n99\n  \n0\n  \n0\n\n \n0\n  \n0\n   \n38628\n  \n90844\n \n132008\n  \n21688\n  \n5271\n \n10367\n    \n0\n   \n8\n  \n0\n  \n9\n \n99\n  \n0\n  \n0\n\n \n0\n  \n0\n   \n38628\n  \n90844\n \n132048\n  \n21688\n  \n5150\n \n10497\n    \n0\n  \n10\n  \n1\n  \n8\n \n99\n  \n0\n  \n0\n\n \n0\n  \n0\n   \n38628\n  \n90844\n \n132100\n  \n21688\n  \n5112\n \n10180\n    \n0\n   \n8\n  \n0\n  \n3\n \n99\n  \n0\n  \n0\n\n \n0\n  \n0\n   \n38628\n  \n90844\n \n132120\n  \n21688\n  \n5221\n \n10289\n    \n0\n   \n8\n  \n0\n  \n4\n \n99\n  \n0\n  \n0\n\n\n\n\n\n\n\u603b\u517115\u5217\u53c2\u6570, \u4e2a\u53c2\u6570\u542b\u4e49\u5982\u4e0b:\n\n\n\n\nprocs(\u8fdb\u7a0b)\n\n\nr: Running\u961f\u5217\u4e2d\u8fdb\u7a0b\u6570, \u8fd9\u4e2a\u503c\u8d85\u8fc7cpu\u4e2a\u6570\u5c31\u4f1a\u51fa\u73b0cpu\u74f6\u9888.\n\n\nb: IO wait \u7684\u8fdb\u7a0b\u6570, \u8be5\u503c\u8fc7\u5927, \u53ef\u80fd\u662f\u7b49\u5f85\u6587\u4ef6\u64cd\u4f5c\u7684\u8fdb\u7a0b\u591a\u6216\u8005\u6587\u4ef6\u8bfb\u5199\u6162.\n\n\n\n\n\n\nmemory(\u5185\u5b58)\n\n\nfree: \u53ef\u7528\u5185\u5b58\u5927\u5c0f\n\n\nmapped: mmap\u6620\u5c04\u7684\u5185\u5b58\u5927\u5c0f\n\n\nanon: \u533f\u540d\u5185\u5b58\u5927\u5c0f, \u4e00\u822c\u7531malloc\u5f15\u8d77, \u6216\u8005\u533f\u540dmmap.\n\n\nslab: slab\u7684\u5185\u5b58\u5927\u5c0f.\n\n\n\n\n\n\nsystem(\u7cfb\u7edf)\n\n\nin: \u6bcf\u4e2a\u95f4\u9694\u65f6\u95f4\u7684\u4e2d\u65ad\u6b21\u6570(\u5305\u62ec\u65f6\u949f\u4e2d\u65ad), \u8fd9\u4e2a\u503c\u8d8a\u5927, \u5185\u6838\u6d88\u8017\u7684cpu\u65f6\u95f4\u8d8a\u591a.\u9700\u8981\u67e5\u770b\n/proc/interrupts\n\u4e0b\u4e2d\u65ad\u589e\u957f\u60c5\u51b5.\n\n\ncs: \u6bcf\u4e2a\u95f4\u9694\u65f6\u95f4\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u6b21\u6570\n\n\nflt: major page faults. \u9700\u8981\u4ecedisk\u8bfb\u53d6\u6570\u636e\u7684\u7f3a\u9875\u9519\u8bef.\n\n\n\n\n\n\nCPU (\u5904\u7406\u5668)\n\n\nus: user time, \u6bd4\u8f83\u9ad8\u65f6\uff0c\u8bf4\u660e\u7528\u6237\u8fdb\u7a0b\u6d88\u8017\u7684cpu\u65f6\u95f4\u591a.\n\n\nni: nice time, \u88ab\u964d\u4f4e\u4f18\u5148\u7ea7\u7684\u8fdb\u7a0b\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u7684\u6267\u884cCPU\u65f6\u95f4\u767e\u5206\u6bd4.\n\n\nsy: system time, \u7cfb\u7edf\u5185\u6838\u6d88\u8017\u7684CPU\u767e\u5206\u6bd4\n\n\nid: idle time, \u7cfb\u7edf\u7a7a\u95f2\u65f6\u95f4\u767e\u5206\u6bd4\n\n\nwa: iowait time, CPU\u5728\u7b49\u5f85IO\u5b8c\u6210\u65f6\u95f4\u5360\u6bd4\n\n\nir: interrupt time, \u7cfb\u7edf\u4e2d\u65ad\u8017\u65f6\u5360CPU\u767e\u5206\u6bd4\n\n\n\n\n\n\n\n\n\u66f4\u591a\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f, \u8bf7\u76f4\u63a5\u67e5\u770b \n/proc/vmstat\n\nhttp://blog.csdn.net/macky0668/article/details/6839498\n\n\nlibrank \n\n\n\u573a\u666f: \u4e0eprocrank\u4e92\u8865\u4f7f\u7528, \u662fprocmem\u7684\u6269\u5c55. \u663e\u793a\u6240\u6709\u8fdb\u7a0b\u7684\u4fe1\u606f, \u9700\u8981\u5de5\u5177\u7edf\u8ba1\u5206\u7c7b. \u4e5f\u53ef\u4ee5\u7528\u6765\u67e5\u770b\u6bcf\u4e2a\u5e93\u6216\u5171\u4eab\u6587\u4ef6\u771f\u5b9e\u5360\u7528\u7684\u5185\u5b58\u5927\u5c0f.\n\n\n\u6570\u636e\u6765\u6e90\u4e0eprocmem\u4e00\u6837, \u4f46\u662fprocmem\u9488\u5bf9\u7684\u662f\u5355\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\u5360\u7528\u60c5\u51b5. \u800clibrank\u662f\u663e\u793a\u67d0\u4e2a\u5e93\u6216\u8005\u6587\u4ef6\u88ab\u54ea\u4e9b\u8fdb\u7a0b\u5171\u4eab, \u5e76\u663e\u793a\u5360\u7528\u5927\u5c0f. \u5982\u4e0b\u56fe\u6240\u793a.\n\n\n\n\n\n\n\n\ndumpcache \n\n\n\u8be5\u5de5\u5177\u662fandroid7.0\u4e4b\u540e\u624d\u6709\u7684\u5de5\u5177,\u7528\u4e8e\u67e5\u770b\u6587\u4ef6\u7cfb\u7edf\u4e2d\u6709\u6bcf\u4e2a\u6587\u4ef6\u88abcache\u5230\u5185\u5b58\u7684\u5927\u5c0f. \u8be5\u6587\u4ef6\u53ef\u4ee5\u7528\u6765\u5224\u65ad\u7f3a\u9875\u9519\u8bef\u65f6\u52a0\u8f7d\u7684\u6587\u4ef6.\n\n\n\u5728Launcher\u754c\u9762\u65f6\u7684\u8f93\u51fa\u5982\u4e0b:\n\n\n\n\n\u7a33\u5b9a\u64ad\u653e1080P\u89c6\u9891\u65f6:\n\n\n\n\n\u6309\u4e0b\u9065\u63a7\u5668\u786e\u5b9a\u952e\u663e\u793aUI\u65f6:\n\n\n\n\n\u5bf9\u6bd4, \u53ef\u4ee5\u77e5\u9053\u5728\u64ad\u653e\u8fc7\u7a0b\u4e2d, \u663e\u793aUI\u65f6\u4e3b\u8981\u52a0\u8f7d\u7684\u6587\u4ef6\u662f:\n\n\n\n\nbugreport \u4fe1\u606f\u5206\u6790 \n\n\nAndroid\u7cfb\u7edf\u60f3\u8981\u6210\u4e3a\u4e00\u4e2a\u529f\u80fd\u5b8c\u5907\uff0c\u751f\u6001\u7e41\u8363\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u90a3\u5c31\u5fc5\u987b\u63d0\u4f9b\u5b8c\u6574\u7684\u5e94\u7528\u5f00\u53d1\u73af\u5883\u3002\u800c\u5728\u5e94\u7528\u5f00\u53d1\u4e2d\uff0capp\u7a0b\u5e8f\u7684\u8c03\u8bd5\u5206\u6790\u662f\u65e5\u5e38\u751f\u4ea7\u4e2d\u8fdb\u7a0b\u4f1a\u8fdb\u884c\u7684\u5de5\u4f5c\u3002Android\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u4eba\u5458\u5206\u6790\u6574\u4e2a\u7cfb\u7edf\u5e73\u53f0\u548c\u67d0\u4e2aapp\u5728\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u4e4b\u5185\u7684\u6240\u6709\u4fe1\u606f\uff0c\u4e13\u95e8\u5f00\u53d1\u4e86bugreport\u5de5\u5177\u3002\n\n\n\n\u8be5\u5de5\u5177\u7684\u7f3a\u70b9\u662f: \n1. \u8017\u65f6\u8fc7\u957f, \u53ea\u80fd\u6293\u53d6\u5f53\u524d\u72b6\u6001.\n2. \u6293\u53d6\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u5bfc\u81f4\u7cfb\u7edf\u5f02\u5e38, \u56e0\u4e3a\u5176oom\u4f1a\u88ab\u8c03\u9ad8, \u5728\u5185\u5b58\u4e0d\u8db3\u65f6\u5bfc\u81f4\u7cfb\u7edf\u5176\u4ed6\u5e94\u7528\u88abkill.\n3. \u7531\u4e8ebugreport\u7684\u6743\u9650\u4f1a\u964d\u4f4e\u5230shell, \u800c\u5f88\u591a\u670d\u52a1\u5728\u4f1a\u62d2\u7edddumpsys\u7684\u64cd\u4f5c, \u5bfc\u81f4\u90e8\u5206\u4fe1\u606f\u65e0\u6cd5\u6293\u53d6. \n\n\n\n\n\u4f7f\u7528\u65b9\u6cd5:\n\n\n\n\n\n\n\u901a\u8fc7bugreport\u547d\u4ee4\u6293\u53d6\u4e00\u4efdbugreport\u539f\u59cb\u7684\u6587\u672clog\uff1a\n    \nshell# bugreport\ngt;/data/local/tmp/bugreport.txt\n\n\n\n\n\n\n\u5c06\u4e0a\u9762\u547d\u4ee4\u6293\u53d6\u7684bugreport.txt\u6587\u672c\u6587\u4ef6\u62f7\u8d1d\u51fa\u6765\uff0c\u4e0a\u4f20\u5230bugreport\u5206\u6790\u670d\u52a1\u5668\u4e0a\u9762\uff0c\u670d\u52a1\u5668\u4f1a\u81ea\u52a8\u751f\u6210\u7cfb\u7edf\u5f53\u524d\u72b6\u6001\u5feb\u7167\uff0c\u4e0a\u4f20\u65b9\u6cd5\u5982\u4e0b\uff1a\n  a. \u901a\u8fc7\u6d4f\u89c8\u5668\u8fdb\u5165\u670d\u52a1\u5668\u5730\u5740\uff1ahttp://10.27.254.108:8080/,\u5982\u4e0b\u56fe\uff1a\n\n\n\n\n\n\n\n\nb. \u70b9\u51fbbroswer\u6d4f\u89c8report.txt\u6587\u672c\u6587\u4ef6\uff0c\u7136\u540e\u70b9\u51fbupload\u6309\u94ae\u4e0a\u4f20\u6587\u4ef6\uff0c\u4e0a\u4f20\u540e\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u751f\u6210\u7cfb\u7edf\u72b6\u6001\u5feb\u7167\uff0c\u5feb\u7167\u540d\u79f0\u5bf9\u5e94\u5230\u4e0a\u4f20\u65f6\u95f4\uff0c\u70b9\u51fb\u5feb\u7167\u540d\u79f0\u8fdb\u5165\u7cfb\u7edf\u5206\u6790\u9875\u9762\uff0c\u5982\u4e0b\uff1a\n\n\n\n\n\u8be5\u7f51\u9875\u670d\u52a1\u5668\u7684dockerfile\u5982\u4e0b:\n\n\nFROM ubuntu:14.04\n MAINTAINER wertherzhang \nwerther0331@gmail.com\n\n\n RUN apt-get update\n\n RUN apt-get -y install openjdk-7-jdk openjdk-7-jre\n RUN apt-get -y install python\n\n RUN mkdir -p /root/chkbugreport\n RUN apt-get -y install wget\n RUN wget http://10.27.8.54/chkbugreport.tgz -O /root/chkbugreport.tgz\n RUN tar xvf /root/chkbugreport.tgz -C /tmp/\n RUN mkdir -p /root/bin\n\n ADD server.py /root/chkbugreport/\n ADD chkbugreport.jar /root/bin/\n ADD chkbugreport /usr/local/bin/\n ADD ddmlib.jar /root/bin/\n\n RUN apt-get clean\n\n ENV JAVA_HOME /usr/lib/jvm/java-7-openjdk-amd64\n ENV PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n WORKDIR /root/chkbugreport/\n\n CMD [\npython\n, \nserver.py\n]\n\n\n\n\n\n\u9644\u4ef6: \nchkbugreport-server.zip\n\n\n\u5e94\u7528\u5185\u5b58\u5206\u6790\n\n\nandroid\u81ea\u5e26\u5de5\u5177\n\n\ndumpsys meminfo \u5e94\u7528\u5185\u5b58 \n\n\n\u573a\u666f: \u67e5\u770bjava\u8fdb\u7a0b\u7684\u4e0d\u540c\u7c7b\u522b\u5185\u5b58\u5360\u7528\u60c5\u51b5, \u7279\u522b\u662f\u786e\u5b9aactivity\u662f\u5426\u6cc4\u9732\u7b49\u4fe1\u606f.\n\n\n\u547d\u4ee4 \ndumpsys meminfo com.china_liantong.launcher -d\n\n\n\u8f93\u51fa:\n\n\nshell@zx1800:/ \n# dumpsys meminfo com.china_liantong.launcher -d                \n\nApplications Memory Usage \n(\nkB\n)\n:\nUptime: \n2612261\n Realtime: \n2612261\n\n\n** MEMINFO in pid \n884\n \n[\ncom.china_liantong.launcher\n]\n **\n                   Pss  Private  Private  Swapped     Heap     Heap     Heap\n                 Total    Dirty    Clean    Dirty     Size    Alloc     Free\n                ------   ------   ------   ------   ------   ------   ------\n  Native Heap     \n5915\n     \n5440\n        \n0\n        \n0\n    \n24576\n    \n16208\n     \n8367\n\n  Dalvik Heap    \n13764\n    \n13364\n        \n0\n        \n0\n    \n26989\n    \n20896\n     \n6093\n\n Dalvik Other      \n248\n      \n248\n        \n0\n        \n0\n                           \n        Stack      \n513\n      \n512\n        \n0\n        \n0\n                           \n    Other dev        \n4\n        \n0\n        \n4\n        \n0\n                           \n     .so mmap     \n3392\n      \n424\n      \n472\n        \n0\n                           \n    .apk mmap       \n94\n        \n0\n        \n4\n        \n0\n                           \n    .ttf mmap     \n1573\n        \n0\n      \n568\n        \n0\n                           \n    .dex mmap     \n1188\n        \n0\n      \n752\n        \n0\n                           \n    .oat mmap     \n1419\n        \n0\n      \n260\n        \n0\n                           \n    .art mmap      \n979\n      \n616\n        \n0\n        \n0\n                           \n   Other mmap       \n80\n        \n4\n        \n0\n        \n0\n                           \n   EGL mtrack       \n17\n       \n17\n        \n0\n        \n0\n                           \n      Unknown      \n134\n      \n128\n        \n0\n        \n0\n                           \n        TOTAL    \n29320\n    \n20753\n     \n2060\n        \n0\n    \n51565\n    \n37104\n    \n14460\n\n\n Objects\n               Views:     \n1192\n         ViewRootImpl:        \n1\n\n         AppContexts:        \n3\n           Activities:        \n1\n\n              Assets:        \n2\n        AssetManagers:        \n2\n\n       Local Binders:       \n41\n        Proxy Binders:      \n220\n\n       Parcel memory:        \n7\n         Parcel count:       \n14\n\n    Death Recipients:       \n10\n      OpenSSL Sockets:        \n0\n\n\n SQL\n         MEMORY_USED:        \n0\n\n  PAGECACHE_OVERFLOW:        \n0\n          MALLOC_SIZE:        \n0\n\n\n\n\n\n\nNative Heap\n: native\u5206\u914d\u5360\u7528\u7684RAM, \u901a\u8fc7malloc\u7533\u8bf7\u7684\u5185\u5b58. \nHeap Size\n \u662f\u5185\u5b58\u6c60\u603b\u5927\u5c0f(\u5411\u7cfb\u7edf\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f). \nHeap Alloc\n \u5df2\u7ecf\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f(\u5e94\u7528\u5411dlmalloc\u7533\u8bf7\u7684\u5185\u5b58). \nHeap Free\n \u5185\u5b58\u6c60\u5269\u4f59\u53ef\u5206\u914d\u5185\u5b58\u5927\u5c0f.\n\n\nDalvik Heap\n: \u5e94\u7528\u4e2dDalvi\u5206\u914d\u5360\u7528\u7684RAM. \nPss Total\n: \u5305\u542b\u6240\u6709Zygote\u5206\u914d(\u901a\u8fc7\u8fdb\u7a0b\u95f4\u5171\u4eab\u5360\u7528). \nPrivate Dirty\n: \u4ec5\u5206\u914d\u5230\u5e94\u7528\u7684\u5b9e\u9645RAM, \u7531\u5e94\u7528\u5206\u914d\u6216\u8005zygote\u5206\u914d\u9875, \u8fd9\u4e9b\u9875\u81ea\u4ecezygote fork\u5e94\u7528\u8fdb\u7a0b\u540e\u88ab\u4fee\u6539\u8fc7.\n\n\n.so map\n \u548c \n.dex map\n: mmap\u7684.so\u548c.dex(Dalvik\u6216ART)\u4ee3\u7801\u5360\u7528\u7684RAM. \nPss Total\n \u6570\u503c\u5305\u62ec\u5e94\u7528\u4e4b\u95f4\u5171\u4eab\u7684\u5e73\u53f0\u4ee3\u7801\uff1b\nPrivate Clean\n \u662f\u60a8\u7684\u5e94\u7528\u81ea\u5df1\u7684\u4ee3\u7801\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5b9e\u9645\u6620\u5c04\u7684\u5185\u5b58\u66f4\u5927 - \u6b64\u5904\u7684 RAM \u4ec5\u4e3a\u5e94\u7528\u6267\u884c\u7684\u4ee3\u7801\u5f53\u524d\u6240\u9700\u7684 RAM\u3002\u4e0d\u8fc7\uff0c.so mmap \u5177\u6709\u8f83\u5927\u7684\u79c1\u6709\u810f RAM\uff0c\u56e0\u4e3a\u5728\u52a0\u8f7d\u5230\u5176\u6700\u7ec8\u5730\u5740\u65f6\u5bf9\u539f\u751f\u4ee3\u7801\u8fdb\u884c\u4e86\u4fee\u6539(GOT?!)\u3002 \n\n\n.oat mmap\n: \u4ee3\u7801\u6620\u50cf\u5360\u7528\u7684 RAM \u91cf\uff0c\u6839\u636e\u591a\u4e2a\u5e94\u7528\u901a\u5e38\u4f7f\u7528\u7684\u9884\u52a0\u8f7d\u7c7b\u8ba1\u7b97\u3002\u6b64\u6587\u4ef6\u5728\u6240\u6709\u5e94\u7528\u4e4b\u95f4\u5171\u4eab\uff0c\u4e0d\u53d7\u7279\u5b9a\u5e94\u7528\u5f71\u54cd\u3002 \n\n\n.art mmap\n: \u5806\u5360\u7528\u7684 RAM \u91cf\uff0c\u6839\u636e\u591a\u4e2a\u5e94\u7528\u901a\u5e38\u4f7f\u7528\u7684\u9884\u52a0\u8f7d\u7c7b\u8ba1\u7b97\u3002\u6b64\u6620\u50cf\u5728\u6240\u6709\u5e94\u7528\u4e4b\u95f4\u5171\u4eab\uff0c\u4e0d\u53d7\u7279\u5b9a\u5e94\u7528\u5f71\u54cd\u3002\u5c3d\u7ba1 ART \u6620\u50cf\u5305\u542b Object \u5b9e\u4f8b\uff0c\u5b83\u4ecd\u7136\u4e0d\u4f1a\u8ba1\u5165\u60a8\u7684\u5806\u5927\u5c0f\u3002 \n\n\nUnknown\n: \u7cfb\u7edf\u65e0\u6cd5\u5c06\u5176\u5206\u7c7b\u5230\u5176\u4ed6\u66f4\u5177\u4f53\u7684\u4e00\u4e2a\u9879\u4e2d\u7684\u4efb\u4f55 RAM \u9875\u3002 \u5176 \nPss Total\n \u4e0e Zygote\u5171\u4eab.\n\n\nTOTAL\n: \u4e0a\u65b9\u6240\u6709 PSS \u5b57\u6bb5\u7684\u603b\u548c\u3002\u8868\u793a\u60a8\u7684\u8fdb\u7a0b\u5360\u7528\u7684\u5185\u5b58\u91cf\u5360\u6574\u4f53\u5185\u5b58\u7684\u6bd4. \nPrivate Dirty\n \u548c \nPrivate Clean\n \u662f\u60a8\u7684\u8fdb\u7a0b\u4e2d\u7684\u603b\u5206\u914d\uff0c\u672a\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u5171\u4eab\u3002\u5b83\u4eec\uff08\u5c24\u5176\u662f Private Dirty\uff09\u7b49\u4e8e\u60a8\u7684\u8fdb\u7a0b\u88ab\u7834\u574f\u540e\u5c06\u91ca\u653e\u56de\u7cfb\u7edf\u4e2d\u7684 RAM \u91cf\u3002\nDirty\n\u56e0\u4e3a\u5df2\u88ab\u4fee\u6539\u800c\u5fc5\u987b\u4fdd\u6301\u5728 RAM \u4e2d\u7684 RAM \u9875\uff08\u56e0\u4e3a\u6ca1\u6709\u4ea4\u6362\uff09\uff1b\nClean\n \u662f\u5df2\u4ece\u67d0\u4e2a\u6301\u4e45\u6027\u6587\u4ef6\uff08\u4f8b\u5982\u6b63\u5728\u6267\u884c\u7684\u4ee3\u7801\uff09\u6620\u5c04\u7684 RAM \u9875\uff0c\u5982\u679c\u4e00\u6bb5\u65f6\u95f4\u4e0d\u7528\uff0c\u53ef\u4ee5\u79fb\u51fa\u5206\u9875\u3002\n\n\nViewRootImpl\n: \u8fdb\u7a0b\u4e2d\u5f53\u524d\u6d3b\u52a8\u7684\u6839\u89c6\u56fe\u6570\u91cf\u3002\u6bcf\u4e2a\u6839\u89c6\u56fe\u90fd\u4e0e\u4e00\u4e2a\u7a97\u53e3\u5173\u8054\uff0c\u56e0\u6b64\u6709\u52a9\u4e8e\u786e\u5b9a\u6d89\u53ca\u5bf9\u8bdd\u6846\u6216\u5176\u4ed6\u7a97\u53e3\u7684\u5185\u5b58\u6cc4\u6f0f\u3002 \n\n\nAppContexts\n \u548c \nActivities\n: \u5f53\u524d\u6d3b\u52a8\u7684\u5e94\u7528 Context \u548c Activity \u5bf9\u8c61\u6570\u91cf\u3002\u5feb\u901f\u786e\u5b9a\u7531\u4e8e\u5b58\u5728\u9759\u6001\u5f15\u7528\uff08\u6bd4\u8f83\u5e38\u89c1\uff09\u800c\u65e0\u6cd5\u8fdb\u884c\u5783\u573e\u56de\u6536\u7684\u5df2\u6cc4\u6f0f Activity \u5bf9\u8c61\u3002\u8fd9\u4e9b\u5bf9\u8c61\u7ecf\u5e38\u62e5\u6709\u5f88\u591a\u5173\u8054\u7684\u5176\u4ed6\u5206\u914d\uff0c\u56e0\u6b64\u6210\u4e3a\u8ddf\u8e2a\u5927\u578b\u5185\u5b58\u6cc4\u6f0f\u7684\u4e00\u79cd\u4e0d\u9519\u7684\u65b9\u5f0f\u3002\n\n\n\u4f8b\u5b50\u89c1\u5185\u5b58\u6cc4\u9732\u90e8\u5206.\n\n\nprocmem  \n\n\n\u573a\u666f: \u67e5\u770b\u6307\u5b9a\u8fdb\u7a0b\u7684\u5404\u90e8\u5206\u5185\u5b58\u5360\u7528\u60c5\u51b5.\n\u547d\u4ee4: \nprocmem \npid\n\n\u4f8b\u5b50: \nprocmem 2509\n\n\u6570\u636e\u6765\u6e90: \n/proc/\npid\n/maps\n \u548c \n/proc/\npid\n/pagemap\n\n\nVss      Rss      Pss      Uss     ShCl     ShDi     PrCl     PrDi  Name\n\n\n\n\n\u5404\u5b57\u6bb5\u542b\u4e49:\n\n\nShCl  --  shared clean\nShDi  --  shared dirty\nPrCl  --  private clean\nPrDi  --  private dirty\n\n\n\n\n\nshowmap \n\n\n\u573a\u666f: \u8fdb\u7a0b\u865a\u62df\u8fdb\u7a0b\u7a7a\u95f4\u7684\u5185\u5b58\u5206\u914d\u60c5\u51b5 \u548c \u8be6\u7ec6\u7684\u5e72\u51c0\u810f\u6570\u636e\u4fe1\u606f.\n\n\n\u4ece \n/proc/[pid]/smaps\n \u83b7\u53d6\u6570\u636e\u5e76\u7edf\u8ba1\u7684\u5de5\u5177.\n\n\n\u547d\u4ee4: \nshowmap [-a] [-t] [-v] \npid\n\n\u4f8b\u5b50: \nshowmap -a 884\n\n\u8f93\u51fa\u5355\u4f4d: KB\n\n\n\n\n\u7531\u4e8e\u73b0\u5728\u5185\u6838\u90fd\u4f7f\u7528\u4e86\u52a8\u6001\u5185\u5b58\u5206\u914d\u7684\u673a\u5236, \u5728\u5927\u91cf\u7533\u8bf7\u5c0f\u5185\u5b58\u7684\u60c5\u51b5\u4e0b, \u4ece\u7cfb\u7edf\u770b\u5185\u5b58\u6709\u5269\u4f59, \u4f46\u662f\u8fdb\u7a0b\u5374\u65e0\u6cd5\u5206\u914d\u51fa\u9700\u8981\u7684\u5185\u5b58, \u8fd9\u5c31\u6709\u53ef\u80fd\u662f\u7531\u4e8e\u865a\u62df\u5730\u5740\u7684\u5185\u5b58\u788e\u7247\u5f15\u8d77, \u65e0\u6cd5\u627e\u5230\u4e00\u6bb5\u5927\u4e8e\u6240\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u7684\u5730\u5740\u7a7a\u95f4. \n\n\n\u4f8b\u5b50:\n\n\nAndroid \u5e94\u7528 OOM\n\n\n\u89e6\u53d1OOM\u7684\u539f\u56e0\u662f, java\u5c42\u5185\u5b58\u5206\u914d\u5931\u8d25\u4e86.\n\n\n\u9020\u6210\u5185\u5b58\u5206\u914d\u5931\u8d25\u7684\u53ef\u80fd\u539f\u56e0\u5982\u4e0b:\n\n\n\n\n\u5185\u5b58\u6ea2\u51fa. \u7533\u8bf7\u7684\u5185\u5b58\u8d85\u51fa\u4e86\u865a\u62df\u673a\u6700\u5927\u5185\u5b58.\n\n\n\u788e\u7247, \u5bfc\u81f4\u65e0\u6cd5\u627e\u5230\u8fde\u7eed\u7a7a\u95f4\u6ee1\u8db3\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f.\n\n\n\u8d44\u6e90\u95ee\u9898, \u6bd4\u5982\u6587\u4ef6\u8282\u70b9\u8d85\u8fc7\u9650\u5236, \u5bfc\u81f4\u533f\u540d\u5185\u5b58\u7533\u8bf7\u51fa\u9519, \u9519\u8bef\u4fe1\u606f\u4e3a \"Too many open files\"\n\n\n\u865a\u62df\u7a7a\u95f4\u5730\u5740\u7a7a\u95f4\u88ab\u5360\u6ee1, \u5bfc\u81f4OOM.\n\n\n\n\n\u4ee5\u4e0a\u4e3a\u7f51\u4e0a\u7684\u7ed3\u8bba, \u5728android5.1.1\u4e0a\u6d4b\u8bd5\u53d1\u73b0:\n\n\nfd\u95ee\u9898\u5e76\u4e0d\u4f1a\u5bfc\u81f4OOM\n\n\n\u4ee3\u7801\u590d\u7528\u4e0b\u9762\u5185\u5b58\u6cc4\u9732\u7684\u4ee3\u7801,\u5728asynctask\u4e2d\u6267\u884c\u6587\u4ef6\u6253\u5f00\u64cd\u4f5c.\n\n\n\n\nlogcat\u4e2d\u8f93\u51fa\u5982\u4e0b, \u5e76\u6ca1\u6709OOM\u8f93\u51fa:\n\n\n\n\n\u4f46\u662f\u8fd9\u6bb5\u4ee3\u7801\u7684\u786e\u8bc1\u660e\u4e86\u6253\u5f00\u6587\u4ef6\u592a\u591a\u4f1a\u5bfc\u81f4shmem\u521b\u5efa\u5931\u8d25.\n\n\n\u5185\u5b58\u6cc4\u9732\u5206\u6790\n\n\nactivity \u6cc4\u9732 \n\n\nactivity \u7684\u6cc4\u9732\u57fa\u4e8eandroid\u81ea\u5e26\u5de5\u5177, \u53ef\u4ee5\u5feb\u901f\u786e\u5b9a, \u4f46\u662f\u5177\u4f53\u6cc4\u9732\u7684activity, \u9700\u8981\u4f9d\u8d56\u5de5\u5177 LeakCanary.\n\n\n\u4ee3\u7801:\n\n\n\n\n\u754c\u9762:\n\n\n\n\n\u5728\u7b2c\u4e00\u6b21\u8fdb\u5165\u8be5\u5e94\u7528\u65f6:\n\n\n\n\n\u6309\u4e0bBUTTON, \u7136\u540e\u9000\u51fa\u5e94\u7528:\n\n\n\n\n\u7b2c\u4e8c\u6b21\u8fdb\u5165\u8be5\u5e94\u7528:\n\n\n\n\n\u7b2c\u4e8c\u6b21\u6309\u4e0bBUTTON:\n\n\n\n\n\u7b2c\u4e8c\u6b21\u9000\u51fa\u5e94\u7528:\n\n\n\n\n\u57fa\u4e8e \ndumpsys meminfo\n \u786e\u8ba4\u5e94\u7528\u6709activity\u6cc4\u9732\u540e, \u5355\u7eaf\u901a\u8fc7UI\u64cd\u4f5c\u57fa\u672c\u4e5f\u53ef\u4ee5\u5224\u65ad\u51fa\u6765\u54ea\u4e2aactivity\u6cc4\u9732, \u66f4\u51c6\u786e\u7684\u6cc4\u9732\u68c0\u6d4b\u5de5\u5177\u662f LeakCanary, \u8be5\u5de5\u5177\u4e3a\u7b2c\u4e09\u65b9\u5de5\u5177. \n\n\u5177\u4f53\u7528\u6cd5: https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/\n\n\n\u8fd8\u662f\u4ee5\u4e0a\u7684\u4f8b\u5b50, \u989d\u5916\u589e\u52a0\u5982\u4e0b\u4ee3\u7801. \n\n\n\u5728MainActivity\u589e\u52a0\u5982\u4e0b\u4ee3\u7801, \u8be5\u4ee3\u7801\u7684\u542b\u4e49\u662f, \u5728activity\u89e6\u53d1onDestroy\u65f6, \u76d1\u63a7\u8be5activity\u5bf9\u8c61.\n\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        LeakApplication.getRefWatcher().watch(this);\n\n    }\n\n\n\n\n\n\u589e\u52a0application, \u5982\u4e0b:\n\n\n\n\n\u7f16\u8bd1\u8fd0\u884c, \u6267\u884c\u4e0a\u9762\u540c\u6837\u7684\u64cd\u4f5c. \u5728\u901a\u77e5\u4e2d\u5fc3\u6709\u5982\u4e0b\u663e\u793a:\n\n\n\n\n\u70b9\u51fb\u540e\u53ef\u4ee5\u67e5\u770b\u8be6\u7ec6\u7684\u5806\u6808:\n\n\n\n\n\u540c\u6837\u5728logcat\u4e2d\u6709\u5982\u4e0b\u8f93\u51fa:\n\n\n\n\nStrictMode\u68c0\u6d4b\u5e94\u7528\u5185\u5b58\u6cc4\u9732 \n\n\n\u540c\u6837\u662f\u4e0a\u9762\u7684\u4f8b\u5b50, \u4fee\u6539\u4ee3\u7801\u5982\u4e0b, \u589e\u52a0strickmode\u7684\u8c03\u7528:\n\n\n\n\n\u540c\u6837\u7684\u4e0a\u9762\u64cd\u4f5c\u65b9\u6cd5, logcat\u4e2d\u6709\u5982\u4e0b\u8f93\u51fa:\n\n\n\n\n\u57fa\u4e8elibc\u8c03\u8bd5\u5185\u5b58\u6cc4\u9732 \n\n\n\u5185\u5b58\u6cc4\u9732\u7684\u68c0\u6d4b\u4f9d\u636e\u662f, \u8fdb\u7a0b\u9000\u51fa\u65f6, \u8fd8\u6709\u672a\u91ca\u653e\u7684\u5185\u5b58. \u6240\u4ee5, valgrind\u5305\u62ecbionic libc\u4e2d, \u80fd\u7cbe\u786e\u68c0\u6d4b\u5230\u6cc4\u9732\u7684\u524d\u63d0\u6761\u4ef6\u5c31\u662f\u8fdb\u7a0b\u9000\u51fa. \u4f46\u662f\u8fd9\u4e2a\u5bf9\u4e8e\u7cfb\u7edf\u7ea7\u522b\u7684\u8fdb\u7a0b\u662f\u65e0\u7528\u7684, \u56e0\u4e3a\u7cfb\u7edf\u7ea7\u8fdb\u7a0b\u5e76\u4e0d\u4f1a\u9000\u51fa. \u4eceRD\u89d2\u5ea6, \u5224\u65ad\u7cfb\u7edf\u7ea7\u8fdb\u7a0b\u662f\u5426\u6cc4\u9732\u7684\u4f9d\u636e\u662f\u5185\u5b58\u662f\u5426\u6301\u7eed\u589e\u957f, \u7279\u522b\u662f\u5728\u538b\u529b\u6d4b\u8bd5\u7684\u60c5\u51b5\u4e0b. \u6240\u4ee5, \u8fd9\u4e2a\u90e8\u5206\u4ecb\u7ecd\u7684\u5de5\u5177, \u5b9e\u9645\u4e0a\u662f\u6293\u53d6\u4e86\u6301\u7eed\u589e\u957f\u7684\u5185\u5b58\u4fe1\u606f, \u8fd9\u4e9b\u4fe1\u606f, \u53ef\u80fd\u662f\u5185\u5b58\u6cc4\u9732, \u4e5f\u53ef\u80fd\u662f\u8fdb\u7a0b\u6b63\u5e38\u7533\u8bf7\u7684\u5185\u5b58, \u9700\u8981RD\u4ecb\u5165\u5224\u65ad.\n\n\n\u9644\u4ef6: \nMemleak_tools_android.zip\n\n\n\u4f9d\u8d56\u5de5\u5177:\n\n\n\n\nlibc_malloc_debug_leak.so\n , bionic\u6e90\u7801\u4e0b, \u9700\u8981\u7f16\u8bd1\u5e76push\u5230\u7cfb\u7edf\u4e2d\n\n\nlibmemleakutils.so\n, \u4eceandroid\u63d0\u53d6\u5e76\u66f4\u6539. \u4ece\u9644\u4ef6\u6e90\u7801\u4e0b\u8f7d\u7f16\u8bd1, \u9700\u8981push\u5230\u7cfb\u7edf\u4e2d.\n\n\naddr2func.py, \u8be5\u811a\u672c\u80fd\u81ea\u52a8\u5c06\u5730\u5740\u8f6c\u6362\u6210\u5e93\u548c\u5806\u6808. \u5728\u9644\u4ef6\u4e2d.\n\n\nmemincrease.py, \u8be5\u811a\u672c\u80fd\u5c06\u4e0a\u4e00\u811a\u672c\u7684\u8f93\u51fa, \u8fdb\u884c\u7edf\u8ba1\u6392\u5e8f,  \u6309\u5185\u5b58\u589e\u52a0\u4ece\u5927\u5230\u5c0f\u6392\u5e8f. \u57fa\u672c\u6700\u9876\u4e0a\u7684\u662f\u5b58\u5728\u95ee\u9898\u7684. \u5728\u9644\u4ef6\u4e2d.\n\n\n\n\n\u5c40\u9650:\n\n\n\n\n\u53ea\u80fd\u8c03\u8bd5native\u8fdb\u7a0b.\n\n\n\u8fdb\u7a0b\u4e0d\u80fd\u91cd\u542f.\n\n\n\u9700\u8981\u538b\u529b\u6d4b\u8bd5, \u957f\u65f6\u95f4\u8fd0\u884c\n\n\n\u9700\u8981RD\u4ecb\u5165\u5224\u65ad\u662f\u5426\u5b58\u5728\u6cc4\u9732.\n\n\n\n\n\u7528\u6cd5:\n\n\n\n\n\u5c06libmemleakutils.so\u5e93\u94fe\u63a5\u5230\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u4e2d, \u8c03\u7528\u51fd\u6570\nstart_memleak_watcher(memstep)\n, \u5176\u4e2dmemstep\u8868\u793a, pss\u6bcf\u589e\u52a0memstep, \u5219\u6293\u53d6\u4e00\u6b21\u5f53\u524d\u5185\u5b58\u5206\u914d\u4fe1\u606f.\n\n\n\u5c06libmemleakutils.so \u548c \nlibc_malloc_debug_leak.so\n push\u5230/system/lib/\u4e0b.\n\n\n\u5c06\u88ab\u8c03\u8bd5\u7a0b\u5e8fpush\u5230 /system/bin/ \u4e0b.\n\n\n\u8bbe\u7f6e property \nlibc.debug.malloc.program\n \u4e3a \u4f60\u7684\u8c03\u8bd5\u8fdb\u7a0b\u540d\u5b57.\n\n\n\u8bbe\u7f6e property \nlibc.debug.malloc\n \u4e3a 1\n\n\nstop \u6216\u8005 kill \u88ab\u8c03\u8bd5\u8fdb\u7a0b.\n\n\nstart \u6216\u8005 \u542f\u52a8 \u88ab\u8c03\u8bd5\u8fdb\u7a0b.\n\n\n\u538b\u529b\u6d4b\u8bd5\u540e, \u68c0\u67e5 /data/local/tmp/ \u5e95\u4e0b\u5b58\u5728\u6587\u4ef6 \nmem_snapshot_$pid_$memsize.log\n, \u4e14\u4e2a\u6570\u5927\u4e8e2\u4e2a(\u8d8a\u591a\u8d8a\u597d).\n\n\ncp /proc/${pid}/maps /data/local/tmp/\n\n\n\u5c06 /data/local/tmp/ \u5e95\u4e0b\u6240\u6709\u6587\u4ef6\u590d\u5236\u5230host\u673a\u5668.\n\n\n\u7528 diff \u547d\u4ee4\u6bd4\u8f83 \u4e24\u4e2a \nmem_snapshot_$pid_$memsize.log\n, \u5e76\u4fdd\u5b58\u8f93\u51fa\u4e3a \ndiff_$pid_$memsize1_$memsize2.log\n\n\n\u6267\u884c \n./addr2func.py --root-dir=/remote/ANDROID/hdtv/ --maps-file=./maps --product=zx2000 diff_$pid_$memsize1_$memsize2.log \n mem_stack_$pid_$memsize1_$memsize2.log\n, \u8be5\u8fc7\u7a0b\u662f\u5c06diff\u751f\u6210\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5730\u5740\u8f6c\u6362\u6210\u5e93\u548c\u5806\u6808\u4fe1\u606f.\n\n\n\u6267\u884c \n./memincrease.py mem_stack_$pi_$memsize1_$memsize2.log incr_$pid_$memsize1_$memsize2.log\n, \u8be5\u8fc7\u7a0b\u662f\u5bf912\u751f\u6210\u7684\u6587\u4ef6\u8fdb\u884c\u7edf\u8ba1\u6392\u5e8f, \u4ece\u5927\u5230\u5c0f\u6392\u5e8f.\n\n\n\n\n\u4f8b\u5b50:\n\n\n\n\n\u8fd0\u884c\u4e00\u4f1a\u513f\u540e, \u5728 /data/local/tmp/\u76ee\u5f55\u4e0b\u5b58\u5728\u6587\u4ef6:\n\n\nmem_snapshot_2158_1.log\nmem_snapshot_2158_2.log\nmem_snapshot_2158_3.log\nmem_snapshot_2158_4.log\n\n\n\n\n\n\u5176\u5185\u5bb9\u5982\u4e0b:\n\n\n Allocation count \n5\n\n Total memory \n6293072\n\nsize  \n5242880\n, dup    \n1\n, 0xb6ed36b2, 0xb6f4cd4e, 0xb6f1da44, 0xb6f1de38, 0xb6f1dea0, 0xb6f5104a, 0xb6f4ef92\nsize  \n1048576\n, dup    \n1\n, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc8492, 0xb6fc8390, 0xb6f4ce68, 0xb6fc8400\nsize     \n1024\n, dup    \n1\n, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc84aa, 0xb6fc8394, 0xb6f4ce68, 0xb6fc8400\nsize      \n580\n, dup    \n1\n, 0xb6ed36b2, 0xb6ed391c, 0xb6f4cd0e, 0xb6f510c8, 0xb6f1decc, 0xb6fc838c, 0xb6f4ce68, 0xb6fc8400\nsize       \n12\n, dup    \n1\n, 0xb6ed36b2, 0xb6ed391c, 0xb6f4cd0e, 0xb6f14c46, 0xb6f1dd98, 0xb6f1dea0, 0xb6f5104a, 0xb6f4ef92\n\n\n\n\n\n\u6267\u884cdiff\u547d\u4ee4:\n\n\n# diff ./mem_snapshot_2158_1.log ./mem_snapshot_2158_2.log \n diff_2158_1_2.log\n\n\n# \n\n\n# diff ./mem_snapshot_2158_3.log ./mem_snapshot_2158_4.log \n diff_2158_3_4.log\n\n\n#\n\n\n\n\n\n\n\u5f97\u5230\u4e00\u4e2aPSS\u4ece1M\u589e\u957f\u52302M\u548c3M\u589e\u957f\u52304M\u7684\u4e24\u4e2adiff\u6587\u4ef6. \u5185\u5bb9\u5982\u4e0b:\n\n\n2c2\n\n  Total memory 6293072\n---\n\n  Total memory 7342672\n4,5c4,5\n\n size  1048576, dup    1, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc8492, 0xb6fc8390, 0xb6f4ce68, 0xb6fc8400\n\n size     1024, dup    1, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc84aa, 0xb6fc8394, 0xb6f4ce68, 0xb6fc8400\n---\n\n size  1048576, dup    2, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc8492, 0xb6fc8390, 0xb6f4ce68, 0xb6fc8400\n\n size     1024, dup    2, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc84aa, 0xb6fc8394, 0xb6f4ce68, 0xb6fc8400\n\n\n\n\n\n\n\u6267\u884c addr2func.py :\n\n\n# ./addr2func.py --root-dir=/remote/ANDROID/hdtv/ --maps-file=./maps --product=zx2000 diff_2158_3_4.log \n mem_stack_2158_3_4.log\n\n\n\n\n\n\n\u751f\u6210\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b:\n\n\n2c2                                                                                                                                                                              \n[\n0\n/59466\n]\n\n\n\n  Total memory \n8392272\n\n\n---\n\n\n  Total memory \n9441872\n\n\n\n4\n,5c4,5\n\n\n size  \n1048576\n, dup    \n3\n,\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315 \n(\ndiscriminator \n1\n)\n\n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test\n()\n, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:11\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:25 \n(\ndiscriminator \n1\n)\n\n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n\n size     \n1024\n, dup    \n3\n,\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315 \n(\ndiscriminator \n1\n)\n\n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test1\n()\n, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:17\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:26 \n(\ndiscriminator \n1\n)\n\n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n---\n\n\n size  \n1048576\n, dup    \n4\n,\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315 \n(\ndiscriminator \n1\n)\n\n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test\n()\n, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:11\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:25 \n(\ndiscriminator \n1\n)\n\n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n\n size     \n1024\n, dup    \n4\n,\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315 \n(\ndiscriminator \n1\n)\n\n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test1\n()\n, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:17\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:26 \n(\ndiscriminator \n1\n)\n\n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n\n\n\n\n\n\u6240\u6709\u7684\u5730\u5740\u88ab\u8f6c\u6362\u6210\u4e86\u961f\u957f.\n\n\n\u6700\u540e\u6267\u884c memincrease.py :\n\n\n./memincrease.py mem_stack_2158_3_4.log incr_2158_3_4.log\n\n\n\n\n\n\u751f\u6210\u7684\u6587\u4ef6 incr_2158_3_4.log \u5185\u5bb9\u5982\u4e0b:\n\n\nMemory increase \n1048576\n bytes                   \n### \u5185\u5b58\u589e\u52a0\u4e86 1048576 bytes\n\n98990365afa0d71d62949620cc7e3753f386e4e3\nold size \n1048576\n count \n3\n, total memory \n3145728\n       \n### \u4ece 3145728\n\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315 \n(\ndiscriminator \n1\n)\n\n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test\n()\n, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:11\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:25 \n(\ndiscriminator \n1\n)\n\n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n98990365afa0d71d62949620cc7e3753f386e4e3\nnew size \n1048576\n count \n4\n, total memory \n4194304\n      \n### \u589e\u52a0\u5230 4194304\n\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315 \n(\ndiscriminator \n1\n)\n\n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test\n()\n, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:11\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:25 \n(\ndiscriminator \n1\n)\n\n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n\nMemory increase \n1024\n bytes\n833f23c991cc75facaa41fb74f7466b91c27917b\nold size \n1024\n count \n3\n, total memory \n3072\n\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315 \n(\ndiscriminator \n1\n)\n\n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test1\n()\n, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:17\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:26 \n(\ndiscriminator \n1\n)\n\n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n833f23c991cc75facaa41fb74f7466b91c27917b\nnew size \n1024\n count \n4\n, total memory \n4096\n\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315 \n(\ndiscriminator \n1\n)\n\n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test1\n()\n, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:17\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:26 \n(\ndiscriminator \n1\n)\n\n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n\n\n\n\n\n\u57fa\u672c\u4e0a, \u5c06\u6700\u9876\u4e0a\u7684\u51e0\u4e2a\u5806\u6808\u786e\u8ba4\u4e0b\u662f\u5426\u5185\u5b58\u6cc4\u9732\u5373\u53ef.\n\n\n\u7279\u522b\u6ce8\u610f:\n\n\n\n\n\u7c7b\u6cc4\u9732\u65f6, \u5728\u5806\u6808\u4e0a\u7684\u8868\u73b0\u662f\u5176\u6210\u5458\u5185\u5b58\u6cc4\u9732. \u9700\u8981\u67e5\u770b\u5806\u6808\u662f\u5426\u6709\u8be5\u7c7b\u5bf9\u8c61\u7684new\u65b9\u6cd5, \u5e76\u4e14\u8be5\u65b9\u6cd5\u662f\u5426\u5728\u591a\u5904\u5b58\u5728.\n\n\n\n\nvalgrind \u8c03\u8bd5\u5185\u5b58\u6cc4\u9732\n\n\n\u573a\u666f: \u5bf9\u4e8e\u53ef\u9000\u51fa\u7684\u8fdb\u7a0b\u8fdb\u884c\u8c03\u8bd5\u6bd4\u8f83\u5408\u9002, \u53ef\u4ee5\u5bf9\u5e94\u7528\u7684native\u4ee3\u7801\u8fdb\u884c\u8c03\u8bd5.\n\n\n\u76ee\u524dhdtv\u4ee3\u7801\u4e0a\u7684 valgrind \u65e0\u6cd5\u83b7\u53d6\u88ab\u8c03\u8bd5\u8fdb\u7a0b\u7684\u5806\u6808, \u53ea\u80fd\u83b7\u53d6\u5b83\u81ea\u5df1\u5e93\u7684\u5806\u6808, \u5b58\u5728\u95ee\u9898. \u6682\u65f6\u65e0\u6cd5\u4f7f\u7528.", 
            "title": "Android\u5185\u5b58\u8c03\u8bd5\u603b\u7ed3"
        }, 
        {
            "location": "/Android-memory-debug/#android", 
            "text": "\u6765\u6e90: https://pengzhangdev.github.io/Android-memory-debug/", 
            "title": "Android\u5185\u5b58\u8c03\u8bd5\u5de5\u5177\u603b\u7ed3"
        }, 
        {
            "location": "/Android-memory-debug/#_1", 
            "text": "\u7cfb\u7edf\u5185\u5b58\u5206\u6790, \u6240\u6709\u8fdb\u7a0b\u5185\u5b58\u5206\u6790  \u57fa\u672c\u7684 logcat \u8f93\u51fa\u4e2d\u53ef\u80fd\u5305\u542b\u7684GC\u76f8\u5173\u4fe1\u606f, \u53ef\u4ee5\u4f5c\u4e3a\u7cfb\u7edf\u6216\u67d0\u4e9b\u5e94\u7528\u5185\u5b58\u72b6\u51b5\u7684\u53c2\u8003\u4f9d\u636e.  \u5728SystemServer\u542f\u52a8\u7684\u60c5\u51b5\u4e0b, \u8fd8\u53ef\u4ee5\u901a\u8fc7  dumpsys meminfo  \u4eceframework\u5c42\u89d2\u5ea6\u67e5\u770b\u7cfb\u7edf\u5185\u5b58\u7684\u72b6\u51b5, \u8be5\u90e8\u5206\u4fe1\u606f\u4e0e\u4ece\u7cfb\u7edf\u89d2\u5ea6\u83b7\u53d6\u7684\u4fe1\u606f\u5b58\u5728\u5dee\u5f02.  \u5bf9\u4e8e\u9700\u8981\u6392\u5e8f\u5e76\u67e5\u627e\u5185\u5b58\u5360\u7528\u6700\u591a\u7684\u8fdb\u7a0b, \u63a8\u8350\u4f7f\u7528\u547d\u4ee4  procrank  \u5728\u5b9e\u5728\u7f3a\u5c11\u5de5\u5177, \u6216\u8005RD\u77e5\u9053\u9700\u8981\u4ec0\u4e48\u4fe1\u606f\u7684\u60c5\u51b5\u4e0b, \u53ef\u4ee5\u67e5\u770b /proc/meminfo  \u5982\u679c\u9700\u8981\u8fde\u7eed\u76d1\u63a7\u7cfb\u7edf\u7684\u72b6\u6001(\u5185\u5b58/CPU\u7b49), \u53ef\u4ee5\u8003\u8651\u5de5\u5177 vmstat  \u5982\u679c\u9700\u8981\u4ece\u5171\u4eab\u5e93\u6216\u8005\u5171\u4eab\u5185\u5b58\u7684\u89d2\u5ea6\u5206\u6790\u5176\u5185\u5b58\u5360\u7528\u7684\u60c5\u51b5, \u53ef\u4ee5\u8003\u8651\u7528  librank , \u5f53\u7136, \u5982\u679c\u5b58\u5728host\u7aef\u7684\u5206\u6790\u5de5\u5177, \u5219\u8be5\u5de5\u5177\u7684\u8f93\u51fa\u53ef\u4ee5\u9876\u66ff procrank \u548c procmem .  \u5982\u679c\u9700\u8981\u67e5\u770b\u7cfb\u7edf\u4e2d\u54ea\u4e9b\u5171\u4eab\u6587\u4ef6\u522b\u901a\u8fc7\u7f3a\u9875\u9519\u8bef\u7684\u65b9\u5f0f\u8bfb\u5230\u5185\u5b58, \u53ef\u4ee5\u4f7f\u7528\u5de5\u5177 dumpcache  \u5982\u679c\u5b9e\u5728\u4e0d\u77e5\u9053bug\u539f\u56e0\u6216\u8005\u95ee\u9898\u53ef\u80fd\u8ddf\u81ea\u5df1\u65e0\u5173, \u5efa\u8bae\u4f7f\u7528  bugreport , \u4f9b\u5176\u4ed6RD\u534f\u52a9\u5206\u6790\u95ee\u9898.    \u6307\u5b9a\u5e94\u7528(dalvik\u8fdb\u7a0b)\u5185\u5b58\u5206\u6790  dumpsys meminfo \u5e94\u7528\u5185\u5b58  \u8f93\u51fa\u5f53\u524d\u8fdb\u7a0b/\u5e94\u7528\u7684\u6240\u6709\u5185\u5b58\u5360\u7528\u60c5\u51b5. \u5efa\u8bae\u53ea\u9488\u5bf9dalvik\u5c42\u7684\u8fdb\u7a0b.    \u6307\u5b9anative\u8fdb\u7a0b\u5185\u5b58\u5206\u6790  native\u7684\u5355\u4e2a\u8fdb\u7a0b\u5185\u5b58\u5206\u6790\u5efa\u8bae\u4f7f\u7528  procmem \u548c  showmap .  showmap  \u989d\u5916\u8f93\u51fa\u4e86\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4, \u53ef\u4ee5\u8f85\u52a9\u67e5\u770b\u7531\u4e8e\u865a\u62df\u5730\u5740\u7a7a\u95f4\u5f15\u8d77\u7684\u5185\u5b58\u95ee\u9898.    \u5e94\u7528\u5185\u5b58\u6cc4\u9732  \u5c11\u90e8\u5206\u7684\u6cc4\u9732, \u6bd4\u5982\u6570\u636e\u5e93/activity\u7b49, \u901a\u8fc7 dumpsys meminfo \u5e94\u7528\u5185\u5b58 , \u4f46\u53ea\u80fd\u77e5\u9053\u5b58\u5728\u6cc4\u9732.  \u5e94\u7528\u5728\u5f00\u542f  strictmode  \u7684\u60c5\u51b5\u4e0b, \u53ef\u4ee5\u53d1\u73b0\u66f4\u591a\u7684\u8d44\u6e90\u6cc4\u9732\u60c5\u51b5. \u4f46\u4ec5\u9650\u4e8e\u53d1\u73b0.  \u4e00\u4e2a\u6bd4\u8f83\u63a8\u8350\u7684\u7528\u4e8e\u5b9a\u4e49\u5e94\u7528\u5185\u5b58\u6cc4\u9732\u7684\u5de5\u5177\u662f  LeakCanary    native\u8fdb\u7a0b\u5185\u5b58\u6cc4\u9732  \u57fa\u4e8ebionic\u7684\u5185\u5b58\u6cc4\u9732\u5206\u6790\u5de5\u5177 , \u8be5\u5de5\u5177\u5bf9\u4e8eRD\u4f7f\u7528\u8981\u6c42\u504f\u9ad8.    bugreport \u4fe1\u606f\u5206\u6790  \u89c1\u5916\u90e8\u6587\u6863.", 
            "title": "\u7d22\u5f15"
        }, 
        {
            "location": "/Android-memory-debug/#_2", 
            "text": "VSS - Virtual Set Size \u865a\u62df\u8017\u7528\u5185\u5b58\uff08\u5305\u542b\u5171\u4eab\u5e93\u5360\u7528\u7684\u5185\u5b58\uff09\nRSS - Resident Set Size \u5b9e\u9645\u4f7f\u7528\u7269\u7406\u5185\u5b58\uff08\u5305\u542b\u5171\u4eab\u5e93\u5360\u7528\u7684\u5185\u5b58\uff09\nPSS - Proportional Set Size \u5b9e\u9645\u4f7f\u7528\u7684\u7269\u7406\u5185\u5b58, USS + \u6bd4\u4f8b\u5206\u914d\u5171\u4eab\u5e93\u5360\u7528\u7684\u5185\u5b58\uff08[\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u5171\u4eab\u7684\u5185\u5b58(RSS - USS)] / [\u5206\u4eab\u5171\u4eab\u5185\u5b58\u7684\u8fdb\u7a0b\u6570\u91cf]\uff09.\nUSS - Unique Set Size \u8fdb\u7a0b\u72ec\u81ea\u5360\u7528\u7684\u7269\u7406\u5185\u5b58\uff08\u4e0d\u5305\u542b\u5171\u4eab\u5e93\u5360\u7528\u7684\u5185\u5b58\uff09      \n\u5982\u679c\u770b\u8fdb\u7a0b\u72ec\u5360\u5185\u5b58\uff0c\u3000\u5219\u4f7f\u7528USS. \u4f46\u662f\u4e00\u822c\u8003\u8651\u5230\u5171\u4eab\u5185\u5b58\u7684\u60c5\u51b5, \u5927\u90e8\u5206\u90fd\u662f\u4f9d\u636ePSS\u67e5\u770b\u5bf9\u5e94\u8fdb\u7a0b\u7684\u5185\u5b58\u5360\u7528.  shared clean: \u5e72\u51c0\u7684\u5171\u4eab\u6570\u636e, \u4e5f\u5c31\u662f\u8bf4, \u5f53\u524d\u6709\u591a\u4e2a\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u6307\u5411\u8be5\u7269\u7406\u7a7a\u95f4, \u4e14\u5f53\u524d\u8fdb\u7a0b\u7a7a\u95f4\u8be5\u6570\u636e\u4e0edisk\u4e0a\u4e00\u81f4.\nshared dirty: \u810f\u5171\u4eab\u6570\u636e, \u4e0e\u4e0a\u9762\u5bf9\u5e94, \u8be5\u8fdb\u7a0b\u7a7a\u95f4\u7684\u5171\u4eab\u6570\u636e\u4e0edisk\u4e0a\u6570\u636e\u4e0d\u4e00\u81f4.\nprivate clean: \u8fdb\u7a0b\u79c1\u6709\u5e72\u51c0\u6570\u636e, \u4e0edisk\u6570\u636e\u4e00\u81f4.\nprivate dirty: \u8fdb\u7a0b\u79c1\u6709\u810f\u6570\u636e, \u4e0edisk\u6570\u636e\u4e0d\u4e00\u81f4.", 
            "title": "\u57fa\u7840\u6982\u5ff5"
        }, 
        {
            "location": "/Android-memory-debug/#_3", 
            "text": "", 
            "title": "\u7cfb\u7edf\u5185\u5b58\u4fe1\u606f\u5206\u6790"
        }, 
        {
            "location": "/Android-memory-debug/#logcat", 
            "text": "", 
            "title": "logcat \u8f93\u51fa "
        }, 
        {
            "location": "/Android-memory-debug/#dalvik", 
            "text": "\u573a\u666f: \u5728\u5e94\u7528\u968f\u673a\u51fa\u73b0\u6162\u65f6, \u53ef\u4ee5\u770b\u770b\u90a3\u6bb5\u65f6\u95f4logcat\u7684\u8f93\u51fa, \u662f\u5426\u5305\u542bGC\u7684\u4e00\u4e9b\u4fe1\u606f. GC\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5e94\u7528\u6162, \u800c\u7cfb\u7edf\u53d1\u8d77\u7684GC\u5219\u610f\u5473\u7740\u5185\u5b58\u4e0d\u591f, \u53ef\u80fd\u51fa\u73b0\u4ece\u78c1\u76d8\u52a0\u8f7d\u7684\u60c5\u51b5.  \u5728logcat\u4e2d\u4f1a\u6253\u5370dalvik\u7684\u5783\u573e\u56de\u6536\u4fe1\u606f.  D/dalvikvm:  GC_Reason   Amount_freed ,  Heap_stats ,  External_memory_stats ,  Pause_time \nD/dalvikvm( 9050): GC_CONCURRENT freed 2049K, 65% free 3571K/9991K, external 4703K/5261K, paused 2ms+2ms   GC_Reason :  GC_CONCURRENT \n    \u5728\u60a8\u7684\u5806\u5f00\u59cb\u5360\u7528\u5185\u5b58\u65f6\u53ef\u4ee5\u91ca\u653e\u5185\u5b58\u7684\u5e76\u53d1\u5783\u573e\u56de\u6536\u3002 GC_FOR_MALLOC \n    \u5806\u5df2\u6ee1\u800c\u7cfb\u7edf\u4e0d\u5f97\u4e0d\u505c\u6b62\u60a8\u7684\u5e94\u7528\u5e76\u56de\u6536\u5185\u5b58\u65f6\uff0c\u60a8\u7684\u5e94\u7528\u5c1d\u8bd5\u5206\u914d\u5185\u5b58\u800c\u5f15\u8d77\u7684\u5783\u573e\u56de\u6536\u3002 GC_HPROF_DUMP_HEAP \n    \u5f53\u60a8\u8bf7\u6c42\u521b\u5efa HPROF \u6587\u4ef6\u6765\u5206\u6790\u5806\u65f6\u51fa\u73b0\u7684\u5783\u573e\u56de\u6536\u3002 GC_EXPLICIT \n    \u663e\u5f0f\u5783\u573e\u56de\u6536\uff0c\u4f8b\u5982\u5f53\u60a8\u8c03\u7528 gc() \u65f6\uff08\u60a8\u5e94\u907f\u514d\u8c03\u7528\uff0c\u800c\u5e94\u4fe1\u4efb\u5783\u573e\u56de\u6536\u4f1a\u6839\u636e\u9700\u8981\u8fd0\u884c\uff09\u3002 GC_EXTERNAL_ALLOC \n    \u8fd9\u4ec5\u9002\u7528\u4e8e API \u7ea7\u522b 10 \u53ca\u66f4\u4f4e\u7ea7\u522b\uff08\u66f4\u65b0\u7248\u672c\u4f1a\u5728 Dalvik \u5806\u4e2d\u5206\u914d\u4efb\u4f55\u5185\u5b58\uff09\u3002\u5916\u90e8\u5206\u914d\u5185\u5b58\u7684\u5783\u573e\u56de\u6536\uff08\u4f8b\u5982\u5b58\u50a8\u5728\u539f\u751f\u5185\u5b58\u6216 NIO \u5b57\u8282\u7f13\u51b2\u533a\u4e2d\u7684\u50cf\u7d20\u6570\u636e\uff09\u3002   Amount_freed : \n\u4ece\u6b64\u6b21\u5783\u573e\u56de\u6536\u4e2d\u56de\u6536\u7684\u5185\u5b58\u91cf\u3002  Heap_stats :  \u5806\u7684\u53ef\u7528\u7a7a\u95f4\u767e\u5206\u6bd4\u4e0e\uff08\u6d3b\u52a8\u5bf9\u8c61\u6570\u91cf\uff09/\uff08\u5806\u603b\u5927\u5c0f\uff09\u3002   External_memory_stats :  API \u7ea7\u522b 10 (Android3.0 \u4ee5\u4e0b)\u53ca\u66f4\u4f4e\u7ea7\u522b\u7684\u5916\u90e8\u5206\u914d\u5185\u5b58\uff08\u5df2\u5206\u914d\u5185\u5b58\u91cf\uff09/\uff08\u53d1\u751f\u56de\u6536\u7684\u9650\u503c\uff09. \u800c\u65b0API\u4e2d, \u7edf\u4e00\u7531dalvik\u7ba1\u7406.   Pause_time   \u5806\u8d8a\u5927\uff0c\u6682\u505c\u65f6\u95f4\u8d8a\u957f\u3002\u5e76\u53d1\u6682\u505c\u65f6\u95f4\u663e\u793a\u4e86\u4e24\u4e2a\u6682\u505c\uff1a\u4e00\u4e2a\u51fa\u73b0\u5728\u56de\u6536\u5f00\u59cb\u65f6\uff0c\u53e6\u4e00\u4e2a\u51fa\u73b0\u5728\u56de\u6536\u5feb\u8981\u5b8c\u6210\u65f6\u3002", 
            "title": "dalvik\u65e5\u5fd7\u6253\u5370"
        }, 
        {
            "location": "/Android-memory-debug/#art", 
            "text": "\u4e0e Dalvik \u4e0d\u540c\uff0cART \u4e0d\u4f1a\u4e3a\u672a\u660e\u786e\u8bf7\u6c42\u7684\u5783\u573e\u56de\u6536\u8bb0\u5f55\u6d88\u606f\u3002\u53ea\u6709\u5728\u8ba4\u4e3a\u5783\u573e\u56de\u6536\u901f\u5ea6\u8f83\u6162\u65f6\u624d\u4f1a\u6253\u5370\u5783\u573e\u56de\u6536\u3002\u66f4\u786e\u5207\u5730\u8bf4\uff0c\u4ec5\u5728\u5783\u573e\u56de\u6536\u6682\u505c\u65f6\u95f4\u8d85\u8fc7 5ms \u6216\u5783\u573e\u56de\u6536\u6301\u7eed\u65f6\u95f4\u8d85\u8fc7 100ms \u65f6\u3002\u5982\u679c\u5e94\u7528\u672a\u5904\u4e8e\u53ef\u5bdf\u89c9\u7684\u6682\u505c\u8fdb\u7a0b\u72b6\u6001\uff0c\u90a3\u4e48\u5176\u5783\u573e\u56de\u6536\u4e0d\u4f1a\u88ab\u89c6\u4e3a\u8f83\u6162\u3002\u59cb\u7ec8\u4f1a\u8bb0\u5f55\u663e\u5f0f\u5783\u573e\u56de\u6536\u3002  I/art:  GC_Reason   GC_Name   Objects_freed ( Size_freed ) AllocSpace Objects,  Large_objects_freed ( Large_object_size_freed )  Heap_stats  LOS objects,  Pause_time(s) \n\nI/art : Explicit concurrent mark sweep GC freed 104710(7MB) AllocSpace objects, 21(416KB) LOS objects, 33% free, 25MB/38MB, paused 1.230ms total 67.216ms  GC_Reason :  Concurrent \n    \u4e0d\u4f1a\u6682\u505c\u5e94\u7528\u7ebf\u7a0b\u7684\u5e76\u53d1\u5783\u573e\u56de\u6536\u3002\u6b64\u5783\u573e\u56de\u6536\u5728\u540e\u53f0\u7ebf\u7a0b\u4e2d\u8fd0\u884c\uff0c\u800c\u4e14\u4e0d\u4f1a\u963b\u6b62\u5206\u914d\u3002 Alloc \n    \u60a8\u7684\u5e94\u7528\u5728\u5806\u5df2\u6ee1\u65f6\u5c1d\u8bd5\u5206\u914d\u5185\u5b58\u5f15\u8d77\u7684\u5783\u573e\u56de\u6536\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5206\u914d\u7ebf\u7a0b\u4e2d\u53d1\u751f\u4e86\u5783\u573e\u56de\u6536\u3002 Explicit \n    \u7531\u5e94\u7528\u660e\u786e\u8bf7\u6c42\u7684\u5783\u573e\u56de\u6536\uff0c\u4f8b\u5982\uff0c\u901a\u8fc7\u8c03\u7528 gc() \u6216 gc()\u3002\u4e0e Dalvik \u76f8\u540c\uff0c\u5728 ART \u4e2d\uff0c\u6700\u4f73\u505a\u6cd5\u662f\u60a8\u5e94\u4fe1\u4efb\u5783\u573e\u56de\u6536\u5e76\u907f\u514d\u8bf7\u6c42\u663e\u5f0f\u5783\u573e\u56de\u6536\uff08\u5982\u679c\u53ef\u80fd\uff09\u3002\u4e0d\u5efa\u8bae\u4f7f\u7528\u663e\u5f0f\u5783\u573e\u56de\u6536\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f1a\u963b\u6b62\u5206\u914d\u7ebf\u7a0b\u5e76\u4e0d\u5fc5\u8981\u5730\u6d6a\u8d39 CPU \u5468\u671f\u3002\u5982\u679c\u663e\u5f0f\u5783\u573e\u56de\u6536\u5bfc\u81f4\u5176\u4ed6\u7ebf\u7a0b\u88ab\u62a2\u5360\uff0c\u90a3\u4e48\u5b83\u4eec\u4e5f\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5361\u987f\uff08\u5e94\u7528\u4e2d\u51fa\u73b0\u95f4\u65ad\u3001\u6296\u52a8\u6216\u6682\u505c\uff09\u3002 NativeAlloc \n    \u539f\u751f\u5206\u914d\uff08\u5982\u4f4d\u56fe\u6216 RenderScript \u5206\u914d\u5bf9\u8c61\uff09\u5bfc\u81f4\u51fa\u73b0\u539f\u751f\u5185\u5b58\u538b\u529b\uff0c\u8fdb\u800c\u5f15\u8d77\u7684\u56de\u6536\u3002 CollectorTransition \n    \u7531\u5806\u8f6c\u6362\u5f15\u8d77\u7684\u56de\u6536\uff1b\u6b64\u56de\u6536\u7531\u8fd0\u884c\u65f6\u5207\u6362\u5783\u573e\u56de\u6536\u5f15\u8d77\u3002\u56de\u6536\u5668\u8f6c\u6362\u5305\u62ec\u5c06\u6240\u6709\u5bf9\u8c61\u4ece\u7a7a\u95f2\u5217\u8868\u7a7a\u95f4\u590d\u5236\u5230\u78b0\u649e\u6307\u9488\u7a7a\u95f4\uff08\u53cd\u4e4b\u4ea6\u7136\uff09\u3002\u5f53\u524d\uff0c\u56de\u6536\u5668\u8f6c\u6362\u4ec5\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\u51fa\u73b0\uff1a\u5728 RAM \u8f83\u5c0f\u7684\u8bbe\u5907\u4e0a\uff0c\u5e94\u7528\u5c06\u8fdb\u7a0b\u72b6\u6001\u4ece\u53ef\u5bdf\u89c9\u7684\u6682\u505c\u72b6\u6001\u53d8\u66f4\u4e3a\u53ef\u5bdf\u89c9\u7684\u975e\u6682\u505c\u72b6\u6001\uff08\u53cd\u4e4b\u4ea6\u7136\uff09\u3002  HomogeneousSpaceCompact \n    \u9f50\u6027\u7a7a\u95f4\u538b\u7f29\u662f\u7a7a\u95f2\u5217\u8868\u7a7a\u95f4\u5230\u7a7a\u95f2\u5217\u8868\u7a7a\u95f4\u538b\u7f29\uff0c\u901a\u5e38\u5728\u5e94\u7528\u8fdb\u5165\u5230\u53ef\u5bdf\u89c9\u7684\u6682\u505c\u8fdb\u7a0b\u72b6\u6001\u65f6\u53d1\u751f\u3002\u8fd9\u6837\u505a\u7684\u4e3b\u8981\u539f\u56e0\u662f\u51cf\u5c11 RAM \u4f7f\u7528\u91cf\u5e76\u5bf9\u5806\u8fdb\u884c\u788e\u7247\u6574\u7406\u3002  DisableMovingGc \n    \u8fd9\u4e0d\u662f\u771f\u6b63\u7684\u5783\u573e\u56de\u6536\u539f\u56e0\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u53d1\u751f\u5e76\u53d1\u5806\u538b\u7f29\u65f6\uff0c\u7531\u4e8e\u4f7f\u7528\u4e86 GetPrimitiveArrayCritical\uff0c\u56de\u6536\u906d\u5230\u963b\u6b62\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5f3a\u70c8\u5efa\u8bae\u4e0d\u8981\u4f7f\u7528 GetPrimitiveArrayCritical\uff0c\u56e0\u4e3a\u5b83\u5728\u79fb\u52a8\u56de\u6536\u5668\u65b9\u9762\u5177\u6709\u9650\u5236\u3002  HeapTrim \n    \u8fd9\u4e0d\u662f\u5783\u573e\u56de\u6536\u539f\u56e0\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u5806\u4fee\u526a\u5b8c\u6210\u4e4b\u524d\u56de\u6536\u4f1a\u4e00\u76f4\u53d7\u5230\u963b\u6b62\u3002   GC_Name :  ART \u5177\u6709\u53ef\u4ee5\u8fd0\u884c\u7684\u591a\u79cd\u4e0d\u540c\u7684\u5783\u573e\u56de\u6536\u3002   Concurrent mark sweep (CMS) \n    \u6574\u4e2a\u5806\u56de\u6536\u5668\uff0c\u4f1a\u91ca\u653e\u548c\u56de\u6536\u6620\u50cf\u7a7a\u95f4\u4ee5\u5916\u7684\u6240\u6709\u5176\u4ed6\u7a7a\u95f4\u3002 Concurrent partial mark sweep \n    \u51e0\u4e4e\u6574\u4e2a\u5806\u56de\u6536\u5668\uff0c\u4f1a\u56de\u6536\u9664\u4e86\u6620\u50cf\u7a7a\u95f4\u548c zygote \u7a7a\u95f4\u4ee5\u5916\u7684\u6240\u6709\u5176\u4ed6\u7a7a\u95f4\u3002  Concurrent sticky mark sweep \n    \u751f\u6210\u56de\u6536\u5668\uff0c\u53ea\u80fd\u91ca\u653e\u81ea\u4e0a\u6b21\u5783\u573e\u56de\u6536\u4ee5\u6765\u5206\u914d\u7684\u5bf9\u8c61\u3002\u6b64\u5783\u573e\u56de\u6536\u6bd4\u5b8c\u6574\u6216\u90e8\u5206\u6807\u8bb0\u6e05\u9664\u8fd0\u884c\u5f97\u66f4\u9891\u7e41\uff0c\u56e0\u4e3a\u5b83\u66f4\u5feb\u901f\u4e14\u6682\u505c\u65f6\u95f4\u66f4\u77ed\u3002  Marksweep + semispace \n    \u975e\u5e76\u53d1\u3001\u590d\u5236\u5783\u573e\u56de\u6536\uff0c\u7528\u4e8e\u5806\u8f6c\u6362\u4ee5\u53ca\u9f50\u6027\u7a7a\u95f4\u538b\u7f29\uff08\u5bf9\u5806\u8fdb\u884c\u788e\u7247\u6574\u7406\uff09\u3002   Objects_freed :  \u6b64\u6b21\u5783\u573e\u56de\u6536\u4ece\u975e\u5927\u578b\u5bf9\u8c61\u7a7a\u95f4\u56de\u6536\u7684\u5bf9\u8c61\u6570\u91cf\u3002  Size_freed :  \u6b64\u6b21\u5783\u573e\u56de\u6536\u4ece\u975e\u5927\u578b\u5bf9\u8c61\u7a7a\u95f4\u56de\u6536\u7684\u5b57\u8282\u6570\u91cf\u3002  Large_objects_freed :  \u6b64\u6b21\u5783\u573e\u56de\u6536\u4ece\u5927\u578b\u5bf9\u8c61\u7a7a\u95f4\u56de\u6536\u7684\u5bf9\u8c61\u6570\u91cf\u3002  Large_object_size_freed :  \u6b64\u6b21\u5783\u573e\u56de\u6536\u4ece\u5927\u578b\u5bf9\u8c61\u7a7a\u95f4\u56de\u6536\u7684\u5b57\u8282\u6570\u91cf\u3002  Heap_stats  \u7a7a\u95f2\u767e\u5206\u6bd4\u4e0e\uff08\u6d3b\u52a8\u5bf9\u8c61\u6570\u91cf\uff09/\uff08\u5806\u603b\u5927\u5c0f\uff09\u3002  Pause_time(s)  \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6682\u505c\u65f6\u95f4\u4e0e\u5783\u573e\u56de\u6536\u8fd0\u884c\u65f6\u4fee\u6539\u7684\u5bf9\u8c61\u5f15\u7528\u6570\u91cf\u6210\u6b63\u6bd4\u3002\u5f53\u524d\uff0cART CMS \u5783\u573e\u56de\u6536\u4ec5\u5728\u5783\u573e\u56de\u6536\u5373\u5c06\u5b8c\u6210\u65f6\u6682\u505c\u4e00\u6b21\u3002\u79fb\u52a8\u7684\u5783\u573e\u56de\u6536\u6682\u505c\u65f6\u95f4\u8f83\u957f\uff0c\u4f1a\u5728\u5927\u90e8\u5206\u5783\u573e\u56de\u6536\u671f\u95f4\u6301\u7eed\u51fa\u73b0\u3002", 
            "title": "art\u65e5\u5fd7\u6253\u5370"
        }, 
        {
            "location": "/Android-memory-debug/#android_1", 
            "text": "", 
            "title": "android\u81ea\u5e26\u5de5\u5177"
        }, 
        {
            "location": "/Android-memory-debug/#dumpsys-meminfo", 
            "text": "https://developer.android.com/studio/profile/investigate-ram.html\nhttp://gityuan.com/2016/01/02/memory-analysis-command/  \u573a\u666f: \u67e5\u770bdalvik\u7b49\u533a\u57df\u5185\u5b58\u60c5\u51b5.  root@zx1800:/data # dumpsys meminfo\nApplications Memory Usage (kB):                                           --- \u4ee5\u4e0b\u5185\u5b58\u5355\u4f4d\nUptime: 618252294 Realtime: 618252294                                     --- Realtime: \u7cfb\u7edf\u542f\u52a8\u5f00\u59cb\u8ba1\u65f6, \u5305\u542b\u4f11\u7720, \u51c6\u786e\u6027\u4f9d\u8d56\u9a71\u52a8\u5b9e\u73b0. \u5728\u9a71\u52a8\u65e0\u5b9e\u73b0\u65f6, \u4f7f\u7528Uptime.\n                                                                          --- Uptime: \u7cfb\u7edf\u542f\u52a8\u5f00\u59cb\u8ba1\u65f6, \u4e0d\u5305\u542b\u4f11\u7720.\n\nTotal PSS by process:                                                     --- \u6240\u6709\u8fdb\u7a0b PSS \u5360\u7528\u6392\u5e8f\n    24712 kB: system (pid 445)\n    19600 kB: com.china_liantong.upgrade (pid 2660)\n    17500 kB: com.china_liantong.video (pid 3002 / activities)\n    11100 kB: com.china_liantong.oam (pid 999)\n    10627 kB: com.china_liantong.channelmanagerservice (pid 961)\n     8733 kB: com.china_liantong.live.service.LiveService (pid 2086)\n     8394 kB: com.china_liantong.ocnadservice (pid 942)\n     7622 kB: com.android.systemui (pid 677)\n     6708 kB: dhcpcd (pid 639)\n     6541 kB: com.china_liantong.epg (pid 1235)\n     6286 kB: android.process.media (pid 2041)\n     5691 kB: com.china_liantong.airsharingservice (pid 2063)\n     4466 kB: dvbserver (pid 211)\n     4041 kB: mediaserver (pid 196)\n     3890 kB: com.china_liantong.xmppservice (pid 887)\n     3354 kB: com.china_liantong.tvmediaplayerservice (pid 905)\n     3239 kB: com.china_liantong.launcher:SettingContentProvider (pid 1165)\n     2466 kB: surfaceflinger (pid 183)\n     2214 kB: com.china_liantong.inputmethod.pinyin (pid 773)\n     2122 kB: com.china_liantong.dtvsyskeyservice (pid 980)\n     1955 kB: logd (pid 178)\n     1943 kB: com.china_liantong.tvframe (pid 1066)\n     1847 kB: com.china_liantong.playback (pid 923)\n     1640 kB: zygote (pid 220)\n      615 kB: sdcard (pid 1698)\n      473 kB: netd (pid 191)\n      415 kB: sysinfod (pid 184)\n      392 kB: vold (pid 182)\n      364 kB: developed (pid 222)\n      356 kB: adbd (pid 224)\n      350 kB: sh (pid 12684)\n      285 kB: /init (pid 1)\n      279 kB: dvbresourceserver (pid 210)\n      261 kB: sdcard (pid 223)\n      258 kB: avsettingd (pid 215)\n      240 kB: sh (pid 1325)\n      164 kB: ueventd (pid 159)\n      135 kB: keystore (pid 201)\n       82 kB: servicemanager (pid 181)\n       81 kB: installd (pid 199)\n       76 kB: healthd (pid 179)\n       62 kB: lmkd (pid 180)\n       26 kB: drmserver (pid 195)\n       26 kB: systemtaskd (pid 202)\n       22 kB: frontpaneld (pid 207)\n       15 kB: common_time (pid 189)\n       15 kB: frontpadserver (pid 216)\n       15 kB: dcaseventsvr (pid 219)\n        9 kB: sh (pid 190)\n        9 kB: debuggerd (pid 192)\n\nTotal PSS by OOM adjustment:                                              --- \u4ee5OOM\u7c7b\u522b\u5212\u5206(TODO: \u6bcf\u4e2a\u7c7b\u522b\u4f9d\u636e\u548c\u542b\u4e49)\n    26301 kB: Native\n                6708 kB: dhcpcd (pid 639)\n                4466 kB: dvbserver (pid 211)\n                4041 kB: mediaserver (pid 196)\n                2466 kB: surfaceflinger (pid 183)\n                1955 kB: logd (pid 178)\n                1640 kB: zygote (pid 220)\n                 615 kB: sdcard (pid 1698)\n                 473 kB: netd (pid 191)\n                 415 kB: sysinfod (pid 184)\n                 392 kB: vold (pid 182)\n                 364 kB: developed (pid 222)\n                 356 kB: adbd (pid 224)\n                 350 kB: sh (pid 12684)\n                 285 kB: /init (pid 1)\n                 279 kB: dvbresourceserver (pid 210)\n                 261 kB: sdcard (pid 223)\n                 258 kB: avsettingd (pid 215)\n                 240 kB: sh (pid 1325)\n                 164 kB: ueventd (pid 159)\n                 135 kB: keystore (pid 201)\n                  82 kB: servicemanager (pid 181)\n                  81 kB: installd (pid 199)\n                  76 kB: healthd (pid 179)\n                  62 kB: lmkd (pid 180)\n                  26 kB: drmserver (pid 195)\n                  26 kB: systemtaskd (pid 202)\n                  22 kB: frontpaneld (pid 207)\n                  15 kB: common_time (pid 189)\n                  15 kB: frontpadserver (pid 216)\n                  15 kB: dcaseventsvr (pid 219)\n                   9 kB: sh (pid 190)\n                   9 kB: debuggerd (pid 192)\n    24712 kB: System\n               24712 kB: system (pid 445)\n    48956 kB: Persistent\n               11100 kB: com.china_liantong.oam (pid 999)\n               10627 kB: com.china_liantong.channelmanagerservice (pid 961)\n                8394 kB: com.china_liantong.ocnadservice (pid 942)\n                7622 kB: com.android.systemui (pid 677)\n                3890 kB: com.china_liantong.xmppservice (pid 887)\n                3354 kB: com.china_liantong.tvmediaplayerservice (pid 905)\n                2122 kB: com.china_liantong.dtvsyskeyservice (pid 980)\n                1847 kB: com.china_liantong.playback (pid 923)\n    27280 kB: Foreground\n               17500 kB: com.china_liantong.video (pid 3002 / activities)\n                6541 kB: com.china_liantong.epg (pid 1235)\n                3239 kB: com.china_liantong.launcher:SettingContentProvider (pid 1165)\n     1943 kB: Visible\n                1943 kB: com.china_liantong.tvframe (pid 1066)\n     2214 kB: Perceptible\n                2214 kB: com.china_liantong.inputmethod.pinyin (pid 773)\n     6286 kB: Home\n                6286 kB: android.process.media (pid 2041)\n    34024 kB: B Services  (\u6ce8\u91ca: \u8001\u65e7\u7684, \u4e0d\u592a\u53ef\u80fd\u88ab\u4f7f\u7528\u5230\u7684\u670d\u52a1\u8fdb\u7a0b)\n               19600 kB: com.china_liantong.upgrade (pid 2660)\n                8733 kB: com.china_liantong.live.service.LiveService (pid 2086)\n                5691 kB: com.china_liantong.airsharingservice (pid 2063)\n\nTotal PSS by category:                                               --- \u4ee5 category \u5212\u5206\n    49530 kB: Native\n    35318 kB: Dalvik\n    26569 kB: .so mmap\n    17158 kB: .oat mmap\n    16357 kB: .art mmap\n     8144 kB: .dex mmap\n     6671 kB: Stack\n     2822 kB: Dalvik Other\n     2635 kB: Other mmap\n     2160 kB: .ttf mmap\n     1892 kB: Other dev\n     1581 kB: Unknown\n      843 kB: .apk mmap\n       36 kB: EGL mtrack\n        0 kB: Cursor\n        0 kB: Ashmem\n        0 kB: Gfx dev\n        0 kB: .jar mmap\n        0 kB: GL mtrack\n        0 kB: Other mtrack\n\nTotal RAM: 443652 kB (status critical)\n Free RAM: 137634 kB (40310 cached pss + 9492 cached kernel + 87832 free)\n Used RAM: 168782 kB (131406 used pss + 37376 kernel)\n Lost RAM: 137236 kB\n     ZRAM: 10684 kB physical used for 32252 kB in swap (196604 kB total swap)\n           \u538b\u7f29\u540e\u5185\u5b58\u5360\u7528             \u88ab\u538b\u7f29\u5185\u5b58\n      KSM: 39500 kB saved from shared 5844 kB\n           85420 kB unshared; 99276 kB volatile\n   Tuning: 96 (large 96), oom 10240 kB, restore limit 3413 kB (low-ram)", 
            "title": "dumpsys meminfo "
        }, 
        {
            "location": "/Android-memory-debug/#procrank", 
            "text": "\u573a\u666f: \u67e5\u770b\u5404\u4e2a\u8fdb\u7a0b\u7684PSS/USS \u5e76\u6bd4\u8f83  shell@zx1800:/ # procrank\n  PID       Vss      Rss      Pss      Uss  cmdline\n  884   589628K   89320K   30444K   23128K  com.china_liantong.launcher\n  447   617060K   74620K   25695K   20904K  system_server\n 1139   572780K   61160K   14848K   10160K  com.china_liantong.browserreceiver\n  209   125160K   25312K   13834K   12696K  /system/bin/dvbserver\n 1180   549556K   65992K   12433K    6192K  com.china_liantong.upgrade\n  807   554556K   48092K    9636K    7160K  com.china_liantong.ocnadservice\n  222   516596K   54256K    8960K    3152K  zygote\n  864   547692K   47220K    8431K    6024K  com.china_liantong.oam\n  827   552092K   46208K    8180K    5840K  com.china_liantong.channelmanagerservice\n  223    71580K   18580K    7156K    3928K  /system/bin/developed\n  955   529948K   44620K    6591K    4000K  com.china_liantong.epg\n  534   525112K   41324K    6233K    3816K  com.android.systemui\n  516   523764K   39424K    5949K    3884K  android.process.media\n  183    55092K   17936K    5935K    4284K  /system/bin/surfaceflinger\n 1066   525392K   41296K    5140K    2712K  com.china_liantong.live.service.LiveService\n  771   529900K   40224K    4864K    2888K  com.china_liantong.tvmediaplayerservice\n  753   525476K   37228K    4681K    2804K  com.china_liantong.xmppservice\n  201    53500K   12232K    4421K    3460K  /system/bin/mediaserver\n 1206   521008K   36324K    4288K    2580K  com.china_liantong.mytv\n  979   527892K   36256K    4201K    2080K  com.china_liantong.launcher:SettingContentProvider\n 1095   526240K   36480K    4145K    2368K  com.china_liantong.airsharingservice\n  601   518952K   37128K    3898K    1984K  com.china_liantong.inputmethod.pinyin\n  789   526912K   32468K    3309K    1832K  com.china_liantong.playback\n 1048   520468K   32616K    2799K     968K  com.china_liantong.live\n  846   525972K   32620K    2787K    1336K  com.china_liantong.dtvsyskeyservice\n 1252   519376K   31716K    2687K    1260K  com.china_liantong.video\n  907   524920K   32120K    2676K    1236K  com.china_liantong.tvframe\n  511    19896K    5168K    2350K    1208K  /system/bin/dhcpcd\n  210    25496K    6480K    1662K    1316K  /system/bin/avsettingd\n  178    18252K    2596K    1509K    1476K  /system/bin/logd\n  199    23564K    4880K    1273K    1004K  /system/bin/drmserver\n  217    18936K    2864K     826K     740K  /system/bin/frontpadserver\n  182    19568K    3176K     816K     636K  /system/bin/vold\n  205    12508K    2804K     718K     572K  /system/bin/keystore\n  184    16580K    2580K     681K     536K  /system/bin/sysinfod\n  197    21796K    1672K     538K     480K  /system/bin/netd\n 2135     9192K    1100K     532K     520K  procrank\n  189    17484K    1748K     481K     420K  /system/bin/common_time\n  208    17492K    1792K     479K     436K  /system/bin/dvbresourceserver\n  220    16400K    1672K     434K     388K  /system/bin/dcaseventsvr\n  225    16980K     508K     416K     416K  /sbin/adbd\n  224    15412K    1048K     356K     336K  /system/bin/sdcard\n 1434     9324K    1020K     338K     244K  sh\n  186    14820K     428K     336K     332K  /sbin/watchdog\n    1     8860K     396K     327K     316K  /init\n 1428     9324K    1008K     326K     232K  /system/bin/sh\n  206    14460K    1036K     310K     288K  /system/bin/systemtaskd\n  203     9412K    1012K     272K     248K  /system/bin/installd\n  207    14456K     992K     266K     244K  /system/bin/frontpaneld\n  179     9828K     316K     260K     256K  /sbin/healthd\n  180    10624K    1664K     184K     116K  /system/bin/lmkd\n  181     9460K     792K      98K      76K  /system/bin/servicemanager\n  198    10056K    1108K      64K      28K  /system/bin/debuggerd\n  160     8852K      56K      11K       4K  /sbin/ueventd\n                           ------   ------  ------\n                          230106K  155544K  TOTAL\n\nRAM: 443652K total, 38684K free, 0K buffers, 98768K cached, 1384K shmem, 21560K slab", 
            "title": "procrank "
        }, 
        {
            "location": "/Android-memory-debug/#cat-procmeminfo", 
            "text": "\u573a\u666f: \u7cfb\u7edf\u5185\u5b58\u8be6\u7ec6\u4fe1\u606f  shell@zx1800:/ # cat /proc/meminfo                                             \nMemTotal:         443652 kB                      --- \u7cfb\u7edf\u53ef\u89c1\u7684\u603b\u7269\u7406\u5185\u5b58\nMemFree:           38584 kB                      --- \u7cfb\u7edf\u4e2d\u672a\u4f7f\u7528\u7684\u7269\u7406\u5185\u5b58\nMemAvailable:     125556 kB                      --- \u53ef\u7528\u5185\u5b58 = MemFree + Cached + Buffers\nBuffers:               0 kB                      --- \u7528\u4e8e\u6587\u4ef6\u7f13\u51b2\u7684\u5185\u5b58\u5927\u5c0f\nCached:            98768 kB                      --- \u7528\u4e8e\u9ad8\u901f\u7f13\u5b58\u5668\u5360\u7528\u7684\u5185\u5b58\u5927\u5c0f\nSwapCached:          128 kB                      --- \u7528\u4e8e\u9ad8\u901f\u7f13\u5b58\u5668\u5360\u7528\u7684swap\u5927\u5c0f\nActive:           143160 kB                      --- \u6d3b\u8dc3\u4f7f\u7528\u4e2d\u7684\u5185\u5b58, \u4e00\u822c\u4e0d\u4f1a\u56de\u6536. = anon + file\nInactive:          87104 kB                      --- \u6700\u8fd1\u672a\u88ab\u4f7f\u7528\u7684\u5185\u5b58, \u53ef\u4ee5\u88ab\u56de\u6536. = anon + file\nActive(anon):      94348 kB\nInactive(anon):    38532 kB\nActive(file):      48812 kB\nInactive(file):    48572 kB\nUnevictable:           0 kB                      \nMlocked:               0 kB\nHighTotal:             0 kB                      \nHighFree:              0 kB\nLowTotal:         443652 kB\nLowFree:           38584 kB\nSwapTotal:        196604 kB                      --- swap\u5206\u533a\u5927\u5c0f\nSwapFree:         193784 kB                      --- swap\u5206\u533a\u5269\u4f59\u7a7a\u95f4\nDirty:                 0 kB                      \nWriteback:             0 kB\nAnonPages:        131492 kB                      --- \u533f\u540d\u9875\nMapped:            90688 kB                      --- map\u7684\u5185\u5b58\nShmem:              1384 kB                      --- \u5171\u4eab\u5185\u5b58, \u8ddf\u6587\u4ef6\u65e0\u5173\u7684\nSlab:              21604 kB                      --- kernel slab\u5206\u914d\u5668\nSReclaimable:       5464 kB\nSUnreclaim:        16140 kB\nKernelStack:        5424 kB                      --- \u5185\u6838\u6808\nPageTables:         7932 kB                      --- \u7ba1\u7406\u9875\u7684\u6570\u636e\u7ed3\u6784\u5927\u5c0f\nNFS_Unstable:          0 kB\nBounce:                0 kB\nWritebackTmp:          0 kB\nCommitLimit:      418428 kB\nCommitted_AS:    8764944 kB\nVmallocTotal:     565248 kB\nVmallocUsed:       55952 kB\nVmallocChunk:     472068 kB", 
            "title": "cat /proc/meminfo "
        }, 
        {
            "location": "/Android-memory-debug/#vmstat", 
            "text": "\u573a\u666f: \u76d1\u63a7\u7cfb\u7edf\u72b6\u6001.  \u8be5\u5de5\u5177\u53ef\u4ee5\u67e5\u770b\u7cfb\u7edf\u5185\u5b58\u4fe1\u606f, \u8fdb\u7a0b\u961f\u5217, \u7cfb\u7edf\u5207\u6362, CPU\u65f6\u95f4\u5360\u6bd4\u7b49\u4fe1\u606f, \u5468\u671f\u6027\u52a8\u6001\u8f93\u51fa.  procs  memory                       system          cpu              \n r  b    free mapped   anon   slab    in   cs  flt  us ni sy id wa ir\n  0    0     38628    90844   131992    21688    5268   10257      0     5    0    6   99    0    0 \n  0    0     38628    90844   132008    21688    5271   10367      0     8    0    9   99    0    0 \n  0    0     38628    90844   132048    21688    5150   10497      0    10    1    8   99    0    0 \n  0    0     38628    90844   132100    21688    5112   10180      0     8    0    3   99    0    0 \n  0    0     38628    90844   132120    21688    5221   10289      0     8    0    4   99    0    0   \u603b\u517115\u5217\u53c2\u6570, \u4e2a\u53c2\u6570\u542b\u4e49\u5982\u4e0b:   procs(\u8fdb\u7a0b)  r: Running\u961f\u5217\u4e2d\u8fdb\u7a0b\u6570, \u8fd9\u4e2a\u503c\u8d85\u8fc7cpu\u4e2a\u6570\u5c31\u4f1a\u51fa\u73b0cpu\u74f6\u9888.  b: IO wait \u7684\u8fdb\u7a0b\u6570, \u8be5\u503c\u8fc7\u5927, \u53ef\u80fd\u662f\u7b49\u5f85\u6587\u4ef6\u64cd\u4f5c\u7684\u8fdb\u7a0b\u591a\u6216\u8005\u6587\u4ef6\u8bfb\u5199\u6162.    memory(\u5185\u5b58)  free: \u53ef\u7528\u5185\u5b58\u5927\u5c0f  mapped: mmap\u6620\u5c04\u7684\u5185\u5b58\u5927\u5c0f  anon: \u533f\u540d\u5185\u5b58\u5927\u5c0f, \u4e00\u822c\u7531malloc\u5f15\u8d77, \u6216\u8005\u533f\u540dmmap.  slab: slab\u7684\u5185\u5b58\u5927\u5c0f.    system(\u7cfb\u7edf)  in: \u6bcf\u4e2a\u95f4\u9694\u65f6\u95f4\u7684\u4e2d\u65ad\u6b21\u6570(\u5305\u62ec\u65f6\u949f\u4e2d\u65ad), \u8fd9\u4e2a\u503c\u8d8a\u5927, \u5185\u6838\u6d88\u8017\u7684cpu\u65f6\u95f4\u8d8a\u591a.\u9700\u8981\u67e5\u770b /proc/interrupts \u4e0b\u4e2d\u65ad\u589e\u957f\u60c5\u51b5.  cs: \u6bcf\u4e2a\u95f4\u9694\u65f6\u95f4\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u6b21\u6570  flt: major page faults. \u9700\u8981\u4ecedisk\u8bfb\u53d6\u6570\u636e\u7684\u7f3a\u9875\u9519\u8bef.    CPU (\u5904\u7406\u5668)  us: user time, \u6bd4\u8f83\u9ad8\u65f6\uff0c\u8bf4\u660e\u7528\u6237\u8fdb\u7a0b\u6d88\u8017\u7684cpu\u65f6\u95f4\u591a.  ni: nice time, \u88ab\u964d\u4f4e\u4f18\u5148\u7ea7\u7684\u8fdb\u7a0b\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u7684\u6267\u884cCPU\u65f6\u95f4\u767e\u5206\u6bd4.  sy: system time, \u7cfb\u7edf\u5185\u6838\u6d88\u8017\u7684CPU\u767e\u5206\u6bd4  id: idle time, \u7cfb\u7edf\u7a7a\u95f2\u65f6\u95f4\u767e\u5206\u6bd4  wa: iowait time, CPU\u5728\u7b49\u5f85IO\u5b8c\u6210\u65f6\u95f4\u5360\u6bd4  ir: interrupt time, \u7cfb\u7edf\u4e2d\u65ad\u8017\u65f6\u5360CPU\u767e\u5206\u6bd4     \u66f4\u591a\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f, \u8bf7\u76f4\u63a5\u67e5\u770b  /proc/vmstat \nhttp://blog.csdn.net/macky0668/article/details/6839498", 
            "title": "vmstat "
        }, 
        {
            "location": "/Android-memory-debug/#librank", 
            "text": "\u573a\u666f: \u4e0eprocrank\u4e92\u8865\u4f7f\u7528, \u662fprocmem\u7684\u6269\u5c55. \u663e\u793a\u6240\u6709\u8fdb\u7a0b\u7684\u4fe1\u606f, \u9700\u8981\u5de5\u5177\u7edf\u8ba1\u5206\u7c7b. \u4e5f\u53ef\u4ee5\u7528\u6765\u67e5\u770b\u6bcf\u4e2a\u5e93\u6216\u5171\u4eab\u6587\u4ef6\u771f\u5b9e\u5360\u7528\u7684\u5185\u5b58\u5927\u5c0f.  \u6570\u636e\u6765\u6e90\u4e0eprocmem\u4e00\u6837, \u4f46\u662fprocmem\u9488\u5bf9\u7684\u662f\u5355\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\u5360\u7528\u60c5\u51b5. \u800clibrank\u662f\u663e\u793a\u67d0\u4e2a\u5e93\u6216\u8005\u6587\u4ef6\u88ab\u54ea\u4e9b\u8fdb\u7a0b\u5171\u4eab, \u5e76\u663e\u793a\u5360\u7528\u5927\u5c0f. \u5982\u4e0b\u56fe\u6240\u793a.", 
            "title": "librank "
        }, 
        {
            "location": "/Android-memory-debug/#dumpcache", 
            "text": "\u8be5\u5de5\u5177\u662fandroid7.0\u4e4b\u540e\u624d\u6709\u7684\u5de5\u5177,\u7528\u4e8e\u67e5\u770b\u6587\u4ef6\u7cfb\u7edf\u4e2d\u6709\u6bcf\u4e2a\u6587\u4ef6\u88abcache\u5230\u5185\u5b58\u7684\u5927\u5c0f. \u8be5\u6587\u4ef6\u53ef\u4ee5\u7528\u6765\u5224\u65ad\u7f3a\u9875\u9519\u8bef\u65f6\u52a0\u8f7d\u7684\u6587\u4ef6.  \u5728Launcher\u754c\u9762\u65f6\u7684\u8f93\u51fa\u5982\u4e0b:   \u7a33\u5b9a\u64ad\u653e1080P\u89c6\u9891\u65f6:   \u6309\u4e0b\u9065\u63a7\u5668\u786e\u5b9a\u952e\u663e\u793aUI\u65f6:   \u5bf9\u6bd4, \u53ef\u4ee5\u77e5\u9053\u5728\u64ad\u653e\u8fc7\u7a0b\u4e2d, \u663e\u793aUI\u65f6\u4e3b\u8981\u52a0\u8f7d\u7684\u6587\u4ef6\u662f:", 
            "title": "dumpcache "
        }, 
        {
            "location": "/Android-memory-debug/#bugreport", 
            "text": "Android\u7cfb\u7edf\u60f3\u8981\u6210\u4e3a\u4e00\u4e2a\u529f\u80fd\u5b8c\u5907\uff0c\u751f\u6001\u7e41\u8363\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u90a3\u5c31\u5fc5\u987b\u63d0\u4f9b\u5b8c\u6574\u7684\u5e94\u7528\u5f00\u53d1\u73af\u5883\u3002\u800c\u5728\u5e94\u7528\u5f00\u53d1\u4e2d\uff0capp\u7a0b\u5e8f\u7684\u8c03\u8bd5\u5206\u6790\u662f\u65e5\u5e38\u751f\u4ea7\u4e2d\u8fdb\u7a0b\u4f1a\u8fdb\u884c\u7684\u5de5\u4f5c\u3002Android\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u4eba\u5458\u5206\u6790\u6574\u4e2a\u7cfb\u7edf\u5e73\u53f0\u548c\u67d0\u4e2aapp\u5728\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u4e4b\u5185\u7684\u6240\u6709\u4fe1\u606f\uff0c\u4e13\u95e8\u5f00\u53d1\u4e86bugreport\u5de5\u5177\u3002  \n\u8be5\u5de5\u5177\u7684\u7f3a\u70b9\u662f: \n1. \u8017\u65f6\u8fc7\u957f, \u53ea\u80fd\u6293\u53d6\u5f53\u524d\u72b6\u6001.\n2. \u6293\u53d6\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u5bfc\u81f4\u7cfb\u7edf\u5f02\u5e38, \u56e0\u4e3a\u5176oom\u4f1a\u88ab\u8c03\u9ad8, \u5728\u5185\u5b58\u4e0d\u8db3\u65f6\u5bfc\u81f4\u7cfb\u7edf\u5176\u4ed6\u5e94\u7528\u88abkill.\n3. \u7531\u4e8ebugreport\u7684\u6743\u9650\u4f1a\u964d\u4f4e\u5230shell, \u800c\u5f88\u591a\u670d\u52a1\u5728\u4f1a\u62d2\u7edddumpsys\u7684\u64cd\u4f5c, \u5bfc\u81f4\u90e8\u5206\u4fe1\u606f\u65e0\u6cd5\u6293\u53d6.    \u4f7f\u7528\u65b9\u6cd5:    \u901a\u8fc7bugreport\u547d\u4ee4\u6293\u53d6\u4e00\u4efdbugreport\u539f\u59cb\u7684\u6587\u672clog\uff1a\n     shell# bugreport gt;/data/local/tmp/bugreport.txt    \u5c06\u4e0a\u9762\u547d\u4ee4\u6293\u53d6\u7684bugreport.txt\u6587\u672c\u6587\u4ef6\u62f7\u8d1d\u51fa\u6765\uff0c\u4e0a\u4f20\u5230bugreport\u5206\u6790\u670d\u52a1\u5668\u4e0a\u9762\uff0c\u670d\u52a1\u5668\u4f1a\u81ea\u52a8\u751f\u6210\u7cfb\u7edf\u5f53\u524d\u72b6\u6001\u5feb\u7167\uff0c\u4e0a\u4f20\u65b9\u6cd5\u5982\u4e0b\uff1a\n  a. \u901a\u8fc7\u6d4f\u89c8\u5668\u8fdb\u5165\u670d\u52a1\u5668\u5730\u5740\uff1ahttp://10.27.254.108:8080/,\u5982\u4e0b\u56fe\uff1a     b. \u70b9\u51fbbroswer\u6d4f\u89c8report.txt\u6587\u672c\u6587\u4ef6\uff0c\u7136\u540e\u70b9\u51fbupload\u6309\u94ae\u4e0a\u4f20\u6587\u4ef6\uff0c\u4e0a\u4f20\u540e\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u751f\u6210\u7cfb\u7edf\u72b6\u6001\u5feb\u7167\uff0c\u5feb\u7167\u540d\u79f0\u5bf9\u5e94\u5230\u4e0a\u4f20\u65f6\u95f4\uff0c\u70b9\u51fb\u5feb\u7167\u540d\u79f0\u8fdb\u5165\u7cfb\u7edf\u5206\u6790\u9875\u9762\uff0c\u5982\u4e0b\uff1a   \u8be5\u7f51\u9875\u670d\u52a1\u5668\u7684dockerfile\u5982\u4e0b:  FROM ubuntu:14.04\n MAINTAINER wertherzhang  werther0331@gmail.com \n\n RUN apt-get update\n\n RUN apt-get -y install openjdk-7-jdk openjdk-7-jre\n RUN apt-get -y install python\n\n RUN mkdir -p /root/chkbugreport\n RUN apt-get -y install wget\n RUN wget http://10.27.8.54/chkbugreport.tgz -O /root/chkbugreport.tgz\n RUN tar xvf /root/chkbugreport.tgz -C /tmp/\n RUN mkdir -p /root/bin\n\n ADD server.py /root/chkbugreport/\n ADD chkbugreport.jar /root/bin/\n ADD chkbugreport /usr/local/bin/\n ADD ddmlib.jar /root/bin/\n\n RUN apt-get clean\n\n ENV JAVA_HOME /usr/lib/jvm/java-7-openjdk-amd64\n ENV PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n WORKDIR /root/chkbugreport/\n\n CMD [ python ,  server.py ]  \u9644\u4ef6:  chkbugreport-server.zip", 
            "title": "bugreport \u4fe1\u606f\u5206\u6790 "
        }, 
        {
            "location": "/Android-memory-debug/#_4", 
            "text": "", 
            "title": "\u5e94\u7528\u5185\u5b58\u5206\u6790"
        }, 
        {
            "location": "/Android-memory-debug/#android_2", 
            "text": "", 
            "title": "android\u81ea\u5e26\u5de5\u5177"
        }, 
        {
            "location": "/Android-memory-debug/#dumpsys-meminfo_1", 
            "text": "\u573a\u666f: \u67e5\u770bjava\u8fdb\u7a0b\u7684\u4e0d\u540c\u7c7b\u522b\u5185\u5b58\u5360\u7528\u60c5\u51b5, \u7279\u522b\u662f\u786e\u5b9aactivity\u662f\u5426\u6cc4\u9732\u7b49\u4fe1\u606f.  \u547d\u4ee4  dumpsys meminfo com.china_liantong.launcher -d  \u8f93\u51fa:  shell@zx1800:/  # dumpsys meminfo com.china_liantong.launcher -d                 \nApplications Memory Usage  ( kB ) :\nUptime:  2612261  Realtime:  2612261 \n\n** MEMINFO in pid  884   [ com.china_liantong.launcher ]  **\n                   Pss  Private  Private  Swapped     Heap     Heap     Heap\n                 Total    Dirty    Clean    Dirty     Size    Alloc     Free\n                ------   ------   ------   ------   ------   ------   ------\n  Native Heap      5915       5440          0          0      24576      16208       8367 \n  Dalvik Heap     13764      13364          0          0      26989      20896       6093 \n Dalvik Other       248        248          0          0                            \n        Stack       513        512          0          0                            \n    Other dev         4          0          4          0                            \n     .so mmap      3392        424        472          0                            \n    .apk mmap        94          0          4          0                            \n    .ttf mmap      1573          0        568          0                            \n    .dex mmap      1188          0        752          0                            \n    .oat mmap      1419          0        260          0                            \n    .art mmap       979        616          0          0                            \n   Other mmap        80          4          0          0                            \n   EGL mtrack        17         17          0          0                            \n      Unknown       134        128          0          0                            \n        TOTAL     29320      20753       2060          0      51565      37104      14460 \n\n Objects\n               Views:      1192          ViewRootImpl:         1 \n         AppContexts:         3            Activities:         1 \n              Assets:         2         AssetManagers:         2 \n       Local Binders:        41         Proxy Binders:       220 \n       Parcel memory:         7          Parcel count:        14 \n    Death Recipients:        10       OpenSSL Sockets:         0 \n\n SQL\n         MEMORY_USED:         0 \n  PAGECACHE_OVERFLOW:         0           MALLOC_SIZE:         0   Native Heap : native\u5206\u914d\u5360\u7528\u7684RAM, \u901a\u8fc7malloc\u7533\u8bf7\u7684\u5185\u5b58.  Heap Size  \u662f\u5185\u5b58\u6c60\u603b\u5927\u5c0f(\u5411\u7cfb\u7edf\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f).  Heap Alloc  \u5df2\u7ecf\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f(\u5e94\u7528\u5411dlmalloc\u7533\u8bf7\u7684\u5185\u5b58).  Heap Free  \u5185\u5b58\u6c60\u5269\u4f59\u53ef\u5206\u914d\u5185\u5b58\u5927\u5c0f.  Dalvik Heap : \u5e94\u7528\u4e2dDalvi\u5206\u914d\u5360\u7528\u7684RAM.  Pss Total : \u5305\u542b\u6240\u6709Zygote\u5206\u914d(\u901a\u8fc7\u8fdb\u7a0b\u95f4\u5171\u4eab\u5360\u7528).  Private Dirty : \u4ec5\u5206\u914d\u5230\u5e94\u7528\u7684\u5b9e\u9645RAM, \u7531\u5e94\u7528\u5206\u914d\u6216\u8005zygote\u5206\u914d\u9875, \u8fd9\u4e9b\u9875\u81ea\u4ecezygote fork\u5e94\u7528\u8fdb\u7a0b\u540e\u88ab\u4fee\u6539\u8fc7.  .so map  \u548c  .dex map : mmap\u7684.so\u548c.dex(Dalvik\u6216ART)\u4ee3\u7801\u5360\u7528\u7684RAM.  Pss Total  \u6570\u503c\u5305\u62ec\u5e94\u7528\u4e4b\u95f4\u5171\u4eab\u7684\u5e73\u53f0\u4ee3\u7801\uff1b Private Clean  \u662f\u60a8\u7684\u5e94\u7528\u81ea\u5df1\u7684\u4ee3\u7801\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5b9e\u9645\u6620\u5c04\u7684\u5185\u5b58\u66f4\u5927 - \u6b64\u5904\u7684 RAM \u4ec5\u4e3a\u5e94\u7528\u6267\u884c\u7684\u4ee3\u7801\u5f53\u524d\u6240\u9700\u7684 RAM\u3002\u4e0d\u8fc7\uff0c.so mmap \u5177\u6709\u8f83\u5927\u7684\u79c1\u6709\u810f RAM\uff0c\u56e0\u4e3a\u5728\u52a0\u8f7d\u5230\u5176\u6700\u7ec8\u5730\u5740\u65f6\u5bf9\u539f\u751f\u4ee3\u7801\u8fdb\u884c\u4e86\u4fee\u6539(GOT?!)\u3002   .oat mmap : \u4ee3\u7801\u6620\u50cf\u5360\u7528\u7684 RAM \u91cf\uff0c\u6839\u636e\u591a\u4e2a\u5e94\u7528\u901a\u5e38\u4f7f\u7528\u7684\u9884\u52a0\u8f7d\u7c7b\u8ba1\u7b97\u3002\u6b64\u6587\u4ef6\u5728\u6240\u6709\u5e94\u7528\u4e4b\u95f4\u5171\u4eab\uff0c\u4e0d\u53d7\u7279\u5b9a\u5e94\u7528\u5f71\u54cd\u3002   .art mmap : \u5806\u5360\u7528\u7684 RAM \u91cf\uff0c\u6839\u636e\u591a\u4e2a\u5e94\u7528\u901a\u5e38\u4f7f\u7528\u7684\u9884\u52a0\u8f7d\u7c7b\u8ba1\u7b97\u3002\u6b64\u6620\u50cf\u5728\u6240\u6709\u5e94\u7528\u4e4b\u95f4\u5171\u4eab\uff0c\u4e0d\u53d7\u7279\u5b9a\u5e94\u7528\u5f71\u54cd\u3002\u5c3d\u7ba1 ART \u6620\u50cf\u5305\u542b Object \u5b9e\u4f8b\uff0c\u5b83\u4ecd\u7136\u4e0d\u4f1a\u8ba1\u5165\u60a8\u7684\u5806\u5927\u5c0f\u3002   Unknown : \u7cfb\u7edf\u65e0\u6cd5\u5c06\u5176\u5206\u7c7b\u5230\u5176\u4ed6\u66f4\u5177\u4f53\u7684\u4e00\u4e2a\u9879\u4e2d\u7684\u4efb\u4f55 RAM \u9875\u3002 \u5176  Pss Total  \u4e0e Zygote\u5171\u4eab.  TOTAL : \u4e0a\u65b9\u6240\u6709 PSS \u5b57\u6bb5\u7684\u603b\u548c\u3002\u8868\u793a\u60a8\u7684\u8fdb\u7a0b\u5360\u7528\u7684\u5185\u5b58\u91cf\u5360\u6574\u4f53\u5185\u5b58\u7684\u6bd4.  Private Dirty  \u548c  Private Clean  \u662f\u60a8\u7684\u8fdb\u7a0b\u4e2d\u7684\u603b\u5206\u914d\uff0c\u672a\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u5171\u4eab\u3002\u5b83\u4eec\uff08\u5c24\u5176\u662f Private Dirty\uff09\u7b49\u4e8e\u60a8\u7684\u8fdb\u7a0b\u88ab\u7834\u574f\u540e\u5c06\u91ca\u653e\u56de\u7cfb\u7edf\u4e2d\u7684 RAM \u91cf\u3002 Dirty \u56e0\u4e3a\u5df2\u88ab\u4fee\u6539\u800c\u5fc5\u987b\u4fdd\u6301\u5728 RAM \u4e2d\u7684 RAM \u9875\uff08\u56e0\u4e3a\u6ca1\u6709\u4ea4\u6362\uff09\uff1b Clean  \u662f\u5df2\u4ece\u67d0\u4e2a\u6301\u4e45\u6027\u6587\u4ef6\uff08\u4f8b\u5982\u6b63\u5728\u6267\u884c\u7684\u4ee3\u7801\uff09\u6620\u5c04\u7684 RAM \u9875\uff0c\u5982\u679c\u4e00\u6bb5\u65f6\u95f4\u4e0d\u7528\uff0c\u53ef\u4ee5\u79fb\u51fa\u5206\u9875\u3002  ViewRootImpl : \u8fdb\u7a0b\u4e2d\u5f53\u524d\u6d3b\u52a8\u7684\u6839\u89c6\u56fe\u6570\u91cf\u3002\u6bcf\u4e2a\u6839\u89c6\u56fe\u90fd\u4e0e\u4e00\u4e2a\u7a97\u53e3\u5173\u8054\uff0c\u56e0\u6b64\u6709\u52a9\u4e8e\u786e\u5b9a\u6d89\u53ca\u5bf9\u8bdd\u6846\u6216\u5176\u4ed6\u7a97\u53e3\u7684\u5185\u5b58\u6cc4\u6f0f\u3002   AppContexts  \u548c  Activities : \u5f53\u524d\u6d3b\u52a8\u7684\u5e94\u7528 Context \u548c Activity \u5bf9\u8c61\u6570\u91cf\u3002\u5feb\u901f\u786e\u5b9a\u7531\u4e8e\u5b58\u5728\u9759\u6001\u5f15\u7528\uff08\u6bd4\u8f83\u5e38\u89c1\uff09\u800c\u65e0\u6cd5\u8fdb\u884c\u5783\u573e\u56de\u6536\u7684\u5df2\u6cc4\u6f0f Activity \u5bf9\u8c61\u3002\u8fd9\u4e9b\u5bf9\u8c61\u7ecf\u5e38\u62e5\u6709\u5f88\u591a\u5173\u8054\u7684\u5176\u4ed6\u5206\u914d\uff0c\u56e0\u6b64\u6210\u4e3a\u8ddf\u8e2a\u5927\u578b\u5185\u5b58\u6cc4\u6f0f\u7684\u4e00\u79cd\u4e0d\u9519\u7684\u65b9\u5f0f\u3002  \u4f8b\u5b50\u89c1\u5185\u5b58\u6cc4\u9732\u90e8\u5206.", 
            "title": "dumpsys meminfo \u5e94\u7528\u5185\u5b58 "
        }, 
        {
            "location": "/Android-memory-debug/#procmem", 
            "text": "\u573a\u666f: \u67e5\u770b\u6307\u5b9a\u8fdb\u7a0b\u7684\u5404\u90e8\u5206\u5185\u5b58\u5360\u7528\u60c5\u51b5.\n\u547d\u4ee4:  procmem  pid \n\u4f8b\u5b50:  procmem 2509 \n\u6570\u636e\u6765\u6e90:  /proc/ pid /maps  \u548c  /proc/ pid /pagemap  Vss      Rss      Pss      Uss     ShCl     ShDi     PrCl     PrDi  Name   \u5404\u5b57\u6bb5\u542b\u4e49:  ShCl  --  shared clean\nShDi  --  shared dirty\nPrCl  --  private clean\nPrDi  --  private dirty", 
            "title": "procmem  "
        }, 
        {
            "location": "/Android-memory-debug/#showmap", 
            "text": "\u573a\u666f: \u8fdb\u7a0b\u865a\u62df\u8fdb\u7a0b\u7a7a\u95f4\u7684\u5185\u5b58\u5206\u914d\u60c5\u51b5 \u548c \u8be6\u7ec6\u7684\u5e72\u51c0\u810f\u6570\u636e\u4fe1\u606f.  \u4ece  /proc/[pid]/smaps  \u83b7\u53d6\u6570\u636e\u5e76\u7edf\u8ba1\u7684\u5de5\u5177.  \u547d\u4ee4:  showmap [-a] [-t] [-v]  pid \n\u4f8b\u5b50:  showmap -a 884 \n\u8f93\u51fa\u5355\u4f4d: KB   \u7531\u4e8e\u73b0\u5728\u5185\u6838\u90fd\u4f7f\u7528\u4e86\u52a8\u6001\u5185\u5b58\u5206\u914d\u7684\u673a\u5236, \u5728\u5927\u91cf\u7533\u8bf7\u5c0f\u5185\u5b58\u7684\u60c5\u51b5\u4e0b, \u4ece\u7cfb\u7edf\u770b\u5185\u5b58\u6709\u5269\u4f59, \u4f46\u662f\u8fdb\u7a0b\u5374\u65e0\u6cd5\u5206\u914d\u51fa\u9700\u8981\u7684\u5185\u5b58, \u8fd9\u5c31\u6709\u53ef\u80fd\u662f\u7531\u4e8e\u865a\u62df\u5730\u5740\u7684\u5185\u5b58\u788e\u7247\u5f15\u8d77, \u65e0\u6cd5\u627e\u5230\u4e00\u6bb5\u5927\u4e8e\u6240\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u7684\u5730\u5740\u7a7a\u95f4.   \u4f8b\u5b50:", 
            "title": "showmap "
        }, 
        {
            "location": "/Android-memory-debug/#android-oom", 
            "text": "\u89e6\u53d1OOM\u7684\u539f\u56e0\u662f, java\u5c42\u5185\u5b58\u5206\u914d\u5931\u8d25\u4e86.  \u9020\u6210\u5185\u5b58\u5206\u914d\u5931\u8d25\u7684\u53ef\u80fd\u539f\u56e0\u5982\u4e0b:   \u5185\u5b58\u6ea2\u51fa. \u7533\u8bf7\u7684\u5185\u5b58\u8d85\u51fa\u4e86\u865a\u62df\u673a\u6700\u5927\u5185\u5b58.  \u788e\u7247, \u5bfc\u81f4\u65e0\u6cd5\u627e\u5230\u8fde\u7eed\u7a7a\u95f4\u6ee1\u8db3\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f.  \u8d44\u6e90\u95ee\u9898, \u6bd4\u5982\u6587\u4ef6\u8282\u70b9\u8d85\u8fc7\u9650\u5236, \u5bfc\u81f4\u533f\u540d\u5185\u5b58\u7533\u8bf7\u51fa\u9519, \u9519\u8bef\u4fe1\u606f\u4e3a \"Too many open files\"  \u865a\u62df\u7a7a\u95f4\u5730\u5740\u7a7a\u95f4\u88ab\u5360\u6ee1, \u5bfc\u81f4OOM.   \u4ee5\u4e0a\u4e3a\u7f51\u4e0a\u7684\u7ed3\u8bba, \u5728android5.1.1\u4e0a\u6d4b\u8bd5\u53d1\u73b0:  fd\u95ee\u9898\u5e76\u4e0d\u4f1a\u5bfc\u81f4OOM  \u4ee3\u7801\u590d\u7528\u4e0b\u9762\u5185\u5b58\u6cc4\u9732\u7684\u4ee3\u7801,\u5728asynctask\u4e2d\u6267\u884c\u6587\u4ef6\u6253\u5f00\u64cd\u4f5c.   logcat\u4e2d\u8f93\u51fa\u5982\u4e0b, \u5e76\u6ca1\u6709OOM\u8f93\u51fa:   \u4f46\u662f\u8fd9\u6bb5\u4ee3\u7801\u7684\u786e\u8bc1\u660e\u4e86\u6253\u5f00\u6587\u4ef6\u592a\u591a\u4f1a\u5bfc\u81f4shmem\u521b\u5efa\u5931\u8d25.", 
            "title": "Android \u5e94\u7528 OOM"
        }, 
        {
            "location": "/Android-memory-debug/#_5", 
            "text": "", 
            "title": "\u5185\u5b58\u6cc4\u9732\u5206\u6790"
        }, 
        {
            "location": "/Android-memory-debug/#activity", 
            "text": "activity \u7684\u6cc4\u9732\u57fa\u4e8eandroid\u81ea\u5e26\u5de5\u5177, \u53ef\u4ee5\u5feb\u901f\u786e\u5b9a, \u4f46\u662f\u5177\u4f53\u6cc4\u9732\u7684activity, \u9700\u8981\u4f9d\u8d56\u5de5\u5177 LeakCanary.  \u4ee3\u7801:   \u754c\u9762:   \u5728\u7b2c\u4e00\u6b21\u8fdb\u5165\u8be5\u5e94\u7528\u65f6:   \u6309\u4e0bBUTTON, \u7136\u540e\u9000\u51fa\u5e94\u7528:   \u7b2c\u4e8c\u6b21\u8fdb\u5165\u8be5\u5e94\u7528:   \u7b2c\u4e8c\u6b21\u6309\u4e0bBUTTON:   \u7b2c\u4e8c\u6b21\u9000\u51fa\u5e94\u7528:   \u57fa\u4e8e  dumpsys meminfo  \u786e\u8ba4\u5e94\u7528\u6709activity\u6cc4\u9732\u540e, \u5355\u7eaf\u901a\u8fc7UI\u64cd\u4f5c\u57fa\u672c\u4e5f\u53ef\u4ee5\u5224\u65ad\u51fa\u6765\u54ea\u4e2aactivity\u6cc4\u9732, \u66f4\u51c6\u786e\u7684\u6cc4\u9732\u68c0\u6d4b\u5de5\u5177\u662f LeakCanary, \u8be5\u5de5\u5177\u4e3a\u7b2c\u4e09\u65b9\u5de5\u5177.  \n\u5177\u4f53\u7528\u6cd5: https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/  \u8fd8\u662f\u4ee5\u4e0a\u7684\u4f8b\u5b50, \u989d\u5916\u589e\u52a0\u5982\u4e0b\u4ee3\u7801.   \u5728MainActivity\u589e\u52a0\u5982\u4e0b\u4ee3\u7801, \u8be5\u4ee3\u7801\u7684\u542b\u4e49\u662f, \u5728activity\u89e6\u53d1onDestroy\u65f6, \u76d1\u63a7\u8be5activity\u5bf9\u8c61.      @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        LeakApplication.getRefWatcher().watch(this);\n\n    }  \u589e\u52a0application, \u5982\u4e0b:   \u7f16\u8bd1\u8fd0\u884c, \u6267\u884c\u4e0a\u9762\u540c\u6837\u7684\u64cd\u4f5c. \u5728\u901a\u77e5\u4e2d\u5fc3\u6709\u5982\u4e0b\u663e\u793a:   \u70b9\u51fb\u540e\u53ef\u4ee5\u67e5\u770b\u8be6\u7ec6\u7684\u5806\u6808:   \u540c\u6837\u5728logcat\u4e2d\u6709\u5982\u4e0b\u8f93\u51fa:", 
            "title": "activity \u6cc4\u9732 "
        }, 
        {
            "location": "/Android-memory-debug/#strictmode", 
            "text": "\u540c\u6837\u662f\u4e0a\u9762\u7684\u4f8b\u5b50, \u4fee\u6539\u4ee3\u7801\u5982\u4e0b, \u589e\u52a0strickmode\u7684\u8c03\u7528:   \u540c\u6837\u7684\u4e0a\u9762\u64cd\u4f5c\u65b9\u6cd5, logcat\u4e2d\u6709\u5982\u4e0b\u8f93\u51fa:", 
            "title": "StrictMode\u68c0\u6d4b\u5e94\u7528\u5185\u5b58\u6cc4\u9732 "
        }, 
        {
            "location": "/Android-memory-debug/#libc", 
            "text": "\u5185\u5b58\u6cc4\u9732\u7684\u68c0\u6d4b\u4f9d\u636e\u662f, \u8fdb\u7a0b\u9000\u51fa\u65f6, \u8fd8\u6709\u672a\u91ca\u653e\u7684\u5185\u5b58. \u6240\u4ee5, valgrind\u5305\u62ecbionic libc\u4e2d, \u80fd\u7cbe\u786e\u68c0\u6d4b\u5230\u6cc4\u9732\u7684\u524d\u63d0\u6761\u4ef6\u5c31\u662f\u8fdb\u7a0b\u9000\u51fa. \u4f46\u662f\u8fd9\u4e2a\u5bf9\u4e8e\u7cfb\u7edf\u7ea7\u522b\u7684\u8fdb\u7a0b\u662f\u65e0\u7528\u7684, \u56e0\u4e3a\u7cfb\u7edf\u7ea7\u8fdb\u7a0b\u5e76\u4e0d\u4f1a\u9000\u51fa. \u4eceRD\u89d2\u5ea6, \u5224\u65ad\u7cfb\u7edf\u7ea7\u8fdb\u7a0b\u662f\u5426\u6cc4\u9732\u7684\u4f9d\u636e\u662f\u5185\u5b58\u662f\u5426\u6301\u7eed\u589e\u957f, \u7279\u522b\u662f\u5728\u538b\u529b\u6d4b\u8bd5\u7684\u60c5\u51b5\u4e0b. \u6240\u4ee5, \u8fd9\u4e2a\u90e8\u5206\u4ecb\u7ecd\u7684\u5de5\u5177, \u5b9e\u9645\u4e0a\u662f\u6293\u53d6\u4e86\u6301\u7eed\u589e\u957f\u7684\u5185\u5b58\u4fe1\u606f, \u8fd9\u4e9b\u4fe1\u606f, \u53ef\u80fd\u662f\u5185\u5b58\u6cc4\u9732, \u4e5f\u53ef\u80fd\u662f\u8fdb\u7a0b\u6b63\u5e38\u7533\u8bf7\u7684\u5185\u5b58, \u9700\u8981RD\u4ecb\u5165\u5224\u65ad.  \u9644\u4ef6:  Memleak_tools_android.zip  \u4f9d\u8d56\u5de5\u5177:   libc_malloc_debug_leak.so  , bionic\u6e90\u7801\u4e0b, \u9700\u8981\u7f16\u8bd1\u5e76push\u5230\u7cfb\u7edf\u4e2d  libmemleakutils.so , \u4eceandroid\u63d0\u53d6\u5e76\u66f4\u6539. \u4ece\u9644\u4ef6\u6e90\u7801\u4e0b\u8f7d\u7f16\u8bd1, \u9700\u8981push\u5230\u7cfb\u7edf\u4e2d.  addr2func.py, \u8be5\u811a\u672c\u80fd\u81ea\u52a8\u5c06\u5730\u5740\u8f6c\u6362\u6210\u5e93\u548c\u5806\u6808. \u5728\u9644\u4ef6\u4e2d.  memincrease.py, \u8be5\u811a\u672c\u80fd\u5c06\u4e0a\u4e00\u811a\u672c\u7684\u8f93\u51fa, \u8fdb\u884c\u7edf\u8ba1\u6392\u5e8f,  \u6309\u5185\u5b58\u589e\u52a0\u4ece\u5927\u5230\u5c0f\u6392\u5e8f. \u57fa\u672c\u6700\u9876\u4e0a\u7684\u662f\u5b58\u5728\u95ee\u9898\u7684. \u5728\u9644\u4ef6\u4e2d.   \u5c40\u9650:   \u53ea\u80fd\u8c03\u8bd5native\u8fdb\u7a0b.  \u8fdb\u7a0b\u4e0d\u80fd\u91cd\u542f.  \u9700\u8981\u538b\u529b\u6d4b\u8bd5, \u957f\u65f6\u95f4\u8fd0\u884c  \u9700\u8981RD\u4ecb\u5165\u5224\u65ad\u662f\u5426\u5b58\u5728\u6cc4\u9732.   \u7528\u6cd5:   \u5c06libmemleakutils.so\u5e93\u94fe\u63a5\u5230\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u4e2d, \u8c03\u7528\u51fd\u6570 start_memleak_watcher(memstep) , \u5176\u4e2dmemstep\u8868\u793a, pss\u6bcf\u589e\u52a0memstep, \u5219\u6293\u53d6\u4e00\u6b21\u5f53\u524d\u5185\u5b58\u5206\u914d\u4fe1\u606f.  \u5c06libmemleakutils.so \u548c  libc_malloc_debug_leak.so  push\u5230/system/lib/\u4e0b.  \u5c06\u88ab\u8c03\u8bd5\u7a0b\u5e8fpush\u5230 /system/bin/ \u4e0b.  \u8bbe\u7f6e property  libc.debug.malloc.program  \u4e3a \u4f60\u7684\u8c03\u8bd5\u8fdb\u7a0b\u540d\u5b57.  \u8bbe\u7f6e property  libc.debug.malloc  \u4e3a 1  stop \u6216\u8005 kill \u88ab\u8c03\u8bd5\u8fdb\u7a0b.  start \u6216\u8005 \u542f\u52a8 \u88ab\u8c03\u8bd5\u8fdb\u7a0b.  \u538b\u529b\u6d4b\u8bd5\u540e, \u68c0\u67e5 /data/local/tmp/ \u5e95\u4e0b\u5b58\u5728\u6587\u4ef6  mem_snapshot_$pid_$memsize.log , \u4e14\u4e2a\u6570\u5927\u4e8e2\u4e2a(\u8d8a\u591a\u8d8a\u597d).  cp /proc/${pid}/maps /data/local/tmp/  \u5c06 /data/local/tmp/ \u5e95\u4e0b\u6240\u6709\u6587\u4ef6\u590d\u5236\u5230host\u673a\u5668.  \u7528 diff \u547d\u4ee4\u6bd4\u8f83 \u4e24\u4e2a  mem_snapshot_$pid_$memsize.log , \u5e76\u4fdd\u5b58\u8f93\u51fa\u4e3a  diff_$pid_$memsize1_$memsize2.log  \u6267\u884c  ./addr2func.py --root-dir=/remote/ANDROID/hdtv/ --maps-file=./maps --product=zx2000 diff_$pid_$memsize1_$memsize2.log   mem_stack_$pid_$memsize1_$memsize2.log , \u8be5\u8fc7\u7a0b\u662f\u5c06diff\u751f\u6210\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5730\u5740\u8f6c\u6362\u6210\u5e93\u548c\u5806\u6808\u4fe1\u606f.  \u6267\u884c  ./memincrease.py mem_stack_$pi_$memsize1_$memsize2.log incr_$pid_$memsize1_$memsize2.log , \u8be5\u8fc7\u7a0b\u662f\u5bf912\u751f\u6210\u7684\u6587\u4ef6\u8fdb\u884c\u7edf\u8ba1\u6392\u5e8f, \u4ece\u5927\u5230\u5c0f\u6392\u5e8f.   \u4f8b\u5b50:   \u8fd0\u884c\u4e00\u4f1a\u513f\u540e, \u5728 /data/local/tmp/\u76ee\u5f55\u4e0b\u5b58\u5728\u6587\u4ef6:  mem_snapshot_2158_1.log\nmem_snapshot_2158_2.log\nmem_snapshot_2158_3.log\nmem_snapshot_2158_4.log  \u5176\u5185\u5bb9\u5982\u4e0b:   Allocation count  5 \n Total memory  6293072 \nsize   5242880 , dup     1 , 0xb6ed36b2, 0xb6f4cd4e, 0xb6f1da44, 0xb6f1de38, 0xb6f1dea0, 0xb6f5104a, 0xb6f4ef92\nsize   1048576 , dup     1 , 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc8492, 0xb6fc8390, 0xb6f4ce68, 0xb6fc8400\nsize      1024 , dup     1 , 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc84aa, 0xb6fc8394, 0xb6f4ce68, 0xb6fc8400\nsize       580 , dup     1 , 0xb6ed36b2, 0xb6ed391c, 0xb6f4cd0e, 0xb6f510c8, 0xb6f1decc, 0xb6fc838c, 0xb6f4ce68, 0xb6fc8400\nsize        12 , dup     1 , 0xb6ed36b2, 0xb6ed391c, 0xb6f4cd0e, 0xb6f14c46, 0xb6f1dd98, 0xb6f1dea0, 0xb6f5104a, 0xb6f4ef92  \u6267\u884cdiff\u547d\u4ee4:  # diff ./mem_snapshot_2158_1.log ./mem_snapshot_2158_2.log   diff_2158_1_2.log  #   # diff ./mem_snapshot_2158_3.log ./mem_snapshot_2158_4.log   diff_2158_3_4.log  #   \u5f97\u5230\u4e00\u4e2aPSS\u4ece1M\u589e\u957f\u52302M\u548c3M\u589e\u957f\u52304M\u7684\u4e24\u4e2adiff\u6587\u4ef6. \u5185\u5bb9\u5982\u4e0b:  2c2   Total memory 6293072\n---   Total memory 7342672\n4,5c4,5  size  1048576, dup    1, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc8492, 0xb6fc8390, 0xb6f4ce68, 0xb6fc8400  size     1024, dup    1, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc84aa, 0xb6fc8394, 0xb6f4ce68, 0xb6fc8400\n---  size  1048576, dup    2, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc8492, 0xb6fc8390, 0xb6f4ce68, 0xb6fc8400  size     1024, dup    2, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc84aa, 0xb6fc8394, 0xb6f4ce68, 0xb6fc8400  \n\u6267\u884c addr2func.py :  # ./addr2func.py --root-dir=/remote/ANDROID/hdtv/ --maps-file=./maps --product=zx2000 diff_2158_3_4.log   mem_stack_2158_3_4.log   \u751f\u6210\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b:  2c2                                                                                                                                                                               [ 0 /59466 ]    Total memory  8392272 \n\n---   Total memory  9441872  4 ,5c4,5  size   1048576 , dup     3 ,\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315  ( discriminator  1 ) \n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test () , /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:11\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:25  ( discriminator  1 ) \n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?  size      1024 , dup     3 ,\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315  ( discriminator  1 ) \n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test1 () , /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:17\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:26  ( discriminator  1 ) \n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n---  size   1048576 , dup     4 ,\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315  ( discriminator  1 ) \n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test () , /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:11\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:25  ( discriminator  1 ) \n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?  size      1024 , dup     4 ,\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315  ( discriminator  1 ) \n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test1 () , /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:17\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:26  ( discriminator  1 ) \n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?  \u6240\u6709\u7684\u5730\u5740\u88ab\u8f6c\u6362\u6210\u4e86\u961f\u957f. \n\u6700\u540e\u6267\u884c memincrease.py :  ./memincrease.py mem_stack_2158_3_4.log incr_2158_3_4.log  \u751f\u6210\u7684\u6587\u4ef6 incr_2158_3_4.log \u5185\u5bb9\u5982\u4e0b:  Memory increase  1048576  bytes                    ### \u5185\u5b58\u589e\u52a0\u4e86 1048576 bytes \n98990365afa0d71d62949620cc7e3753f386e4e3\nold size  1048576  count  3 , total memory  3145728         ### \u4ece 3145728 \n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315  ( discriminator  1 ) \n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test () , /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:11\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:25  ( discriminator  1 ) \n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n98990365afa0d71d62949620cc7e3753f386e4e3\nnew size  1048576  count  4 , total memory  4194304        ### \u589e\u52a0\u5230 4194304 \n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315  ( discriminator  1 ) \n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test () , /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:11\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:25  ( discriminator  1 ) \n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n\nMemory increase  1024  bytes\n833f23c991cc75facaa41fb74f7466b91c27917b\nold size  1024  count  3 , total memory  3072 \n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315  ( discriminator  1 ) \n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test1 () , /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:17\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:26  ( discriminator  1 ) \n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n833f23c991cc75facaa41fb74f7466b91c27917b\nnew size  1024  count  4 , total memory  4096 \n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315  ( discriminator  1 ) \n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test1 () , /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:17\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:26  ( discriminator  1 ) \n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?  \u57fa\u672c\u4e0a, \u5c06\u6700\u9876\u4e0a\u7684\u51e0\u4e2a\u5806\u6808\u786e\u8ba4\u4e0b\u662f\u5426\u5185\u5b58\u6cc4\u9732\u5373\u53ef.  \u7279\u522b\u6ce8\u610f:   \u7c7b\u6cc4\u9732\u65f6, \u5728\u5806\u6808\u4e0a\u7684\u8868\u73b0\u662f\u5176\u6210\u5458\u5185\u5b58\u6cc4\u9732. \u9700\u8981\u67e5\u770b\u5806\u6808\u662f\u5426\u6709\u8be5\u7c7b\u5bf9\u8c61\u7684new\u65b9\u6cd5, \u5e76\u4e14\u8be5\u65b9\u6cd5\u662f\u5426\u5728\u591a\u5904\u5b58\u5728.", 
            "title": "\u57fa\u4e8elibc\u8c03\u8bd5\u5185\u5b58\u6cc4\u9732 "
        }, 
        {
            "location": "/Android-memory-debug/#valgrind", 
            "text": "\u573a\u666f: \u5bf9\u4e8e\u53ef\u9000\u51fa\u7684\u8fdb\u7a0b\u8fdb\u884c\u8c03\u8bd5\u6bd4\u8f83\u5408\u9002, \u53ef\u4ee5\u5bf9\u5e94\u7528\u7684native\u4ee3\u7801\u8fdb\u884c\u8c03\u8bd5.  \u76ee\u524dhdtv\u4ee3\u7801\u4e0a\u7684 valgrind \u65e0\u6cd5\u83b7\u53d6\u88ab\u8c03\u8bd5\u8fdb\u7a0b\u7684\u5806\u6808, \u53ea\u80fd\u83b7\u53d6\u5b83\u81ea\u5df1\u5e93\u7684\u5806\u6808, \u5b58\u5728\u95ee\u9898. \u6682\u65f6\u65e0\u6cd5\u4f7f\u7528.", 
            "title": "valgrind \u8c03\u8bd5\u5185\u5b58\u6cc4\u9732"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/", 
            "text": "SEAndroid\u89c4\u5219\u4ecb\u7ecd\n\n\n\u6765\u6e90: https://pengzhangdev.github.io/SEAndroid%E8%A7%84%E5%88%99%E4%BB%8B%E7%BB%8D/\n\n\nhistory:\n\n\n\n\nversion 1.0 by werther zhang @2016-12-12\n\n\nversion 1.1 by werther zhang @2017-06-27 \u603b\u7ed3\u9879\u76ee\u4e2d\u9047\u5230\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848\n\n\n\n\n\u524d\u8a00\n\n\nsepolicy\u7684\u8bed\u6cd5\u662fgnu m4, \u662funix\u7cfb\u7edf\u7684\u5b8f\u5904\u7406\u5668\uff0c \u8ddfC\u7684\u5b8f\u7c7b\u4f3c\u3002\n\n\n\u4ee5\u4e0b\u51fa\u73b0\u7684\u6240\u6709\u4e0e\u7cfb\u7edf\u8fdb\u7a0b\u540d\u5b57\u4e00\u6837\u7684\uff0c \u9664\u975e\u7279\u522b\u6307\u51fa\u8fdb\u7a0b\uff0c \u5426\u5219\u90fd\u53ea\u662f\u540d\u5b57\uff0c \u4e0d\u4e0e\u7279\u5b9a\u8fdb\u7a0b\u5173\u8054\u3002\n\n\n\u4e0b\u9762\uff0c \u5148\u6574\u7406\u4e0b\u6982\u5ff5.. \u77e5\u9053\u8fd9\u4e48\u4e2a\u4e1c\u897f\u5c31\u884c\uff0c\u4e0d\u7528\u7406\u89e3\uff0c\u540e\u9762\u4f1a\u8be6\u7ec6\u63d0\u5230\u3002\n\n\n\u5728linux\u7cfb\u7edf\u4e2d\uff0c\u3000\u6240\u6709\u5355\u5143(\u6587\u4ef6\uff0c\u76ee\u5f55\uff0c\u6587\u4ef6\u7cfb\u7edf\uff0c\u8fdb\u7a0b\u7b49),\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e3b\u52a8\u5355\u5143\u548c\u88ab\u52a8\u5355\u5143\uff0e\u8fdb\u7a0b\u5c5e\u4e8e\u4e3b\u52a8\u5355\u5143\uff08\u4e0d\u5b8c\u5168\uff0c\u8fdb\u7a0b\u7684\u8d44\u6e90\u5728\u88ab\u8bbf\u95ee\u65f6\uff0c\u5c5e\u4e8e\u88ab\u52a8\u5355\u5143\u7684\u6982\u5ff5\uff09\uff0c\u3000\u800c\u5176\u4ed6\u7684\u65e0\u6cd5\u53d1\u8d77\u52a8\u4f5c\u7684\u90fd\u5c5e\u4e8e\u88ab\u52a8\u5355\u5143\uff0e\u800csepolicy\u5b9a\u4e49\u7684\u5206\u522b\u662f\u4e3b\u52a8\u5355\u5143\u7684\u884c\u4e3a\u89c4\u5219\u548c\u88ab\u52a8\u5355\u5143\u7684\u7ee7\u627f\u89c4\u5219(\u8fd8\u662f\u7531\u4e3b\u52a8\u5355\u5143\u53d1\u8d77)\uff0e\n\n\n\u5728\u63d0\u5230domain\u8fd9\u4e2a\u6982\u5ff5\u65f6\uff0c\u4e00\u5219\u8868\u793a\u4e3b\u52a8\u5355\u5143scontext\u4e2d\u7b2c\u4e09\u4e2a\u5b57\u6bb5\uff0c\u6bd4\u5982\uff0c\u4e0b\u4e00\u4e2a\u4f8b\u5b50\u4e2dsdcard\u8fdb\u7a0b\u7684domain\u5c31\u662fsdcardd\uff1b\u4e00\u5219\u6307\u7684\u662f\u5c5e\u6027\uff0c\u5177\u4f53\u51fa\u73b0\u5728\u89c4\u5219\u8bed\u53e5\u4e2d\uff0c\u6bd4\u5982\u540e\u6587\u7684\ntype sdcardd domain\n \u662f\u6307\u8bb2sdcardd\u4e0e\u5c5e\u6027domain\u5173\u8054\uff0c\u800c\u5c5e\u6027domain\u5c31\u53ef\u4ee5\u8868\u793a\u6240\u6709\u7684\u4e0e\u4e4b\u5173\u8054\u7684\u7c7b\u578b\uff0c\u56e0\u4e3a\u6240\u6709\u88ab\u89c4\u5219\u4e86\u7684\u8fdb\u7a0b\u90fd\u4f1a\u4e0edomain\u5c5e\u6027\u5173\u8054\uff0c\u6240\u4ee5domain\u5728\u89c4\u5219\u8bed\u53e5\u4e2d\u6709\u65f6\u5019\u6307\u4ee3\u6240\u6709\u8fdb\u7a0b\u3002\n\n\n\u5728\u63d0\u5230type\u8fd9\u4e2a\u6982\u5ff5\u65f6\uff0c\u4e00\u5219\u662f\u8868\u793a\u88ab\u52a8\u5355\u5143scontext\u4e2d\u7b2c\u4e09\u4e2a\u5b57\u6bb5\uff0c\u6bd4\u5982\u4e0b\u4e00\u4e2a\u4f8b\u5b50\u4e2dsdcard\u8fd9\u4e2a\u6587\u4ef6\u7684type\u4e3asdcard_exec\u3002\u4e00\u5219\uff0c\u6307\u7684\u662f\u6253\u6807\u7b7e\u7684\u5173\u952e\u5b57\uff0c\u5b9a\u4e49domain/type\u7684\u5173\u952e\u5b57\uff0c\u6bd4\u5982\u4e0a\u9762\u7684sdcardd\u7684\u4f8b\u5b50\u3002\n\n\nattribute:  domain/type \u7684\u96c6\u5408\uff0c\u4e0etype/domain \u76f8\u540c\u547d\u540d\u7a7a\u95f4\uff0c\u56e0\u4e3am4\u5c31\u662f\u4e2a\u5b8f\u89e3\u91ca\u5668\uff0cattribute\u5c31\u662f\u4e3a\u4e00\u7fa4\u76f8\u540c\u6743\u9650\u6216\u8005\u89c4\u5219\u7684\u4e3b\u52a8\u5355\u5143\u6216\u88ab\u52a8\u5355\u5143\u96c6\u5408\u5b9a\u4e49\u4e86\u4e2a\u65b0\u540d\u5b57\uff0c\u8fd9\u4e2a\u65b0\u540d\u5b57\u5728sepolicy\u4e2d\u88ab\u5b9a\u4e49\u4e3aattribute. \u5728m4\u7f16\u8bd1\u8fc7\u7a0b\u4e2dattribute\u90fd\u4f1a\u88ab\u5206\u89e3\u6210\u5b9e\u9645\u7684type/domain\uff0c\u540e\u6587\u4f1a\u5728\u4f8b\u5b50\u4e2d\u63d0\u5230\u3002\n\n\n# \u88ab\u52a8\u5355\u5143\u5206\u7ec4\nsdcard_type -|\n             |-|- fuse  -|-|\n             |-|- vfat  -|-|\n               |- sysfs -|-|\n               |- tmpfs -|-|\n                           |- fs_type\n\n# \u4e3b\u52a8\u5355\u5143\u5206\u7ec4\uff0c\u3000\u4e5f\u4f1a\u505a\u88ab\u52a8\u5355\u5143\uff0c\u6bd4\u5982\u88ab\u8bbf\u95ee\uff0c\u88abkill\nnetdomain -|\n           |-|- netd -|-|\n           |-|- dhcp -|-|\n             |- vold -|-|\n             |- logd -|-|\n                        |- domain\n\n\n\n\n\n\u6253\u6807\u7b7e: \u5c31\u662f\u7ed9\u88ab\u52a8\u5355\u5143\u5b9a\u4e49type\uff0c\u3000\u7ed9\u4e3b\u52a8\u5355\u5143\u5b9a\u4e49domain\uff0e domain\u53ea\u6709init\u662f\u5b9a\u4e49\u7684\u5176\u4ed6\u90fd\u662ffork\u4e4b\u540e\u901a\u8fc7DT\u8f6c\u6362\u7684\uff0e\u800ctype\u53ea\u6709\u5df2\u77e5\u662f\u5b9a\u4e49\u7684\uff0c\u7531\u8fdb\u7a0b\u521b\u5efa\u7684\u90fd\u662f\u901a\u8fc7TT\u8f6c\u6362\u7684\uff0e DT\u548cTT\u5728\u540e\u9762\u4f1a\u4ecb\u7ecd\uff0e\n\n\nsepolicy\u89c4\u5219\u4ecb\u7ecd\n\n\nsepolicy\u7684\u89c4\u5219\u9488\u5bf9\u7684\u662flinux\u7cfb\u7edf\u4e2d\u7684\u8fdb\u7a0b\u548c\u6587\u4ef6\u3002\u8fdb\u7a0b\u662f\u4e3b\u52a8\u7684\uff0c \u800c\u6587\u4ef6\u662f\u88ab\u52a8\u7684\u3002 \u6240\u4ee5\uff0c\u6709\u5bf9\u5e94\u7684\u8fdb\u7a0b\u89c4\u5219\u548c\u6587\u4ef6\u89c4\u5219\uff0c \u5206\u522b\u5b9a\u4e49\u8fdb\u7a0b\u7684\u5408\u6cd5\u884c\u4e3a\u548c\u6587\u4ef6\u88ab\u8bbf\u95ee\u7684\u6743\u9650\u3002\n\n\nSELinux\u4e2d\uff0c \u6bcf\u4e2a\u5bf9\u8c61\uff08\u8fdb\u7a0b\u548c\u6587\u4ef6\uff09\u88ab\u8d4b\u4e88\u5b89\u5168\u5c5e\u6027\uff0c\u5b98\u65b9\u8bf4\u6cd5\u662f Security Context(\u4ee5\u4e0b\u7b80\u79f0SContext)\u3002 SContext\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c \u5bf9\u4e8e\u8fdb\u7a0b\u7684SContext\uff0cSContext\u7684\u683c\u5f0f\u662f\u201du:r:type[:range]\u201c. \u53ef\u4ee5\u4f7f\u7528 \nps -Z\n \u83b7\u5f97\uff0c \u5bf9\u4e8e\u6587\u4ef6\u7684SContext\uff0c \u53ef\u4ee5\u901a\u8fc7 \nls -Z\n \u83b7\u5f97\u3002 \u5982\u4e0b\u4e3a\u76f8\u5e94\u547d\u4ee4\u7684\u8f93\u51fa\u3002\n\n\n# ps -Z\nu:r:logd:s0                    logd      198   1     /system/bin/logd\nu:r:healthd:s0                 root      199   1     /sbin/healthd\nu:r:lmkd:s0                    root      200   1     /system/bin/lmkd\nu:r:servicemanager:s0          system    201   1     /system/bin/servicemanager\nu:r:vold:s0                    root      202   1     /system/bin/vold\nu:r:surfaceflinger:s0          system    203   1     /system/bin/surfaceflinger\nu:r:common_time:s0             root      204   1     /system/bin/common_time\nu:r:shell:s0                   shell     205   1     /system/bin/sh\nu:r:kernel:s0                  root      206   2     kworker/1:1H\nu:r:netd:s0                    root      207   1     /system/bin/netd\nu:r:debuggerd:s0               root      208   1     /system/bin/debuggerd\nu:r:drmserver:s0               drm       209   1     /system/bin/drmserver\nu:r:mediaserver:s0             media     210   1     /system/bin/mediaserver\nu:r:installd:s0                install   211   1     /system/bin/installd\nu:r:keystore:s0                keystore  213   1     /system/bin/keystore\nu:r:zygote:s0                  root      214   1     zygote\nu:r:sdcardd:s0                 media_rw  215   1     /system/bin/sdcard\nu:r:adbd:s0                    shell     216   1     /sbin/adbd\nu:r:kernel:s0                  root      228   2     kauditd\n\n\n\n\n\n\u5de6\u8fb9\u4e00\u5217\u662f\u8fdb\u7a0b\u7684 SContext\uff0c \u4ee5sdcard\u8fdb\u7a0b\u4e3a\u4f8b\u5b50\uff0c \u5176\u503c\u4e3a u:r:sdcardd:s0\uff0c \u5176\u4e2d\uff1a\n\n\n\n\n\n\nu \u4e3a user \u7684\u610f\u601d\u3002 SEAndroid\uff08\u6307\u4fee\u6539\u4e86\u7684SELinux\uff09 \u4e2d\u53ea\u5b9a\u4e49\u4e86\u4e00\u4e2aSELinux\u7528\u6237\uff0c \u503c\u4e3au\n\n\n\n\n\n\nr \u4e3a role \u7684\u610f\u601d\u3002 role \u662f\u89d2\u8272\u610f\u601d\uff0c \u5b83\u662f SELinux\u603b\u4e00\u79cd\u6bd4\u8f83\u9ad8\u5c42\u6b21\uff0c \u66f4\u65b9\u4fbf\u7684\u6743\u5229\u7ba1\u7406\u601d\u8def\uff0c \u5373 Role Based Access Control\uff08\u57fa\u4e8e\u89d2\u8272\u8bbf\u95ee\u63a7\u5236\uff0c \u7b80\u79f0\u4e3aRBAC\uff0c \u5728\u540e\u6587\u4f1a\u8be6\u7ec6\u8ba8\u8bba\uff09\u3002user\u4e0erole\u7684\u6743\u9650\uff0c \u7b80\u5355\u70b9\u8bf4\uff0c \u5c31\u662f u \u53ef\u4ee5\u5c5e\u4e8e\u591a\u4e2a role\uff0c \u7136\u540e\u4e0d\u540c\u7684 role \u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u6743\u9650\uff0c \u5c31\u8ddf\u4e00\u4e2a\u4eba\u53ef\u4ee5\u517c\u804c\u591a\u4efd\u5de5\u4f5c\u4e00\u6837\u3002\n\n\n\n\n\n\nsdcardd\uff0c \u4ee3\u8868\u8fdb\u7a0b sdcard \u6240\u5c5e\u7684 Domain \u4e3a sdcardd\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u8fd9\u662f\u4e00\u4e2a\u8fdb\u7a0b\u7ec4\u7684\u540d\u5b57\uff0c \u8be5\u5b57\u7b26\u4e32\u7684\u540d\u5b57\u53ef\u4ee5\u968f\u610f\uff0c \u53ea\u8981\u5728\u89c4\u5219\u6587\u4ef6\u4e2d\u5b9a\u4e49\u597d\u6620\u5c04\u5173\u7cfb\uff0c \u89c4\u5219\u6587\u4ef6\u7684\u8bf4\u660e\u5728\u7a0d\u540e\u8ba8\u8bba\u3002\u5bf9\u4e8e\u8fdb\u7a0b\u8bbf\u95ee\u7684\u6743\u9650\u63a7\u5236\uff0c \u5728linux\u4e0a\uff0c \u6211\u4eec\u719f\u77e5\u7684\u662f\uff0c \u5982\u679c\u4ee5root\u6743\u9650\u542f\u52a8\u4e00\u4e2a\u8fdb\u7a0b\uff0c \u5219\u8be5\u8fdb\u7a0b\u5177\u6709root\u6743\u9650\uff0c \u8fd9\u5c31\u662froot\u7684\u539f\u56e0\uff0c \u8be5\u5b89\u5168\u6a21\u578b\u53eb\u505aDAC\uff08Discretionary Access Control\uff09\u3002 \u800cSELinux\u5bf9\u4e8e\u8fdb\u7a0b\u8bbf\u95ee\u7684\u63a7\u5236\uff0c \u7c7b\u4f3c\u767d\u540d\u5355\u673a\u5236\uff0c \u53ea\u6709\u5199\u5165\u89c4\u5219\u7684\u8fdb\u7a0b\u624d\u6709\u5bf9\u5e94\u7684\u8bbf\u95ee\u6743\u9650\uff0c \u6240\u4ee5\uff0c \u5728\u8fd9\u79cd\u673a\u5236\u4e0b\uff0c \u5373\u4f7f\u662froot\u6743\u9650\u7684sdcardd\uff0c \u4e5f\u65e0\u6cd5\u8bbf\u95ee\u89c4\u5219\uff0c \u8be5\u5b89\u5168\u6a21\u578b\u53ebMAC\uff08Mandatory Access Control\uff09\u3002\u800cMAC\u7684\u57fa\u672c\u7ba1\u7406\u5355\u4f4d\u662f Type Enforcement Access Control (\u57fa\u4e8e\u7c7b\u578b\u7684\u5f3a\u5236\u8bbf\u95ee\u63a7\u5236\uff0c\u7b80\u79f0TEAC\uff0c \u4e5f\u53ebTE)\uff0c \u8fd9\u4e9b\u53ea\u662f\u6982\u5ff5\u540d\u5b57\u800c\u5df2\u3002\n\n\n\n\n\n\nS0 \u662f SELinux\u4e3a\u4e86\u6ee1\u8db3\u519b\u7528\u548c\u6559\u80b2\u884c\u4e1a\u8bbe\u8ba1\u7684 Multi-Level Security(MLS)\u673a\u5236\u6709\u5173\u3002MLS\u5c06\u8fdb\u7a0b\u548c\u6587\u4ef6\u8fdb\u884c\u4e86\u5206\u7ea7\uff0c \u4e0d\u540c\u7ea7\u522b\u7684\u8d44\u6e90\u9700\u8981\u4e0d\u540c\u7ea7\u522b\u7684\u8fdb\u7a0b\u8bbf\u95ee\uff0c \u540e\u6587\u4f1a\u4ecb\u7ecd\u3002\n\n\n\n\n\n\n # ls -Z\n\n # /\n-rw-r--r-- root     root              u:object_r:rootfs:s0 property_contexts\ndrwxr-xr-x root     root              u:object_r:rootfs:s0 res\ndrwx------ root     root              u:object_r:rootfs:s0 root\n-rw-r--r-- root     root              u:object_r:rootfs:s0 s3g.ko\n-rw-r--r-- root     root              u:object_r:rootfs:s0 s3g_core.ko\ndrwxr-x--- root     root              u:object_r:rootfs:s0 sbin\nlrwxrwxrwx root     root              u:object_r:rootfs:s0 sdcard -\n /storage/emulated/legacy\n-rw-r--r-- root     root              u:object_r:rootfs:s0 seapp_contexts\n-rw-r--r-- root     root              u:object_r:rootfs:s0 selinux_version\n-rw-r--r-- root     root              u:object_r:rootfs:s0 sepolicy\n-rw-r--r-- root     root              u:object_r:rootfs:s0 service_contexts\ndrwxr-x--x root     sdcard_r          u:object_r:rootfs:s0 storage\ndr-xr-xr-x root     root              u:object_r:sysfs:s0 sys\ndrwxr-xr-x root     root              u:object_r:system_file:s0 system\n-rw-r--r-- root     root              u:object_r:rootfs:s0 ueventd.rc\n-rw-r--r-- root     root              u:object_r:rootfs:s0 ueventd.zx2000.rc\nlrwxrwxrwx root     root              u:object_r:rootfs:s0 vendor -\n /system/vendo\n\n# system/bin/\n-rwxr-xr-x root     shell             u:object_r:system_file:s0 screenrecord\n-rwxr-xr-x root     shell             u:object_r:sdcardd_exec:s0 sdcard\nlrwxr-xr-x root     shell             u:object_r:system_file:s0 sendevent -\n toolbox\n-rwxr-xr-x root     shell             u:object_r:system_file:s0 sensorservice\n-rwxr-xr-x root     shell             u:object_r:system_file:s0 service\n\n\n\n\n\n\u4e0a\u9762\u662fzx2000\u4e0a\uff0c\u6211\u4eec\u4ee5 storage \u76ee\u5f55\u4e3a\u4f8b\u5b50\u7b80\u5355\u770b\u4e0b\uff0c\u4fe1\u606f\u4e3a u:object_r:rootfs:s0.\n\n\n\n\n\n\nu \u540c\u6837\u662fuser\u610f\u601d\uff0c \u4ee3\u8868\u521b\u5efa\u8be5\u6587\u4ef6\u7684SELinux user\n\n\n\n\n\n\nobject_r: \u8be5\u5b57\u6bb5\u4e0e ps -Z \u7684\u4e00\u6837\uff0c\u8868\u793a role\uff0c\u4f46\u662f\u6587\u4ef6\u662f\u88ab\u52a8\u8bbf\u95ee\u7684\uff0c \u65e0\u6cd5\u79f0\u4e3a\u4e00\u4e2a\u89d2\u8272\uff0c \u6240\u4ee5\uff0c \u6240\u6709\u6587\u4ef6\u7684role\u90fd\u7528object_r\u8868\u793a\n\n\n\n\n\n\nrootfs: type, \u548c domain \u4e00\u4e2a\u610f\u601d\uff0c \u5c31\u662f\u4e00\u4e2a\u5206\u7c7b\u7684\u6807\u7b7e\u3002 \u6240\u6709\u7684\u6587\u4ef6\uff08\u5305\u62ec\u6587\u4ef6\u7cfb\u7edf\uff09\u90fd\u8981\u4e48\u6709\u6807\u7b7e\uff0c\u8981\u4e48\u5c31\u662funlabeled\u3002\n\n\n\n\n\n\ns0\uff1a MLS\u7684\u7ea7\u522b\u3002\n\n\n\n\n\n\n\u6240\u4ee5\uff0c\u540e\u9762\u4f1a\u4ecb\u7ecdTE\uff0c RBAC, MLS \u7b49\u7684\u89c4\u5219\u3002\n\n\nLabeling\u4ecb\u7ecd\uff08\u4e00\uff09\n\n\n\u57fa\u4e8e\u4e0a\u9762\u7684SContext\u4fe1\u606f\uff0c\u5148\u4ecb\u7ecd\u4e0b\u6253\u6807\u7b7e\uff0c \u4e5f\u5c31\u662f\u4e3b\u52a8\u5355\u5143\u7684domain\u548c\u88ab\u52a8\u5355\u5143\u7684type\u521d\u59cb\u5316\u7684\u52a8\u4f5c\u3002\u5bf9\u4e8e\u65b0\u521b\u5efa\u7684\u8fdb\u7a0b\u548c\u65b0\u521b\u5efa\u7684\u6587\u4ef6\u7684SContext\uff0c\u6211\u4eec\u4f1a\u5728\u4ecb\u7ecd\u4e86TE\u89c4\u5219\u540e\uff0c\u518d\u5728Labeling\u4ecb\u7ecd\uff08\u4e8c\uff09\u4ecb\u7ecd\u3002\n\n\ndomain\u521d\u59cb\u5316\n\n\ndomain\u8ddf\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e00\u6837\uff0c\u53ef\u4ee5\u88ab\u7ee7\u627f\uff0c\u4e5f\u53ef\u4ee5\u88ab\u6539\u53d8\u3002\u6240\u4ee5\uff0c\u5b83\u4e0e\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u4e00\u6837\uff0c\u5728\u9700\u8981\u6539\u53d8\u7684\u65f6\u5019\uff0c\u663e\u793a\u5730\u5207\u6362\uff0c\u800c\u8fd9\u4e2a\u5207\u6362\u52a8\u4f5c\u5728sepolicy\u4e2d\u5b9a\u4e49\u3002\u6240\u4ee5\uff0c \u53ea\u6709init\u8fdb\u7a0b\u6709\u521d\u59cb\u7684domain\uff0c\u5176\u4ed6\u8fdb\u7a0b\u90fd\u662f\u6839\u636eDT(Domain Transition)\u89c4\u5219\u5207\u6362\u7684\uff0c\u540e\u6587\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u3002\n\n\n# init.rc\non early-init    \n   # Set the security context for the init process.    \n   # This should occur before anything else (e.g. ueventd) is started.\n   setcon u:r:init:s0\n\n\n\n\n\n\u8fd9\u91cc\u5c31\u5c06init\u7684domain\u8bbe\u7f6e\u4e3ainit\u3002\n\n\nFilesystem/File \u7684\u521d\u59cb\u5316\n\n\n\u4e0a\u9762\u901a\u8fc7\nls -Z\n\u770b\u5230\u7684SContext\uff0c\u6587\u4ef6\u90e8\u5206\u662f\u5728\nexternal/sepolicy/file_contexts\n\u4e2d\u5b9a\u4e49\u7684.\u8fd9\u4e2a\u6587\u4ef6\u6700\u7ec8\u4f1a\u4f5c\u4e3amkext4fs\u5de5\u5177\u7684\u53c2\u6570,\u88ab\u8bbe\u7f6e\u5230system.img\u4e2d.\n\n\n# \u683c\u5f0f: regexp \n-type\n ( \nfile_label\n | \nnone\n )\n\n\n# \n-type\n \u4e2d\u7684type\u4e0e ls -la \u7684\u8f93\u51fa\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5339\u914d.\u6bd4\u5982:\n\n\n# -rw-r--r-- 1 root    root    11208 Mar 11 11:13 te_macros\n\n\n# drwxr-xr-x 3 root    root     4096 Mar 11 11:13 tools\n\n\n# \u5219 -- \u8868\u793a\u5339\u914d\u6587\u4ef6\uff0c -d \u8868\u793a\u5339\u914d\u76ee\u5f55\uff0e\n\n\n# \u56e0\u4e3a\u524d\u9762\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u3000\u6240\u4ee5\u3000\n-type\n\u3000\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8fc7\u6ee4\u9700\u8981\u7684\u6587\u4ef6\u7c7b\u578b\uff0c\u3000\u5c06\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\u548c\u6587\u4ef6\u7c7b\u578b\u6253\u4e0a\u6807\u7b7e\uff0e\n\n\n/\n           u\n:\nobject_r\n:\nrootfs\n:\ns0 \n\n\n# Data files\n\n\n/\nadb_keys       u\n:\nobject_r\n:\nadb_keys_file\n:\ns0\n\n/\ndefault\\\n.\nprop      u\n:\nobject_r\n:\nrootfs\n:\ns0\n\n\n\n/\nsystem\n(\n/\n.\n*\n)\n?\n       u\n:\nobject_r\n:\nsystem_file\n:\ns0\n\n# \u8fd9\u91cc\u7684--, \u4e2a\u4eba\u7406\u89e3\u662f\uff0c\u3000\u901a\u8fc7\u900f\u8fc7\u8f6f\u94fe\u63a5\uff0c\u5c06\u6807\u7b7e\u6253\u5728\u5b9e\u9645\u7684\u6587\u4ef6\u4e0a\uff0e\n\n\n/\nsystem\n/\nbin\n/\nsh      \n--\n  u\n:\nobject_r\n:\nshell_exec\n:\ns0\n\n/\nsystem\n/\nbin\n/\nrun\n-\nas  \n--\n  u\n:\nobject_r\n:\nrunas_exec\n:\ns0\n\n\n/\nsystem\n/\nbin\n/\nsdcard      u\n:\nobject_r\n:\nsdcardd_exec\n:\ns0\n\n\n\n\n\n\u6240\u6709\u65b0\u6dfb\u52a0\u7684\u6587\u4ef6\uff0c\u5efa\u8bae\u5728\u8fd9\u8fb9\u67e5\u770b\u4e0b\uff0c\u662f\u5426\u9700\u8981\u8bbe\u7f6e\u65b0\u7684\u6807\u7b7e\uff0e\u3000\u4e00\u822c\u65b0\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u4f1a\u9700\u8981\u8bbe\u7f6e\u989d\u5916\u7684type\uff0c\u5e76\u4e14\u6709xx.te\u3000\u5bf9\u5e94\u7684\u89c4\u5219\u6587\u4ef6\u548c\u4e0etype\u5bf9\u5e94\u7684domain\uff0e\n\n\n\u518d\u6765\u770b\n\u6587\u4ef6\u7cfb\u7edf\u7684\u6807\u7b7e\u521d\u59cb\u5316\n\uff0c\u8fd9\u4e2a\u4e0d\u597d\u7406\u89e3\uff0c\u611f\u89c9\u8ddf\u5185\u6838selinux\u6a21\u5757\u7684\u5b9a\u4e49\u4e5f\u626f\u4e0a\u5173\u7cfb\u4e86\uff0c\u4ee5\u4e0b\u53ea\u662f\u4e2a\u4eba\u7406\u89e3\uff1a\n\n\n#\n \nThe\n \nfs_use_xattr\n \nstatement\n \nis\n \nused\n \nto\n \nallocate\n \na\n \nsecurity\n \ncontext\n \nto\n \nfilesystems\n\n\n#\n \n\u7ed9\u6587\u4ef6\u7cfb\u7edf\u6253\u6807\u7b7e\uff0c\u3000\u8be5\u6807\u7b7e\u662f\u4f5c\u4e3a\n \ntarget_type\n,\n \n\u4f1a\u5728\u89c4\u5219\u91cc\u88ab\u4f7f\u7528\uff0e\n\n\n#\n \n\u6bd4\u5982\uff1a\nvold\n.\nte\n:\n \nallow\n \nvold\n \nlabeledfs\n:\nfilesystem\n \n{\n \nmount\n \nunmount\n \nremount\n \n}\n;\n\n\n#\n      \nfile\n.\nte\n:\n \nallow\n \nfile_type\n \nlabeledfs\n:\nfilesystem\n \nassociate\n;\n \n\n#\n               \n\u5141\u8bb8\n \nfile_type\n \n\u5c5e\u6027\u7684\u6587\u4ef6\u5728\nlabeledfs\n\u7c7b\u578b\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u521b\u5efa\n\n\n#\n \n\u4e2a\u4eba\u7406\u89e3\uff0c\u8fd9\u7c7b\u6587\u4ef6\u7cfb\u7edf\u4e0a\u6240\u521b\u5efa\u7684\u6587\u4ef6\n/\n\u76ee\u5f55\uff0c\u4f1a\u7ee7\u627f\u81ea\u7236\u76ee\u5f55\u89c4\u5219\uff0c\u540c\u65f6\u53d7\nTT\n\u89c4\u5219\u5f71\u54cd\u3002\n\n \nfs_use_xattr\n \nyaffs2\n \nu\n:\nobject_r\n:\nlabeledfs\n:\ns0\n;\n\n \nfs_use_xattr\n \njffs2\n \nu\n:\nobject_r\n:\nlabeledfs\n:\ns0\n;\n\n \nfs_use_xattr\n \next2\n \nu\n:\nobject_r\n:\nlabeledfs\n:\ns0\n;\n\n \nfs_use_xattr\n \next3\n \nu\n:\nobject_r\n:\nlabeledfs\n:\ns0\n;\n\n \nfs_use_xattr\n \next4\n \nu\n:\nobject_r\n:\nlabeledfs\n:\ns0\n;\n\n \nfs_use_xattr\n \nxfs\n \nu\n:\nobject_r\n:\nlabeledfs\n:\ns0\n;\n\n \nfs_use_xattr\n \nbtrfs\n \nu\n:\nobject_r\n:\nlabeledfs\n:\ns0\n;\n\n \nfs_use_xattr\n \nf2fs\n \nu\n:\nobject_r\n:\nlabeledfs\n:\ns0\n;\n\n\n \n#\u3000\nThe\n \nfs_use_task\n \nstatement\n \nis\n \nused\n \nto\n \nallocate\n \na\n \nsecurity\n \ncontext\n \nto\n \npseudo\n \nfilesystems\n \n \n#\u3000\nthat\n \nsupport\n \ntask\n \nrelated\n \nservices\n \nsuch\n \nas\n \npipes\n \nand\n \nsockets\n.\n\n \n#\n \n\u4f7f\u7528\nfs_use_task\n\u63cf\u8ff0\u7684\u5b57\u6bb5\u53ea\u6709\u4e0b\u9762\u4e24\u6761\uff0c\u3000\u5177\u4f53\u7684\u542b\u4e49\u8fd8\u6ca1\u7406\u89e3\uff0e\n\n \nfs_use_task\n \npipefs\n \nu\n:\nobject_r\n:\npipefs\n:\ns0\n;\n\n \nfs_use_task\n \nsockfs\n \nu\n:\nobject_r\n:\nsockfs\n:\ns0\n;\n\n\n \n#\u3000\nThe\n \nfs_use_trans\n \nstatement\n \nis\n \nused\n \nto\n \nallocate\n \na\n \nsecurity\n \ncontext\n \nto\n \npseudo\n \nfilesystems\n \n \n#\u3000\nsuch\n \nas\n \npseudo\n \nterminals\n \nand\n \ntemporary\n \nobjects\n.\n \nThe\n \nassigned\n \ncontext\n \nis\n \nderived\n \nfrom\n \n \n#\u3000\nthe\n \ncreating\n \nprocess\n \nand\n \nthat\n \nof\n \nthe\n \nfilesystem\n \ntype\n \nbased\n \non\n \ntransition\n \nrules\n.\n\n \n#\n \n\u4ece\u63cf\u8ff0\u662f\u7ed9\u4f2a\u6587\u4ef6\u7cfb\u7edf\u7684\uff0c\u3000\u6bd4\u5982\uff0f\ndev\n/\n\u7b49\uff0e\n\n \n#\n \n\u8be5\u89c4\u5219\u63cf\u8ff0\u4e86\u5728\u5b9a\u4e49\u7684\u6587\u4ef6\u7cfb\u7edf\u4e0b\u9762\u6240\u521b\u5efa\u7684\u6587\u4ef6\u7684\nSContext\n\uff0c\u3000\u4f46\u8be5\u89c4\u5219\u53c8\u53ef\u4ee5\u88ab\uff34\uff34\u89c4\u5219\u5f71\u54cd\uff0e\u6bd4\u5982\uff1a\n\n \n#\n \ntype_transition\n \nsdcardd\n \ndevpts\n:\n{\n \nchr_file\n \n}\n \nmedia_rw_data_file\n;\n \n\u5982\u679c\u6709\u8fd9\u6761\u8bed\u53e5\uff0c\u3000\u5219\nsdcardd\n\n \n#\n \n\u7c7b\u578b\u7684\u8fdb\u7a0b\u7684\ndevpts\n\u4e0b\u521b\u5efa\u7684\u5b57\u7b26\u8bbe\u5907\u6587\u4ef6\u7684\nSContext\n\u4e3a\nmedia_rw_data_file\n\uff1b\u3000\u5982\u679c\u6ca1\u6709\u8fd9\u53e5\uff0c\u5219\nSContext\n\u4e3a\n\n \n#\n \ndevpts\n.\n \n\u8fd9\u91cc\u7684\u89c4\u5219\u548c\u524d\u9762\u76ee\u5f55\u7684\u89c4\u5219\u7c7b\u4f3c\uff0c\u3000\u4f46\u8fd9\u91cc\u662f\u57fa\u4e8e\u6587\u4ef6\u7cfb\u7edf\u7684\uff0c\u3000\u89c4\u5219\u7ee7\u627f\u81ea\u6587\u4ef6\u7cfb\u7edf\uff0c\u800c\u4e0d\u662f\u76ee\u5f55\uff0e\u6bd4\u5982\uff1a\n\n \n#\n \n\u5982\u679c\u6709\u4fee\u6539\u4ee5\u4e0a\nTT\n\u7684\nobject\n \nclass\n \n\u4e3a\n \ndir\n,\n \n\u53e6\u4e00\u8fdb\u7a0b\u5728\nsdcardd\n\u8fdb\u7a0b\u6240\u521b\u5efa\u7684\u76ee\u5f55\u91cc\u9762\u6240\u521b\u5efa\u7684\u6587\u4ef6\uff0c\u4e0d\u4f1a\u7ee7\u627f\nmedia_rw_data_file\n,\n\n \n#\n \n\u5176\nSContext\n\u4f9d\u7136\u4e3a\ndevpts\n\uff0e\n\n \nfs_use_trans\n \ndevpts\n \nu\n:\nobject_r\n:\ndevpts\n:\ns0\n;\n\n \nfs_use_trans\n \ntmpfs\n \nu\n:\nobject_r\n:\ntmpfs\n:\ns0\n;\n\n \nfs_use_trans\n \ndevtmpfs\n \nu\n:\nobject_r\n:\ndevice\n:\ns0\n;\n\n \nfs_use_trans\n \nshm\n \nu\n:\nobject_r\n:\nshm\n:\ns0\n;\n\n \nfs_use_trans\n \nmqueue\n \nu\n:\nobject_r\n:\nmqueue\n:\ns0\n;\n\n\n\n\n\n\n\u4e0a\u9762\u5173\u4e8e\nTT\n\u7684\u89c4\u5219\uff0c\u8fd8\u6709\ntarget_type\n\u7684\u6982\u5ff5\uff0c\u53ef\u4ee5\u5728\u540e\u9762\u4ecb\u7ecd\u4e86TE\u8bed\u6cd5\u540e\uff0c\u518d\u56de\u8fc7\u5934\u7406\u89e3\u4e0b\u3002\u4ee5\u4e0a\u4ecb\u7ecd\u4e86\u6587\u4ef6\uff0c\u6587\u4ef6\u7cfb\u7edf\u6253\u6807\u7b7e\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u6587\u4ef6\u7cfb\u7edf\u4e0d\u5b8c\u6574\uff0c\u8d77\u7801rootfs\u548cproc\u90fd\u6ca1\u4ecb\u7ecd\u5230\uff0c\u4e0b\u9762\u6211\u4eec\u4ecb\u7ecd\u4e0b\uff0c \u56e0\u4e3arootfs\u548cproc\u65e0\u6cd5\u7528\u4e0a\u9762\u51fd\u6570\u6253\u6807\u7b7e(\u4e0d\u77e5\u9053\u4e3a\u5565)... \u5176\u4e2d\u4e00\u4e2a\u53ef\u80fd\u539f\u56e0\u662f\uff0c \u8fd9\u4e9b\u6587\u4ef6\u7cfb\u7edf\u7684SContext\u662f\u88ab\u5b9a\u6b7b\u7684\uff0c\u4e0d\u5e0c\u671b\u88abTT\u89c4\u5219\u6539\u53d8\u3002\u4f7f\u7528\u7684\u5173\u952e\u5b57\u662f\ngenfscon\n\n\n#\u3000\u683c\u5f0f\uff1a\u3000genfscon\u3000fstype partial_path fs_context\n# \u5728fstype\u4e3aproc\u65f6\uff0c\u3000partial_path\u3000\u6307\u5b9a\u4e3aproc\u4e0b\u7684\u8def\u5f84\uff0c\u5176\u4ed6\u6587\u4ef6\u7cfb\u7edf\u7edf\u4e00\u4e3a / \uff0e\n # Label inodes with the fs label.\n genfscon rootfs / u:object_r:rootfs:s0\n\n # proc labeling can be further refined (longest matching prefix).\n genfscon proc / u:object_r:proc:s0\n genfscon proc /net u:object_r:proc_net:s0\n\n\n\n\n\n\u7f51\u7edc\u7aef\u53e3/\u6570\u636e\u5305\u521d\u59cb\u5316\n\n\nSEAndroid\u4e2d\u6ca1\u6709\u4e2a\u6570\u636e\u5305\u548c\u7aef\u53e3\u6253\u6807\u7b7e\uff0e\nselinux-network.sh\n\u548c\nport_contexts\n\u90fd\u5b58\u5728\uff0c\u4f46\u89c4\u5219\u90fd\u6ce8\u91ca\u4e86\uff0c\u3000\u4e0d\u786e\u5b9a\u662f\u5426\u652f\u6301\uff0e\u6709\u9700\u6c42\u7684\u7ae5\u978b\u9a8c\u8bc1\u4e0b\uff0e\uff0e\uff0e\n\n\nTE\u4ecb\u7ecd\n\n\nTE\u5c31\u662f\u7ed9\u4e0a\u9762\u7684domain\u548ctype\u5b9a\u4e49\u8bbf\u95ee\u89c4\u5219\u3002\n\n\n\u5148\u6765\u770b\u4e0bTE\u7684\u57fa\u672c\u683c\u5f0f\uff1a\n\n\nrule_name source_type target_type : object_class perm_set;\n\n\n\n\n\n\u6765\u6bb5\nselinux wiki\n\u7684\u89e3\u91ca\u3002\n\n\n\n\n\n\n\n\n\u57df\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\nrule_name\n\n\nThe applicable allow, dontaudit, auditallow, and neverallow rule keyword.\n\n\n\n\n\n\nsource_type / target_type\n\n\nOne or more source / target type, typealias or attribute identifiers. Multiple entries consist of a space separated list enclosed in braces ({}).\nEntries can be excluded from the list by using the negative operator (-).\nThe target_type can have the self keyword instead of type, typealias or attribute identifiers. This means that the target_type is the same as the source_type.\nThe neverallow rule also supports the wildcard operator (*) to specify that all types are to be included and the complement operator (~) to specify all types are to be included except those explicitly listed.\n\n\n\n\n\n\nclass_object\n\n\nOne or more object classes. Multiple entries consist of a space separated list enclosed in braces ({}).\n\n\n\n\n\n\nperm_set\n\n\nThe access permissions the source is allowed to access for the target object (also known as the Acess Vector). Multiple entries consist of a space separated list enclosed in braces ({}).\nThe optional wildcard operator (*) specifies that all permissions for the object class can be used.\nThe complement operator (~) is used to specify all permissions except those explicitly listed (although the compiler issues a warning if the dontaudit rule has '~').\n\n\n\n\n\n\n\n\n\u4e0b\u9762\u6765\u51e0\u4e2a\u4f8b\u5b50\u6765\u719f\u6089\u683c\u5f0f\u548c\u6982\u5ff5\u3002\n\n\nallow\n \nsdcardd\n \nrootfs\n:\ndir\n \nmounton\n;\n\n\n\n\n\n\n\n\n\n\nallow\uff1a TE\u7684allow\u8bed\u53e5\uff0c \u8868\u793a\u6388\u6743\u3002\u9664\u4e86allow\u4e4b\u5916\uff0c \u8fd8\u6709allowaudit\u3001dontaudit\u3001neverallow\u7b49\u3002\n\n\n\n\n\n\nsdcardd\uff1a source type\u3002 \u4e5f\u53eb domain\u3002 \u4e0e\u4e0a\u9762\u8fdb\u7a0b\u663e\u793a\u7684domain\u4e00\u81f4\u3002\n\n\n\n\n\n\nrootfs\uff1a target type\u3002 \u4e5f\u5c31\u662f\u6587\u4ef6\u7684\u6807\u7b7e\uff0c \u4e0e\u4e0a\u9762\u6587\u4ef6\u663e\u793a\u7684type\u4e00\u81f4\u3002\n\n\n\n\n\n\ndir\uff1a \u4ee3\u8868 Ojbect Class. \u5b83\u8868\u793a\u80fd\u591f\u7ed9domain\u64cd\u4f5c\u7684\u4e00\u7c7b\u4e1c\u897f\u3002\u6bcf\u4e2a\u6587\u4ef6\u5206\u7c7b\u91cc\u9762\u53ef\u4ee5\u5305\u542b\u5404\u79cd\u4e0d\u540c\u5c5e\u6027\u7684\uff0c\u6bd4\u5982\u6587\u4ef6\uff0c\u7ba1\u9053\uff0c\u76ee\u5f55\u7b49\uff0c \u8fd9\u4e9b\u662f\u7531Object Class\u5b9a\u4e49\u548c\u533a\u5206\u3002\u5728android\u91cc\uff0c\u8fd8\u800c\u5916\u5b9a\u4e49\u4e86\u4e00\u4e2aObject Class\uff0c \u53eb\u505aBinder\u3002\n\n\n\n\n\n\nmounton\uff1a \u5728\u8be5\u7c7b Object Class \u4e2d\u6240\u5b9a\u4e49\u7684\u64cd\u4f5c\u3002\n\n\n\n\n\n\n\u4ee5\u4e0a\u7684\u6574\u53e5\u542b\u4e49\u662f\uff0c \u5141\u8bb8sdcardd\u5c06\u6240\u6709rootfs\u6807\u7b7e\u4e0b\u7684\u76ee\u5f55\u4f5c\u4e3a\u6302\u8f7d\u70b9\u3002\n\n\n \nallow\n \nvold\n \nsystem_file\n:\nfile\n \nx_file_perms\n;\n\n\n#\n \n\u5141\u8bb8\nvold\n\u57df\u4e2d\u7684\u8fdb\u7a0b\u6267\u884c\nsystem_file\n\uff08\u6240\u6709\n/\nsystem\n/\n \n\u548c\n \n/\nvendor\n/\n \n\u76ee\u5f55\u4e0b\uff09\u7c7b\u578b\u7684\u6587\u4ef6\u3002\n\n\n\nallow\n \nvdc\n \ndumpstate\n:\nunix_stream_socket\n \n{\n \nread\n \nwrite\n \ngetattr\n \n}\n;\n\n\n#\n \n\u5141\u8bb8\nvdc\n\u57df\u4e2d\u7684\u8fdb\u7a0b\nread\n \nwrite\n \n\u548c\n \ngetattr\n \ndumpstate\n\u6807\u7b7e\u4e2d\nunix\n\u57df\u7684\nsocket\n\u3002\n\n\n\nneverallow\n \nnetd\n \ndev_type\n:\nblk_file\n \n{\n \nread\n \nwrite\n \n}\n;\n\n\n#\n \n\u4e0d\u5141\u8bb8\nnetd\n\u57df\u7684\u8fdb\u7a0b\u8bfb\u5199\n/\ndev\n/\n\u5e95\u4e0b\u7684\u5757\u8bbe\u5907\u6587\u4ef6\u3002\n\n\n\n\n\n\n\u4e4b\u524d\u6211\u4eec\u63d0\u5230\uff0c TE\u662f\u7c7b\u4f3c\u767d\u540d\u5355\u5f62\u5f0f\u7684\uff0c\u53ea\u6709\u88ab\u8bb0\u5f55\u7684\u89c4\u5219\u624d\u88ab\u5141\u8bb8\uff0c \u672a\u88ab\u8bb0\u5f55\u7684\u884c\u4e3a\u90fd\u662f\u62d2\u7edd\u7684\uff0c \u90a3\u4e48neverallow\u5176\u5b9e\u662f\u6ca1\u6709\u610f\u4e49\u7684\u4e86\u3002 \u5176\u5b9eneverallow\u7684\u5b58\u5728\u662f\u5728\u751f\u6210\uff08\u7f16\u8bd1\uff09\u5b89\u5168\u7b56\u7565\u6587\u4ef6\u65f6\u68c0\u67e5allow\u8bed\u53e5\u662f\u5426\u8fdd\u53cd\u4e86neverallow\uff0c\u9632\u6b62\u7531\u4e8e\u5f00\u53d1\u4eba\u5458\u7684\u5931\u8bef\u5bfc\u81f4\u67d0\u4e9b\u57df\u6743\u9650\u8fc7\u9ad8\u3002\u8be5\u9519\u8bef\u4f1a\u5728\u7f16\u8bd1\u9636\u6bb5\u51fa\u9519\u3002\n\n\nObject class \u548c\u5176 Perm_set\n\n\nThe object classes have matching declarations in the kernel, meaning that it is not trivial to add or change object class details. The same is true for permissions. Development work is ongoing to make it possible to dynamically register and unregister classes and permissions.\n\n\n\n\n\n\u8fd9\u91cc\u662f\u6458\u6284\u4e00\u6bb5CentOS\u91cc\u7684\u4ecb\u7ecd\uff0c \u5bf9\u4e8eobject class\u548cpermission\u7684\u5b9a\u4e49\u7684\u8bf4\u660e\uff0c \u8fd9\u4e24\u8005\u90fd\u662f\u5728kernel\u4e2d\u5b9a\u4e49\u4e0e\u6620\u5c04\u7684\uff0c \u4e5f\u5c31\u662f\u8bf4\uff0c \u8fd9\u4e24\u4e2a\u662f\u8ddf\u8bbe\u5907\u76f8\u5173\u7684\uff0c \u4e0d\u5141\u8bb8\u968f\u610f\u66f4\u6539\u3002\n\n\n\u9996\u5148\uff0c Object class \u5b9a\u4e49\u5728\u6587\u4ef6external/sepolicy/security_classes\uff0c \u7b80\u5355\u6458\u53d6\u5982\u4e0b\u3002\u8be5\u6587\u4ef6\u4e2d\u53ea\u662f\u4e00\u5806\u5b9a\u4e49\uff0c \u81f3\u4e8e\u600e\u4e48\u8ddflinux\u4e2d\u5b9e\u9645\u7684\u6587\u4ef6\u6620\u5c04\u7684\u5462\uff1f\uff08\u8bf7\u53c2\u8003\uff1a\u5185\u6838\u4ee3\u7801\uff09\n\n\n#\n \nfile\n-\nrelated\n \nclasses\n\n\nclass\n \nfilesystem\n\n\nclass\n \nfile\n\n\nclass\n \ndir\n\n\nclass\n \nfd\n\n\nclass\n \nlnk_file\n\n\nclass\n \nchr_file\n\n\nclass\n \nblk_file\n\n\nclass\n \nsock_file\n\n\nclass\n \nfifo_file\n\n\n\n#\n \nProperty\n \nservice\n\n\nclass\n \nproperty_service\n          \n#\n \nuserspace\n\n\n\n#\n \nService\n \nmanager\n\n\nclass\n \nservice_manager\n           \n#\n \nuserspace\n\n\n\n\n\n\n\u6240\u6709\u7684 Object class \u9700\u8981\u901a\u8fc7class\u8bed\u53e5\u7533\u660e\u3002\n\n\n\u8fd9\u91ccuserspace\uff0c\u6ce8\u610f\u4e0b\uff0c \u540e\u6587\u4f1a\u63d0\u5230android\u91cc\u7279\u6b8a\u5b9a\u4e49\u7684\u8fd9\u4e9buserspace\u7684object class\uff0c\u6240\u6709\u6807\u6ce8\u4e86userspace\u7684\uff0c\u90fd\u662f\u8fdb\u7a0b\u8fd0\u884c\u65f6\u901a\u8fc7selinux\u7684\u6807\u51c6API\u52a8\u6001\u68c0\u67e5\uff0c\u8ddfandroid\u7684xml\u4e2dpermission\u68c0\u67e5\u7c7b\u4f3c\u3002\n\n\n\u4e0b\u9762\u770b\u4e0b \nperm_set\n\u3002 \u6240\u8c13\nperm_set\n\u4e5f\u53eb\u505a access vectors\uff0c \u6307\u67d0\u4e2aobject class\u6240\u652f\u6301\u7684\u64cd\u4f5c\u3002 \u8be5\u64cd\u4f5c\u90fd\u662f\u5728kernel\u91cc\u9884\u5b9a\u4e49\u7684\uff0c \u4e5f\u662f\u65e0\u6cd5\u589e\u52a0\u6216\u6539\u53d8\u5176\u884c\u4e3a\uff0c \u4f46\u53ef\u4ee5\u5c06\u5b83\u4eec\u4e0e\u5bf9\u5e94\u7684object class \u7ed1\u5b9a\u3002\u6ce8\u610f\uff1a\u4e00\u4e9bobject class\u4f1a\u4e0d\u652f\u6301\u67d0\u4e9bpermission\uff0c \u6bd4\u5982 file \u4e0d\u652f\u6301 mounton\u3002\n\n\n\u8fd9\u4e9b\u6620\u5c04\u5b9a\u4e49\u5728external/sepolicy/access_vectors\uff0c \u7b80\u5355\u6458\u53d6\u5982\u4e0b\u3002\n\n\n \ncommon\n \nfile\n\n \n{\n\n     \nioctl\n\n     \nread\n\n     \nwrite\n\n     \ncreate\n\n     \ngetattr\n\n     \nsetattr\n\n     \nlock\n\n     \nrelabelfrom\n\n     \nrelabelto\n\n     \nappend\n\n     \nunlink\n\n     \nlink\n\n     \nrename\n\n     \nexecute\n\n     \nswapon\n\n     \nquotaon\n\n     \nmounton\n\n \n}\n\n\n\nclass\n \ndir\n\n \ninherits\n \nfile\n\n \n{\n   \n     \nadd_name\n\n     \nremove_name\n\n     \nreparent\n\n     \nsearch\n\n     \nrmdir\n\n     \nopen\n\n     \naudit_access\n\n     \nexecmod\n\n \n}\n \n\n\n\n\n\nperm_set\n\u7684\u5b9a\u4e49\u67092\u79cd\uff0c \u5982\u4e0a\uff0c \u4e00\u79cd\u662fcommon\u5b9a\u4e49\u7684\uff0c \u7c7b\u4f3c\u9762\u5411\u5bf9\u8c61\u7684\u57fa\u7c7b\uff0c \u53e6\u4e00\u79cd\u662fclass\u5b9a\u4e49\u7684\uff0c \u53ef\u4ee5\u7ee7\u627fcommen\u5b9a\u4e49\u7684\u96c6\u5408\u3002\n\n\ntype\uff0c attribute \u548c allow \u7b49\u5173\u952e\u5b57\u8bf4\u660e\n\n\n\u9996\u5148\uff0c \u6211\u4eec\u770btype\u7684\u5b9a\u4e49\uff1a\n\n\ntype type_id [,attribute_id]\n\n\n\n\n\n\u4e0a\u9762\u662ftype\u7684\u5b8c\u6574\u547d\u4ee4\u683c\u5f0f\uff0c \u6307\u5b9a\ntype_id\n, \u5e76\u5173\u8054\u5230\nattribute_id\n\uff0c \nattribute_id\n\u53ef\u4ee5\u591a\u4e2a\u3002\n\n\n\u800cSEAndroid\u7684\u5c5e\u6027\u5b9a\u4e49\u5982\u4e0b\uff1a\n\n\nattribute domain\nattribute file_type\n\n\n\n\n\n\u9664\u4e86\u901a\u8fc7type\u5b9a\u4e49\u65f6\u7ed1\u5b9a\u5c5e\u6027\uff0c \u8fd8\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\uff0c \u5c06vold\u7c7b\u578b\u4e0emlstrustedsubject\u5c5e\u6027\u5173\u8054\u8d77\u6765\n\n\ntypeattribute vold mlstrustedsubject;\n\n\n\n\n\ntype\u548cattribute\u5173\u8054\u8d77\u6765\u5177\u4f53\u662f\u4ec0\u4e48\u542b\u4e49\u5462\uff1f \u5176\u5b9e\uff0c attribute \u53ef\u4ee5\u7406\u89e3\u4e3a\u5206\u7ec4\u7684\u610f\u601d\uff0c \u4e5f\u5c31\u662f\u5c06\u4e00\u5806\u7684\ntype_id\n \u5f52\u5230\u4e0d\u540c\u7684\u7ec4\uff0c \ntype_id\n \u548c \nattribute_id\n \u4f4d\u4e8e\u540c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\uff0c \u4e5f\u5c31\u662f\u8bf4\uff0c \u4e0d\u80fd\u7528type\u5b9a\u4e49\u5728attribute\u4e2d\u5df2\u6709\u7684\u540d\u5b57\uff0c \u4e5f\u4e0d\u80fd\u7528attribute\u5b9a\u4e49type\u4e2d\u5df2\u6709\u7684\u540d\u5b57\u3002 \u4e0b\u9762\u770b\u4e2a\u4f8b\u5b50\uff0c \u6765\u66f4\u6df1\u5165\u7406\u89e3\ntype_id\n\u548c\nattribute_id\n\u7684\u5173\u7cfb\uff0c\u8bfb\u8005\u53ef\u4ee5\u7ed3\u5408\u4e0b\u9762\u7684\u4f8b\u5b50\u548c\u5f00\u5934\u7684\u6811\u5f62\u4f8b\u5b50\u6765\u7406\u89e3\u3002\n\n\n#\n \n\u5185\u5bb9\u6765\u81ea\n \ndhcp\n.\nte\n \n\nnet_domain\n(\ndhcp\n)\n\n\n\n#\n \n\u5185\u5bb9\u6765\u81ea\n \nnetd\n.\nte\n\n\nnet_domain\n(\nnetd\n)\n\n\n\n#\n \n\u5185\u5bb9\u6765\u81ea\n \nte_macros\n,\n \n\u610f\u601d\u662f\u5b9a\u4e49\u4e00\u4e2a\u5b8f\u51fd\u6570\nnet_domain\n\uff0c\n \n\u901a\u8fc7\ntypeattribute\n \n\u5c06\u53c2\u6570\n \n\u4e0e\n \nnetdomain\n \n\u5173\u8054\u3002\n\n\n#####################################\n\n\n#\n \nnet_domain\n(\ndomain\n)\n\n\n#\n \nAllow\n \na\n \nbase\n \nset\n \nof\n \npermissions\n \nrequired\n \nfor\n \nnetwork\n \naccess\n.\n\n\ndefine\n(\n`\nnet_domain\n, `\n\n\ntypeattribute $1 netdomain;\n\n\n)\n\n\n\n#\n \n\u5185\u5bb9\u6765\u81ea\n \nnet\n.\nte\n,\n \n\u5b9a\u4e49\u4e86\n \nnetdomain\n \n\u8fd9\u4e2a\nattribute\n\u6240\u6709\npermissions\n\uff0c\n \n\u4ee5\u4e0b\u7b80\u5355\u5217\u51fa\u3002\n\n\nallow\n \nnetdomain\n \nself\n:\ntcp_socket\n \ncreate_stream_socket_perms\n;\n\n\n\n\n\n\n\u4ee5\u4e0a\u4f8b\u5b50\u7684\u542b\u4e49\u662f\uff0c \u5c06 dhcp \u4e0e netdomain\u5173\u8054\uff0c \u5c06netd\u4e0enetdomain\u5173\u8054\u3002 \u7136\u540e\u53ea\u8981\u901a\u8fc7\u5141\u8bb8netdomain\u6267\u884c\u67d0\u4e9b\u6743\u9650\uff0c \u5c31\u53ef\u4ee5\u505a\u5230\u8ba9dhcp\u548cnetd\u540c\u65f6\u5177\u5907\u67d0\u4e9b\u6743\u9650\u3002\u6240\u4ee5\uff0c attribute \u5c5e\u6027\u5728\u7528\u4e8e source_type \u65f6\uff0c \u662f\u6307\u8d4b\u4e88\u67d0\u4e00\u7ec4\u7684\ntype_id\n \u6743\u9650\u3002 \u901a\u8fc7m4\u8bed\u6cd5\uff0c \u4ee5\u4e0a\u4f8b\u5b50\u5c55\u5f00\u7684\u7ed3\u679c\u662f\uff1a\n\n\n#\n \n\u8fd9\u91cc\u7684\n \ncreate_stream_socket_perms\n \n\u662f\u5728\nglobal_macros\n\u4e2d\u5b9a\u4e49\u7684\u5b8f\uff0c\n \n\u88ab\u5c55\u5f00\u5c31\u662f\u5177\u4f53\u7684\ntcp_socket\n\u7684\npermissions\n\n\n#\n \n\u8fd9\u91cc\u7684\n \nself\n \n\u5c31\u662f\u6307\u4e0e\n \nsource_type\n \n\u4e00\u81f4\u3002\n\n\nallow\n \ndhcp\n \ndhcp\n:\ntcp_socket\n \n{\n \ncreate\n \nlisten\n \naccept\n \nioctl\n \nread\n \ngetattr\n \nwrite\n \nsetattr\n \nlock\n \nappend\n \nbind\n \nconnect\n \ngetopt\n \nsetopt\n \nshutdown\n \n}\n;\n\n\nallow\n \nnetd\n \nnetd\n:\ntcp_socket\n \n{\n \ncreate\n \nlisten\n \naccept\n \nioctl\n \nread\n \ngetattr\n \nwrite\n \nsetattr\n \nlock\n \nappend\n \nbind\n \nconnect\n \ngetopt\n \nsetopt\n \nshutdown\n \n}\n;\n\n\n\n\n\n\n\u518d\u6765\u770b\u4e00\u4e2a\uff0c\u540c\u6837\u662fnetdomain\uff0c \u4f46\u662f\u4f5c\u4e3a\ntarget_type\n\u7684\u4f8b\u5b50\n\n\nallow netd netdomain\n:{\ntcp_socket udp_socket rawip_socket dccp_socket tun_socket\n}\n \n{\nread write getattr setattr getopt setopt\n};\n\n\n\n# m4 \u5c55\u5f00\uff0c \u8fd9\u91cc\u53ea\u5b9a\u4e49\u4e86dhcp\u548cnetd\u5c5e\u4e8enetdomain\uff0c \u5b9e\u9645\u4e0aandroid\u4e2d\u8fd8\u6709\u597d\u591a\u7f51\u7edc\u670d\u52a1\u5c5e\u4e8e\u8be5domain\n\nallow netd \n{\ndhcp netd\n}:{\ntcp_socket udp_socket rawip_socket dccp_socket tun_socket\n}\n \n{\nread write getattr setattr getopt setopt\n};\n\n\n\n\n\n\n\u8fd9\u53e5\u7684\u610f\u601d\u662f\uff0c \u5141\u8bb8netd\u5bf9\u6240\u6709netdomain\u5c5e\u6027\u6210\u5458\u7684{tcp_socket udp_socket rawip_socket dccp_socket tun_socket} \u6267\u884c {read write getattr setattr getopt setopt}. \u8fd9\u91cc\u7684{}\u662f\u96c6\u5408\u7684\u610f\u601d\u3002\nsource_type\n, \ntarget_type\n, \nobject class\n\u548c\nperm_set\n \u90fd\u53ef\u4ee5\u7528\u96c6\u5408\u8868\u793a\uff0c \u800cattribute\uff0c\u5176\u5b9e\u662f\u7ed9\u67d0\u4e2a\u96c6\u5408\u5b9a\u4e49\u4e86\u4e2a\u5b8f\u522b\u540d\u3002\n\n\n\u6240\u4ee5\uff0c attribute \u662f\u4fbf\u5229\u5f00\u53d1\u4eba\u5458\u5199sepolicy\u7684\u5de5\u5177\u3002\u5bf9\u4e8e\u6240\u4ee5SEAndroid\u4e2d\u5b9a\u4e49\u7684attribute\uff0c \u53ef\u4ee5\u53c2\u8003 external/sepolicy/attribute \u8fd9\u4e2a\u6587\u4ef6\u3002\n\n\n\u6700\u540e\uff0c \u6211\u4eec\u770bTE\u4e2d\u7684\nrule_name\n\uff0c \u4e00\u5171\u6709\u5982\u4e0b4\u79cd\uff1a\n\n\n\n\n\n\nallow: \u8d4b\u4e88\u67d0\u9879\u6743\u9650\n\n\n\n\n\n\nallowaudit\uff1a audit\u542b\u4e49\u5c31\u662f\u8bb0\u5f55\u67d0\u9879\u64cd\u4f5c\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f SELinux \u53ea\u8bb0\u5f55\u54ea\u4e9b\u6743\u9650\u68c0\u67e5\u5931\u8d25\u7684\u64cd\u4f5c\uff0c \u4e5f\u5c31\u662f\u7ec8\u7aef\u548clogcat\u4e2d\u6253\u5370\u7684\u6240\u6709deny\u7684\u6253\u5370\u3002\u800c\u8be5\u5b57\u6bb5\u5c31\u662f\u5728allow\u7684\u57fa\u7840\u4e0a\uff0c \u518d\u5c06\u4fe1\u606f\u6253\u5370\u51fa\u6765\u3002\n\n\n\n\n\n\ndontaudit\uff1a \u5bf9\u90a3\u4e9b\u68c0\u67e5\u5931\u8d25\u7684\u4e0d\u505a\u8bb0\u5f55\uff0c \u9759\u9ed8\u5730\u62d2\u7edd\u8bbf\u95ee\uff0c \u5e76\u4e14\u4e0d\u5e94\u8be5\u5f15\u8d77\u7a0b\u5e8f\u9000\u51fa\u3002\u8be5\u5b57\u6bb5\u5728SEAndroid\u4e2d\u5e76\u672a\u4f7f\u7528\u3002\u57fa\u4e8eSELinux\u7684\u767d\u540d\u5355\u539f\u5219\uff0c \u53ea\u8981\u4e0d\u5728\u89c4\u5219\u5185\u7684\u64cd\u4f5c\u90fd\u62d2\u7edd\uff0c \u6240\u4ee5\u8be5\u5b57\u6bb5\u7684\u5b9e\u9645\u6548\u679c\u5c31\u662f\uff0c\u5bf9\u5176\u540e\u5931\u8d25\u7684\u6743\u9650\u4e0d\u505a\u8bb0\u5f55\u3002\n\n\n\n\n\n\nneverallow\uff1a \u7528\u6765\u68c0\u67e5\u5b89\u5168\u7b56\u7565\u4e2d\u662f\u5426\u8fdd\u53cd\u8be5\u89c4\u5219\u7684allow\u8bed\u53e5\uff0c \u907f\u514dsepolicy\u7684\u4e66\u5199\u5f02\u5e38\u3002 \u5728\u7f16\u8bd1\u9636\u6bb5\u62a5\u9519\uff0c \u4e0d\u4f1a\u7f16\u8bd1\u8fdb\u6700\u7ec8\u7684\u7b56\u7565\u6587\u4ef6\u4e2d\u3002\n\n\n\n\n\n\nRBAC \u548c constrain\n\n\n\u524d\u6587\u6211\u4eec\u63d0\u5230\u7684\u90fd\u662fTEAC\u3002\u5728\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\nps -Z\n \u770b\u5230\u4e86user\u548crole\uff0c \u5728SEAndroid\u4e2d\uff0c \u53ea\u67091\u4e2auser\u548c1\u4e2arole\u3002\u800c\u57fa\u4e8erole\u7684\u5b89\u5168\u7b56\u7565\uff0c \u5c31\u53eb\u505aRBAC\uff08Role Based Access Control\uff09\u3002\u6211\u4eec\u5148\u6765\u770b\u4e0bandroid\u5b9a\u4e49\u7684user\u548crole\u3002\n\n\n# external/sepolicy/roles\n\n\n# \u5b9a\u4e49\u4e00\u4e2arole\n\n\n\nrole\n \nr\n;\n\n# \u5c06role\u548cattribute domain \u5173\u8054\u3002\n\n\nrole\n \nr\n \ntypes\n \ndomain\n;\n\n\n\n\n\n# external/sepolicy/users\nuser u roles { r } level s0 range s0 - mls_systemhigh;\n\n\n\n\n\n\u4ee5\u4e0a\u662f\u652f\u6301MLS\uff08Multi-Leve Security\uff09\u7684user\u5b9a\u4e49\u3002\u4e0a\u9762\u8fd9\u4e2a\u5b9a\u4e49\u7684\u610f\u601d\u662f\uff0c \u5c06user u\u548c roles r\u5173\u8054\uff0c \u5e76\u4e14\u5176\u5b89\u5168\u7ea7\u522b\u662fs0\uff0c \u6700\u9ad8\u662fmls_systemhigh\u3002 \u8fd9\u91ccu\u53ef\u4ee5\u8ddf\u591a\u4e2arole\u5173\u8054\u3002\n\n\n\u7136\u540e\uff0c \u6211\u4eec\u770b\u4e0buser\u548crole\u6709\u600e\u6837\u7684\u6743\u9650\u63a7\u5236\u3002 \u5176\u5b9e\u901a\u4fd7\u5730\u8bb2\uff0c user\u548crole\u7684\u5173\u7cfb\uff0c \u5c31\u8ddf\u4eba\u4e0e\u5de5\u4f5c\u7684\u5173\u7cfb\uff0c role\u51b3\u5b9a\u4e86\u804c\u80fd\u5206\u7c7b\u3002\u56e0\u4e3aandroid\u53ea\u6709\u4e00\u4e2arole\uff0c \u6240\u4ee5\uff0c\u540e\u6587\u63d0\u5230\u7684role\u8f6c\u6362\u548c\u63a7\u5236\u5173\u7cfb\uff0c \u6211\u4eec\u53ea\u662f\u7b80\u5355\u8bf4\u660e\u4e0b\uff0c \u6211\u4e5f\u4e0d\u662f\u5f88\u61c2\u3002\n\n\n\u9996\u5148\uff0c \u6211\u4eec\u770b\u5982\u4f55\u4ece\u4e00\u4e2arole\u5207\u6362\u5230\u53e6\u4e00\u4e2arole\u3002\n\n\n# \u8fd9\u91cc\u7684allow\u548cTE\u7684allow\u4e0d\u540c\nallow from_role_id to_role_id\n\n\n\n\n\n\u89d2\u8272\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c \u5728SELinux\u4e2d\uff0c Role\u548cRole\u7684\u5173\u7cfb\u8ddf\u804c\u573a\u7684\u7ba1\u7406\u4eba\u5458\u5c42\u7ea7\u4e00\u81f4\u3002\u4f8b\u5982\n\n\n# \u8fd9\u53e5\u7684\u610f\u601d\u662f\uff0c super_r dominate sysadm_r \u548c secadm_r \u8fd9\u4e24\u4e2a\u89d2\u8272\n# \u4ece type \u89d2\u5ea6\u6765\u770b\uff0c super_r \u5c06\u81ea\u52a8\u7ee7\u627f sysadm_r \u548c secadm_r \u6240\u5173\u8054\u7684type(\u6216attribute)\ndominance { role super_r {role sysadm_r; role secadm_r; }}\n\n\n\n\n\n\u63a5\u4e0b\u6765\uff0c \u6211\u4eec\u770b\u4e0b\uff0c \u662f\u5982\u4f55\u5b9e\u73b0\u57fa\u4e8eRole\u6216User\u7684\u6743\u9650\u63a7\u5236\u7684\u3002\u5728selinux\u4e2d\u6709\u65b0\u5173\u952e\u8bcdconstrain\u3002\n\n\nconstrain file write (u1 == u2 and r1 == r2);\n# \u683c\u5f0f\uff1a\n# constrain object_class perm_set expression\uff1b\n\n\n\n\n\n\u91cd\u70b9\u662fexpression\u3002\u5b83\u5305\u542b\u5982\u4e0b\u5173\u952e\u5b57\uff1a\n\n\n\n\n\n\nu1,r1,t1: \u4ee3\u8868source\u7684user\uff0c role \u548c type\n\n\n\n\n\n\nu2, r2, t2: \u4ee3\u8868target\u7684user\uff0c role \u548c type\n\n\n\n\n\n\n== \u548c \uff01= \uff1a \u5bf9\u4e8e u\uff0cr \u6765\u8bf4\uff0c == \u548c \uff01= \u5206\u522b\u8868\u793a\u76f8\u7b49\u6216\u8005\u4e0d\u7b49\u3002 \u800c\u5bf9\u4e8e t \u6765\u8bf4\uff0c == \u548c \uff01= \u5206\u522b\u8868\u793a\u6e90type\u5c5e\u4e8e\u6216\u4e0d\u5c5e\u4e8e\u76ee\u6807attribute\u3002\n\n\n\n\n\n\n\u5728SEAndroid\uff0c \u5e76\u6ca1\u6709\u4f7f\u7528constrain\u5173\u952e\u5b57\uff0c \u800c\u662fmlsconstrain\u3002\u540e\u6587\u5728\u4ecb\u7ecdmls\u65f6\u4f1a\u8be6\u7ec6\u63d0\u5230\u3002\n\n\nconstrain\u662f\u5bf9TE\u7684\u52a0\u5f3a\u3002\u56e0\u4e3aTE\u4ec5\u9488\u5bf9type\u548cdomain\uff0c\u5e76\u6ca1\u6709\u9488\u5bf9user\u548crole\u3002\u5728selinux\u68c0\u67e5\u6743\u9650\u65f6\uff0c \u5148\u68c0\u67e5TE\uff0c \u518d\u68c0\u67e5RBAC\u3002\n\n\nLabeling \u4ecb\u7ecd\uff08\u4e8c\uff09\n\n\ndomain/type Transition  \u5b8f \u548c \u65b0\u6dfb\u52a0\u8fdb\u7a0b\n\n\n\u5728Android/Linux\u7cfb\u7edf\u4e2d\uff0c \u8fdb\u7a0b\u90fd\u662f\u7531\u7236\u8fdb\u7a0bfork\u751f\u6210\u7684\u3002\u5728Android\u4e2d\uff0c \u6240\u6709\u7684\u5e94\u7528\u90fd\u662f\u901a\u8fc7zygote\u521b\u5efa\uff0c\u5e76\u6267\u884c\u76f8\u540c\u7684\u7a0b\u5e8f\uff0c \u53ea\u662f\u6700\u540e\u52a0\u8f7d\u7684java\u5305\u4e0d\u540c\u800c\u5df2\u3002\u800cfork\u7cfb\u7edf\u8c03\u7528\uff0c\u4f1a\u4f7f\u5b50\u8fdb\u7a0b\u7ee7\u627f\u7236\u8fdb\u7a0b\u7684domain\uff0c \u4e5f\u5c31\u662f\u8bf4SContext\u4f1a\u88ab\u7ee7\u627f\u3002\u6240\u4ee5\uff0c \u5bf9\u4e8einit\u8fdb\u7a0b\u800c\u8a00\uff0c\u5fc5\u987b\u5b8c\u6210type/domain\u7684\u8f6c\u6362\uff0c\u4ece\u800c\u964d\u4f4e\u5b50\u8fdb\u7a0b\u7684\u6743\u9650\u3002\u800c\u5bf9\u4e8ezygote\u800c\u8a00\uff0c \u7531\u4e8e\u4e0d\u540c\u5e94\u7528\u53ea\u662f\u8d44\u6e90\u4e0d\u540c\uff0c\u5bf9\u4e8e\u5185\u6838\u800c\u8a00\u662f\u540c\u4e00\u79cd\u8fdb\u7a0b\uff0c \u6240\u4ee5\u9700\u8981\u663e\u793a\u8c03\u7528selinux\u7684\u51fd\u6570\u8fdb\u884ctype/domain\u8f6c\u6362\u3002\u4e0b\u9762\u9488\u5bf9init\u8fdb\u7a0b\u7684fork\u548czygote\u8fdb\u7a0b\u7684fork\u8bf4\u660e\u4e0b\u57df\u662f\u5982\u4f55\u8f6c\u6362\u7684\u3002\n\n\n\n\ninit \u542f\u52a8\u8fdb\u7a0b\u5e76\u5207\u6362domain\n\n\ninit\u6709\u81ea\u5df1\u7684scontext\uff0c \u5e76\u4e14\u67e5\u770binit.te\uff0c \u4f1a\u53d1\u73b0\u5176\u6743\u9650\u975e\u5e38\u9ad8\u3002 \u800c\u7531init.rc\u4e2d\u542f\u52a8\u7684\u8fdb\u7a0b\uff0c\u5177\u6709\u5404\u81ea\u4e0d\u540c\u7684\u6743\u9650\uff0c\u5e94\u8be5\u8fd0\u884c\u5728\u5404\u81ea\u7684scontext\u4e2d\uff0c\u964d\u4f4e\u6743\u9650\u3002\n\n\ninit\u542f\u52a8\u5b50\u8fdb\u7a0b\u7ecf\u5386\u7684\u7cfb\u7edf\u8c03\u7528\u4e3a\uff0c fork\uff0c execv\uff0c \u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c \u5185\u6838\u4f1a\u67093\u4e2aSecurity\u68c0\u67e5\u70b9\uff0c \u5206\u522b\u662f\uff0c \u5141\u8bb8init\u6267\u884c\u76ee\u6807\u7a0b\u5e8f\uff0c \u5141\u8bb8init\u6267\u884cDT\uff08Domain Transition\uff09\u8f6c\u6362\uff0c \u901a\u77e5selinux\u9488\u5bf9\u7684\u5207\u6362\u6587\u4ef6\u3002\u5373\u5982\u4e0b3\u6761\u6307\u4ee4\uff1a\n\n\n#\n \n\u6765\u6e90\n \nexternal\n/\nsepolicy\n/\ninit\n.\nte\n\n\n#\n \n\u683c\u5f0f\n \ndomain_trans\n(\nolddomain\n,\n \ntype\n,\n \nnewdomain\n)\n\n\n#\n \nshell\n \n\u7684\n \ntype\n \n\u548c\ndomain\n\uff0c\n \n\u53ef\u4ee5\u770b\n \nshell\n.\nte\n\n\n#\n \n\n\n# type shell, domain, mlstrustedsubject;  # shell\u662fdomain\u8fd9\u4e2aattribute\u7684\u6210\u5458\u3002\n\n\n# type shell_exec, exec_type, file_type;  # type \u662f shell_exec\n\n\n# \n\n\ndomain_trans\n(\ninit\n,\n \nshell_exec\n,\n \nshell\n)\n\n\n\n#\n \n\u6765\u6e90\n \nexternal\n/\nsepolicy\n/\nte_macros\n\n\ndefine\n(\n`\ndomain_trans\n, `\n\n\n# $1 \u4e3ainit\uff0c $2 \u4e3a shell_exec\uff0c $3\u4e3ashell\n\n\nallow $1 $2:file { getattr open read execute };\n\n\nallow $1 $3:process transition;\n\n\nallow $3 $2:file { entrypoint open read execute getattr };\n\n\n...\n\n\n)\n\n\n\n#\n \ndomain_trans\n \n\u5c55\u5f00\u6765\u5982\u4e0b\uff0c\u53bb\u9664\u65e0\u5173\npermissions\n\uff0c\n \ndomain\n \n\u5207\u6362\u76f8\u5173\u7684\u5982\u4e0b\uff1a\n\n\n#\n \n\u5141\u8bb8\n \ninit\n\u57df\u8fdb\u7a0b\n \n\u6267\u884c\n \nshell_exec\n \n\u7c7b\u578b\u7684\u8fdb\u7a0b\n\n\nallow\n \ninit\n \nshell_exec\n:\nfile\n \n{\n \nexecute\n \n}\n;\n\n\n\u5141\u8bb8\ninit\n\u57df\u8fdb\u7a0b\u5bf9\nshell\n\u57df\u7684\u8fdb\u7a0b\u6267\u884c\nDT\n\n\nallow\n \ninit\n \nshell\n:\nprocess\n \ntransition\n;\n\n\n#\n \n\u8bbe\u7f6e\u65b0\ndomain\n \nshell\n\u7684\u5165\u53e3\u4e3a\u7c7b\u578b\n \nshell_exec\n \n\u7684\u6587\u4ef6\u3002\n\n\nallow\n \nshell\n \nshell_exec\n:\nfile\n \n{\n \nentrypoint\n \nexecute\n \n}\n;\n\n\n\n\n\n\n\u5bf9\u5e94\u7684type\u53ef\u4ee5\u5728file_contexts \u4e2d\u67e5\u627e\uff0c \u5f53\u7136\uff0c\u5982\u679c\u662f\u65b0\u6dfb\u52a0\u8fdb\u7a0b\uff0c\u5219\u9700\u8981\u5728\u8be5\u6587\u4ef6\u4e2d\u7ed1\u5b9a\u53ef\u6267\u884c\u7a0b\u5e8f\u4e0etype\u3002\n\u4ee5\u4e0a(domain_trans\u5b8f)\u53ea\u662f\u7533\u660e\u4e86\u53ef\u4ee5\u8fdb\u884cDT\u7684\u6743\u9650\uff0c\u4f46\u5e76\u6ca1\u6709\u771f\u6b63\u6267\u884c\u8f6c\u6362\u3002\n\n\n# external/sepolicy/file_contests\n# \u7ed1\u5b9asystem\u5e95\u4e0b\u6240\u6709\u6587\u4ef6\u4e3a system_file\n/system(/.*)?       u:object_r:system_file:s0\n# \u7ed1\u5b9avold\u53ef\u6267\u884c\u7a0b\u5e8f\u7684type\u4e3avold_exec\u3002\n/system/bin/vold    u:object_r:vold_exec:s0\n\n\n\n\n\n\u4e00\u822c\u6d89\u53ca\u5230\u65b0\u542f\u8fdb\u7a0b\uff0c\u548cdomain\u8f6c\u6362\u7684\u8bdd\uff0c \u7528\u5230\u7684\u5b8f\u5982\u4e0b\uff1a\n\n\n#\n \n\u4ece\u975e\ninit\n\u8fdb\u7a0b\u542f\u52a8\u4e00\u4e2a\u65b0\u8fdb\u7a0b\uff0c\n \n\u5728\u7236\u8fdb\u7a0b\u7684\nsepolicy\n\u4e2d\u8c03\u7528\uff0c\n \n\u8fd9\u91cc\u7684\nolddomain\n\u4e3a\u7236\u8fdb\u7a0b\u7684\ndomain\n\uff0c\n \ntype\n\u4e3a\u5b50\u8fdb\u7a0b\u7684\ntype\n\uff0c\n \nnewdomain\n\u4e3a\u5b50\u8fdb\u7a0b\u7684\ndomain\n\u3002\n\n\n#\n \nexternal\n/\nsepolicy\n/\nte_macros\n\n\n#\n \ndomain_auto_trans\n(\nolddomain\n,\n \ntype\n,\n \nnewdomain\n)\n\n\ndefine\n(\n`\ndomain_auto_trans\n, `\n\n\n# Allow the necessary permissions.\n\n\ndomain_trans($1,$2,$3)\n\n\n# Make the transition occur by default.\n\n\n# \u8fd9\u53e5\u662f\u771f\u6b63\u8fdb\u884c\u8f6c\u6362\uff0c\u800c\u4e14\u662f\u81ea\u52a8\u7684...\n\n\ntype_transition $1 $2:process $3;\n\n\n\n\n\n#\n \n\u4ece\ninit\n\u8fdb\u7a0b\u542f\u52a8\u4e00\u4e2a\u65b0\u8fdb\u7a0b\uff0c\n \n\u5728\u5b50\u8fdb\u7a0b\u7684\nsepolicy\n\u4e2d\u8c03\u7528\u3002\u8fd9\u91cc\u7684\ndomain\n\u4e3a\u5b50\u8fdb\u7a0b\u7684\ndomain\n\n\n#\n \ninit_daemon_domain\n(\ndomain\n)\n\n\n\ndefine\n(\n`\ninit_daemon_domain\n, `\n\n\ndomain_auto_trans(init, $1_exec, $1)\n\n\ntmpfs_domain($1)\n\n\n)\n\n\n\n\n\n\n\u4ee5\u4e0a\u63d0\u5230\u7684\u5728\u54ea\u4e2asepolicy\u4e2d\u8c03\u7528\uff0c\u5176\u5b9e\u5bf9\u4e8e\u6700\u7ec8\u7684\u89c4\u5219\u6587\u4ef6\u6ca1\u6709\u5f71\u54cd\uff0c \u533a\u5206\u4e0d\u540c\u7684sepolicy\u6587\u4ef6\uff0c\u53ea\u662f\u5c5e\u4e8e\u5f00\u53d1\u4eba\u5458\u7684\u5206\u7c7b\u548c\u6613\u4e8e\u7ef4\u62a4\u3002 \u4f60\u5b8c\u5168\u53ef\u4ee5\u5728vold.te \u4e2d\u5199\u4e2a\u89c4\u5219\u5141\u8bb8sdcardd\u7c7b\u578b\u7684\u8fdb\u7a0b\u6267\u884c\u67d0\u4e2a\u64cd\u4f5c\uff0c \u8be5\u89c4\u5219\u4f9d\u7136\u4f1a\u751f\u6548\u3002\n\n\n\u53e6\u5916 \uff0c\u4ece\u4e0a\u9762\u8fd9\u4e2a\u5b8f\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230Android\u4e2d\u7684\u4e00\u4e2a\u547d\u540d\u4e60\u60ef\uff0c\u4e00\u822cdomain\u52a0\u4e0a\u540e\u7f00_exec\u5c31\u662f\u5173\u8054\u7684type\u3002\n\n\ntype  shell domain;\ntype  shell_exec exec_type file_type;\n\n\n\n\n\n\u7136\u540e\uff0c\u6211\u4eec\u770b\u4e0b\uff0c \u5728init.te\u4e2d\uff0c\u5b58\u5728domain_trans\u7684\u58f0\u660e\uff0c\u5982\u679c\u518d\u770binit_shell.te\u7684\u5185\u5bb9\u7684\u8bdd\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5b58\u5728DT\u7684\u51b2\u7a81\uff08\u7b2c\u4e00\u6b21\u770b\u7684\u65f6\u5019\uff09\uff1a\n\n\n# init_shell.te\n# \u81ea\u52a8\u4eceinit\u5207\u6362\u5230init_shell\u5f53\u6267\u884c\u7684\u7a0b\u5e8f\u662fshell_exec,\u56e0\u4e3a\u8be5\u5b8f\u5305\u542b\u4e86type_transition\n# \u8fd9\u4e2ate\u662f\u7ed9\u6240\u6709\u4eceinit.*.rc\u4e2d\u542f\u52a8\u7684\u811a\u672c\u5b9a\u4e49\u7684\ndomain_auto_trans(init, shell_exec, init_shell)\n\n\n\n\n\n# init.te\n# \u4e0e\u4e0a\u9762\u7c7b\u4f3c\uff0c\u5c11\u4e86type_transition, \u4e5f\u5c31\u662f\u8bf4\u4e0d\u662f\u81ea\u52a8\u5207\u6362, \u53ea\u662f\u7533\u660e\u4e86\u6743\u9650\u3002\n# \u8fd9\u4e2a\u662f\u7ed9init.rc\u4e2dconsole\u670d\u52a1\u5b9a\u4e49\u7684\ndomain_trans(init, shell_exec, shell)\n\n\n\n\n\n\u5728\u770binit.rc\uff0c\u6709\u5982\u4e0b\u5185\u5bb9\uff1a\n\n\nservice console /system/bin/sh\n    class core\n    console\n    disabled\n    user shell\n    group shell log\n    seclabel u:r:shell:s0\n\n\n\n\n\n\u4e5f\u5c31\u662f\u8bf4\uff0cinit\u663e\u793a\u5207\u6362\u4e86sh\u7684domain\u3002\n\u6240\u4ee5\uff0c\u4e2a\u4eba\u7406\u89e3\u662f\uff0csh\u542f\u52a8\u7684\u65f6\u5019\uff0c\u5148\u9ed8\u8ba4\u5207\u6362\u5230init_shell\uff0c\u7136\u540e\u88abinit\u8fdb\u7a0b\u5207\u6362\u5230shell\u3002 \n\u8fd9\u4e48\u7406\u89e3\u7684\u8bdd\uff0ctype_transition\u7684\u58f0\u660e\u4e0d\u80fd\u6709\u51b2\u7a81\u3002\uff08\u672a\u9a8c\u8bc1\uff09\n\n\n\n\nzygote \u542f\u52a8\u8fdb\u7a0b\u5e76\u5207\u6362domain\n\n\n\u9996\u5148\uff0c \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c \u6240\u6709\u7684app\u548cframework server\u90fd\u662fzygote\u901a\u8fc7fork\u7684\u5f62\u5f0f\u521b\u5efa\u7684\u3002\u4e0b\u9762\u7b80\u5355\u770b\u4e0b\u8fd9\u4e2a\u51fd\u6570\u3002\n\n\nstatic pid_t ForkAndSpecializeCommon(JNIEnv* env, uid_t uid, gid_t gid, jintArray javaGids,\n                                     jint debug_flags, jobjectArray javaRlimits,\n                                     jlong permittedCapabilities, jlong effectiveCapabilities,\n                                     jint mount_external, \n                                     jstring java_se_info, jstring java_se_name,\n                                     bool is_system_server, jintArray fdsToClose, \n                                     jstring instructionSet, jstring dataDir) { \n pid_t pid = fork();\n if (pid == 0) {\n  // ....\n   rc = selinux_android_setcontext(uid, is_system_server, se_info_c_str, se_name_c_str);\n  // ....\n}                               \n\n\n\n\n\n\u8fd9\u6bb5\u4ee3\u7801\u8bbe\u7f6e\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u7684\u6838\u5fc3\u53c2\u6570\u662f \nis_system_server\n \u548c \nse_info_xxx\n\u3002\n\n\nint selinux_android_setcontext(uid_t uid,\n       int isSystemServer,\n       const char *seinfo, \n       const char *pkgname)\n{\n// ....\nrc = seapp_context_lookup(SEAPP_DOMAIN, uid, isSystemServer, seinfo, pkgname, NULL, ctx); // seinfo is se_info_c_str and pkgname is se_name_c_str\n// ....\n}\n\n\n\n\n\nseapp_context_lookup\n \u8fd9\u4e2a\u51fd\u6570\u7684\u4efb\u52a1\u5c31\u662f\u6839\u636e\u53c2\u6570\u627e\u5230\u5bf9\u5e94\u8be5app/server\u7684\u89c4\u5219\uff0c\u7136\u540e\u8bbe\u7f6e\u5b89\u5168\u4e0a\u4e0b\u6587\u3002\u5982\u679c\u60f3\u8be6\u7ec6\u4e86\u89e3\u67e5\u627e\u89c4\u5219\uff0c \u53ef\u4ee5\u770b\u4e0b\u5177\u4f53\u5b9e\u73b0\u3002\u4e0b\u9762\u7b80\u5355\u4ecb\u7ecd\u4e0b\uff0c\u5bf9\u4e8e\u7531zygote\u521b\u5efa\u7684app/server\u7684\u89c4\u5219\u6587\u4ef6\u3002\n\n\n\u8be5\u51fd\u6570\u662f\u57fa\u4e8e\u6587\u4ef6 external/sepolicy/seapp_contexts \u67e5\u627e\u5bf9\u5e94\u5e94\u7528\u7684\u8fdb\u7a0b\u57df\u548c\u6587\u4ef6type\u3002\n\n\n isSystemServer=true domain=system_server\n user=system domain=system_app type=system_app_data_file\n user=bluetooth domain=bluetooth type=bluetooth_data_file\n user=nfc domain=nfc type=nfc_data_file\n user=radio domain=radio type=radio_data_file\n user=shared_relro domain=shared_relro\n user=shell domain=shell type=shell_data_file\n user=_isolated domain=isolated_app\n user=_app seinfo=platform domain=platform_app type=app_data_file\n user=_app domain=untrusted_app type=app_data_file\n\n\n\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c \u5982\u679c isSystemServer \u4e3a true\uff0c \u5219domain\u4e3a\nsystem_server\n\u3002 \u5982\u679cuser\u662f\n_app\n\uff0c \u5e76\u4e14\u7b7e\u540d\u662fplatform\uff08\u4ece\u6e90\u7801\u7f16\u8bd1\u7684\u5e94\u7528\uff09\uff0c \u5219domain\u662f\nplatform_app\n\uff0c \u5bf9\u5e94\u7684\u6587\u4ef6type\u4e3a\napp_data_file\n\u3002 \u5982\u679c\u662f\u7b2c\u4e09\u65b9\u5e94\u7528\uff0c user\u4e5f\u4e3a\n_app\n\uff0c \u4f46\u56e0\u4e3a\u4e0d\u6ee1\u8db3platform\u7b7e\u540d\uff0c\u6240\u4ee5\uff0c \u57df\u662f\nuntrusted_app\n\u3002\u9664\u4e86user\u56fa\u5b9a\uff0c\u5176\u4f59\u7684\u5b57\u6bb5\u90fd\u662f\u5b57\u7b26\u4e32\uff0c\u53ea\u8981\u5339\u914d\u5c31\u884c\u3002\u6bd4\u5982domain\u8981\u8ddfxx.te\u4e2d\u7684\u5339\u914d\uff0c type\u540c\u7406\u3002seinfo\u53ea\u8981\u8ddf\u540e\u6587\u7684\nmac_permissions.xml\n\u5339\u914d\u3002\n\n\n\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u51fa\u73b0\u4e86seinfo\uff0c \u8fd9\u4e2a\u4fe1\u606f\u662f\u5b58\u653e\u5728external/sepolicy/mac_permissions.xml, \u5185\u5bb9\u5982\u4e0b\u3002\u5b9a\u4e49\u4e86\u7b7e\u540d\u7684key\u4e0eseinfo\u503c\u7684\u5173\u7cfb\u3002\n\n\npolicy\n\n    \n!-- Platform dev key in AOSP --\n\n    \nsigner\n \nsignature=\n@PLATFORM\n\n      \nseinfo\n \nvalue=\nplatform\n/\n\n    \n/signer\n\n    \n!-- All other keys --\n\n    \ndefault\n\n      \nseinfo\n \nvalue=\ndefault\n/\n\n    \n/default\n\n\n/policy\n\n\n\n\n\n\n\u8be5\u6587\u4ef6\u662f\u7531pkms\u8bfb\u53d6\uff0c\u5e76\u5728\u5b89\u88c5\u5e94\u7528\u65f6\uff0c\u7acb\u5373\u7ed9\u88ab\u5b89\u88c5\u7684\u5e94\u7528\u5206\u914dseinfo\u4fe1\u606f\u3002\u4e0a\u9762\u7684\u53ea\u662f\u4e00\u4e2a\u7248\u672c\uff0c\u7b80\u5355\u770b\u4e86\u4e0bpkms\u7684\u5b9e\u73b0\uff0c \u53ef\u4ee5\u505a\u5230\u5982\u4e0b\u7684\u65b9\u5f0f\uff1a\n\n\npolicy\n\n    \n!-- Platform dev key in AOSP --\n\n    \nsigner\n \nsignature=\n@PLATFORM\n\n       \npackage\n \nname=\ncom.abc.d\n\n         \nseinfo\n \nvalue=\nplatform\n/\n\n       \n/package\n\n    \n/signer\n\n    \n!-- All other keys --\n\n    \ndefault\n\n      \nseinfo\n \nvalue=\ndefault\n/\n\n    \n/default\n\n\n/policy\n\n\n\n\n\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c \u65e2\u53ef\u4ee5\u57fa\u4e8e\u7b7e\u540d\uff0c \u4e5f\u53ef\u4ee5\u66f4\u8be6\u7ec6\u7684\u6839\u636e\u5305\u540d\uff0c\u518d\u6307\u5b9a\u66f4\u7ec6\u81f4\u7684seinfo\u5206\u7c7b\u3002\u5f53\u7136\u5fc5\u987b\u5728\nseapp_contexts\n\u4e2d\u6dfb\u52a0\u76f8\u5e94\u7684\u89c4\u5219\uff0c\u5e76\u4e14\u53c2\u8003\nsystem_server.te\n\u6dfb\u52a0\u5bf9\u5e94\u57df\u7684\u6743\u9650\u63a7\u5236\u3002\n\n\n\u4ee5\u4e0a\nseapp_contexts\n\u4e2ddomain\u7684\u503c\uff0c\u90fd\u53ef\u4ee5\u5728external/sepolicy/xxx.te \u4e2d\u627e\u5230\uff0c \u8be6\u7ec6\u7684\u53ef\u4ee5\u81ea\u884c\u67e5\u770b\u3002\n\n\n\u5bf9\u4e8e\u65b0\u6dfb\u52a0\u7684\u4e00\u4e2a\u5e94\u7528\uff0c\u5c31\u53ef\u4ee5\u57fa\u4e8e\u4ee5\u4e0a\u4fe1\u606f\uff0c\u901a\u8fc7pkms\u6dfb\u52a0\u76f8\u5e94\u89c4\u5219\u3002\n\n\n\u4f46\u662f\u5bf9\u4e8e\u65b0\u6dfb\u52a0\u4e00\u4e2a\u670d\u52a1\uff0c \u5219\u9700\u8981\u5728external/sepolicy/service_context.te \u6216\u8005 external/sepolicy/service.te \u4e2d\u6dfb\u52a0\u5728\nservice_manager\n\u6ce8\u518c\u7684\u540d\u5b57\u548c\u5bf9\u5e94\u7684\u57df/\u7c7b\u578b\uff0c \u5426\u5219\nservice_manager\n\u4f1a\u62d2\u7edd\u6ce8\u518c\u3002\u540c\u6837\uff0c\u5982\u679c\u4e0d\u5c06\u65b0\u6dfb\u52a0\u7684\u670d\u52a1\u5173\u8054\u5230\nservice_manager_type\n\u4e2d\uff0c \u5c31\u65e0\u6cd5\u88ab\u67e5\u627e\u548c\u83b7\u53d6\u3002\n\n\n# external/sepolicy/service.te\n\n type surfaceflinger_service,    service_manager_type;\n type system_app_service,        service_manager_type;\n type system_server_service,     service_manager_type;\n\n\n\n\n\n\u5c06\u4e0d\u540c\u7684type\u90fd\u8ddf\nservice_manager_type\n\u5c5e\u6027\u5173\u8054\uff0c \u540e\u9762\u4f1a\u4f7f\u7528\u8be5\u5c5e\u6027\u8fdb\u884c\u6743\u9650\u63a7\u5236\u3002\n\n\n# external/sepolicy/service_contexts\nSurfaceFlinger                            u:object_r:surfaceflinger_service:s0\ndisplay.qservice                          u:object_r:surfaceflinger_service:s0\nwindow                                    u:object_r:system_server_service:s0\n*                                         u:object_r:default_android_service:s0\n\n\n\n\n\n\u8fd9\u4e2a\u6587\u4ef6\u7684\u89c4\u5219\u4e0efile_contexts\u7c7b\u4f3c\uff0c\u5173\u8054\u4e86\u670d\u52a1\u4e0e{user\uff0c role\uff0c type\uff0c level}\u3002\u6700\u540e * \u662f\u5339\u914d\u6240\u6709\u4ee5\u4e0a\u89c4\u5219\u65e0\u6cd5\u5339\u914d\u7684\u670d\u52a1\uff0c \u5176type\u4e3a default_android_service\u3002\n\n\n\u4e0b\u9762\u6211\u4eec\u770b\u4e0b\uff0c\nservice_manager\n\u7684\u6743\u9650\u63a7\u5236\u3002\n\n\n#\n \ndomain\n.\nte\n\n\n#\n \n\u4e0d\u5141\u8bb8\nservice_manager\n\u5bf9\ndefault_android_service\n\u5c5e\u6027\u7684\u670d\u52a1\u6267\u884c\nadd\n\u64cd\u4f5c\u3002\u975e\u89c4\u5219\uff0c\u7f16\u8bd1\u4fdd\u62a4\u3002\n\n\nneverallow\n \ndomain\n \ndefault_android_service\n:\nservice_manager\n \nadd\n;\n\n\n\n#\n \n\u5141\u8bb8\ndomain\n\u57df\u7684\u8fdb\u7a0b\u8bf7\u6c42\nservice_manager\n\u6267\u884c\nfind\n\u64cd\u4f5c\u3002\n\n\nallow\n \ndomain\n \nservice_manager_type\n:\nservice_manager\n \nfind\n;\n\n\n\n\n\n\n\u6211\u4eec\u524d\u9762\u7684\u4f8b\u5b50\u770b\u5230\uff0c \u6bcf\u4e2ate\u89c4\u5219\u6587\u4ef6\u5f00\u5934\u90fd\u4f1a\u628a\u8be5\u7c7b\u578b\u4e0edomain\u57df\u5173\u8054\uff0c\u6240\u4ee5\uff0c\u5b9e\u9645\u4e0a\uff0c\u8fd9\u91cc\u662f\u5141\u8bb8\u4e86\u6240\u6709\u6709\u89c4\u5219\u7684\u8fdb\u7a0b\u8bf7\u6c42\nservice_manager\n\u64cd\u4f5c\u3002\u8be5object class \u548c \nperm_set\n\uff0c \u662fandroid\u65b0\u6dfb\u52a0\u7684\uff0c\u5728\u524d\u6587\u63d0\u5230\u5c5e\u4e8euserspace\uff0c \u5728service manager\u7684\u4ee3\u7801\u4e2d\uff0c \nsvc_can_xxx\n \u51fd\u6570\u5c31\u662f\u5728\u7528\u6237\u5c42\u68c0\u67e5\u8be5\u89c4\u5219\u662f\u5426\u6ee1\u8db3\u3002\u672a\u4ed4\u7ec6\u7814\u7a76\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u770b\u4e0b\u3002\n\n\n\u4e0a\u9762\u4ecb\u7ecd\u4e86\u521b\u5efa\u8fdb\u7a0b\u548cDT, \u662f\u9488\u5bf9\u8fdb\u7a0b\u7684,\u4e0b\u9762\u4ecb\u7ecd\u4e0b\nTT\n,\u9488\u5bf9\u6587\u4ef6\u7684,\u540c\u6837\u5728\u521b\u5efa\u6587\u4ef6\u7684\u65f6\u5019,\u9700\u8981\u6307\u5b9atype.\u540c\u6837\u7528\u5230\u7684\u4e5f\u662f\ntype_transition\n.\n\n\ndefine\n(\n`\nfile_type_trans\n, `\n\n\n# Allow the domain to add entries to the directory.\n\n\nallow $1 $2:dir ra_dir_perms;\n\n\n# Allow the domain to create the file.\n\n\nallow $1 $3:notdevfile_class_set create_file_perms;\n\n\nallow $1 $3:dir create_dir_perms;\n\n\n)\n\n\n\n \n#####################################\n\n \n#\n \nfile_type_auto_trans\n(\ndomain\n,\n \ndir_type\n,\n \nfile_type\n)\n\n \n#\n \nAutomatically\n \nlabel\n \nnew\n \nfiles\n \nwith\n \nfile_type\n \nwhen\n\n \n#\n \nthey\n \nare\n \ncreated\n \nby\n \ndomain\n \nin\n \ndirectories\n \nlabeled\n \ndir_type\n.\n\n \n#\n\n \ndefine\n(\n`\nfile_type_auto_trans\n, `\n\n\n # Allow the necessary permissions.\n\n\n file_type_trans($1, $2, $3)\n\n\n # Make the transition occur by default.\n\n\n type_transition $1 $2:dir $3;\n\n\n type_transition $1 $2:notdevfile_class_set $3;\n\n\n \n)\n\n\n\n\n\n\n\u5339\u914d\u8fdb\u7a0b\u7684domain\u548c\u76ee\u5f55\u7684type\u7684\u60c5\u51b5\u4e0b\u6240\u521b\u5efa\u7684\u6587\u4ef6,\u5176SContext(\u5b89\u5168\u4e0a\u4e0b\u6587)\u5c31\u4f1a\u88ab\u6307\u5b9a\u4e3a\nfile_type\n. android\u4e2d\u5e76\u6ca1\u6709\u5728\u4f7f\u7528\u8fd9\u4e24\u4e2a\u5b8f,\u4e5f\u5c31\u662f\u8bf4\u4f7f\u7528\u4e86\u9ed8\u8ba4\u7684\u89c4\u5219, \u4e5f\u5c31\u662f\u7ee7\u627f\u7236\u76ee\u5f55\u7684SContext.\u4e0a\u6587\u7684filesystem\u6253\u6807\u7b7e\u4e2d\u63d0\u5230\u8fc7TT\uff0c\ngenfscon\n\u80fd\u591f\u7981\u5236TT\u89c4\u5219\uff0c\u5f3a\u5236\u5c06\u6240\u6709\u6587\u4ef6\u7684SContext\u6307\u5b9a\u4e3a\u9700\u8981\u7684\u3002\u8fd8\u6709\u4e00\u4e2a\nfs_use_trans\n\uff0c \u5176\u9ed8\u8ba4\u89c4\u5219\u4e0d\u662f\u7ee7\u627f\u7236\u76ee\u5f55\u7684\u89c4\u5219\uff0c\u800c\u662f\u7ee7\u627f\u6587\u4ef6\u7cfb\u7edf\u7684\u89c4\u5219\u3002\n\u6587\u4ef6\u7cfb\u7edf\u6807\u7b7e\u521d\u59cb\u5316\n.\n\n\nMLS(Multi-level Security)\n\n\n\u8fd9\u4e1c\u897f\u4e0d\u597d\u7406\u89e3\uff0c\u3000\u5728android\u4e2d\uff0c\u57fa\u672c\u4e5f\u4e0d\u4f1a\u6539\uff0c\u3000\u628a\u6211\u7684\u7406\u89e3\u7b80\u5355\u4ecb\u7ecd\u4e0b\uff0e\u5b89\u5168\u5206\u7ea7\u5c31\u8ddf\u4fdd\u5bc6\u5206\u7ea7\u4e00\u6837\uff0c\u5bf9\u4e3b\u52a8\u5355\u5143\u548c\u88ab\u52a8\u5355\u5143\u90fd\u6709\u76f8\u540c\u7684\u5206\u7ea7\uff0e\u800c\u9ad8\u7ea7\u522b\u7684\u4e3b\u52a8\u5355\u5143\u53ef\u4ee5\u8bfb\u53d6\u4f4e\u7ea7\u522b\u7684\u88ab\u52a8\u5355\u5143\uff0c\u4f46\u4e0d\u5141\u8bb8\u5f80\u5730\u7ea7\u522b\u7684\u88ab\u52a8\u5355\u5143\u5199\u6570\u636e\uff0c\u9632\u6b62\u6cc4\u5bc6\uff0e\u800c\u4f4e\u7ea7\u522b\u7684\u4e3b\u52a8\u5355\u5143\u53ef\u4ee5\u5f80\u9ad8\u7ea7\u522b\u7684\u88ab\u52a8\u5355\u5143\u5199\u6570\u636e\u4f46\u4e0d\u80fd\u8bfb\u53d6\u9ad8\u7ea7\u522b\u88ab\u52a8\u5355\u5143\uff0e\u5f62\u8c61\u70b9\u63cf\u8ff0\u5c31\u662f no write down \u548c\u3000no read up.\n\n\n\u6211\u4eec\u6765\u770b\u4e2a\u683c\u5f0f\uff0c\u5728\u672a\u542f\u7528MLS\u548c\u542f\u7528\u4e86MLS\u7684SContext\u683c\u5f0f\u5dee\u5f02\uff1a\n\n\n# \u672a\u542f\u7528MLS\nuser_u:role_r:type_t\n\n# \u542f\u7528\u4e86MLS\n# - \u8868\u793a\u8303\u56f4\n# \u5de6\u4fa7\uff0c\u6211\u4eec\u79f0\u4e3a\u6700\u4f4e\u5b89\u5168\u7ea7\u522b\uff0c\u4e5f\u662f\u5f53\u524d\u4e3b\u52a8\u5355\u5143\uff0f\u88ab\u52a8\u5355\u5143\u7684\u7ea7\u522b\n# \u53f3\u4fa7\uff0c\u6211\u4eec\u79f0\u4e3a\u6700\u9ad8\u5b89\u5168\u7ea7\u522b\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u4e3b\u52a8\u5355\u5143\uff0f\u88ab\u52a8\u5355\u5143\u53ef\u80fd\u83b7\u5f97\u7684\u6700\u9ad8\u7ea7\u522b\nuser_u:role_r:type_t:sensitivity[:category...]-sensitivity[:category...]\n\n\n\n\n\n\u7ed3\u5408\u5f00\u5934\u7684\u4f8b\u5b50\uff0candroid\u662f\u542f\u7528\u4e86MLS\uff0c\u4f46\u662f\uff0c\u5982\u679c\u628a\u6240\u6709\u7684\u89c4\u5219\u8fc7\u4e00\u904d\uff0c\u5c31\u4f1a\u53d1\u73b0\u6240\u6709\u7684sensitivity\u90fd\u4e3as0,\u3000\u6240\u4ee5\uff0c\u867d\u7136\u542f\u7528\u4e86\uff0c\u4f46\u5e76\u6ca1\u6709\u5206\u7ea7, \u4e5f\u6ca1\u6709\u5206\u7c7b(category)\uff0e\u3000\u6240\u4ee5\uff0c\u3000\u5173\u4e8e\u8fd9\u5757\uff0c\u6211\u4eec\u4e5f\u662f\u7b80\u5355\u4ecb\u7ecd\u4e0b\uff0c\u53ef\u80fd\u6709\u7406\u89e3\u4e0d\u5230\u4f4d\uff0e\n\n\n\u5982\u679c\u51fa\u73b0\u5206\u7ea7\u548c\u5206\u7c7b\uff0c\u3000\u4f1a\u4f7f\u7528 level\u3000\u5173\u952e\u5b57\u5b9a\u4e49:\n\n\nlevel s0:c0.c255  #\u8868\u793as0, category\u4ecec0\u4e00\u76f4\u5230c255\n\n\n\n\n\n\u5206\u7ea7\u6709\u9ad8\u4f4e\uff0c s0 \n s1\uff0c\u3000\u5206\u7c7b\u6ca1\u6709\u9ad8\u4f4e\uff0c\u53ea\u6709\u5305\u542b\uff0c\u3000\u6bd4\u5982 c0.c255\u3000\u5305\u542b c10.c25. \u4e2a\u4eba\u611f\u89c9\u8fd9\u5757\u7684\u529f\u80fd\u662f\u5bf9Role\u7684\u5f3a\u5316\uff0c\u3000\u66f4\u7ec6\u81f4\u7684\u9636\u7ea7\u5173\u7cfb\uff0e\n\n\n\u4e0b\u9762\u770b\u4e2a\u4f8b\u5b50\u6765\u8f85\u52a9\u7406\u89e3\uff0e\n\n\n # Datagram send: Sender must be dominated by receiver unless one of them is\n # trusted.\n mlsconstrain unix_dgram_socket { sendto }\n          (l1 domby l2 or t1 == mlstrustedsubject or t2 == mlstrustedsubject);\n# mlstrustedsubject \u662fattribute\n\n\n\n\n\n\u9996\u5148\uff0candroid\u4e2d\u4e3b\u8981\u7528\u5230\u4e86mlsconstrain, \u5176\u8bed\u6cd5\u5982\u4e0b\uff0c\u3000\u4e0econstrain\u4e00\u6837\uff1a\n\n\nmlsconstrain object_class perm_set expression\n\n\n\n\n\nexpression\u6709u1, u2, r1, r2, t1, t2, l1, l2, h1, h2 \u8ddfRole\u7684\u6743\u9650\u63a7\u5236\u5f88\u50cf, \u53ea\u662f\u591a\u4e86l1, l2, h1, h2\uff1a\n\n\n\n\n\n\nl1, h1, \u8868\u793asource\u7684low sensitivity level, high sensitivity level\n\n\n\n\n\n\nl2, h2, \u8868\u793atarget\u7684low sensitivity level, high sensitivity level\n\n\n\n\n\n\n\u5173\u7cfb\uff1a\n\n\n\n\n\n\ndom: l1 dom l2, \u8868\u793al1 sensitivity \n= l2 sensitivity, l1\u7684category\u5305\u542bl2\u7684category\n\n\n\n\n\n\ndomby: \u8ddfdom\u76f8\u53cd\n\n\n\n\n\n\neq: sensitivity \u76f8\u7b49\uff0c\u3000category\u3000\u76f8\u7b49\n\n\n\n\n\n\nincomp: \u4e0d\u53ef\u6bd4\uff0e\u5177\u4f53\u542b\u4e49\u672a\u77e5...\n\n\n\n\n\n\n\u89c4\u5219\u6587\u4ef6\u5173\u7cfb\u603b\u7ed3\n\n\nfile_contexts\n: \u5173\u8054\u6587\u4ef6\u7cfb\u7edf\u4e0a\u6587\u4ef6\u4e0etype\uff0c \u6216\u8005\u8bf4\uff0c\u6307\u5b9a\u6587\u4ef6\u5c5e\u4e8e\u67d0\u4e2atype\u3002\u88ab\u52a8\u5355\u5143\u7684scontext\u3002\u6bd4\u5982\uff1a\n\n\n# netd\u5c5e\u4e8enetd_exec\u3002\u6240\u6709\u8981\u6267\u884cnetd\u8fdb\u7a0b\u7684\u7a0b\u5e8f\u5fc5\u987b\u7533\u8bf7 netd_exec \u7684 execute \u6743\u9650\u3002\n\n/system/bin/netd    u:object_r:netd_exec:s0\n\n\n\n\n\n*.te\n: TE\u6743\u9650\u89c4\u5219\u6587\u4ef6\u3002\u6307\u5b9a\u4e86\u6bcf\u4e2adomain\u7684\u6743\u9650\uff0c\u540c\u65f6\u4e5f\u6307\u5b9a\u4e86\u4e0d\u540cdomain\u7684\u5165\u53e3\u3002\u6bd4\u5982\u4e0a\u6587\u63d0\u5230\u7684\ninit_daemon_domain\n, \u5c31\u6307\u5b9a\u4e86\u5bf9\u5e94domain\u7684\u5165\u53e3\u4e3a\u67d0\u4e2atype\u3002\u51e0\u4e4e\u6240\u6709\u8be5\u6587\u4ef6\u7684\u5f00\u5934\u90fd\u4f1a\u4e0edomain\u5173\u8054\uff0c \u4e5f\u5c31\u662f\u8bf4\u90fd\u5c5e\u4e8edomain\u8fd9\u4e2a\u5c5e\u6027\u3002\n\n\n#\n \n\u6307\u5b9a\u4e86\ndomain\n\u4e3a\nshell\n\u7684\u5165\u53e3\u662f\nshell_exec\n\uff0c\n \n\u4e5f\u5c31\u662f\u7ed1\u5b9a\u4e86\ntype\n\u548c\ndomain\n\u7684\u5173\u7cfb\u3002\n\n\nallow\n \nshell\n \nshell_exec\n:\nfile\n \n{\n \nentrypoint\n \nexecute\n \n}\n;\n\n\n\n\n\n\n\n\n\u4ece\u4e0a\u9762\u4e24\u7c7b\u6587\u4ef6\uff0c\u5c31\u8bf4\u660e\u4e86\u6307\u5b9a\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u548c\u5bf9\u5e94\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\u662f\u5982\u4f55\u5173\u8054\u7684\u3002\u6240\u4ee5\uff0c \u5982\u679c\u65b0\u6dfb\u52a0\u8fdb\u7a0b\uff0c \u5fc5\u987b\u52a8\u4e0a\u9762\u63d0\u5230\u7684\u6587\u4ef6\uff0c \u624d\u80fd\u6b63\u786e\u8bbe\u7f6e\u6307\u5b9a\u8fdb\u7a0b\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\u3002\n\n\n\n\nmac_permissions.xml\n\uff1a pkms\u89e3\u6790\u7684\u6587\u4ef6\uff0c\u63cf\u8ff0\u4e86seinfo\u5b57\u6bb5\u4e0e\u7b7e\u540d/\u5305\u540d\u7684\u5173\u7cfb\u3002\n\n\nseapp_contexts\n\uff1a zygote\u89e3\u6790\uff0c \u7528\u4e8e\u6839\u636euser\u548cseinfo\uff0c \u786e\u5b9a\u5e94\u7528\u6216\u7cfb\u7edf\u670d\u52a1\u7684domain\u548ctype\u3002\n\n\n\u6240\u4ee5\uff0c \u5bf9\u4e8e\u6709\u7279\u6b8a\u6743\u9650\u9700\u6c42\u7684\u5e94\u7528\uff0c \u9700\u8981\u540c\u65f6\u589e\u52a0\u4e0a\u9762\u4e24\u4e2a\u6587\u4ef6\uff0c\u5f53\u7136TE\u7684\u89c4\u5219\uff0c\u9700\u8981\u4fee\u6539\u6216\u589e\u52a0te\u6587\u4ef6\u3002\n\n\n\n\nservice_contexts\n\uff1a \u7c7b\u4f3c\nfile_contexts\n\u6587\u4ef6\uff0c \u5173\u8054\u4e86android\u7cfb\u7edf\u7684\u670d\u52a1\u4e0etype\u3002 \u8be5\u6587\u4ef6\u7684\u5185\u5bb9\u7531service manager\u5728\u8fd0\u884c\u65f6\u901a\u8fc7selinux\u7684\u63a5\u53e3\u52a8\u6001\u68c0\u67e5\u6743\u9650\u3002\n\n\nservice.te\n: \u5c06\u4e0d\u540c\u7c7b\u578b\u7684\u670d\u52a1\u4e0e\nservice_manager_type\n \u5173\u8054\u3002\n\n\n\u5982\u679c\u65b0\u6dfb\u52a0framework\u7684\u670d\u52a1\uff0c \u5fc5\u987b\u4fee\u6539\u8fd9\u4e24\u4e2a\u6587\u4ef6\uff0c\u5426\u5219\u65e0\u6cd5\u6ce8\u518cservice manager\uff0c \u65e0\u6cd5\u88ab\u83b7\u53d6bp\u3002\n\n\n\n\nfile.te\n\u3000\u6240\u6709\u8ddf\u6587\u4ef6\u548c\u6587\u4ef6\u7cfb\u7edf\u76f8\u5173\u7684\u5206\u7ec4\u7684\u6807\u7b7e(type).\u5982\u679c\u6d89\u53ca\u5230\u65b0\u6dfb\u52a0\u6587\u4ef6\u7cfb\u7edf\u6216\u8005\u65b0\u7684/data/\u5e95\u4e0b\u76ee\u5f55\u6743\u9650\uff0c\u5efa\u8bae\u5728\u8fd9\u4e2a\u6587\u4ef6\u91cc\u5c06\u5176\u4e0e\u76f8\u5173\u7684type\u5173\u8054\uff0c\u5426\u5219\u53ef\u80fd\u5bfc\u81f4\u67d0\u4e9b\u7cfb\u7edf\u670d\u52a1\u65e0\u6cd5\u8bbf\u95ee\u6216\u8005\u6587\u4ef6\u65e0\u6cd5\u521b\u5efa\u3002\n\n\n\n\ntools/\n \u4e00\u4e9b\u68c0\u67e5\u548c\u5206\u6790\u5de5\u5177\uff0c \u90fd\u662f\u57fa\u4e8e\u8bed\u6cd5\u7c7b\u7684\uff0c\u8fd8\u6709\u51e0\u4e2a\u662f\u9488\u5bf9\u5e94\u7528\u7684\u89c4\u5219\u751f\u6210\u548c\u7f16\u8f91\u5de5\u5177\uff0c\u672a\u7814\u7a76\u4ee3\u7801\u3002\n\n\ndevice \u76f8\u5173sepolicy\u4fee\u6539\u7684\u65b9\u6cd5\n\n\n\u8def\u5f84\uff1a \u7531 BoardConfig.mk \u4e2d\u7684 BOARD_SEPOLICY_DIRS \u5b9a\u4e49\n\n\n\u6587\u4ef6\uff1a \u7531 BoardConfig.mk \u4e2d\u7684 BOARD_SEPOLICY_UNION\n\n\ndevice\u5e95\u4e0b\u7684sepolicy\u4e0d\u662foverlay\uff0c \u800c\u662f\u4f1a\u4e0eexternal/sepolicy\u7684\u89c4\u5219\u5408\u5e76\u3002 \u6240\u4ee5\uff0c \u53ef\u4ee5\u5728device\u5e95\u4e0b\u521b\u5efa\u540c\u540d\u6587\u4ef6\uff0c\u6dfb\u52a0\u8bbe\u5907\u76f8\u5173\u7684\u89c4\u5219\u3002\n\n\n\u6bd4\u5982\uff0c \u6dfb\u52a0vold.te\uff0c \u5185\u5bb9\u5982\u4e0b\uff0c \u8d4b\u4e88vold\u7c7b\u578b\u7684\u8fdb\u7a0b\u6267\u884cntfs3g_exec\u7c7b\u578b\u7684\u7a0b\u5e8f\uff0c\u5e76\u81ea\u52a8\u5207\u6362domain\u3002\uff08ntfs3g_exec\u7c7b\u578b\u548cdomain\u5728\u540e\u9762\u4ecb\u7ecd\uff09\n\n\n \ndomain_auto_trans\n(\nvold\n,\n \nntfs3g_exec\n,\n \nntfs3g\n)\n\n \nallow\n \nvold\n \nntfs3g_exec\n:\nfile\n \nrx_file_perms\n;\n\n\n\n\n\n\n\u5982\u679c\u662f\u65b0\u6dfb\u52a0\u8fdb\u7a0b\u548csepolicy\uff0c \u5219\u989d\u5916\u9700\u8981\u5728file_context\u4e2d\u5c06\u53ef\u6267\u884c\u7a0b\u5e8f\u548ctype\u7ed1\u5b9a\u3002\n\n\n# device/s3graphics/zx2000/sepolicy/file_contexts\n/system/bin/ntfs-3g u:object_r:ntfs3g_exec:s0\n\n\n\n\n\nSELinux \u7684\u8c03\u8bd5\u548c\u9519\u8bef\u5206\u6790\u8bf4\u660e\n\n\n\u7b2c\u4e09\u65b9\u5de5\u5177\uff1a \napol\n , \u7528\u4e8e\u5206\u6790\u6700\u7ec8\u751f\u6210\u7684sepolicy\u3002\n\n\n\n\nexternal/sepolicy/tools \u4e0b\u9762\u6709\u4e00\u4e9b\u5de5\u5177\uff0c\u4f46\u7f3a\u5c11\u4f7f\u7528\u6587\u6863\uff0c\u53ef\u4ee5\u770b\u6e90\u7801\u7814\u7a76\u3002\n\n\n\n\n\u5bf9\u4e8e\u7531\u4e8eselinux\u7684\u6743\u9650\u95ee\u9898\u5bfc\u81f4\u8fd0\u884c\u5f02\u5e38\uff0c\u53ef\u4ee5\u5728\u5bf9\u5e94\u7684te\u6587\u4ef6\u4e2d\u52a0\u5165\u5982\u4e0b\u5185\u5bb9, \u5c06\u5bf9\u5e94\u8fdb\u7a0b\u8bbe\u7f6e\u4e3apermissive\uff0c\u5728\u8fd0\u884c\u540e\uff0c\u7ec8\u7aef\u4f1a\u8f93\u51fa\u6240\u6709selinux\u7684\u8b66\u544a\uff0c\u4f46\u7a0b\u5e8f\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002\u57fa\u4e8e\u9501\u8f93\u51fa\u7684\u8b66\u544a\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u89c4\u5219\u3002\n\n\npermissive $domain;\n\n\n\n\n\ntype=1400 audit(946684810.610:4): avc: denied { write } for pid=707 comm=\nm.coship.hotkey\n name=\nproperty_service\n dev=\ntmpfs\n ino=7244 scontext=u:r:platform_app:s0 tcontext=u:object_r:property_socket:s0 tclass=sock_file permissive=1\n\n\n\n\n\nperm_set\n \u4e3a \n{ write }\n\uff0c \u7a0b\u5e8f\u4e3a\nm.coship.hotkey\n\uff0c \ntarget class\n\u4e3a \nsock_file\n\uff0c\nsource context\n\u4e3a \nu:r:platform_app:s0\n\uff0c \ntarget context\n\u4e3a \nu:object_r:property_socket:s0\n\n\n\u4e0a\u9762\u5c06TE\u89c4\u5219\u76844\u4e2a\u76f8\u5173\u5b57\u6bb5\u90fd\u5206\u6790\u4e86\uff0c \u53ea\u8981\u6dfb\u52a0\u76f8\u5e94\u7684\u89c4\u5219\u5c31\u884c\u3002\u770b\u4e0b\u9762te\u89c4\u5219\u3002\n\n\n#\n \n-\n \n\u662f\u6392\u9664\u7684\u610f\u601d\n\n\n#\n \n\u4e0d\u5408\u9002\u7684\u6539\u6cd5\uff1a\n \n\u6dfb\u52a0\n \n-platform_app\n\u3002\n \n\u7136\u540e\u518d\u6dfb\u52a0\n \nallow\n \nplatfor_app\n \nproperty_socket\n:\nsock_file\n \nwrite\n\uff1b\n\n \nneverallow\n \n{\n \nappdomain\n \n-bluetooth\n \n-radio\n \n-shell\n \n-system_app\n \n-nfc\n \n}\n\n     \nproperty_socket\n:\nsock_file\n \nwrite\n;\n\n\n\n\n\n\n\u4e0d\u8fc7\uff0c\u8fd9\u4e2a\u9519\u8bef\u7531\u4e8e\u662fapp\uff0c \u6240\u4ee5\uff0c\u4e0d\u9002\u5408\u76f4\u63a5\u6dfb\u52a0\u5230\nplatform_app\n\u8fd9\u4e2a\u57df\uff0c \u56e0\u4e3a\u4f1a\u5bf9\u6240\u6709\u4ece\u6e90\u7801\u7f16\u8bd1\u7684\u5e94\u7528\u4ea7\u751f\u5f71\u54cd\u3002\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u989d\u5916\u8bbe\u7f6e\u4e00\u4e2aseinfo\u3002\n\n\n\n\n\u5982\u679cSContext\u4e2d\u51fa\u73b0\nunlabeled\n\uff0c \u5219\u8868\u9762\u8be5\u6587\u4ef6/\u76ee\u5f55/\u6587\u4ef6\u7cfb\u7edf\u672a\u6253\u6807\u7b7e\uff0c\u53c2\u8003\u4ee5\u4e0a\u4ecb\u7ecd\u5728\u5bf9\u5e94\u6587\u4ef6\u5185\u6dfb\u52a0\u6807\u7b7e\u3002\n\n\n\n\n\u5982\u679c\u662f\u4fee\u6539\u6253\u6807\u7b7e\u7684\u6587\u4ef6\uff0c\u7f16\u8bd1\u540e\uff0csystem.img\u9700\u8981\u91cd\u65b0\u5237\uff0c\u5982\u679c\u662f\u4fee\u6539TE\u7684\u89c4\u5219\u6587\u4ef6\uff0c\u7f16\u8bd1\u540e\uff0c\u53ea\u9700\u8981\u91cd\u65b0\u5237boot.img\n\n\n\u5b9e\u9645\u9879\u76ee\u4e2d\u9047\u5230\u7684\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848\n\n\n\n\n\u5728Android\u4e2d, \u7406\u8bba\u4e0a\u683c\u5f0f\u5316\u5206\u533a\u4f1a\u5bfc\u81f4\u6240\u6709\u6587\u4ef6\u7684scontex\u76f8\u5173\u4fe1\u606f\u4e22\u5931, \u800c\u5982\u679c\u9700\u6062\u590d(\u6bd4\u5982\u683c\u5f0f\u5316userdata\u540e), \u9700\u8981\u5728init.rc\u4e2d\u663e\u793a\u8c03\u7528\nrestorecon_recursive\n, \u4ee5\u6062\u590d\u6307\u5b9a\u76ee\u5f55\u7684secontext.\n\n\n\u4e0a\u6587\u53ea\u63d0\u5230\u4e86Android\u4e2d\u7684\u5e38\u89c1labeling\u65b9\u6cd5, \u5728\u5b9e\u9645\u9879\u76ee\u4e2d, \u51fa\u73b0\u4e86\u9700\u8981\u5bf9ext4\u6587\u4ef6\u7cfb\u7edf\u7b49\u7684\u5916\u90e8\u5b58\u50a8\u6302\u8f7d\u5e76\u63a7\u5236\u6743\u9650. \u9700\u8981\u52a8\u6001\u5730\u6307\u5b9asecontex, \u8fd9\u91cc\u5c31\u4f7f\u7528\u4e86 mountpoint labeling \u65b9\u6cd5(\u76f4\u63a5google\u8be5\u5173\u952e\u5b57). \u5176\u4f7f\u7528\u573a\u666f\u662f\u540c\u4e00\u6587\u4ef6\u7cfb\u7edf\u5728\u4e0d\u540c\u6302\u8f7d\u70b9\u53ef\u4ee5\u6709\u4e0d\u540c\u7684secontext.\u76f8\u5173\u4ee3\u7801\u5982\u4e0b:\n\n\n\n\nint\n \nExt\n::\ndoMount\n(\nconst\n \nchar\n \n*\nfsPath\n,\n \nconst\n \nchar\n \n*\nfstype\n,\n \nconst\n \nchar\n \n*\nmountPoint\n,\n\n                 \nunsigned\n \nlong\n \nfsFlags\n,\n \nint\n \nownerUid\n,\n \nint\n \nownerGid\n,\n \nint\n \npermMask\n)\n\n\n{\n\n    \nint\n \nrc\n;\n\n    \n//\n \nlabeling\n \nmountpoint\n \nfor\n \next\n \nfs\n \nwhen\n \nmounting\n \nudisk.\n \nman\n \n8\n \nmount\n \nfor\n \nmore\n \noptions\n\n    \nconst\n \nchar\n \n*mountoption\n \n=\n \ncontext=\nu\n:\nobject_r\n:\nextfs\n:\ns0\n;\n\n\n    unsigned long mountflags = MS_NOATIME | MS_NODEV | MS_NOSUID | MS_DIRSYNC;\n\n\n    unsigned long remountflags = mountflags | fsFlags;\n\n\n    mountflags |= fsFlags;\n\n\n\n    if (mountflags \n MS_RDONLY) {  // readonly\n\n\n        // Mount as writable so that we can update the Uid/Gid and permission\n\n\n        mountflags \n= ~MS_RDONLY;\n\n\n    }\n\n\n\n    rc = mount(fsPath, mountPoint, fstype, mountflags, mountoption);\n\n\n    if (rc \n errno == EROFS) {\n\n\n        SLOGE(\n%\ns\n \nappers\n \nto\n \nbe\n \na\n \nread\n \nonly\n \nfilesystem\n \n-\n \nretrying\n \nmount\n \nRO\n, fsPath);\n\n\n        mountflags |= MS_RDONLY;\n\n\n        rc = mount(fsPath, mountPoint, fstype, mountflags, mountoption);\n\n\n    }\n\n\n\n    if (rc == 0) {\n\n\n        // mount success, remount to the mount flags we want\n\n\n        chmod(mountPoint, 0770);\n\n\n        chown(mountPoint, ownerUid, ownerGid);\n\n\n        SLOGI(\nremount\n \nas\n \nuser\n \noption\n);\n\n\n        rc = Ext::remount(mountPoint, remountflags);\n\n\n    }\n\n\n\n    if (rc) {\n\n\n        SLOGE(\n%\ns\n \nremount\n \nto\n \nuser\n \noption\n \nfailed\n \n-\n \nretrying\n \nmount\n \nwith\n \ndefault\n \noption\n\\\nn\n,\n \nfsPath\n);\n\n        \nrc\n \n=\n \nmount(fsPath,\n \nmountPoint,\n \nfstype,\n \nmountflags,\n \nmountoption)\n;\n\n    \n}\n\n\n    \n//\n \nDirty\n \nPatch\n \n:\n \nfix\n \npermission\n \nof\n \npvr\n \nfiles\n\n    \nfixPermission\n(\nmountPoint\n);\n\n    \n//\n \nDirty\n \nPatch\n \nend\n\n\n    \nreturn\n \nrc\n;\n\n\n}\n\n\n\n\n\n\n\n\n\u9884\u7559", 
            "title": "Android SELinux \u89c4\u5219\u4ecb\u7ecd"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#seandroid", 
            "text": "\u6765\u6e90: https://pengzhangdev.github.io/SEAndroid%E8%A7%84%E5%88%99%E4%BB%8B%E7%BB%8D/  history:   version 1.0 by werther zhang @2016-12-12  version 1.1 by werther zhang @2017-06-27 \u603b\u7ed3\u9879\u76ee\u4e2d\u9047\u5230\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848", 
            "title": "SEAndroid\u89c4\u5219\u4ecb\u7ecd"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#_1", 
            "text": "sepolicy\u7684\u8bed\u6cd5\u662fgnu m4, \u662funix\u7cfb\u7edf\u7684\u5b8f\u5904\u7406\u5668\uff0c \u8ddfC\u7684\u5b8f\u7c7b\u4f3c\u3002  \u4ee5\u4e0b\u51fa\u73b0\u7684\u6240\u6709\u4e0e\u7cfb\u7edf\u8fdb\u7a0b\u540d\u5b57\u4e00\u6837\u7684\uff0c \u9664\u975e\u7279\u522b\u6307\u51fa\u8fdb\u7a0b\uff0c \u5426\u5219\u90fd\u53ea\u662f\u540d\u5b57\uff0c \u4e0d\u4e0e\u7279\u5b9a\u8fdb\u7a0b\u5173\u8054\u3002  \u4e0b\u9762\uff0c \u5148\u6574\u7406\u4e0b\u6982\u5ff5.. \u77e5\u9053\u8fd9\u4e48\u4e2a\u4e1c\u897f\u5c31\u884c\uff0c\u4e0d\u7528\u7406\u89e3\uff0c\u540e\u9762\u4f1a\u8be6\u7ec6\u63d0\u5230\u3002  \u5728linux\u7cfb\u7edf\u4e2d\uff0c\u3000\u6240\u6709\u5355\u5143(\u6587\u4ef6\uff0c\u76ee\u5f55\uff0c\u6587\u4ef6\u7cfb\u7edf\uff0c\u8fdb\u7a0b\u7b49),\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e3b\u52a8\u5355\u5143\u548c\u88ab\u52a8\u5355\u5143\uff0e\u8fdb\u7a0b\u5c5e\u4e8e\u4e3b\u52a8\u5355\u5143\uff08\u4e0d\u5b8c\u5168\uff0c\u8fdb\u7a0b\u7684\u8d44\u6e90\u5728\u88ab\u8bbf\u95ee\u65f6\uff0c\u5c5e\u4e8e\u88ab\u52a8\u5355\u5143\u7684\u6982\u5ff5\uff09\uff0c\u3000\u800c\u5176\u4ed6\u7684\u65e0\u6cd5\u53d1\u8d77\u52a8\u4f5c\u7684\u90fd\u5c5e\u4e8e\u88ab\u52a8\u5355\u5143\uff0e\u800csepolicy\u5b9a\u4e49\u7684\u5206\u522b\u662f\u4e3b\u52a8\u5355\u5143\u7684\u884c\u4e3a\u89c4\u5219\u548c\u88ab\u52a8\u5355\u5143\u7684\u7ee7\u627f\u89c4\u5219(\u8fd8\u662f\u7531\u4e3b\u52a8\u5355\u5143\u53d1\u8d77)\uff0e  \u5728\u63d0\u5230domain\u8fd9\u4e2a\u6982\u5ff5\u65f6\uff0c\u4e00\u5219\u8868\u793a\u4e3b\u52a8\u5355\u5143scontext\u4e2d\u7b2c\u4e09\u4e2a\u5b57\u6bb5\uff0c\u6bd4\u5982\uff0c\u4e0b\u4e00\u4e2a\u4f8b\u5b50\u4e2dsdcard\u8fdb\u7a0b\u7684domain\u5c31\u662fsdcardd\uff1b\u4e00\u5219\u6307\u7684\u662f\u5c5e\u6027\uff0c\u5177\u4f53\u51fa\u73b0\u5728\u89c4\u5219\u8bed\u53e5\u4e2d\uff0c\u6bd4\u5982\u540e\u6587\u7684 type sdcardd domain  \u662f\u6307\u8bb2sdcardd\u4e0e\u5c5e\u6027domain\u5173\u8054\uff0c\u800c\u5c5e\u6027domain\u5c31\u53ef\u4ee5\u8868\u793a\u6240\u6709\u7684\u4e0e\u4e4b\u5173\u8054\u7684\u7c7b\u578b\uff0c\u56e0\u4e3a\u6240\u6709\u88ab\u89c4\u5219\u4e86\u7684\u8fdb\u7a0b\u90fd\u4f1a\u4e0edomain\u5c5e\u6027\u5173\u8054\uff0c\u6240\u4ee5domain\u5728\u89c4\u5219\u8bed\u53e5\u4e2d\u6709\u65f6\u5019\u6307\u4ee3\u6240\u6709\u8fdb\u7a0b\u3002  \u5728\u63d0\u5230type\u8fd9\u4e2a\u6982\u5ff5\u65f6\uff0c\u4e00\u5219\u662f\u8868\u793a\u88ab\u52a8\u5355\u5143scontext\u4e2d\u7b2c\u4e09\u4e2a\u5b57\u6bb5\uff0c\u6bd4\u5982\u4e0b\u4e00\u4e2a\u4f8b\u5b50\u4e2dsdcard\u8fd9\u4e2a\u6587\u4ef6\u7684type\u4e3asdcard_exec\u3002\u4e00\u5219\uff0c\u6307\u7684\u662f\u6253\u6807\u7b7e\u7684\u5173\u952e\u5b57\uff0c\u5b9a\u4e49domain/type\u7684\u5173\u952e\u5b57\uff0c\u6bd4\u5982\u4e0a\u9762\u7684sdcardd\u7684\u4f8b\u5b50\u3002  attribute:  domain/type \u7684\u96c6\u5408\uff0c\u4e0etype/domain \u76f8\u540c\u547d\u540d\u7a7a\u95f4\uff0c\u56e0\u4e3am4\u5c31\u662f\u4e2a\u5b8f\u89e3\u91ca\u5668\uff0cattribute\u5c31\u662f\u4e3a\u4e00\u7fa4\u76f8\u540c\u6743\u9650\u6216\u8005\u89c4\u5219\u7684\u4e3b\u52a8\u5355\u5143\u6216\u88ab\u52a8\u5355\u5143\u96c6\u5408\u5b9a\u4e49\u4e86\u4e2a\u65b0\u540d\u5b57\uff0c\u8fd9\u4e2a\u65b0\u540d\u5b57\u5728sepolicy\u4e2d\u88ab\u5b9a\u4e49\u4e3aattribute. \u5728m4\u7f16\u8bd1\u8fc7\u7a0b\u4e2dattribute\u90fd\u4f1a\u88ab\u5206\u89e3\u6210\u5b9e\u9645\u7684type/domain\uff0c\u540e\u6587\u4f1a\u5728\u4f8b\u5b50\u4e2d\u63d0\u5230\u3002  # \u88ab\u52a8\u5355\u5143\u5206\u7ec4\nsdcard_type -|\n             |-|- fuse  -|-|\n             |-|- vfat  -|-|\n               |- sysfs -|-|\n               |- tmpfs -|-|\n                           |- fs_type\n\n# \u4e3b\u52a8\u5355\u5143\u5206\u7ec4\uff0c\u3000\u4e5f\u4f1a\u505a\u88ab\u52a8\u5355\u5143\uff0c\u6bd4\u5982\u88ab\u8bbf\u95ee\uff0c\u88abkill\nnetdomain -|\n           |-|- netd -|-|\n           |-|- dhcp -|-|\n             |- vold -|-|\n             |- logd -|-|\n                        |- domain  \u6253\u6807\u7b7e: \u5c31\u662f\u7ed9\u88ab\u52a8\u5355\u5143\u5b9a\u4e49type\uff0c\u3000\u7ed9\u4e3b\u52a8\u5355\u5143\u5b9a\u4e49domain\uff0e domain\u53ea\u6709init\u662f\u5b9a\u4e49\u7684\u5176\u4ed6\u90fd\u662ffork\u4e4b\u540e\u901a\u8fc7DT\u8f6c\u6362\u7684\uff0e\u800ctype\u53ea\u6709\u5df2\u77e5\u662f\u5b9a\u4e49\u7684\uff0c\u7531\u8fdb\u7a0b\u521b\u5efa\u7684\u90fd\u662f\u901a\u8fc7TT\u8f6c\u6362\u7684\uff0e DT\u548cTT\u5728\u540e\u9762\u4f1a\u4ecb\u7ecd\uff0e", 
            "title": "\u524d\u8a00"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#sepolicy", 
            "text": "sepolicy\u7684\u89c4\u5219\u9488\u5bf9\u7684\u662flinux\u7cfb\u7edf\u4e2d\u7684\u8fdb\u7a0b\u548c\u6587\u4ef6\u3002\u8fdb\u7a0b\u662f\u4e3b\u52a8\u7684\uff0c \u800c\u6587\u4ef6\u662f\u88ab\u52a8\u7684\u3002 \u6240\u4ee5\uff0c\u6709\u5bf9\u5e94\u7684\u8fdb\u7a0b\u89c4\u5219\u548c\u6587\u4ef6\u89c4\u5219\uff0c \u5206\u522b\u5b9a\u4e49\u8fdb\u7a0b\u7684\u5408\u6cd5\u884c\u4e3a\u548c\u6587\u4ef6\u88ab\u8bbf\u95ee\u7684\u6743\u9650\u3002  SELinux\u4e2d\uff0c \u6bcf\u4e2a\u5bf9\u8c61\uff08\u8fdb\u7a0b\u548c\u6587\u4ef6\uff09\u88ab\u8d4b\u4e88\u5b89\u5168\u5c5e\u6027\uff0c\u5b98\u65b9\u8bf4\u6cd5\u662f Security Context(\u4ee5\u4e0b\u7b80\u79f0SContext)\u3002 SContext\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c \u5bf9\u4e8e\u8fdb\u7a0b\u7684SContext\uff0cSContext\u7684\u683c\u5f0f\u662f\u201du:r:type[:range]\u201c. \u53ef\u4ee5\u4f7f\u7528  ps -Z  \u83b7\u5f97\uff0c \u5bf9\u4e8e\u6587\u4ef6\u7684SContext\uff0c \u53ef\u4ee5\u901a\u8fc7  ls -Z  \u83b7\u5f97\u3002 \u5982\u4e0b\u4e3a\u76f8\u5e94\u547d\u4ee4\u7684\u8f93\u51fa\u3002  # ps -Z\nu:r:logd:s0                    logd      198   1     /system/bin/logd\nu:r:healthd:s0                 root      199   1     /sbin/healthd\nu:r:lmkd:s0                    root      200   1     /system/bin/lmkd\nu:r:servicemanager:s0          system    201   1     /system/bin/servicemanager\nu:r:vold:s0                    root      202   1     /system/bin/vold\nu:r:surfaceflinger:s0          system    203   1     /system/bin/surfaceflinger\nu:r:common_time:s0             root      204   1     /system/bin/common_time\nu:r:shell:s0                   shell     205   1     /system/bin/sh\nu:r:kernel:s0                  root      206   2     kworker/1:1H\nu:r:netd:s0                    root      207   1     /system/bin/netd\nu:r:debuggerd:s0               root      208   1     /system/bin/debuggerd\nu:r:drmserver:s0               drm       209   1     /system/bin/drmserver\nu:r:mediaserver:s0             media     210   1     /system/bin/mediaserver\nu:r:installd:s0                install   211   1     /system/bin/installd\nu:r:keystore:s0                keystore  213   1     /system/bin/keystore\nu:r:zygote:s0                  root      214   1     zygote\nu:r:sdcardd:s0                 media_rw  215   1     /system/bin/sdcard\nu:r:adbd:s0                    shell     216   1     /sbin/adbd\nu:r:kernel:s0                  root      228   2     kauditd  \u5de6\u8fb9\u4e00\u5217\u662f\u8fdb\u7a0b\u7684 SContext\uff0c \u4ee5sdcard\u8fdb\u7a0b\u4e3a\u4f8b\u5b50\uff0c \u5176\u503c\u4e3a u:r:sdcardd:s0\uff0c \u5176\u4e2d\uff1a    u \u4e3a user \u7684\u610f\u601d\u3002 SEAndroid\uff08\u6307\u4fee\u6539\u4e86\u7684SELinux\uff09 \u4e2d\u53ea\u5b9a\u4e49\u4e86\u4e00\u4e2aSELinux\u7528\u6237\uff0c \u503c\u4e3au    r \u4e3a role \u7684\u610f\u601d\u3002 role \u662f\u89d2\u8272\u610f\u601d\uff0c \u5b83\u662f SELinux\u603b\u4e00\u79cd\u6bd4\u8f83\u9ad8\u5c42\u6b21\uff0c \u66f4\u65b9\u4fbf\u7684\u6743\u5229\u7ba1\u7406\u601d\u8def\uff0c \u5373 Role Based Access Control\uff08\u57fa\u4e8e\u89d2\u8272\u8bbf\u95ee\u63a7\u5236\uff0c \u7b80\u79f0\u4e3aRBAC\uff0c \u5728\u540e\u6587\u4f1a\u8be6\u7ec6\u8ba8\u8bba\uff09\u3002user\u4e0erole\u7684\u6743\u9650\uff0c \u7b80\u5355\u70b9\u8bf4\uff0c \u5c31\u662f u \u53ef\u4ee5\u5c5e\u4e8e\u591a\u4e2a role\uff0c \u7136\u540e\u4e0d\u540c\u7684 role \u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u6743\u9650\uff0c \u5c31\u8ddf\u4e00\u4e2a\u4eba\u53ef\u4ee5\u517c\u804c\u591a\u4efd\u5de5\u4f5c\u4e00\u6837\u3002    sdcardd\uff0c \u4ee3\u8868\u8fdb\u7a0b sdcard \u6240\u5c5e\u7684 Domain \u4e3a sdcardd\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u8fd9\u662f\u4e00\u4e2a\u8fdb\u7a0b\u7ec4\u7684\u540d\u5b57\uff0c \u8be5\u5b57\u7b26\u4e32\u7684\u540d\u5b57\u53ef\u4ee5\u968f\u610f\uff0c \u53ea\u8981\u5728\u89c4\u5219\u6587\u4ef6\u4e2d\u5b9a\u4e49\u597d\u6620\u5c04\u5173\u7cfb\uff0c \u89c4\u5219\u6587\u4ef6\u7684\u8bf4\u660e\u5728\u7a0d\u540e\u8ba8\u8bba\u3002\u5bf9\u4e8e\u8fdb\u7a0b\u8bbf\u95ee\u7684\u6743\u9650\u63a7\u5236\uff0c \u5728linux\u4e0a\uff0c \u6211\u4eec\u719f\u77e5\u7684\u662f\uff0c \u5982\u679c\u4ee5root\u6743\u9650\u542f\u52a8\u4e00\u4e2a\u8fdb\u7a0b\uff0c \u5219\u8be5\u8fdb\u7a0b\u5177\u6709root\u6743\u9650\uff0c \u8fd9\u5c31\u662froot\u7684\u539f\u56e0\uff0c \u8be5\u5b89\u5168\u6a21\u578b\u53eb\u505aDAC\uff08Discretionary Access Control\uff09\u3002 \u800cSELinux\u5bf9\u4e8e\u8fdb\u7a0b\u8bbf\u95ee\u7684\u63a7\u5236\uff0c \u7c7b\u4f3c\u767d\u540d\u5355\u673a\u5236\uff0c \u53ea\u6709\u5199\u5165\u89c4\u5219\u7684\u8fdb\u7a0b\u624d\u6709\u5bf9\u5e94\u7684\u8bbf\u95ee\u6743\u9650\uff0c \u6240\u4ee5\uff0c \u5728\u8fd9\u79cd\u673a\u5236\u4e0b\uff0c \u5373\u4f7f\u662froot\u6743\u9650\u7684sdcardd\uff0c \u4e5f\u65e0\u6cd5\u8bbf\u95ee\u89c4\u5219\uff0c \u8be5\u5b89\u5168\u6a21\u578b\u53ebMAC\uff08Mandatory Access Control\uff09\u3002\u800cMAC\u7684\u57fa\u672c\u7ba1\u7406\u5355\u4f4d\u662f Type Enforcement Access Control (\u57fa\u4e8e\u7c7b\u578b\u7684\u5f3a\u5236\u8bbf\u95ee\u63a7\u5236\uff0c\u7b80\u79f0TEAC\uff0c \u4e5f\u53ebTE)\uff0c \u8fd9\u4e9b\u53ea\u662f\u6982\u5ff5\u540d\u5b57\u800c\u5df2\u3002    S0 \u662f SELinux\u4e3a\u4e86\u6ee1\u8db3\u519b\u7528\u548c\u6559\u80b2\u884c\u4e1a\u8bbe\u8ba1\u7684 Multi-Level Security(MLS)\u673a\u5236\u6709\u5173\u3002MLS\u5c06\u8fdb\u7a0b\u548c\u6587\u4ef6\u8fdb\u884c\u4e86\u5206\u7ea7\uff0c \u4e0d\u540c\u7ea7\u522b\u7684\u8d44\u6e90\u9700\u8981\u4e0d\u540c\u7ea7\u522b\u7684\u8fdb\u7a0b\u8bbf\u95ee\uff0c \u540e\u6587\u4f1a\u4ecb\u7ecd\u3002     # ls -Z\n\n # /\n-rw-r--r-- root     root              u:object_r:rootfs:s0 property_contexts\ndrwxr-xr-x root     root              u:object_r:rootfs:s0 res\ndrwx------ root     root              u:object_r:rootfs:s0 root\n-rw-r--r-- root     root              u:object_r:rootfs:s0 s3g.ko\n-rw-r--r-- root     root              u:object_r:rootfs:s0 s3g_core.ko\ndrwxr-x--- root     root              u:object_r:rootfs:s0 sbin\nlrwxrwxrwx root     root              u:object_r:rootfs:s0 sdcard -  /storage/emulated/legacy\n-rw-r--r-- root     root              u:object_r:rootfs:s0 seapp_contexts\n-rw-r--r-- root     root              u:object_r:rootfs:s0 selinux_version\n-rw-r--r-- root     root              u:object_r:rootfs:s0 sepolicy\n-rw-r--r-- root     root              u:object_r:rootfs:s0 service_contexts\ndrwxr-x--x root     sdcard_r          u:object_r:rootfs:s0 storage\ndr-xr-xr-x root     root              u:object_r:sysfs:s0 sys\ndrwxr-xr-x root     root              u:object_r:system_file:s0 system\n-rw-r--r-- root     root              u:object_r:rootfs:s0 ueventd.rc\n-rw-r--r-- root     root              u:object_r:rootfs:s0 ueventd.zx2000.rc\nlrwxrwxrwx root     root              u:object_r:rootfs:s0 vendor -  /system/vendo\n\n# system/bin/\n-rwxr-xr-x root     shell             u:object_r:system_file:s0 screenrecord\n-rwxr-xr-x root     shell             u:object_r:sdcardd_exec:s0 sdcard\nlrwxr-xr-x root     shell             u:object_r:system_file:s0 sendevent -  toolbox\n-rwxr-xr-x root     shell             u:object_r:system_file:s0 sensorservice\n-rwxr-xr-x root     shell             u:object_r:system_file:s0 service  \u4e0a\u9762\u662fzx2000\u4e0a\uff0c\u6211\u4eec\u4ee5 storage \u76ee\u5f55\u4e3a\u4f8b\u5b50\u7b80\u5355\u770b\u4e0b\uff0c\u4fe1\u606f\u4e3a u:object_r:rootfs:s0.    u \u540c\u6837\u662fuser\u610f\u601d\uff0c \u4ee3\u8868\u521b\u5efa\u8be5\u6587\u4ef6\u7684SELinux user    object_r: \u8be5\u5b57\u6bb5\u4e0e ps -Z \u7684\u4e00\u6837\uff0c\u8868\u793a role\uff0c\u4f46\u662f\u6587\u4ef6\u662f\u88ab\u52a8\u8bbf\u95ee\u7684\uff0c \u65e0\u6cd5\u79f0\u4e3a\u4e00\u4e2a\u89d2\u8272\uff0c \u6240\u4ee5\uff0c \u6240\u6709\u6587\u4ef6\u7684role\u90fd\u7528object_r\u8868\u793a    rootfs: type, \u548c domain \u4e00\u4e2a\u610f\u601d\uff0c \u5c31\u662f\u4e00\u4e2a\u5206\u7c7b\u7684\u6807\u7b7e\u3002 \u6240\u6709\u7684\u6587\u4ef6\uff08\u5305\u62ec\u6587\u4ef6\u7cfb\u7edf\uff09\u90fd\u8981\u4e48\u6709\u6807\u7b7e\uff0c\u8981\u4e48\u5c31\u662funlabeled\u3002    s0\uff1a MLS\u7684\u7ea7\u522b\u3002    \u6240\u4ee5\uff0c\u540e\u9762\u4f1a\u4ecb\u7ecdTE\uff0c RBAC, MLS \u7b49\u7684\u89c4\u5219\u3002", 
            "title": "sepolicy\u89c4\u5219\u4ecb\u7ecd"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#labeling", 
            "text": "\u57fa\u4e8e\u4e0a\u9762\u7684SContext\u4fe1\u606f\uff0c\u5148\u4ecb\u7ecd\u4e0b\u6253\u6807\u7b7e\uff0c \u4e5f\u5c31\u662f\u4e3b\u52a8\u5355\u5143\u7684domain\u548c\u88ab\u52a8\u5355\u5143\u7684type\u521d\u59cb\u5316\u7684\u52a8\u4f5c\u3002\u5bf9\u4e8e\u65b0\u521b\u5efa\u7684\u8fdb\u7a0b\u548c\u65b0\u521b\u5efa\u7684\u6587\u4ef6\u7684SContext\uff0c\u6211\u4eec\u4f1a\u5728\u4ecb\u7ecd\u4e86TE\u89c4\u5219\u540e\uff0c\u518d\u5728Labeling\u4ecb\u7ecd\uff08\u4e8c\uff09\u4ecb\u7ecd\u3002", 
            "title": "Labeling\u4ecb\u7ecd\uff08\u4e00\uff09"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#domain", 
            "text": "domain\u8ddf\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e00\u6837\uff0c\u53ef\u4ee5\u88ab\u7ee7\u627f\uff0c\u4e5f\u53ef\u4ee5\u88ab\u6539\u53d8\u3002\u6240\u4ee5\uff0c\u5b83\u4e0e\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u4e00\u6837\uff0c\u5728\u9700\u8981\u6539\u53d8\u7684\u65f6\u5019\uff0c\u663e\u793a\u5730\u5207\u6362\uff0c\u800c\u8fd9\u4e2a\u5207\u6362\u52a8\u4f5c\u5728sepolicy\u4e2d\u5b9a\u4e49\u3002\u6240\u4ee5\uff0c \u53ea\u6709init\u8fdb\u7a0b\u6709\u521d\u59cb\u7684domain\uff0c\u5176\u4ed6\u8fdb\u7a0b\u90fd\u662f\u6839\u636eDT(Domain Transition)\u89c4\u5219\u5207\u6362\u7684\uff0c\u540e\u6587\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u3002  # init.rc\non early-init    \n   # Set the security context for the init process.    \n   # This should occur before anything else (e.g. ueventd) is started.\n   setcon u:r:init:s0  \u8fd9\u91cc\u5c31\u5c06init\u7684domain\u8bbe\u7f6e\u4e3ainit\u3002", 
            "title": "domain\u521d\u59cb\u5316"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#filesystemfile", 
            "text": "\u4e0a\u9762\u901a\u8fc7 ls -Z \u770b\u5230\u7684SContext\uff0c\u6587\u4ef6\u90e8\u5206\u662f\u5728 external/sepolicy/file_contexts \u4e2d\u5b9a\u4e49\u7684.\u8fd9\u4e2a\u6587\u4ef6\u6700\u7ec8\u4f1a\u4f5c\u4e3amkext4fs\u5de5\u5177\u7684\u53c2\u6570,\u88ab\u8bbe\u7f6e\u5230system.img\u4e2d.  # \u683c\u5f0f: regexp  -type  (  file_label  |  none  )  #  -type  \u4e2d\u7684type\u4e0e ls -la \u7684\u8f93\u51fa\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5339\u914d.\u6bd4\u5982:  # -rw-r--r-- 1 root    root    11208 Mar 11 11:13 te_macros  # drwxr-xr-x 3 root    root     4096 Mar 11 11:13 tools  # \u5219 -- \u8868\u793a\u5339\u914d\u6587\u4ef6\uff0c -d \u8868\u793a\u5339\u914d\u76ee\u5f55\uff0e  # \u56e0\u4e3a\u524d\u9762\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u3000\u6240\u4ee5\u3000 -type \u3000\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8fc7\u6ee4\u9700\u8981\u7684\u6587\u4ef6\u7c7b\u578b\uff0c\u3000\u5c06\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\u548c\u6587\u4ef6\u7c7b\u578b\u6253\u4e0a\u6807\u7b7e\uff0e  /            u : object_r : rootfs : s0  # Data files  / adb_keys       u : object_r : adb_keys_file : s0 / default\\ . prop      u : object_r : rootfs : s0 / system ( / . * ) ?        u : object_r : system_file : s0 # \u8fd9\u91cc\u7684--, \u4e2a\u4eba\u7406\u89e3\u662f\uff0c\u3000\u901a\u8fc7\u900f\u8fc7\u8f6f\u94fe\u63a5\uff0c\u5c06\u6807\u7b7e\u6253\u5728\u5b9e\u9645\u7684\u6587\u4ef6\u4e0a\uff0e  / system / bin / sh       --   u : object_r : shell_exec : s0 / system / bin / run - as   --   u : object_r : runas_exec : s0 / system / bin / sdcard      u : object_r : sdcardd_exec : s0  \u6240\u6709\u65b0\u6dfb\u52a0\u7684\u6587\u4ef6\uff0c\u5efa\u8bae\u5728\u8fd9\u8fb9\u67e5\u770b\u4e0b\uff0c\u662f\u5426\u9700\u8981\u8bbe\u7f6e\u65b0\u7684\u6807\u7b7e\uff0e\u3000\u4e00\u822c\u65b0\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u4f1a\u9700\u8981\u8bbe\u7f6e\u989d\u5916\u7684type\uff0c\u5e76\u4e14\u6709xx.te\u3000\u5bf9\u5e94\u7684\u89c4\u5219\u6587\u4ef6\u548c\u4e0etype\u5bf9\u5e94\u7684domain\uff0e  \u518d\u6765\u770b \u6587\u4ef6\u7cfb\u7edf\u7684\u6807\u7b7e\u521d\u59cb\u5316 \uff0c\u8fd9\u4e2a\u4e0d\u597d\u7406\u89e3\uff0c\u611f\u89c9\u8ddf\u5185\u6838selinux\u6a21\u5757\u7684\u5b9a\u4e49\u4e5f\u626f\u4e0a\u5173\u7cfb\u4e86\uff0c\u4ee5\u4e0b\u53ea\u662f\u4e2a\u4eba\u7406\u89e3\uff1a  #   The   fs_use_xattr   statement   is   used   to   allocate   a   security   context   to   filesystems  #   \u7ed9\u6587\u4ef6\u7cfb\u7edf\u6253\u6807\u7b7e\uff0c\u3000\u8be5\u6807\u7b7e\u662f\u4f5c\u4e3a   target_type ,   \u4f1a\u5728\u89c4\u5219\u91cc\u88ab\u4f7f\u7528\uff0e  #   \u6bd4\u5982\uff1a vold . te :   allow   vold   labeledfs : filesystem   {   mount   unmount   remount   } ;  #        file . te :   allow   file_type   labeledfs : filesystem   associate ;   #                 \u5141\u8bb8   file_type   \u5c5e\u6027\u7684\u6587\u4ef6\u5728 labeledfs \u7c7b\u578b\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u521b\u5efa  #   \u4e2a\u4eba\u7406\u89e3\uff0c\u8fd9\u7c7b\u6587\u4ef6\u7cfb\u7edf\u4e0a\u6240\u521b\u5efa\u7684\u6587\u4ef6 / \u76ee\u5f55\uff0c\u4f1a\u7ee7\u627f\u81ea\u7236\u76ee\u5f55\u89c4\u5219\uff0c\u540c\u65f6\u53d7 TT \u89c4\u5219\u5f71\u54cd\u3002 \n  fs_use_xattr   yaffs2   u : object_r : labeledfs : s0 ; \n  fs_use_xattr   jffs2   u : object_r : labeledfs : s0 ; \n  fs_use_xattr   ext2   u : object_r : labeledfs : s0 ; \n  fs_use_xattr   ext3   u : object_r : labeledfs : s0 ; \n  fs_use_xattr   ext4   u : object_r : labeledfs : s0 ; \n  fs_use_xattr   xfs   u : object_r : labeledfs : s0 ; \n  fs_use_xattr   btrfs   u : object_r : labeledfs : s0 ; \n  fs_use_xattr   f2fs   u : object_r : labeledfs : s0 ; \n\n  #\u3000 The   fs_use_task   statement   is   used   to   allocate   a   security   context   to   pseudo   filesystems  \n  #\u3000 that   support   task   related   services   such   as   pipes   and   sockets . \n  #   \u4f7f\u7528 fs_use_task \u63cf\u8ff0\u7684\u5b57\u6bb5\u53ea\u6709\u4e0b\u9762\u4e24\u6761\uff0c\u3000\u5177\u4f53\u7684\u542b\u4e49\u8fd8\u6ca1\u7406\u89e3\uff0e \n  fs_use_task   pipefs   u : object_r : pipefs : s0 ; \n  fs_use_task   sockfs   u : object_r : sockfs : s0 ; \n\n  #\u3000 The   fs_use_trans   statement   is   used   to   allocate   a   security   context   to   pseudo   filesystems  \n  #\u3000 such   as   pseudo   terminals   and   temporary   objects .   The   assigned   context   is   derived   from  \n  #\u3000 the   creating   process   and   that   of   the   filesystem   type   based   on   transition   rules . \n  #   \u4ece\u63cf\u8ff0\u662f\u7ed9\u4f2a\u6587\u4ef6\u7cfb\u7edf\u7684\uff0c\u3000\u6bd4\u5982\uff0f dev / \u7b49\uff0e \n  #   \u8be5\u89c4\u5219\u63cf\u8ff0\u4e86\u5728\u5b9a\u4e49\u7684\u6587\u4ef6\u7cfb\u7edf\u4e0b\u9762\u6240\u521b\u5efa\u7684\u6587\u4ef6\u7684 SContext \uff0c\u3000\u4f46\u8be5\u89c4\u5219\u53c8\u53ef\u4ee5\u88ab\uff34\uff34\u89c4\u5219\u5f71\u54cd\uff0e\u6bd4\u5982\uff1a \n  #   type_transition   sdcardd   devpts : {   chr_file   }   media_rw_data_file ;   \u5982\u679c\u6709\u8fd9\u6761\u8bed\u53e5\uff0c\u3000\u5219 sdcardd \n  #   \u7c7b\u578b\u7684\u8fdb\u7a0b\u7684 devpts \u4e0b\u521b\u5efa\u7684\u5b57\u7b26\u8bbe\u5907\u6587\u4ef6\u7684 SContext \u4e3a media_rw_data_file \uff1b\u3000\u5982\u679c\u6ca1\u6709\u8fd9\u53e5\uff0c\u5219 SContext \u4e3a \n  #   devpts .   \u8fd9\u91cc\u7684\u89c4\u5219\u548c\u524d\u9762\u76ee\u5f55\u7684\u89c4\u5219\u7c7b\u4f3c\uff0c\u3000\u4f46\u8fd9\u91cc\u662f\u57fa\u4e8e\u6587\u4ef6\u7cfb\u7edf\u7684\uff0c\u3000\u89c4\u5219\u7ee7\u627f\u81ea\u6587\u4ef6\u7cfb\u7edf\uff0c\u800c\u4e0d\u662f\u76ee\u5f55\uff0e\u6bd4\u5982\uff1a \n  #   \u5982\u679c\u6709\u4fee\u6539\u4ee5\u4e0a TT \u7684 object   class   \u4e3a   dir ,   \u53e6\u4e00\u8fdb\u7a0b\u5728 sdcardd \u8fdb\u7a0b\u6240\u521b\u5efa\u7684\u76ee\u5f55\u91cc\u9762\u6240\u521b\u5efa\u7684\u6587\u4ef6\uff0c\u4e0d\u4f1a\u7ee7\u627f media_rw_data_file , \n  #   \u5176 SContext \u4f9d\u7136\u4e3a devpts \uff0e \n  fs_use_trans   devpts   u : object_r : devpts : s0 ; \n  fs_use_trans   tmpfs   u : object_r : tmpfs : s0 ; \n  fs_use_trans   devtmpfs   u : object_r : device : s0 ; \n  fs_use_trans   shm   u : object_r : shm : s0 ; \n  fs_use_trans   mqueue   u : object_r : mqueue : s0 ;   \u4e0a\u9762\u5173\u4e8e TT \u7684\u89c4\u5219\uff0c\u8fd8\u6709 target_type \u7684\u6982\u5ff5\uff0c\u53ef\u4ee5\u5728\u540e\u9762\u4ecb\u7ecd\u4e86TE\u8bed\u6cd5\u540e\uff0c\u518d\u56de\u8fc7\u5934\u7406\u89e3\u4e0b\u3002\u4ee5\u4e0a\u4ecb\u7ecd\u4e86\u6587\u4ef6\uff0c\u6587\u4ef6\u7cfb\u7edf\u6253\u6807\u7b7e\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u6587\u4ef6\u7cfb\u7edf\u4e0d\u5b8c\u6574\uff0c\u8d77\u7801rootfs\u548cproc\u90fd\u6ca1\u4ecb\u7ecd\u5230\uff0c\u4e0b\u9762\u6211\u4eec\u4ecb\u7ecd\u4e0b\uff0c \u56e0\u4e3arootfs\u548cproc\u65e0\u6cd5\u7528\u4e0a\u9762\u51fd\u6570\u6253\u6807\u7b7e(\u4e0d\u77e5\u9053\u4e3a\u5565)... \u5176\u4e2d\u4e00\u4e2a\u53ef\u80fd\u539f\u56e0\u662f\uff0c \u8fd9\u4e9b\u6587\u4ef6\u7cfb\u7edf\u7684SContext\u662f\u88ab\u5b9a\u6b7b\u7684\uff0c\u4e0d\u5e0c\u671b\u88abTT\u89c4\u5219\u6539\u53d8\u3002\u4f7f\u7528\u7684\u5173\u952e\u5b57\u662f genfscon  #\u3000\u683c\u5f0f\uff1a\u3000genfscon\u3000fstype partial_path fs_context\n# \u5728fstype\u4e3aproc\u65f6\uff0c\u3000partial_path\u3000\u6307\u5b9a\u4e3aproc\u4e0b\u7684\u8def\u5f84\uff0c\u5176\u4ed6\u6587\u4ef6\u7cfb\u7edf\u7edf\u4e00\u4e3a / \uff0e\n # Label inodes with the fs label.\n genfscon rootfs / u:object_r:rootfs:s0\n\n # proc labeling can be further refined (longest matching prefix).\n genfscon proc / u:object_r:proc:s0\n genfscon proc /net u:object_r:proc_net:s0", 
            "title": "Filesystem/File \u7684\u521d\u59cb\u5316"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#_2", 
            "text": "SEAndroid\u4e2d\u6ca1\u6709\u4e2a\u6570\u636e\u5305\u548c\u7aef\u53e3\u6253\u6807\u7b7e\uff0e selinux-network.sh \u548c port_contexts \u90fd\u5b58\u5728\uff0c\u4f46\u89c4\u5219\u90fd\u6ce8\u91ca\u4e86\uff0c\u3000\u4e0d\u786e\u5b9a\u662f\u5426\u652f\u6301\uff0e\u6709\u9700\u6c42\u7684\u7ae5\u978b\u9a8c\u8bc1\u4e0b\uff0e\uff0e\uff0e", 
            "title": "\u7f51\u7edc\u7aef\u53e3/\u6570\u636e\u5305\u521d\u59cb\u5316"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#te", 
            "text": "TE\u5c31\u662f\u7ed9\u4e0a\u9762\u7684domain\u548ctype\u5b9a\u4e49\u8bbf\u95ee\u89c4\u5219\u3002  \u5148\u6765\u770b\u4e0bTE\u7684\u57fa\u672c\u683c\u5f0f\uff1a  rule_name source_type target_type : object_class perm_set;  \u6765\u6bb5 selinux wiki \u7684\u89e3\u91ca\u3002     \u57df  \u8bf4\u660e      rule_name  The applicable allow, dontaudit, auditallow, and neverallow rule keyword.    source_type / target_type  One or more source / target type, typealias or attribute identifiers. Multiple entries consist of a space separated list enclosed in braces ({}). Entries can be excluded from the list by using the negative operator (-). The target_type can have the self keyword instead of type, typealias or attribute identifiers. This means that the target_type is the same as the source_type. The neverallow rule also supports the wildcard operator (*) to specify that all types are to be included and the complement operator (~) to specify all types are to be included except those explicitly listed.    class_object  One or more object classes. Multiple entries consist of a space separated list enclosed in braces ({}).    perm_set  The access permissions the source is allowed to access for the target object (also known as the Acess Vector). Multiple entries consist of a space separated list enclosed in braces ({}). The optional wildcard operator (*) specifies that all permissions for the object class can be used. The complement operator (~) is used to specify all permissions except those explicitly listed (although the compiler issues a warning if the dontaudit rule has '~').     \u4e0b\u9762\u6765\u51e0\u4e2a\u4f8b\u5b50\u6765\u719f\u6089\u683c\u5f0f\u548c\u6982\u5ff5\u3002  allow   sdcardd   rootfs : dir   mounton ;     allow\uff1a TE\u7684allow\u8bed\u53e5\uff0c \u8868\u793a\u6388\u6743\u3002\u9664\u4e86allow\u4e4b\u5916\uff0c \u8fd8\u6709allowaudit\u3001dontaudit\u3001neverallow\u7b49\u3002    sdcardd\uff1a source type\u3002 \u4e5f\u53eb domain\u3002 \u4e0e\u4e0a\u9762\u8fdb\u7a0b\u663e\u793a\u7684domain\u4e00\u81f4\u3002    rootfs\uff1a target type\u3002 \u4e5f\u5c31\u662f\u6587\u4ef6\u7684\u6807\u7b7e\uff0c \u4e0e\u4e0a\u9762\u6587\u4ef6\u663e\u793a\u7684type\u4e00\u81f4\u3002    dir\uff1a \u4ee3\u8868 Ojbect Class. \u5b83\u8868\u793a\u80fd\u591f\u7ed9domain\u64cd\u4f5c\u7684\u4e00\u7c7b\u4e1c\u897f\u3002\u6bcf\u4e2a\u6587\u4ef6\u5206\u7c7b\u91cc\u9762\u53ef\u4ee5\u5305\u542b\u5404\u79cd\u4e0d\u540c\u5c5e\u6027\u7684\uff0c\u6bd4\u5982\u6587\u4ef6\uff0c\u7ba1\u9053\uff0c\u76ee\u5f55\u7b49\uff0c \u8fd9\u4e9b\u662f\u7531Object Class\u5b9a\u4e49\u548c\u533a\u5206\u3002\u5728android\u91cc\uff0c\u8fd8\u800c\u5916\u5b9a\u4e49\u4e86\u4e00\u4e2aObject Class\uff0c \u53eb\u505aBinder\u3002    mounton\uff1a \u5728\u8be5\u7c7b Object Class \u4e2d\u6240\u5b9a\u4e49\u7684\u64cd\u4f5c\u3002    \u4ee5\u4e0a\u7684\u6574\u53e5\u542b\u4e49\u662f\uff0c \u5141\u8bb8sdcardd\u5c06\u6240\u6709rootfs\u6807\u7b7e\u4e0b\u7684\u76ee\u5f55\u4f5c\u4e3a\u6302\u8f7d\u70b9\u3002    allow   vold   system_file : file   x_file_perms ;  #   \u5141\u8bb8 vold \u57df\u4e2d\u7684\u8fdb\u7a0b\u6267\u884c system_file \uff08\u6240\u6709 / system /   \u548c   / vendor /   \u76ee\u5f55\u4e0b\uff09\u7c7b\u578b\u7684\u6587\u4ef6\u3002  allow   vdc   dumpstate : unix_stream_socket   {   read   write   getattr   } ;  #   \u5141\u8bb8 vdc \u57df\u4e2d\u7684\u8fdb\u7a0b read   write   \u548c   getattr   dumpstate \u6807\u7b7e\u4e2d unix \u57df\u7684 socket \u3002  neverallow   netd   dev_type : blk_file   {   read   write   } ;  #   \u4e0d\u5141\u8bb8 netd \u57df\u7684\u8fdb\u7a0b\u8bfb\u5199 / dev / \u5e95\u4e0b\u7684\u5757\u8bbe\u5907\u6587\u4ef6\u3002   \u4e4b\u524d\u6211\u4eec\u63d0\u5230\uff0c TE\u662f\u7c7b\u4f3c\u767d\u540d\u5355\u5f62\u5f0f\u7684\uff0c\u53ea\u6709\u88ab\u8bb0\u5f55\u7684\u89c4\u5219\u624d\u88ab\u5141\u8bb8\uff0c \u672a\u88ab\u8bb0\u5f55\u7684\u884c\u4e3a\u90fd\u662f\u62d2\u7edd\u7684\uff0c \u90a3\u4e48neverallow\u5176\u5b9e\u662f\u6ca1\u6709\u610f\u4e49\u7684\u4e86\u3002 \u5176\u5b9eneverallow\u7684\u5b58\u5728\u662f\u5728\u751f\u6210\uff08\u7f16\u8bd1\uff09\u5b89\u5168\u7b56\u7565\u6587\u4ef6\u65f6\u68c0\u67e5allow\u8bed\u53e5\u662f\u5426\u8fdd\u53cd\u4e86neverallow\uff0c\u9632\u6b62\u7531\u4e8e\u5f00\u53d1\u4eba\u5458\u7684\u5931\u8bef\u5bfc\u81f4\u67d0\u4e9b\u57df\u6743\u9650\u8fc7\u9ad8\u3002\u8be5\u9519\u8bef\u4f1a\u5728\u7f16\u8bd1\u9636\u6bb5\u51fa\u9519\u3002", 
            "title": "TE\u4ecb\u7ecd"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#object-class-perm95set", 
            "text": "The object classes have matching declarations in the kernel, meaning that it is not trivial to add or change object class details. The same is true for permissions. Development work is ongoing to make it possible to dynamically register and unregister classes and permissions.  \u8fd9\u91cc\u662f\u6458\u6284\u4e00\u6bb5CentOS\u91cc\u7684\u4ecb\u7ecd\uff0c \u5bf9\u4e8eobject class\u548cpermission\u7684\u5b9a\u4e49\u7684\u8bf4\u660e\uff0c \u8fd9\u4e24\u8005\u90fd\u662f\u5728kernel\u4e2d\u5b9a\u4e49\u4e0e\u6620\u5c04\u7684\uff0c \u4e5f\u5c31\u662f\u8bf4\uff0c \u8fd9\u4e24\u4e2a\u662f\u8ddf\u8bbe\u5907\u76f8\u5173\u7684\uff0c \u4e0d\u5141\u8bb8\u968f\u610f\u66f4\u6539\u3002  \u9996\u5148\uff0c Object class \u5b9a\u4e49\u5728\u6587\u4ef6external/sepolicy/security_classes\uff0c \u7b80\u5355\u6458\u53d6\u5982\u4e0b\u3002\u8be5\u6587\u4ef6\u4e2d\u53ea\u662f\u4e00\u5806\u5b9a\u4e49\uff0c \u81f3\u4e8e\u600e\u4e48\u8ddflinux\u4e2d\u5b9e\u9645\u7684\u6587\u4ef6\u6620\u5c04\u7684\u5462\uff1f\uff08\u8bf7\u53c2\u8003\uff1a\u5185\u6838\u4ee3\u7801\uff09  #   file - related   classes  class   filesystem  class   file  class   dir  class   fd  class   lnk_file  class   chr_file  class   blk_file  class   sock_file  class   fifo_file  #   Property   service  class   property_service            #   userspace  #   Service   manager  class   service_manager             #   userspace   \u6240\u6709\u7684 Object class \u9700\u8981\u901a\u8fc7class\u8bed\u53e5\u7533\u660e\u3002  \u8fd9\u91ccuserspace\uff0c\u6ce8\u610f\u4e0b\uff0c \u540e\u6587\u4f1a\u63d0\u5230android\u91cc\u7279\u6b8a\u5b9a\u4e49\u7684\u8fd9\u4e9buserspace\u7684object class\uff0c\u6240\u6709\u6807\u6ce8\u4e86userspace\u7684\uff0c\u90fd\u662f\u8fdb\u7a0b\u8fd0\u884c\u65f6\u901a\u8fc7selinux\u7684\u6807\u51c6API\u52a8\u6001\u68c0\u67e5\uff0c\u8ddfandroid\u7684xml\u4e2dpermission\u68c0\u67e5\u7c7b\u4f3c\u3002  \u4e0b\u9762\u770b\u4e0b  perm_set \u3002 \u6240\u8c13 perm_set \u4e5f\u53eb\u505a access vectors\uff0c \u6307\u67d0\u4e2aobject class\u6240\u652f\u6301\u7684\u64cd\u4f5c\u3002 \u8be5\u64cd\u4f5c\u90fd\u662f\u5728kernel\u91cc\u9884\u5b9a\u4e49\u7684\uff0c \u4e5f\u662f\u65e0\u6cd5\u589e\u52a0\u6216\u6539\u53d8\u5176\u884c\u4e3a\uff0c \u4f46\u53ef\u4ee5\u5c06\u5b83\u4eec\u4e0e\u5bf9\u5e94\u7684object class \u7ed1\u5b9a\u3002\u6ce8\u610f\uff1a\u4e00\u4e9bobject class\u4f1a\u4e0d\u652f\u6301\u67d0\u4e9bpermission\uff0c \u6bd4\u5982 file \u4e0d\u652f\u6301 mounton\u3002  \u8fd9\u4e9b\u6620\u5c04\u5b9a\u4e49\u5728external/sepolicy/access_vectors\uff0c \u7b80\u5355\u6458\u53d6\u5982\u4e0b\u3002    common   file \n  { \n      ioctl \n      read \n      write \n      create \n      getattr \n      setattr \n      lock \n      relabelfrom \n      relabelto \n      append \n      unlink \n      link \n      rename \n      execute \n      swapon \n      quotaon \n      mounton \n  }  class   dir \n  inherits   file \n  {    \n      add_name \n      remove_name \n      reparent \n      search \n      rmdir \n      open \n      audit_access \n      execmod \n  }    perm_set \u7684\u5b9a\u4e49\u67092\u79cd\uff0c \u5982\u4e0a\uff0c \u4e00\u79cd\u662fcommon\u5b9a\u4e49\u7684\uff0c \u7c7b\u4f3c\u9762\u5411\u5bf9\u8c61\u7684\u57fa\u7c7b\uff0c \u53e6\u4e00\u79cd\u662fclass\u5b9a\u4e49\u7684\uff0c \u53ef\u4ee5\u7ee7\u627fcommen\u5b9a\u4e49\u7684\u96c6\u5408\u3002", 
            "title": "Object class \u548c\u5176 Perm_set"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#type-attribute-allow", 
            "text": "\u9996\u5148\uff0c \u6211\u4eec\u770btype\u7684\u5b9a\u4e49\uff1a  type type_id [,attribute_id]  \u4e0a\u9762\u662ftype\u7684\u5b8c\u6574\u547d\u4ee4\u683c\u5f0f\uff0c \u6307\u5b9a type_id , \u5e76\u5173\u8054\u5230 attribute_id \uff0c  attribute_id \u53ef\u4ee5\u591a\u4e2a\u3002  \u800cSEAndroid\u7684\u5c5e\u6027\u5b9a\u4e49\u5982\u4e0b\uff1a  attribute domain\nattribute file_type  \u9664\u4e86\u901a\u8fc7type\u5b9a\u4e49\u65f6\u7ed1\u5b9a\u5c5e\u6027\uff0c \u8fd8\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\uff0c \u5c06vold\u7c7b\u578b\u4e0emlstrustedsubject\u5c5e\u6027\u5173\u8054\u8d77\u6765  typeattribute vold mlstrustedsubject;  type\u548cattribute\u5173\u8054\u8d77\u6765\u5177\u4f53\u662f\u4ec0\u4e48\u542b\u4e49\u5462\uff1f \u5176\u5b9e\uff0c attribute \u53ef\u4ee5\u7406\u89e3\u4e3a\u5206\u7ec4\u7684\u610f\u601d\uff0c \u4e5f\u5c31\u662f\u5c06\u4e00\u5806\u7684 type_id  \u5f52\u5230\u4e0d\u540c\u7684\u7ec4\uff0c  type_id  \u548c  attribute_id  \u4f4d\u4e8e\u540c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\uff0c \u4e5f\u5c31\u662f\u8bf4\uff0c \u4e0d\u80fd\u7528type\u5b9a\u4e49\u5728attribute\u4e2d\u5df2\u6709\u7684\u540d\u5b57\uff0c \u4e5f\u4e0d\u80fd\u7528attribute\u5b9a\u4e49type\u4e2d\u5df2\u6709\u7684\u540d\u5b57\u3002 \u4e0b\u9762\u770b\u4e2a\u4f8b\u5b50\uff0c \u6765\u66f4\u6df1\u5165\u7406\u89e3 type_id \u548c attribute_id \u7684\u5173\u7cfb\uff0c\u8bfb\u8005\u53ef\u4ee5\u7ed3\u5408\u4e0b\u9762\u7684\u4f8b\u5b50\u548c\u5f00\u5934\u7684\u6811\u5f62\u4f8b\u5b50\u6765\u7406\u89e3\u3002  #   \u5185\u5bb9\u6765\u81ea   dhcp . te   net_domain ( dhcp )  #   \u5185\u5bb9\u6765\u81ea   netd . te  net_domain ( netd )  #   \u5185\u5bb9\u6765\u81ea   te_macros ,   \u610f\u601d\u662f\u5b9a\u4e49\u4e00\u4e2a\u5b8f\u51fd\u6570 net_domain \uff0c   \u901a\u8fc7 typeattribute   \u5c06\u53c2\u6570   \u4e0e   netdomain   \u5173\u8054\u3002  #####################################  #   net_domain ( domain )  #   Allow   a   base   set   of   permissions   required   for   network   access .  define ( ` net_domain , `  typeattribute $1 netdomain;  )  #   \u5185\u5bb9\u6765\u81ea   net . te ,   \u5b9a\u4e49\u4e86   netdomain   \u8fd9\u4e2a attribute \u6240\u6709 permissions \uff0c   \u4ee5\u4e0b\u7b80\u5355\u5217\u51fa\u3002  allow   netdomain   self : tcp_socket   create_stream_socket_perms ;   \u4ee5\u4e0a\u4f8b\u5b50\u7684\u542b\u4e49\u662f\uff0c \u5c06 dhcp \u4e0e netdomain\u5173\u8054\uff0c \u5c06netd\u4e0enetdomain\u5173\u8054\u3002 \u7136\u540e\u53ea\u8981\u901a\u8fc7\u5141\u8bb8netdomain\u6267\u884c\u67d0\u4e9b\u6743\u9650\uff0c \u5c31\u53ef\u4ee5\u505a\u5230\u8ba9dhcp\u548cnetd\u540c\u65f6\u5177\u5907\u67d0\u4e9b\u6743\u9650\u3002\u6240\u4ee5\uff0c attribute \u5c5e\u6027\u5728\u7528\u4e8e source_type \u65f6\uff0c \u662f\u6307\u8d4b\u4e88\u67d0\u4e00\u7ec4\u7684 type_id  \u6743\u9650\u3002 \u901a\u8fc7m4\u8bed\u6cd5\uff0c \u4ee5\u4e0a\u4f8b\u5b50\u5c55\u5f00\u7684\u7ed3\u679c\u662f\uff1a  #   \u8fd9\u91cc\u7684   create_stream_socket_perms   \u662f\u5728 global_macros \u4e2d\u5b9a\u4e49\u7684\u5b8f\uff0c   \u88ab\u5c55\u5f00\u5c31\u662f\u5177\u4f53\u7684 tcp_socket \u7684 permissions  #   \u8fd9\u91cc\u7684   self   \u5c31\u662f\u6307\u4e0e   source_type   \u4e00\u81f4\u3002  allow   dhcp   dhcp : tcp_socket   {   create   listen   accept   ioctl   read   getattr   write   setattr   lock   append   bind   connect   getopt   setopt   shutdown   } ;  allow   netd   netd : tcp_socket   {   create   listen   accept   ioctl   read   getattr   write   setattr   lock   append   bind   connect   getopt   setopt   shutdown   } ;   \u518d\u6765\u770b\u4e00\u4e2a\uff0c\u540c\u6837\u662fnetdomain\uff0c \u4f46\u662f\u4f5c\u4e3a target_type \u7684\u4f8b\u5b50  allow netd netdomain :{ tcp_socket udp_socket rawip_socket dccp_socket tun_socket }   { read write getattr setattr getopt setopt };  # m4 \u5c55\u5f00\uff0c \u8fd9\u91cc\u53ea\u5b9a\u4e49\u4e86dhcp\u548cnetd\u5c5e\u4e8enetdomain\uff0c \u5b9e\u9645\u4e0aandroid\u4e2d\u8fd8\u6709\u597d\u591a\u7f51\u7edc\u670d\u52a1\u5c5e\u4e8e\u8be5domain \nallow netd  { dhcp netd }:{ tcp_socket udp_socket rawip_socket dccp_socket tun_socket }   { read write getattr setattr getopt setopt };   \u8fd9\u53e5\u7684\u610f\u601d\u662f\uff0c \u5141\u8bb8netd\u5bf9\u6240\u6709netdomain\u5c5e\u6027\u6210\u5458\u7684{tcp_socket udp_socket rawip_socket dccp_socket tun_socket} \u6267\u884c {read write getattr setattr getopt setopt}. \u8fd9\u91cc\u7684{}\u662f\u96c6\u5408\u7684\u610f\u601d\u3002 source_type ,  target_type ,  object class \u548c perm_set  \u90fd\u53ef\u4ee5\u7528\u96c6\u5408\u8868\u793a\uff0c \u800cattribute\uff0c\u5176\u5b9e\u662f\u7ed9\u67d0\u4e2a\u96c6\u5408\u5b9a\u4e49\u4e86\u4e2a\u5b8f\u522b\u540d\u3002  \u6240\u4ee5\uff0c attribute \u662f\u4fbf\u5229\u5f00\u53d1\u4eba\u5458\u5199sepolicy\u7684\u5de5\u5177\u3002\u5bf9\u4e8e\u6240\u4ee5SEAndroid\u4e2d\u5b9a\u4e49\u7684attribute\uff0c \u53ef\u4ee5\u53c2\u8003 external/sepolicy/attribute \u8fd9\u4e2a\u6587\u4ef6\u3002  \u6700\u540e\uff0c \u6211\u4eec\u770bTE\u4e2d\u7684 rule_name \uff0c \u4e00\u5171\u6709\u5982\u4e0b4\u79cd\uff1a    allow: \u8d4b\u4e88\u67d0\u9879\u6743\u9650    allowaudit\uff1a audit\u542b\u4e49\u5c31\u662f\u8bb0\u5f55\u67d0\u9879\u64cd\u4f5c\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f SELinux \u53ea\u8bb0\u5f55\u54ea\u4e9b\u6743\u9650\u68c0\u67e5\u5931\u8d25\u7684\u64cd\u4f5c\uff0c \u4e5f\u5c31\u662f\u7ec8\u7aef\u548clogcat\u4e2d\u6253\u5370\u7684\u6240\u6709deny\u7684\u6253\u5370\u3002\u800c\u8be5\u5b57\u6bb5\u5c31\u662f\u5728allow\u7684\u57fa\u7840\u4e0a\uff0c \u518d\u5c06\u4fe1\u606f\u6253\u5370\u51fa\u6765\u3002    dontaudit\uff1a \u5bf9\u90a3\u4e9b\u68c0\u67e5\u5931\u8d25\u7684\u4e0d\u505a\u8bb0\u5f55\uff0c \u9759\u9ed8\u5730\u62d2\u7edd\u8bbf\u95ee\uff0c \u5e76\u4e14\u4e0d\u5e94\u8be5\u5f15\u8d77\u7a0b\u5e8f\u9000\u51fa\u3002\u8be5\u5b57\u6bb5\u5728SEAndroid\u4e2d\u5e76\u672a\u4f7f\u7528\u3002\u57fa\u4e8eSELinux\u7684\u767d\u540d\u5355\u539f\u5219\uff0c \u53ea\u8981\u4e0d\u5728\u89c4\u5219\u5185\u7684\u64cd\u4f5c\u90fd\u62d2\u7edd\uff0c \u6240\u4ee5\u8be5\u5b57\u6bb5\u7684\u5b9e\u9645\u6548\u679c\u5c31\u662f\uff0c\u5bf9\u5176\u540e\u5931\u8d25\u7684\u6743\u9650\u4e0d\u505a\u8bb0\u5f55\u3002    neverallow\uff1a \u7528\u6765\u68c0\u67e5\u5b89\u5168\u7b56\u7565\u4e2d\u662f\u5426\u8fdd\u53cd\u8be5\u89c4\u5219\u7684allow\u8bed\u53e5\uff0c \u907f\u514dsepolicy\u7684\u4e66\u5199\u5f02\u5e38\u3002 \u5728\u7f16\u8bd1\u9636\u6bb5\u62a5\u9519\uff0c \u4e0d\u4f1a\u7f16\u8bd1\u8fdb\u6700\u7ec8\u7684\u7b56\u7565\u6587\u4ef6\u4e2d\u3002", 
            "title": "type\uff0c attribute \u548c allow \u7b49\u5173\u952e\u5b57\u8bf4\u660e"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#rbac-constrain", 
            "text": "\u524d\u6587\u6211\u4eec\u63d0\u5230\u7684\u90fd\u662fTEAC\u3002\u5728\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7 ps -Z  \u770b\u5230\u4e86user\u548crole\uff0c \u5728SEAndroid\u4e2d\uff0c \u53ea\u67091\u4e2auser\u548c1\u4e2arole\u3002\u800c\u57fa\u4e8erole\u7684\u5b89\u5168\u7b56\u7565\uff0c \u5c31\u53eb\u505aRBAC\uff08Role Based Access Control\uff09\u3002\u6211\u4eec\u5148\u6765\u770b\u4e0bandroid\u5b9a\u4e49\u7684user\u548crole\u3002  # external/sepolicy/roles  # \u5b9a\u4e49\u4e00\u4e2arole  role   r ; # \u5c06role\u548cattribute domain \u5173\u8054\u3002  role   r   types   domain ;  # external/sepolicy/users\nuser u roles { r } level s0 range s0 - mls_systemhigh;  \u4ee5\u4e0a\u662f\u652f\u6301MLS\uff08Multi-Leve Security\uff09\u7684user\u5b9a\u4e49\u3002\u4e0a\u9762\u8fd9\u4e2a\u5b9a\u4e49\u7684\u610f\u601d\u662f\uff0c \u5c06user u\u548c roles r\u5173\u8054\uff0c \u5e76\u4e14\u5176\u5b89\u5168\u7ea7\u522b\u662fs0\uff0c \u6700\u9ad8\u662fmls_systemhigh\u3002 \u8fd9\u91ccu\u53ef\u4ee5\u8ddf\u591a\u4e2arole\u5173\u8054\u3002  \u7136\u540e\uff0c \u6211\u4eec\u770b\u4e0buser\u548crole\u6709\u600e\u6837\u7684\u6743\u9650\u63a7\u5236\u3002 \u5176\u5b9e\u901a\u4fd7\u5730\u8bb2\uff0c user\u548crole\u7684\u5173\u7cfb\uff0c \u5c31\u8ddf\u4eba\u4e0e\u5de5\u4f5c\u7684\u5173\u7cfb\uff0c role\u51b3\u5b9a\u4e86\u804c\u80fd\u5206\u7c7b\u3002\u56e0\u4e3aandroid\u53ea\u6709\u4e00\u4e2arole\uff0c \u6240\u4ee5\uff0c\u540e\u6587\u63d0\u5230\u7684role\u8f6c\u6362\u548c\u63a7\u5236\u5173\u7cfb\uff0c \u6211\u4eec\u53ea\u662f\u7b80\u5355\u8bf4\u660e\u4e0b\uff0c \u6211\u4e5f\u4e0d\u662f\u5f88\u61c2\u3002  \u9996\u5148\uff0c \u6211\u4eec\u770b\u5982\u4f55\u4ece\u4e00\u4e2arole\u5207\u6362\u5230\u53e6\u4e00\u4e2arole\u3002  # \u8fd9\u91cc\u7684allow\u548cTE\u7684allow\u4e0d\u540c\nallow from_role_id to_role_id  \u89d2\u8272\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c \u5728SELinux\u4e2d\uff0c Role\u548cRole\u7684\u5173\u7cfb\u8ddf\u804c\u573a\u7684\u7ba1\u7406\u4eba\u5458\u5c42\u7ea7\u4e00\u81f4\u3002\u4f8b\u5982  # \u8fd9\u53e5\u7684\u610f\u601d\u662f\uff0c super_r dominate sysadm_r \u548c secadm_r \u8fd9\u4e24\u4e2a\u89d2\u8272\n# \u4ece type \u89d2\u5ea6\u6765\u770b\uff0c super_r \u5c06\u81ea\u52a8\u7ee7\u627f sysadm_r \u548c secadm_r \u6240\u5173\u8054\u7684type(\u6216attribute)\ndominance { role super_r {role sysadm_r; role secadm_r; }}  \u63a5\u4e0b\u6765\uff0c \u6211\u4eec\u770b\u4e0b\uff0c \u662f\u5982\u4f55\u5b9e\u73b0\u57fa\u4e8eRole\u6216User\u7684\u6743\u9650\u63a7\u5236\u7684\u3002\u5728selinux\u4e2d\u6709\u65b0\u5173\u952e\u8bcdconstrain\u3002  constrain file write (u1 == u2 and r1 == r2);\n# \u683c\u5f0f\uff1a\n# constrain object_class perm_set expression\uff1b  \u91cd\u70b9\u662fexpression\u3002\u5b83\u5305\u542b\u5982\u4e0b\u5173\u952e\u5b57\uff1a    u1,r1,t1: \u4ee3\u8868source\u7684user\uff0c role \u548c type    u2, r2, t2: \u4ee3\u8868target\u7684user\uff0c role \u548c type    == \u548c \uff01= \uff1a \u5bf9\u4e8e u\uff0cr \u6765\u8bf4\uff0c == \u548c \uff01= \u5206\u522b\u8868\u793a\u76f8\u7b49\u6216\u8005\u4e0d\u7b49\u3002 \u800c\u5bf9\u4e8e t \u6765\u8bf4\uff0c == \u548c \uff01= \u5206\u522b\u8868\u793a\u6e90type\u5c5e\u4e8e\u6216\u4e0d\u5c5e\u4e8e\u76ee\u6807attribute\u3002    \u5728SEAndroid\uff0c \u5e76\u6ca1\u6709\u4f7f\u7528constrain\u5173\u952e\u5b57\uff0c \u800c\u662fmlsconstrain\u3002\u540e\u6587\u5728\u4ecb\u7ecdmls\u65f6\u4f1a\u8be6\u7ec6\u63d0\u5230\u3002  constrain\u662f\u5bf9TE\u7684\u52a0\u5f3a\u3002\u56e0\u4e3aTE\u4ec5\u9488\u5bf9type\u548cdomain\uff0c\u5e76\u6ca1\u6709\u9488\u5bf9user\u548crole\u3002\u5728selinux\u68c0\u67e5\u6743\u9650\u65f6\uff0c \u5148\u68c0\u67e5TE\uff0c \u518d\u68c0\u67e5RBAC\u3002", 
            "title": "RBAC \u548c constrain"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#labeling_1", 
            "text": "", 
            "title": "Labeling \u4ecb\u7ecd\uff08\u4e8c\uff09"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#domaintype-transition", 
            "text": "\u5728Android/Linux\u7cfb\u7edf\u4e2d\uff0c \u8fdb\u7a0b\u90fd\u662f\u7531\u7236\u8fdb\u7a0bfork\u751f\u6210\u7684\u3002\u5728Android\u4e2d\uff0c \u6240\u6709\u7684\u5e94\u7528\u90fd\u662f\u901a\u8fc7zygote\u521b\u5efa\uff0c\u5e76\u6267\u884c\u76f8\u540c\u7684\u7a0b\u5e8f\uff0c \u53ea\u662f\u6700\u540e\u52a0\u8f7d\u7684java\u5305\u4e0d\u540c\u800c\u5df2\u3002\u800cfork\u7cfb\u7edf\u8c03\u7528\uff0c\u4f1a\u4f7f\u5b50\u8fdb\u7a0b\u7ee7\u627f\u7236\u8fdb\u7a0b\u7684domain\uff0c \u4e5f\u5c31\u662f\u8bf4SContext\u4f1a\u88ab\u7ee7\u627f\u3002\u6240\u4ee5\uff0c \u5bf9\u4e8einit\u8fdb\u7a0b\u800c\u8a00\uff0c\u5fc5\u987b\u5b8c\u6210type/domain\u7684\u8f6c\u6362\uff0c\u4ece\u800c\u964d\u4f4e\u5b50\u8fdb\u7a0b\u7684\u6743\u9650\u3002\u800c\u5bf9\u4e8ezygote\u800c\u8a00\uff0c \u7531\u4e8e\u4e0d\u540c\u5e94\u7528\u53ea\u662f\u8d44\u6e90\u4e0d\u540c\uff0c\u5bf9\u4e8e\u5185\u6838\u800c\u8a00\u662f\u540c\u4e00\u79cd\u8fdb\u7a0b\uff0c \u6240\u4ee5\u9700\u8981\u663e\u793a\u8c03\u7528selinux\u7684\u51fd\u6570\u8fdb\u884ctype/domain\u8f6c\u6362\u3002\u4e0b\u9762\u9488\u5bf9init\u8fdb\u7a0b\u7684fork\u548czygote\u8fdb\u7a0b\u7684fork\u8bf4\u660e\u4e0b\u57df\u662f\u5982\u4f55\u8f6c\u6362\u7684\u3002", 
            "title": "domain/type Transition  \u5b8f \u548c \u65b0\u6dfb\u52a0\u8fdb\u7a0b"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#init-domain", 
            "text": "init\u6709\u81ea\u5df1\u7684scontext\uff0c \u5e76\u4e14\u67e5\u770binit.te\uff0c \u4f1a\u53d1\u73b0\u5176\u6743\u9650\u975e\u5e38\u9ad8\u3002 \u800c\u7531init.rc\u4e2d\u542f\u52a8\u7684\u8fdb\u7a0b\uff0c\u5177\u6709\u5404\u81ea\u4e0d\u540c\u7684\u6743\u9650\uff0c\u5e94\u8be5\u8fd0\u884c\u5728\u5404\u81ea\u7684scontext\u4e2d\uff0c\u964d\u4f4e\u6743\u9650\u3002  init\u542f\u52a8\u5b50\u8fdb\u7a0b\u7ecf\u5386\u7684\u7cfb\u7edf\u8c03\u7528\u4e3a\uff0c fork\uff0c execv\uff0c \u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c \u5185\u6838\u4f1a\u67093\u4e2aSecurity\u68c0\u67e5\u70b9\uff0c \u5206\u522b\u662f\uff0c \u5141\u8bb8init\u6267\u884c\u76ee\u6807\u7a0b\u5e8f\uff0c \u5141\u8bb8init\u6267\u884cDT\uff08Domain Transition\uff09\u8f6c\u6362\uff0c \u901a\u77e5selinux\u9488\u5bf9\u7684\u5207\u6362\u6587\u4ef6\u3002\u5373\u5982\u4e0b3\u6761\u6307\u4ee4\uff1a  #   \u6765\u6e90   external / sepolicy / init . te  #   \u683c\u5f0f   domain_trans ( olddomain ,   type ,   newdomain )  #   shell   \u7684   type   \u548c domain \uff0c   \u53ef\u4ee5\u770b   shell . te  #    # type shell, domain, mlstrustedsubject;  # shell\u662fdomain\u8fd9\u4e2aattribute\u7684\u6210\u5458\u3002  # type shell_exec, exec_type, file_type;  # type \u662f shell_exec  #   domain_trans ( init ,   shell_exec ,   shell )  #   \u6765\u6e90   external / sepolicy / te_macros  define ( ` domain_trans , `  # $1 \u4e3ainit\uff0c $2 \u4e3a shell_exec\uff0c $3\u4e3ashell  allow $1 $2:file { getattr open read execute };  allow $1 $3:process transition;  allow $3 $2:file { entrypoint open read execute getattr };  ...  )  #   domain_trans   \u5c55\u5f00\u6765\u5982\u4e0b\uff0c\u53bb\u9664\u65e0\u5173 permissions \uff0c   domain   \u5207\u6362\u76f8\u5173\u7684\u5982\u4e0b\uff1a  #   \u5141\u8bb8   init \u57df\u8fdb\u7a0b   \u6267\u884c   shell_exec   \u7c7b\u578b\u7684\u8fdb\u7a0b  allow   init   shell_exec : file   {   execute   } ;  \u5141\u8bb8 init \u57df\u8fdb\u7a0b\u5bf9 shell \u57df\u7684\u8fdb\u7a0b\u6267\u884c DT  allow   init   shell : process   transition ;  #   \u8bbe\u7f6e\u65b0 domain   shell \u7684\u5165\u53e3\u4e3a\u7c7b\u578b   shell_exec   \u7684\u6587\u4ef6\u3002  allow   shell   shell_exec : file   {   entrypoint   execute   } ;   \u5bf9\u5e94\u7684type\u53ef\u4ee5\u5728file_contexts \u4e2d\u67e5\u627e\uff0c \u5f53\u7136\uff0c\u5982\u679c\u662f\u65b0\u6dfb\u52a0\u8fdb\u7a0b\uff0c\u5219\u9700\u8981\u5728\u8be5\u6587\u4ef6\u4e2d\u7ed1\u5b9a\u53ef\u6267\u884c\u7a0b\u5e8f\u4e0etype\u3002\n\u4ee5\u4e0a(domain_trans\u5b8f)\u53ea\u662f\u7533\u660e\u4e86\u53ef\u4ee5\u8fdb\u884cDT\u7684\u6743\u9650\uff0c\u4f46\u5e76\u6ca1\u6709\u771f\u6b63\u6267\u884c\u8f6c\u6362\u3002  # external/sepolicy/file_contests\n# \u7ed1\u5b9asystem\u5e95\u4e0b\u6240\u6709\u6587\u4ef6\u4e3a system_file\n/system(/.*)?       u:object_r:system_file:s0\n# \u7ed1\u5b9avold\u53ef\u6267\u884c\u7a0b\u5e8f\u7684type\u4e3avold_exec\u3002\n/system/bin/vold    u:object_r:vold_exec:s0  \u4e00\u822c\u6d89\u53ca\u5230\u65b0\u542f\u8fdb\u7a0b\uff0c\u548cdomain\u8f6c\u6362\u7684\u8bdd\uff0c \u7528\u5230\u7684\u5b8f\u5982\u4e0b\uff1a  #   \u4ece\u975e init \u8fdb\u7a0b\u542f\u52a8\u4e00\u4e2a\u65b0\u8fdb\u7a0b\uff0c   \u5728\u7236\u8fdb\u7a0b\u7684 sepolicy \u4e2d\u8c03\u7528\uff0c   \u8fd9\u91cc\u7684 olddomain \u4e3a\u7236\u8fdb\u7a0b\u7684 domain \uff0c   type \u4e3a\u5b50\u8fdb\u7a0b\u7684 type \uff0c   newdomain \u4e3a\u5b50\u8fdb\u7a0b\u7684 domain \u3002  #   external / sepolicy / te_macros  #   domain_auto_trans ( olddomain ,   type ,   newdomain )  define ( ` domain_auto_trans , `  # Allow the necessary permissions.  domain_trans($1,$2,$3)  # Make the transition occur by default.  # \u8fd9\u53e5\u662f\u771f\u6b63\u8fdb\u884c\u8f6c\u6362\uff0c\u800c\u4e14\u662f\u81ea\u52a8\u7684...  type_transition $1 $2:process $3;   #   \u4ece init \u8fdb\u7a0b\u542f\u52a8\u4e00\u4e2a\u65b0\u8fdb\u7a0b\uff0c   \u5728\u5b50\u8fdb\u7a0b\u7684 sepolicy \u4e2d\u8c03\u7528\u3002\u8fd9\u91cc\u7684 domain \u4e3a\u5b50\u8fdb\u7a0b\u7684 domain  #   init_daemon_domain ( domain )  define ( ` init_daemon_domain , `  domain_auto_trans(init, $1_exec, $1)  tmpfs_domain($1)  )   \u4ee5\u4e0a\u63d0\u5230\u7684\u5728\u54ea\u4e2asepolicy\u4e2d\u8c03\u7528\uff0c\u5176\u5b9e\u5bf9\u4e8e\u6700\u7ec8\u7684\u89c4\u5219\u6587\u4ef6\u6ca1\u6709\u5f71\u54cd\uff0c \u533a\u5206\u4e0d\u540c\u7684sepolicy\u6587\u4ef6\uff0c\u53ea\u662f\u5c5e\u4e8e\u5f00\u53d1\u4eba\u5458\u7684\u5206\u7c7b\u548c\u6613\u4e8e\u7ef4\u62a4\u3002 \u4f60\u5b8c\u5168\u53ef\u4ee5\u5728vold.te \u4e2d\u5199\u4e2a\u89c4\u5219\u5141\u8bb8sdcardd\u7c7b\u578b\u7684\u8fdb\u7a0b\u6267\u884c\u67d0\u4e2a\u64cd\u4f5c\uff0c \u8be5\u89c4\u5219\u4f9d\u7136\u4f1a\u751f\u6548\u3002  \u53e6\u5916 \uff0c\u4ece\u4e0a\u9762\u8fd9\u4e2a\u5b8f\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230Android\u4e2d\u7684\u4e00\u4e2a\u547d\u540d\u4e60\u60ef\uff0c\u4e00\u822cdomain\u52a0\u4e0a\u540e\u7f00_exec\u5c31\u662f\u5173\u8054\u7684type\u3002  type  shell domain;\ntype  shell_exec exec_type file_type;  \u7136\u540e\uff0c\u6211\u4eec\u770b\u4e0b\uff0c \u5728init.te\u4e2d\uff0c\u5b58\u5728domain_trans\u7684\u58f0\u660e\uff0c\u5982\u679c\u518d\u770binit_shell.te\u7684\u5185\u5bb9\u7684\u8bdd\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5b58\u5728DT\u7684\u51b2\u7a81\uff08\u7b2c\u4e00\u6b21\u770b\u7684\u65f6\u5019\uff09\uff1a  # init_shell.te\n# \u81ea\u52a8\u4eceinit\u5207\u6362\u5230init_shell\u5f53\u6267\u884c\u7684\u7a0b\u5e8f\u662fshell_exec,\u56e0\u4e3a\u8be5\u5b8f\u5305\u542b\u4e86type_transition\n# \u8fd9\u4e2ate\u662f\u7ed9\u6240\u6709\u4eceinit.*.rc\u4e2d\u542f\u52a8\u7684\u811a\u672c\u5b9a\u4e49\u7684\ndomain_auto_trans(init, shell_exec, init_shell)  # init.te\n# \u4e0e\u4e0a\u9762\u7c7b\u4f3c\uff0c\u5c11\u4e86type_transition, \u4e5f\u5c31\u662f\u8bf4\u4e0d\u662f\u81ea\u52a8\u5207\u6362, \u53ea\u662f\u7533\u660e\u4e86\u6743\u9650\u3002\n# \u8fd9\u4e2a\u662f\u7ed9init.rc\u4e2dconsole\u670d\u52a1\u5b9a\u4e49\u7684\ndomain_trans(init, shell_exec, shell)  \u5728\u770binit.rc\uff0c\u6709\u5982\u4e0b\u5185\u5bb9\uff1a  service console /system/bin/sh\n    class core\n    console\n    disabled\n    user shell\n    group shell log\n    seclabel u:r:shell:s0  \u4e5f\u5c31\u662f\u8bf4\uff0cinit\u663e\u793a\u5207\u6362\u4e86sh\u7684domain\u3002\n\u6240\u4ee5\uff0c\u4e2a\u4eba\u7406\u89e3\u662f\uff0csh\u542f\u52a8\u7684\u65f6\u5019\uff0c\u5148\u9ed8\u8ba4\u5207\u6362\u5230init_shell\uff0c\u7136\u540e\u88abinit\u8fdb\u7a0b\u5207\u6362\u5230shell\u3002 \n\u8fd9\u4e48\u7406\u89e3\u7684\u8bdd\uff0ctype_transition\u7684\u58f0\u660e\u4e0d\u80fd\u6709\u51b2\u7a81\u3002\uff08\u672a\u9a8c\u8bc1\uff09", 
            "title": "init \u542f\u52a8\u8fdb\u7a0b\u5e76\u5207\u6362domain"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#zygote-domain", 
            "text": "\u9996\u5148\uff0c \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c \u6240\u6709\u7684app\u548cframework server\u90fd\u662fzygote\u901a\u8fc7fork\u7684\u5f62\u5f0f\u521b\u5efa\u7684\u3002\u4e0b\u9762\u7b80\u5355\u770b\u4e0b\u8fd9\u4e2a\u51fd\u6570\u3002  static pid_t ForkAndSpecializeCommon(JNIEnv* env, uid_t uid, gid_t gid, jintArray javaGids,\n                                     jint debug_flags, jobjectArray javaRlimits,\n                                     jlong permittedCapabilities, jlong effectiveCapabilities,\n                                     jint mount_external, \n                                     jstring java_se_info, jstring java_se_name,\n                                     bool is_system_server, jintArray fdsToClose, \n                                     jstring instructionSet, jstring dataDir) { \n pid_t pid = fork();\n if (pid == 0) {\n  // ....\n   rc = selinux_android_setcontext(uid, is_system_server, se_info_c_str, se_name_c_str);\n  // ....\n}                                 \u8fd9\u6bb5\u4ee3\u7801\u8bbe\u7f6e\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u7684\u6838\u5fc3\u53c2\u6570\u662f  is_system_server  \u548c  se_info_xxx \u3002  int selinux_android_setcontext(uid_t uid,\n       int isSystemServer,\n       const char *seinfo, \n       const char *pkgname)\n{\n// ....\nrc = seapp_context_lookup(SEAPP_DOMAIN, uid, isSystemServer, seinfo, pkgname, NULL, ctx); // seinfo is se_info_c_str and pkgname is se_name_c_str\n// ....\n}  seapp_context_lookup  \u8fd9\u4e2a\u51fd\u6570\u7684\u4efb\u52a1\u5c31\u662f\u6839\u636e\u53c2\u6570\u627e\u5230\u5bf9\u5e94\u8be5app/server\u7684\u89c4\u5219\uff0c\u7136\u540e\u8bbe\u7f6e\u5b89\u5168\u4e0a\u4e0b\u6587\u3002\u5982\u679c\u60f3\u8be6\u7ec6\u4e86\u89e3\u67e5\u627e\u89c4\u5219\uff0c \u53ef\u4ee5\u770b\u4e0b\u5177\u4f53\u5b9e\u73b0\u3002\u4e0b\u9762\u7b80\u5355\u4ecb\u7ecd\u4e0b\uff0c\u5bf9\u4e8e\u7531zygote\u521b\u5efa\u7684app/server\u7684\u89c4\u5219\u6587\u4ef6\u3002  \u8be5\u51fd\u6570\u662f\u57fa\u4e8e\u6587\u4ef6 external/sepolicy/seapp_contexts \u67e5\u627e\u5bf9\u5e94\u5e94\u7528\u7684\u8fdb\u7a0b\u57df\u548c\u6587\u4ef6type\u3002   isSystemServer=true domain=system_server\n user=system domain=system_app type=system_app_data_file\n user=bluetooth domain=bluetooth type=bluetooth_data_file\n user=nfc domain=nfc type=nfc_data_file\n user=radio domain=radio type=radio_data_file\n user=shared_relro domain=shared_relro\n user=shell domain=shell type=shell_data_file\n user=_isolated domain=isolated_app\n user=_app seinfo=platform domain=platform_app type=app_data_file\n user=_app domain=untrusted_app type=app_data_file  \u4e3e\u4e2a\u4f8b\u5b50\uff0c \u5982\u679c isSystemServer \u4e3a true\uff0c \u5219domain\u4e3a system_server \u3002 \u5982\u679cuser\u662f _app \uff0c \u5e76\u4e14\u7b7e\u540d\u662fplatform\uff08\u4ece\u6e90\u7801\u7f16\u8bd1\u7684\u5e94\u7528\uff09\uff0c \u5219domain\u662f platform_app \uff0c \u5bf9\u5e94\u7684\u6587\u4ef6type\u4e3a app_data_file \u3002 \u5982\u679c\u662f\u7b2c\u4e09\u65b9\u5e94\u7528\uff0c user\u4e5f\u4e3a _app \uff0c \u4f46\u56e0\u4e3a\u4e0d\u6ee1\u8db3platform\u7b7e\u540d\uff0c\u6240\u4ee5\uff0c \u57df\u662f untrusted_app \u3002\u9664\u4e86user\u56fa\u5b9a\uff0c\u5176\u4f59\u7684\u5b57\u6bb5\u90fd\u662f\u5b57\u7b26\u4e32\uff0c\u53ea\u8981\u5339\u914d\u5c31\u884c\u3002\u6bd4\u5982domain\u8981\u8ddfxx.te\u4e2d\u7684\u5339\u914d\uff0c type\u540c\u7406\u3002seinfo\u53ea\u8981\u8ddf\u540e\u6587\u7684 mac_permissions.xml \u5339\u914d\u3002  \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u51fa\u73b0\u4e86seinfo\uff0c \u8fd9\u4e2a\u4fe1\u606f\u662f\u5b58\u653e\u5728external/sepolicy/mac_permissions.xml, \u5185\u5bb9\u5982\u4e0b\u3002\u5b9a\u4e49\u4e86\u7b7e\u540d\u7684key\u4e0eseinfo\u503c\u7684\u5173\u7cfb\u3002  policy \n     !-- Platform dev key in AOSP -- \n     signer   signature= @PLATFORM \n       seinfo   value= platform / \n     /signer \n     !-- All other keys -- \n     default \n       seinfo   value= default / \n     /default  /policy   \u8be5\u6587\u4ef6\u662f\u7531pkms\u8bfb\u53d6\uff0c\u5e76\u5728\u5b89\u88c5\u5e94\u7528\u65f6\uff0c\u7acb\u5373\u7ed9\u88ab\u5b89\u88c5\u7684\u5e94\u7528\u5206\u914dseinfo\u4fe1\u606f\u3002\u4e0a\u9762\u7684\u53ea\u662f\u4e00\u4e2a\u7248\u672c\uff0c\u7b80\u5355\u770b\u4e86\u4e0bpkms\u7684\u5b9e\u73b0\uff0c \u53ef\u4ee5\u505a\u5230\u5982\u4e0b\u7684\u65b9\u5f0f\uff1a  policy \n     !-- Platform dev key in AOSP -- \n     signer   signature= @PLATFORM \n        package   name= com.abc.d \n          seinfo   value= platform / \n        /package \n     /signer \n     !-- All other keys -- \n     default \n       seinfo   value= default / \n     /default  /policy   \u4e5f\u5c31\u662f\u8bf4\uff0c \u65e2\u53ef\u4ee5\u57fa\u4e8e\u7b7e\u540d\uff0c \u4e5f\u53ef\u4ee5\u66f4\u8be6\u7ec6\u7684\u6839\u636e\u5305\u540d\uff0c\u518d\u6307\u5b9a\u66f4\u7ec6\u81f4\u7684seinfo\u5206\u7c7b\u3002\u5f53\u7136\u5fc5\u987b\u5728 seapp_contexts \u4e2d\u6dfb\u52a0\u76f8\u5e94\u7684\u89c4\u5219\uff0c\u5e76\u4e14\u53c2\u8003 system_server.te \u6dfb\u52a0\u5bf9\u5e94\u57df\u7684\u6743\u9650\u63a7\u5236\u3002  \u4ee5\u4e0a seapp_contexts \u4e2ddomain\u7684\u503c\uff0c\u90fd\u53ef\u4ee5\u5728external/sepolicy/xxx.te \u4e2d\u627e\u5230\uff0c \u8be6\u7ec6\u7684\u53ef\u4ee5\u81ea\u884c\u67e5\u770b\u3002  \u5bf9\u4e8e\u65b0\u6dfb\u52a0\u7684\u4e00\u4e2a\u5e94\u7528\uff0c\u5c31\u53ef\u4ee5\u57fa\u4e8e\u4ee5\u4e0a\u4fe1\u606f\uff0c\u901a\u8fc7pkms\u6dfb\u52a0\u76f8\u5e94\u89c4\u5219\u3002  \u4f46\u662f\u5bf9\u4e8e\u65b0\u6dfb\u52a0\u4e00\u4e2a\u670d\u52a1\uff0c \u5219\u9700\u8981\u5728external/sepolicy/service_context.te \u6216\u8005 external/sepolicy/service.te \u4e2d\u6dfb\u52a0\u5728 service_manager \u6ce8\u518c\u7684\u540d\u5b57\u548c\u5bf9\u5e94\u7684\u57df/\u7c7b\u578b\uff0c \u5426\u5219 service_manager \u4f1a\u62d2\u7edd\u6ce8\u518c\u3002\u540c\u6837\uff0c\u5982\u679c\u4e0d\u5c06\u65b0\u6dfb\u52a0\u7684\u670d\u52a1\u5173\u8054\u5230 service_manager_type \u4e2d\uff0c \u5c31\u65e0\u6cd5\u88ab\u67e5\u627e\u548c\u83b7\u53d6\u3002  # external/sepolicy/service.te\n\n type surfaceflinger_service,    service_manager_type;\n type system_app_service,        service_manager_type;\n type system_server_service,     service_manager_type;  \u5c06\u4e0d\u540c\u7684type\u90fd\u8ddf service_manager_type \u5c5e\u6027\u5173\u8054\uff0c \u540e\u9762\u4f1a\u4f7f\u7528\u8be5\u5c5e\u6027\u8fdb\u884c\u6743\u9650\u63a7\u5236\u3002  # external/sepolicy/service_contexts\nSurfaceFlinger                            u:object_r:surfaceflinger_service:s0\ndisplay.qservice                          u:object_r:surfaceflinger_service:s0\nwindow                                    u:object_r:system_server_service:s0\n*                                         u:object_r:default_android_service:s0  \u8fd9\u4e2a\u6587\u4ef6\u7684\u89c4\u5219\u4e0efile_contexts\u7c7b\u4f3c\uff0c\u5173\u8054\u4e86\u670d\u52a1\u4e0e{user\uff0c role\uff0c type\uff0c level}\u3002\u6700\u540e * \u662f\u5339\u914d\u6240\u6709\u4ee5\u4e0a\u89c4\u5219\u65e0\u6cd5\u5339\u914d\u7684\u670d\u52a1\uff0c \u5176type\u4e3a default_android_service\u3002  \u4e0b\u9762\u6211\u4eec\u770b\u4e0b\uff0c service_manager \u7684\u6743\u9650\u63a7\u5236\u3002  #   domain . te  #   \u4e0d\u5141\u8bb8 service_manager \u5bf9 default_android_service \u5c5e\u6027\u7684\u670d\u52a1\u6267\u884c add \u64cd\u4f5c\u3002\u975e\u89c4\u5219\uff0c\u7f16\u8bd1\u4fdd\u62a4\u3002  neverallow   domain   default_android_service : service_manager   add ;  #   \u5141\u8bb8 domain \u57df\u7684\u8fdb\u7a0b\u8bf7\u6c42 service_manager \u6267\u884c find \u64cd\u4f5c\u3002  allow   domain   service_manager_type : service_manager   find ;   \u6211\u4eec\u524d\u9762\u7684\u4f8b\u5b50\u770b\u5230\uff0c \u6bcf\u4e2ate\u89c4\u5219\u6587\u4ef6\u5f00\u5934\u90fd\u4f1a\u628a\u8be5\u7c7b\u578b\u4e0edomain\u57df\u5173\u8054\uff0c\u6240\u4ee5\uff0c\u5b9e\u9645\u4e0a\uff0c\u8fd9\u91cc\u662f\u5141\u8bb8\u4e86\u6240\u6709\u6709\u89c4\u5219\u7684\u8fdb\u7a0b\u8bf7\u6c42 service_manager \u64cd\u4f5c\u3002\u8be5object class \u548c  perm_set \uff0c \u662fandroid\u65b0\u6dfb\u52a0\u7684\uff0c\u5728\u524d\u6587\u63d0\u5230\u5c5e\u4e8euserspace\uff0c \u5728service manager\u7684\u4ee3\u7801\u4e2d\uff0c  svc_can_xxx  \u51fd\u6570\u5c31\u662f\u5728\u7528\u6237\u5c42\u68c0\u67e5\u8be5\u89c4\u5219\u662f\u5426\u6ee1\u8db3\u3002\u672a\u4ed4\u7ec6\u7814\u7a76\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u770b\u4e0b\u3002  \u4e0a\u9762\u4ecb\u7ecd\u4e86\u521b\u5efa\u8fdb\u7a0b\u548cDT, \u662f\u9488\u5bf9\u8fdb\u7a0b\u7684,\u4e0b\u9762\u4ecb\u7ecd\u4e0b TT ,\u9488\u5bf9\u6587\u4ef6\u7684,\u540c\u6837\u5728\u521b\u5efa\u6587\u4ef6\u7684\u65f6\u5019,\u9700\u8981\u6307\u5b9atype.\u540c\u6837\u7528\u5230\u7684\u4e5f\u662f type_transition .  define ( ` file_type_trans , `  # Allow the domain to add entries to the directory.  allow $1 $2:dir ra_dir_perms;  # Allow the domain to create the file.  allow $1 $3:notdevfile_class_set create_file_perms;  allow $1 $3:dir create_dir_perms;  ) \n\n\n  ##################################### \n  #   file_type_auto_trans ( domain ,   dir_type ,   file_type ) \n  #   Automatically   label   new   files   with   file_type   when \n  #   they   are   created   by   domain   in   directories   labeled   dir_type . \n  # \n  define ( ` file_type_auto_trans , `   # Allow the necessary permissions.   file_type_trans($1, $2, $3)   # Make the transition occur by default.   type_transition $1 $2:dir $3;   type_transition $1 $2:notdevfile_class_set $3;    )   \u5339\u914d\u8fdb\u7a0b\u7684domain\u548c\u76ee\u5f55\u7684type\u7684\u60c5\u51b5\u4e0b\u6240\u521b\u5efa\u7684\u6587\u4ef6,\u5176SContext(\u5b89\u5168\u4e0a\u4e0b\u6587)\u5c31\u4f1a\u88ab\u6307\u5b9a\u4e3a file_type . android\u4e2d\u5e76\u6ca1\u6709\u5728\u4f7f\u7528\u8fd9\u4e24\u4e2a\u5b8f,\u4e5f\u5c31\u662f\u8bf4\u4f7f\u7528\u4e86\u9ed8\u8ba4\u7684\u89c4\u5219, \u4e5f\u5c31\u662f\u7ee7\u627f\u7236\u76ee\u5f55\u7684SContext.\u4e0a\u6587\u7684filesystem\u6253\u6807\u7b7e\u4e2d\u63d0\u5230\u8fc7TT\uff0c genfscon \u80fd\u591f\u7981\u5236TT\u89c4\u5219\uff0c\u5f3a\u5236\u5c06\u6240\u6709\u6587\u4ef6\u7684SContext\u6307\u5b9a\u4e3a\u9700\u8981\u7684\u3002\u8fd8\u6709\u4e00\u4e2a fs_use_trans \uff0c \u5176\u9ed8\u8ba4\u89c4\u5219\u4e0d\u662f\u7ee7\u627f\u7236\u76ee\u5f55\u7684\u89c4\u5219\uff0c\u800c\u662f\u7ee7\u627f\u6587\u4ef6\u7cfb\u7edf\u7684\u89c4\u5219\u3002 \u6587\u4ef6\u7cfb\u7edf\u6807\u7b7e\u521d\u59cb\u5316 .", 
            "title": "zygote \u542f\u52a8\u8fdb\u7a0b\u5e76\u5207\u6362domain"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#mlsmulti-level-security", 
            "text": "\u8fd9\u4e1c\u897f\u4e0d\u597d\u7406\u89e3\uff0c\u3000\u5728android\u4e2d\uff0c\u57fa\u672c\u4e5f\u4e0d\u4f1a\u6539\uff0c\u3000\u628a\u6211\u7684\u7406\u89e3\u7b80\u5355\u4ecb\u7ecd\u4e0b\uff0e\u5b89\u5168\u5206\u7ea7\u5c31\u8ddf\u4fdd\u5bc6\u5206\u7ea7\u4e00\u6837\uff0c\u5bf9\u4e3b\u52a8\u5355\u5143\u548c\u88ab\u52a8\u5355\u5143\u90fd\u6709\u76f8\u540c\u7684\u5206\u7ea7\uff0e\u800c\u9ad8\u7ea7\u522b\u7684\u4e3b\u52a8\u5355\u5143\u53ef\u4ee5\u8bfb\u53d6\u4f4e\u7ea7\u522b\u7684\u88ab\u52a8\u5355\u5143\uff0c\u4f46\u4e0d\u5141\u8bb8\u5f80\u5730\u7ea7\u522b\u7684\u88ab\u52a8\u5355\u5143\u5199\u6570\u636e\uff0c\u9632\u6b62\u6cc4\u5bc6\uff0e\u800c\u4f4e\u7ea7\u522b\u7684\u4e3b\u52a8\u5355\u5143\u53ef\u4ee5\u5f80\u9ad8\u7ea7\u522b\u7684\u88ab\u52a8\u5355\u5143\u5199\u6570\u636e\u4f46\u4e0d\u80fd\u8bfb\u53d6\u9ad8\u7ea7\u522b\u88ab\u52a8\u5355\u5143\uff0e\u5f62\u8c61\u70b9\u63cf\u8ff0\u5c31\u662f no write down \u548c\u3000no read up.  \u6211\u4eec\u6765\u770b\u4e2a\u683c\u5f0f\uff0c\u5728\u672a\u542f\u7528MLS\u548c\u542f\u7528\u4e86MLS\u7684SContext\u683c\u5f0f\u5dee\u5f02\uff1a  # \u672a\u542f\u7528MLS\nuser_u:role_r:type_t\n\n# \u542f\u7528\u4e86MLS\n# - \u8868\u793a\u8303\u56f4\n# \u5de6\u4fa7\uff0c\u6211\u4eec\u79f0\u4e3a\u6700\u4f4e\u5b89\u5168\u7ea7\u522b\uff0c\u4e5f\u662f\u5f53\u524d\u4e3b\u52a8\u5355\u5143\uff0f\u88ab\u52a8\u5355\u5143\u7684\u7ea7\u522b\n# \u53f3\u4fa7\uff0c\u6211\u4eec\u79f0\u4e3a\u6700\u9ad8\u5b89\u5168\u7ea7\u522b\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u4e3b\u52a8\u5355\u5143\uff0f\u88ab\u52a8\u5355\u5143\u53ef\u80fd\u83b7\u5f97\u7684\u6700\u9ad8\u7ea7\u522b\nuser_u:role_r:type_t:sensitivity[:category...]-sensitivity[:category...]  \u7ed3\u5408\u5f00\u5934\u7684\u4f8b\u5b50\uff0candroid\u662f\u542f\u7528\u4e86MLS\uff0c\u4f46\u662f\uff0c\u5982\u679c\u628a\u6240\u6709\u7684\u89c4\u5219\u8fc7\u4e00\u904d\uff0c\u5c31\u4f1a\u53d1\u73b0\u6240\u6709\u7684sensitivity\u90fd\u4e3as0,\u3000\u6240\u4ee5\uff0c\u867d\u7136\u542f\u7528\u4e86\uff0c\u4f46\u5e76\u6ca1\u6709\u5206\u7ea7, \u4e5f\u6ca1\u6709\u5206\u7c7b(category)\uff0e\u3000\u6240\u4ee5\uff0c\u3000\u5173\u4e8e\u8fd9\u5757\uff0c\u6211\u4eec\u4e5f\u662f\u7b80\u5355\u4ecb\u7ecd\u4e0b\uff0c\u53ef\u80fd\u6709\u7406\u89e3\u4e0d\u5230\u4f4d\uff0e  \u5982\u679c\u51fa\u73b0\u5206\u7ea7\u548c\u5206\u7c7b\uff0c\u3000\u4f1a\u4f7f\u7528 level\u3000\u5173\u952e\u5b57\u5b9a\u4e49:  level s0:c0.c255  #\u8868\u793as0, category\u4ecec0\u4e00\u76f4\u5230c255  \u5206\u7ea7\u6709\u9ad8\u4f4e\uff0c s0   s1\uff0c\u3000\u5206\u7c7b\u6ca1\u6709\u9ad8\u4f4e\uff0c\u53ea\u6709\u5305\u542b\uff0c\u3000\u6bd4\u5982 c0.c255\u3000\u5305\u542b c10.c25. \u4e2a\u4eba\u611f\u89c9\u8fd9\u5757\u7684\u529f\u80fd\u662f\u5bf9Role\u7684\u5f3a\u5316\uff0c\u3000\u66f4\u7ec6\u81f4\u7684\u9636\u7ea7\u5173\u7cfb\uff0e  \u4e0b\u9762\u770b\u4e2a\u4f8b\u5b50\u6765\u8f85\u52a9\u7406\u89e3\uff0e   # Datagram send: Sender must be dominated by receiver unless one of them is\n # trusted.\n mlsconstrain unix_dgram_socket { sendto }\n          (l1 domby l2 or t1 == mlstrustedsubject or t2 == mlstrustedsubject);\n# mlstrustedsubject \u662fattribute  \u9996\u5148\uff0candroid\u4e2d\u4e3b\u8981\u7528\u5230\u4e86mlsconstrain, \u5176\u8bed\u6cd5\u5982\u4e0b\uff0c\u3000\u4e0econstrain\u4e00\u6837\uff1a  mlsconstrain object_class perm_set expression  expression\u6709u1, u2, r1, r2, t1, t2, l1, l2, h1, h2 \u8ddfRole\u7684\u6743\u9650\u63a7\u5236\u5f88\u50cf, \u53ea\u662f\u591a\u4e86l1, l2, h1, h2\uff1a    l1, h1, \u8868\u793asource\u7684low sensitivity level, high sensitivity level    l2, h2, \u8868\u793atarget\u7684low sensitivity level, high sensitivity level    \u5173\u7cfb\uff1a    dom: l1 dom l2, \u8868\u793al1 sensitivity  = l2 sensitivity, l1\u7684category\u5305\u542bl2\u7684category    domby: \u8ddfdom\u76f8\u53cd    eq: sensitivity \u76f8\u7b49\uff0c\u3000category\u3000\u76f8\u7b49    incomp: \u4e0d\u53ef\u6bd4\uff0e\u5177\u4f53\u542b\u4e49\u672a\u77e5...", 
            "title": "MLS(Multi-level Security)"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#_3", 
            "text": "file_contexts : \u5173\u8054\u6587\u4ef6\u7cfb\u7edf\u4e0a\u6587\u4ef6\u4e0etype\uff0c \u6216\u8005\u8bf4\uff0c\u6307\u5b9a\u6587\u4ef6\u5c5e\u4e8e\u67d0\u4e2atype\u3002\u88ab\u52a8\u5355\u5143\u7684scontext\u3002\u6bd4\u5982\uff1a  # netd\u5c5e\u4e8enetd_exec\u3002\u6240\u6709\u8981\u6267\u884cnetd\u8fdb\u7a0b\u7684\u7a0b\u5e8f\u5fc5\u987b\u7533\u8bf7 netd_exec \u7684 execute \u6743\u9650\u3002\n\n/system/bin/netd    u:object_r:netd_exec:s0  *.te : TE\u6743\u9650\u89c4\u5219\u6587\u4ef6\u3002\u6307\u5b9a\u4e86\u6bcf\u4e2adomain\u7684\u6743\u9650\uff0c\u540c\u65f6\u4e5f\u6307\u5b9a\u4e86\u4e0d\u540cdomain\u7684\u5165\u53e3\u3002\u6bd4\u5982\u4e0a\u6587\u63d0\u5230\u7684 init_daemon_domain , \u5c31\u6307\u5b9a\u4e86\u5bf9\u5e94domain\u7684\u5165\u53e3\u4e3a\u67d0\u4e2atype\u3002\u51e0\u4e4e\u6240\u6709\u8be5\u6587\u4ef6\u7684\u5f00\u5934\u90fd\u4f1a\u4e0edomain\u5173\u8054\uff0c \u4e5f\u5c31\u662f\u8bf4\u90fd\u5c5e\u4e8edomain\u8fd9\u4e2a\u5c5e\u6027\u3002  #   \u6307\u5b9a\u4e86 domain \u4e3a shell \u7684\u5165\u53e3\u662f shell_exec \uff0c   \u4e5f\u5c31\u662f\u7ed1\u5b9a\u4e86 type \u548c domain \u7684\u5173\u7cfb\u3002  allow   shell   shell_exec : file   {   entrypoint   execute   } ;    \u4ece\u4e0a\u9762\u4e24\u7c7b\u6587\u4ef6\uff0c\u5c31\u8bf4\u660e\u4e86\u6307\u5b9a\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u548c\u5bf9\u5e94\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\u662f\u5982\u4f55\u5173\u8054\u7684\u3002\u6240\u4ee5\uff0c \u5982\u679c\u65b0\u6dfb\u52a0\u8fdb\u7a0b\uff0c \u5fc5\u987b\u52a8\u4e0a\u9762\u63d0\u5230\u7684\u6587\u4ef6\uff0c \u624d\u80fd\u6b63\u786e\u8bbe\u7f6e\u6307\u5b9a\u8fdb\u7a0b\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\u3002   mac_permissions.xml \uff1a pkms\u89e3\u6790\u7684\u6587\u4ef6\uff0c\u63cf\u8ff0\u4e86seinfo\u5b57\u6bb5\u4e0e\u7b7e\u540d/\u5305\u540d\u7684\u5173\u7cfb\u3002  seapp_contexts \uff1a zygote\u89e3\u6790\uff0c \u7528\u4e8e\u6839\u636euser\u548cseinfo\uff0c \u786e\u5b9a\u5e94\u7528\u6216\u7cfb\u7edf\u670d\u52a1\u7684domain\u548ctype\u3002  \u6240\u4ee5\uff0c \u5bf9\u4e8e\u6709\u7279\u6b8a\u6743\u9650\u9700\u6c42\u7684\u5e94\u7528\uff0c \u9700\u8981\u540c\u65f6\u589e\u52a0\u4e0a\u9762\u4e24\u4e2a\u6587\u4ef6\uff0c\u5f53\u7136TE\u7684\u89c4\u5219\uff0c\u9700\u8981\u4fee\u6539\u6216\u589e\u52a0te\u6587\u4ef6\u3002   service_contexts \uff1a \u7c7b\u4f3c file_contexts \u6587\u4ef6\uff0c \u5173\u8054\u4e86android\u7cfb\u7edf\u7684\u670d\u52a1\u4e0etype\u3002 \u8be5\u6587\u4ef6\u7684\u5185\u5bb9\u7531service manager\u5728\u8fd0\u884c\u65f6\u901a\u8fc7selinux\u7684\u63a5\u53e3\u52a8\u6001\u68c0\u67e5\u6743\u9650\u3002  service.te : \u5c06\u4e0d\u540c\u7c7b\u578b\u7684\u670d\u52a1\u4e0e service_manager_type  \u5173\u8054\u3002  \u5982\u679c\u65b0\u6dfb\u52a0framework\u7684\u670d\u52a1\uff0c \u5fc5\u987b\u4fee\u6539\u8fd9\u4e24\u4e2a\u6587\u4ef6\uff0c\u5426\u5219\u65e0\u6cd5\u6ce8\u518cservice manager\uff0c \u65e0\u6cd5\u88ab\u83b7\u53d6bp\u3002   file.te \u3000\u6240\u6709\u8ddf\u6587\u4ef6\u548c\u6587\u4ef6\u7cfb\u7edf\u76f8\u5173\u7684\u5206\u7ec4\u7684\u6807\u7b7e(type).\u5982\u679c\u6d89\u53ca\u5230\u65b0\u6dfb\u52a0\u6587\u4ef6\u7cfb\u7edf\u6216\u8005\u65b0\u7684/data/\u5e95\u4e0b\u76ee\u5f55\u6743\u9650\uff0c\u5efa\u8bae\u5728\u8fd9\u4e2a\u6587\u4ef6\u91cc\u5c06\u5176\u4e0e\u76f8\u5173\u7684type\u5173\u8054\uff0c\u5426\u5219\u53ef\u80fd\u5bfc\u81f4\u67d0\u4e9b\u7cfb\u7edf\u670d\u52a1\u65e0\u6cd5\u8bbf\u95ee\u6216\u8005\u6587\u4ef6\u65e0\u6cd5\u521b\u5efa\u3002   tools/  \u4e00\u4e9b\u68c0\u67e5\u548c\u5206\u6790\u5de5\u5177\uff0c \u90fd\u662f\u57fa\u4e8e\u8bed\u6cd5\u7c7b\u7684\uff0c\u8fd8\u6709\u51e0\u4e2a\u662f\u9488\u5bf9\u5e94\u7528\u7684\u89c4\u5219\u751f\u6210\u548c\u7f16\u8f91\u5de5\u5177\uff0c\u672a\u7814\u7a76\u4ee3\u7801\u3002", 
            "title": "\u89c4\u5219\u6587\u4ef6\u5173\u7cfb\u603b\u7ed3"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#device-sepolicy", 
            "text": "\u8def\u5f84\uff1a \u7531 BoardConfig.mk \u4e2d\u7684 BOARD_SEPOLICY_DIRS \u5b9a\u4e49  \u6587\u4ef6\uff1a \u7531 BoardConfig.mk \u4e2d\u7684 BOARD_SEPOLICY_UNION  device\u5e95\u4e0b\u7684sepolicy\u4e0d\u662foverlay\uff0c \u800c\u662f\u4f1a\u4e0eexternal/sepolicy\u7684\u89c4\u5219\u5408\u5e76\u3002 \u6240\u4ee5\uff0c \u53ef\u4ee5\u5728device\u5e95\u4e0b\u521b\u5efa\u540c\u540d\u6587\u4ef6\uff0c\u6dfb\u52a0\u8bbe\u5907\u76f8\u5173\u7684\u89c4\u5219\u3002  \u6bd4\u5982\uff0c \u6dfb\u52a0vold.te\uff0c \u5185\u5bb9\u5982\u4e0b\uff0c \u8d4b\u4e88vold\u7c7b\u578b\u7684\u8fdb\u7a0b\u6267\u884cntfs3g_exec\u7c7b\u578b\u7684\u7a0b\u5e8f\uff0c\u5e76\u81ea\u52a8\u5207\u6362domain\u3002\uff08ntfs3g_exec\u7c7b\u578b\u548cdomain\u5728\u540e\u9762\u4ecb\u7ecd\uff09    domain_auto_trans ( vold ,   ntfs3g_exec ,   ntfs3g ) \n  allow   vold   ntfs3g_exec : file   rx_file_perms ;   \u5982\u679c\u662f\u65b0\u6dfb\u52a0\u8fdb\u7a0b\u548csepolicy\uff0c \u5219\u989d\u5916\u9700\u8981\u5728file_context\u4e2d\u5c06\u53ef\u6267\u884c\u7a0b\u5e8f\u548ctype\u7ed1\u5b9a\u3002  # device/s3graphics/zx2000/sepolicy/file_contexts\n/system/bin/ntfs-3g u:object_r:ntfs3g_exec:s0", 
            "title": "device \u76f8\u5173sepolicy\u4fee\u6539\u7684\u65b9\u6cd5"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#selinux", 
            "text": "\u7b2c\u4e09\u65b9\u5de5\u5177\uff1a  apol  , \u7528\u4e8e\u5206\u6790\u6700\u7ec8\u751f\u6210\u7684sepolicy\u3002   external/sepolicy/tools \u4e0b\u9762\u6709\u4e00\u4e9b\u5de5\u5177\uff0c\u4f46\u7f3a\u5c11\u4f7f\u7528\u6587\u6863\uff0c\u53ef\u4ee5\u770b\u6e90\u7801\u7814\u7a76\u3002   \u5bf9\u4e8e\u7531\u4e8eselinux\u7684\u6743\u9650\u95ee\u9898\u5bfc\u81f4\u8fd0\u884c\u5f02\u5e38\uff0c\u53ef\u4ee5\u5728\u5bf9\u5e94\u7684te\u6587\u4ef6\u4e2d\u52a0\u5165\u5982\u4e0b\u5185\u5bb9, \u5c06\u5bf9\u5e94\u8fdb\u7a0b\u8bbe\u7f6e\u4e3apermissive\uff0c\u5728\u8fd0\u884c\u540e\uff0c\u7ec8\u7aef\u4f1a\u8f93\u51fa\u6240\u6709selinux\u7684\u8b66\u544a\uff0c\u4f46\u7a0b\u5e8f\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002\u57fa\u4e8e\u9501\u8f93\u51fa\u7684\u8b66\u544a\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u89c4\u5219\u3002  permissive $domain;  type=1400 audit(946684810.610:4): avc: denied { write } for pid=707 comm= m.coship.hotkey  name= property_service  dev= tmpfs  ino=7244 scontext=u:r:platform_app:s0 tcontext=u:object_r:property_socket:s0 tclass=sock_file permissive=1  perm_set  \u4e3a  { write } \uff0c \u7a0b\u5e8f\u4e3a m.coship.hotkey \uff0c  target class \u4e3a  sock_file \uff0c source context \u4e3a  u:r:platform_app:s0 \uff0c  target context \u4e3a  u:object_r:property_socket:s0  \u4e0a\u9762\u5c06TE\u89c4\u5219\u76844\u4e2a\u76f8\u5173\u5b57\u6bb5\u90fd\u5206\u6790\u4e86\uff0c \u53ea\u8981\u6dfb\u52a0\u76f8\u5e94\u7684\u89c4\u5219\u5c31\u884c\u3002\u770b\u4e0b\u9762te\u89c4\u5219\u3002  #   -   \u662f\u6392\u9664\u7684\u610f\u601d  #   \u4e0d\u5408\u9002\u7684\u6539\u6cd5\uff1a   \u6dfb\u52a0   -platform_app \u3002   \u7136\u540e\u518d\u6dfb\u52a0   allow   platfor_app   property_socket : sock_file   write \uff1b \n  neverallow   {   appdomain   -bluetooth   -radio   -shell   -system_app   -nfc   } \n      property_socket : sock_file   write ;   \u4e0d\u8fc7\uff0c\u8fd9\u4e2a\u9519\u8bef\u7531\u4e8e\u662fapp\uff0c \u6240\u4ee5\uff0c\u4e0d\u9002\u5408\u76f4\u63a5\u6dfb\u52a0\u5230 platform_app \u8fd9\u4e2a\u57df\uff0c \u56e0\u4e3a\u4f1a\u5bf9\u6240\u6709\u4ece\u6e90\u7801\u7f16\u8bd1\u7684\u5e94\u7528\u4ea7\u751f\u5f71\u54cd\u3002\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u989d\u5916\u8bbe\u7f6e\u4e00\u4e2aseinfo\u3002   \u5982\u679cSContext\u4e2d\u51fa\u73b0 unlabeled \uff0c \u5219\u8868\u9762\u8be5\u6587\u4ef6/\u76ee\u5f55/\u6587\u4ef6\u7cfb\u7edf\u672a\u6253\u6807\u7b7e\uff0c\u53c2\u8003\u4ee5\u4e0a\u4ecb\u7ecd\u5728\u5bf9\u5e94\u6587\u4ef6\u5185\u6dfb\u52a0\u6807\u7b7e\u3002   \u5982\u679c\u662f\u4fee\u6539\u6253\u6807\u7b7e\u7684\u6587\u4ef6\uff0c\u7f16\u8bd1\u540e\uff0csystem.img\u9700\u8981\u91cd\u65b0\u5237\uff0c\u5982\u679c\u662f\u4fee\u6539TE\u7684\u89c4\u5219\u6587\u4ef6\uff0c\u7f16\u8bd1\u540e\uff0c\u53ea\u9700\u8981\u91cd\u65b0\u5237boot.img", 
            "title": "SELinux \u7684\u8c03\u8bd5\u548c\u9519\u8bef\u5206\u6790\u8bf4\u660e"
        }, 
        {
            "location": "/SEAndroid\u89c4\u5219\u4ecb\u7ecd/#_4", 
            "text": "\u5728Android\u4e2d, \u7406\u8bba\u4e0a\u683c\u5f0f\u5316\u5206\u533a\u4f1a\u5bfc\u81f4\u6240\u6709\u6587\u4ef6\u7684scontex\u76f8\u5173\u4fe1\u606f\u4e22\u5931, \u800c\u5982\u679c\u9700\u6062\u590d(\u6bd4\u5982\u683c\u5f0f\u5316userdata\u540e), \u9700\u8981\u5728init.rc\u4e2d\u663e\u793a\u8c03\u7528 restorecon_recursive , \u4ee5\u6062\u590d\u6307\u5b9a\u76ee\u5f55\u7684secontext.  \u4e0a\u6587\u53ea\u63d0\u5230\u4e86Android\u4e2d\u7684\u5e38\u89c1labeling\u65b9\u6cd5, \u5728\u5b9e\u9645\u9879\u76ee\u4e2d, \u51fa\u73b0\u4e86\u9700\u8981\u5bf9ext4\u6587\u4ef6\u7cfb\u7edf\u7b49\u7684\u5916\u90e8\u5b58\u50a8\u6302\u8f7d\u5e76\u63a7\u5236\u6743\u9650. \u9700\u8981\u52a8\u6001\u5730\u6307\u5b9asecontex, \u8fd9\u91cc\u5c31\u4f7f\u7528\u4e86 mountpoint labeling \u65b9\u6cd5(\u76f4\u63a5google\u8be5\u5173\u952e\u5b57). \u5176\u4f7f\u7528\u573a\u666f\u662f\u540c\u4e00\u6587\u4ef6\u7cfb\u7edf\u5728\u4e0d\u540c\u6302\u8f7d\u70b9\u53ef\u4ee5\u6709\u4e0d\u540c\u7684secontext.\u76f8\u5173\u4ee3\u7801\u5982\u4e0b:   int   Ext :: doMount ( const   char   * fsPath ,   const   char   * fstype ,   const   char   * mountPoint , \n                  unsigned   long   fsFlags ,   int   ownerUid ,   int   ownerGid ,   int   permMask )  { \n     int   rc ; \n     //   labeling   mountpoint   for   ext   fs   when   mounting   udisk.   man   8   mount   for   more   options \n     const   char   *mountoption   =   context= u : object_r : extfs : s0 ;      unsigned long mountflags = MS_NOATIME | MS_NODEV | MS_NOSUID | MS_DIRSYNC;      unsigned long remountflags = mountflags | fsFlags;      mountflags |= fsFlags;      if (mountflags   MS_RDONLY) {  // readonly          // Mount as writable so that we can update the Uid/Gid and permission          mountflags  = ~MS_RDONLY;      }      rc = mount(fsPath, mountPoint, fstype, mountflags, mountoption);      if (rc   errno == EROFS) {          SLOGE( % s   appers   to   be   a   read   only   filesystem   -   retrying   mount   RO , fsPath);          mountflags |= MS_RDONLY;          rc = mount(fsPath, mountPoint, fstype, mountflags, mountoption);      }      if (rc == 0) {          // mount success, remount to the mount flags we want          chmod(mountPoint, 0770);          chown(mountPoint, ownerUid, ownerGid);          SLOGI( remount   as   user   option );          rc = Ext::remount(mountPoint, remountflags);      }      if (rc) {          SLOGE( % s   remount   to   user   option   failed   -   retrying   mount   with   default   option \\ n ,   fsPath ); \n         rc   =   mount(fsPath,   mountPoint,   fstype,   mountflags,   mountoption) ; \n     } \n\n     //   Dirty   Patch   :   fix   permission   of   pvr   files \n     fixPermission ( mountPoint ); \n     //   Dirty   Patch   end \n\n     return   rc ;  }    \u9884\u7559", 
            "title": "\u5b9e\u9645\u9879\u76ee\u4e2d\u9047\u5230\u7684\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848"
        }, 
        {
            "location": "/tcmalloc2.1\u6d45\u6790/", 
            "text": "version 1.0 done by wertherzhang @2014-05-12 write done with emacs org\n\n\nversion 1.1 done by wertherzhang @2017-03-16 moved to leanote\n\n\n\n\ntcmalloc2.1 \u6d45\u6790\n\n\n\u6765\u6e90: https://pengzhangdev.github.io/tcmalloc2.1%E6%B5%85%E6%9E%90/\n\n\n\u7b80\u4ecb\n\n\ntcmalloc(thread cached malloc) \u662f\u7531google\u4e3a\u5e76\u53d1\u7a0b\u5e8f\u800c\u5f00\u53d1\u7684\u5185\u5b58\u5206\u914d\u7ba1\u7406\u5668.tcmalloc\u81f4\u529b\u4e8e\u51cf\u5c11\u591a\u7ebf\u7a0b\u5185\u5b58\u8bf7\u6c42\u65f6\u5bf9\u9501\u7684\u7ade\u4e89, \u5728\u5bf9\u5c0f\u5185\u5b58\u7684\u7533\u8bf7\u65f6,\u53ef\u4ee5\u5728\u65e0\u9700\u9501\u7684\u60c5\u51b5\u4e0b\u9ad8\u6548\u83b7\u53d6\u5185\u5b58;\u800c\u5728\u83b7\u53d6\u5927\u5185\u5b58\u65f6,\u4f7f\u7528\u9ad8\u6821\u7684spinlocks.\u6b63\u56e0\u4e3atcmalloc\u662f\u5728\u7ebf\u7a0b\u5c40\u90e8\u7a7a\u95f4(TLS)\u9884\u5148\u5b58\u50a8\u90e8\u5206\u7a7a\u95f2\u5185\u5b58\u7528\u4e8e\u5206\u914d, \u5728\u7a0b\u5e8f\u521a\u542f\u52a8\u65f6,\u5176\u6240\u5360\u7528\u7684\u5185\u5b58\u4f1a\u6bd4dlmalloc\u6216\u5176\u4ed6\u7684\u5185\u5b58\u7ba1\u7406\u5668\u66f4\u5927,\u4f46\u5176\u589e\u957f\u901f\u5e45\u5ea6\u6bd4\u5176\u4ed6\u7ba1\u7406\u5668\u5c0f,\u6240\u4ee5,\u5728\u540e\u671f,\u5b9e\u9645\u5360\u7528\u5185\u5b58\u7a7a\u95f4\u4f1a\u76f8\u63a5\u8fd1.\n\n\n\u539f\u7406\u7b80\u6790\n\n\noverview\n\n\n\n\ntcmalloc\u4e3a\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u5206\u914d\u4e00\u4e2a\u7ebf\u7a0b\u672c\u5730\u7f13\u5b58(Thread Cache, \u4ee5\u4e0b\u7b80\u79f0TC)\uff0e\u6240\u6709\u5c0f\u5bf9\u8c61(\n256K)\u90fd\u4f1a\u4f18\u5148\u4eceThreadCache\u5206\u914d\uff0e\u800c\u5f53ThreadCache\u6ca1\u6709\u8db3\u591f\u7a7a\u95f2\u5185\u5b58\u65f6\uff0c\u5c31\u4f1a\u4eceCentralCache(\u4ee5\u4e0b\u7b80\u79f0CC)\u7533\u8bf7\u5185\u5b58.\u800c\u5f53Thread Cache\u5185\u5b58\u5bcc\u88d5\u65f6,\u4f1a\u5c06\u5185\u5b58\u8fd4\u56de\u7ed9Central Cache. Central Cache\u662f\u4ee5\u8fdb\u7a0b\u4e3a\u5355\u4f4d\u5b58\u5728,ThreadCache\u662f\u4ee5\u7ebf\u7a0b\u4e3a\u5355\u4f4d\u5b58\u5728.\u5bf9\u4e8e\u5927\u5185\u5b58(\n256K), \u76f4\u63a5\u4ecePage Heap(\u4ee5\u4e0b\u7b80\u79f0PH)\u6309\u9875\u5bf9\u9f50(4K)\u7533\u8bf7.\u901a\u5e38\u60c5\u51b5\u4e0b,\u4e00\u8fde\u4e32\u7684\u9875\u9762(4k)\u53ef\u4ee5\u591a\u4e2a\u5c0f\u5185\u5b58\u5e8f\u5217,\u6bcf\u4e2a\u5e8f\u5217\u5143\u7d20\u7b49\u5927\u5c0f.TC, CC, PH \u7684\u5173\u7cfb\u662f, TC \u5411CC\u7533\u8bf7\u5185\u5b58\u5e76GC\u7ed9CC. CC \u5411PH \u7533\u8bf7\u5185\u5b58\u5e76GC\u7ed9PH.\u5728TC\u4e2d\u7684\u6570\u636e\u5355\u4f4d\u65f6\u5b57\u8282,\u6309\u5927\u5c0f\u4e3a\u5355\u4f4d\u5206\u7c7b,\u6bcf\u4e2a\u7c7b\u4e2d\u65f6\u94fe\u8868.\u5728PH\u4e2d\u7684\u6570\u636e\u5355\u4f4d\u65f6Page(4K),\u6309PageNum\u5206\u7c7b,\u6bcf\u4e2a\u5206\u7c7b\u5185\u90e8\u7528\u94fe\u8868\u7ba1\u7406,\u7b2cPageNum\u7c7b\u7684\u94fe\u8868\u7ed3\u70b9\u4e3aPageNum\u4e2aPage.\u5728CC\u4e2d\u5b58\u5728\u6700\u591a\u7684\u6570\u636e\u7ed3\u6784,\u5b83\u8fde\u63a5\u7740TC\u548cPH.\u5176\u5b58\u653e\u4e86\u6765\u81eaCC\u7684slot\u7ed3\u6784,\u548c\u6765\u81eaPH\u7684PH\u7684span\u7ed3\u6784.\u6570\u636e\u7684\u79fb\u52a8. \u6240\u6709\u7684\u6570\u636e\u4eceTC\n-\nCC\n-\nPH\u90fd\u662f\u6279\u91cf(batch)\u79fb\u52a8.\u4eceTC\u7533\u8bf7\u6216\u91ca\u653e\u7684\u5185\u5b58\u90fd\u4f1a\u4f18\u5148\u4eceCC\u7684slots\u6570\u7ec4\u5904\u7406.slots\u5b58\u653e\u7684\u5c31\u662f\u6700\u8fd1\u4eceTC\u91ca\u653e\u7684\u5185\u5b58,\u7528\u4e8e\u5feb\u901f\u7684TC\u5185\u5b58\u7533\u8bf7.\u5982\u679cslots\u6761\u4ef6\u4e0d\u6ee1\u8db3,\u5c31\u4f1a\u64cd\u4f5cCC\u4e2d\u7684spans\u5bf9\u8c61.\u6240\u6709\u79fb\u52a8\u7684\u6570\u636e\u7684\u5927\u5c0f\u548cTC\u4e2d\u7684\u6700\u5927\u5927\u5c0f\u90fd\u662f\u5728\u52a8\u6001\u8c03\u6574\u7684.\n\n\n\u5c0f\u5bf9\u8c61\u5185\u5b58\u5206\u914d\n\n\n\n\n\u4e0a\u56fe\u4e3a\u5c0f\u5185\u5b58\u7ba1\u7406\u65f6\u7684sizemap\u5206\u7c7b\u7684\u793a\u610f\u56fe.\u5c0f\u5185\u5b58\u7684\u7ba1\u7406\u90fd\u5904\u4e8eThreadCache\u4e2d.\u6240\u6709\u5bf9\u4e8e256k\u4ee5\u4e0b\u7684\u5185\u5b58\u7533\u8bf7\u90fd\u662f\u4eceTC\u4e2d\u83b7\u53d6.\u4e2a\u4eba\u628a\u5c0f\u5185\u5b58\u5206\u914d,\u7406\u89e3\u4e3a3\u7ea7\u5185\u5b58\u8bf7\u6c42.\u8fdb\u7a0b\u5411TC\u8bf7\u6c42\u5185\u5b58, TC\u5411CC\u8bf7\u6c42\u5185\u5b58,CC\u5411PH\u8bf7\u6c42\u5185\u5b58.\n\n\n\n\n\n\n\u8fdb\u7a0b\u5411TC\u8bf7\u6c42\u548c\u91ca\u653e\u5185\u5b58\u5185\u5b58\n\n\n\n\nTC\u5185\u5b58\u7ba1\u7406\n  \u9996\u5148, \u5728\u8fdb\u7a0b\u7a7a\u95f4\u4e2d,\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7ebf\u7a0b,\u5b58\u5728\u4e0e\u5176\u5bf9\u5e94\u7684TC, \u6240\u6709\u7684TC\u88ab\u7528\u94fe\u8868\u4e32\u8054,\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u4e2a\u7ebf\u7a0b\u72ec\u6709.\u901a\u8fc7\u8fd9\u79cd,\u6bcf\u4e00\u4e2aTC\u90fd\u53ef\u4ee5\u770b\u5230\u4efb\u4f55\u4e00\u4e2aTC.\u5982\u4e0a\u56fe,\u5728TC\u4e2d\u5bf9\u5185\u5b58\u8fdb\u884c\u4e86\u5206\u7c7b\u7ba1\u7406,\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u7684\u5185\u5b58\u5927\u5c0f\u90fd\u4f1a\u5411\u4e0a\u53d6\u6574\u5230\u5bf9\u5e94\u5206\u7c7b,\u7136\u540e\u76f4\u63a5\u4ece\u5bf9\u5e94\u7684\u94fe\u8868\u4e2d\u53d6\u51fa\u4e00\u9879.\n\n\n\n\n\u8fdb\u7a0b\u5411TC\u7533\u8bf7\u5185\u5b58\n\n\n\n\n\u5c06\u8bf7\u6c42\u5185\u5b58\u5411\u4e0a\u5bf9\u5176\u5230size class.\n\n\n\u4ece\u5bf9\u5e94size class\u4e2d\u67e5\u627e\u7a7a\u95f2\u5185\u5b58, \u5982\u679c\u5b58\u5728,\u76f4\u63a5\u8fd4\u56de.\n\n\n\u5982\u679csize class\u4e2d\u65e0\u7a7a\u95f2\u5185\u5b58,\u5219\u89e6\u53d1\u5411CC\u8bf7\u6c42\u5185\u5b58\u7684\u673a\u5236.\n\n\n\n\n\n\n\n\n\u8fdb\u7a0b\u5411TC\u91ca\u653e\u5185\u5b58\n\n\n\n\n\u4ece\u91ca\u653e\u5185\u5b58\u7684\u5730\u5740,\u67e5\u627e\u5bf9\u5e94\u7684pageID.\n\n\n\u5982\u679cpage ID \u5c5e\u4e8eTC, \u5e76\u4e14TC\u7684Heap\u5b58\u5728,\u5219\u91ca\u653e\u5230TC\u4e2d\n\n\n\u5982\u679cPageID\u5c5e\u4e8eTC,\u800cTC\u7684Heap\u4e0d\u5b58\u5728(\u8de8\u7ebf\u7a0b\u5185\u5b58\u7533\u8bf7\u548c\u91ca\u653e, \u7533\u8bf7\u7ebf\u7a0b\u88ab\u9500\u6bc1\u7684\u60c5\u51b5\u4e0b),\u5219\u91ca\u653e\u5230CC\u4e2d,\u53c2\u8003TC\u5411CC\u91ca\u653e\u5185\u5b58\n\n\n\u5982\u679cpageID\u5c5e\u4e8ePH\u4e2d(\u5927\u5185\u5b58), \u5219\u76f4\u63a5\u91ca\u653e\u5230PH\u4e2d.\n\n\n\n\n\n\n\n\n\n\n\n\nTC\u5411CC\u8bf7\u6c42\u548c\u91ca\u653e\u5185\u5b58\n\n\n\n\n\n\nCC\u7684\u5185\u5b58\u7ba1\u7406.\n    \u5728CC\u4e2d\u540c\u6837\u7ef4\u62a4\u4e86\u4e0eTC\u4e2d\u5bf9\u5e94\u7684\u5206\u7c7b\u7bb1\u5b50.\u6bcf\u4e2a\u7c7b\u522b\u4e2d\u662f\u4e00\u4e2aCentralFreeList\u7c7b. \u8be5\u7c7b\u4e2d\u7ef4\u62a4\u4e86\u4e00\u4e2aslots\u53cc\u5411\u94fe\u8868,\u7528\u4e8e\u5feb\u901f\u5206\u914d\u5185\u5b58\u7ed9CC\u5e76\u63a5\u6536\u91ca\u653e\u7684\u5185\u5b58, \u5176\u5185\u5b58\u7c92\u5ea6\u4e0eTC\u4e2d\u76f8\u540c.\u540c\u6837,\u8be5\u7c7b\u4e2d\u4e5f\u7ef4\u62a4\u4e86\u4e24\u4e2aspan\u53cc\u5411\u94fe\u8868,empty(\u4e0d\u5305\u542b\u7a7a\u95f2\u5757)\u548cnonempty(\u5305\u542b\u7a7a\u95f2\u5757).span\u4f1a\u5728\u8fd9\u4e24\u4e2a\u94fe\u8868\u4e2d\u79fb\u52a8.Span\u662f\u4e2a\u4ec0\u4e48\u4e1c\u897f\u5462?\u5b83\u662fPH\u5185\u5b58\u7ba1\u7406\u7684\u4e00\u4e2a\u7c92\u5ea6,\u5176\u8868\u793a\u7684\u5185\u5b58\u5927\u5c0f\u4e3apage(4K)\u7684\u500d\u6570.\u540c\u65f6,\u5b83\u5305\u542b\u4e86\u66f4\u5c0f\u7684\u7c92\u5ea6\u5355\u4f4dobjects. \u6240\u4ee5,\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u662fCC\u548cPH\u4e4b\u95f4\u79fb\u52a8\u7684\u5185\u5b58\u5355\u5143.\u6240\u4ee5,Span\u548cslots\u7684\u5173\u7cfb\u662f,spans\u53ef\u4ee5\u62c6\u5206\u6210slots\n\n\n\u8fd9\u91cc,\u6211\u4eec\u8ba4\u4e3aspan\u5c5e\u4e8ePH\u7684,\u6240\u4ee5,\u8ddfspan\u7684\u76f8\u5173\u64cd\u4f5c\u6211\u4eec\u5728PH\u8bb2\u89e3.\n\n\n``` \n\n    class CentralFreeList {\n       // ...\n\n\nprivate\n:\n\n   \n//...\n\n\n  \n// We keep linked lists of empty and non-empty spans.\n\n  \nsize_t\n   \nsize_class_\n;\n     \n// My size class\n\n  \nSpan\n     \nempty_\n;\n          \n// Dummy header for list of empty spans\n\n  \nSpan\n     \nnonempty_\n;\n       \n// Dummy header for list of non-empty spans\n\n  \nsize_t\n   \nnum_spans_\n;\n      \n// Number of spans in empty_ plus nonempty_\n\n  \nsize_t\n   \ncounter_\n;\n        \n// Number of free objects in cache entry\n\n\n  \n// Here we reserve space for TCEntry cache slots.  Space is preallocated\n\n  \n// for the largest possible number of entries than any one size class may\n\n  \n// accumulate.  Not all size classes are allowed to accumulate\n\n  \n// kMaxNumTransferEntries, so there is some wasted space for those size\n\n  \n// classes.\n\n  \nTCEntry\n \ntc_slots_\n[\nkMaxNumTransferEntries\n];\n\n\n  \n// ...\n\n\n};\n\n\n\n// Information kept for a span (a contiguous run of pages).\n\n\nstruct\n \nSpan\n \n{\n\n  \nPageID\n        \nstart\n;\n          \n// Starting page number\n\n  \nLength\n        \nlength\n;\n         \n// Number of pages in span\n\n  \nSpan\n*\n         \nnext\n;\n           \n// Used when in link list\n\n  \nSpan\n*\n         \nprev\n;\n           \n// Used when in link list\n\n  \nvoid\n*\n         \nobjects\n;\n        \n// Linked list of free objects\n\n  \nunsigned\n \nint\n  \nrefcount\n \n:\n \n16\n;\n  \n// Number of non-free objects // \u5f53refcount\u4e3a0, \u5219\u91ca\u653e\u7ed9PageHeap.\n\n  \nunsigned\n \nint\n  \nsizeclass\n \n:\n \n8\n;\n  \n// Size-class for small objects (or 0)  // \u8fd9\u4e2a\u662fTC\u7684 SizeClass \u5206\u7c7b.\u56e0\u4e3a\u6bcf\u4e2a\u5206\u7c7b\u5bf9\u5e94\u4e00\u4e2aCentralFreeList,\u6bcf\u4e2aList\u5bf9\u5e941\u4e2aslots\u548c2\u4e2aspans. \u6240\u4ee5,spans\u4e2d\u7684objects\u90fd\u7edf\u4e00\u5c5e\u4e8e\u67d0\u4e2aSizeClass, \u8fd9\u91cc\u9700\u8981\u7ef4\u62a4\u8fd9\u4e2a\u6570\u636e\u5bf9object\u7684.\n\n  \nunsigned\n \nint\n  \nlocation\n \n:\n \n2\n;\n   \n// Is the span on a freelist, and if so, which?  // \u5728empty/nonempty list?\n\n  \nunsigned\n \nint\n  \nsample\n \n:\n \n1\n;\n     \n// Sampled object?\n\n\n\n#undef SPAN_HISTORY\n\n\n#ifdef SPAN_HISTORY\n\n  \n// For debugging, we can keep a log events per span\n\n  \nint\n \nnexthistory\n;\n\n  \nchar\n \nhistory\n[\n64\n];\n\n  \nint\n \nvalue\n[\n64\n];\n\n\n#endif\n\n\n  \n// What freelist the span is on: IN_USE if on none, or normal or returned\n\n  \nenum\n \n{\n \nIN_USE\n,\n \nON_NORMAL_FREELIST\n,\n \nON_RETURNED_FREELIST\n \n};\n\n\n};\n\n\n\n\n\n\n```\n\n\n\n\n\n\nTC\u5411CC\u8bf7\u6c42\u5185\u5b58\n    TC\u53ea\u6709\u5728\u5176\u5bf9\u5e94\u7684\u5206\u7c7b\u4e2d,\u4e0d\u5b58\u5728\u7a7a\u95f2\u5757\u65f6,\u624d\u4f1a\u5411CC\u7684\u5bf9\u5e94\u5206\u7c7b\u7533\u8bf7batch_size\u7684\u7a7a\u95f2\u5757.\n\n\n\n\n\u6839\u636e\u5f53\u524d\u8bf7\u6c42\u7684\u5185\u5b58,\u627e\u5230\u5bf9\u5e94\u7684\u5206\u7c7b,\u548c\u8be5\u5206\u7c7b\u4e0b\u7684\u9ed8\u8ba4CC\u8bf7\u6c42\u7684\u5bf9\u8c61\u4e2a\u6570(\nbatch_size\n). \u5728\u8be5\u5206\u7c7bfree list\u7684\u6700\u5927\u957f\u5ea6\u548c\nbatch_size\n\u4e2d\u53d6\u6700\u5c0f\u503c\u4e3a\u9700\u8981\u7533\u8bf7\u7684\u5bf9\u8c61\u4e2a\u6570(\nnum_to_move\n).\n\n\n\u57fa\u4e8e\u6162\u542f\u52a8\u7b97\u6cd5,\u7f13\u6162\u589e\u52a0\u5f53\u524d\u5206\u7c7b\u7684free list\u5bb9\u91cf.\n\n\n\u4eceCC\u7684\u5bf9\u5e94\u5206\u7c7b\u4e2d\u7684slots\u5bf9\u50cf,\u83b7\u53d6\u76f8\u5e94\u6570\u91cf\u7684objects.\n\n\n\u5982\u679cslots\u4e0d\u6ee1\u8db3,\u5219\u4ecespans\u5bf9\u8c61\u4e2d\u83b7\u53d6\u76f8\u5e94\u7684objects.\n\n\n\u5982\u679cspans\u4e0d\u6ee1\u8db3(nonempty\u4e3aNULL),\u5219\u89e6\u53d1CC\u5411PH\u8bf7\u6c42\u5185\u5b58.\n\n\n\n\n```\n    inline void* ThreadCache::Allocate(size_t size, size_t cl) {\n      // size \u5df2\u7ecf\u88ab\u5411\u4e0a\u5bf9\u9f50, cl\u4e3a\u5206\u7c7b\u7684\u7bb1\u53f7\n      ASSERT(size \n= kMaxSize);\n      // kMaxSzie == 256 * 1024\n      ASSERT(size == Static::sizemap()-\nByteSizeForClass(cl));\n      // sizemap() \u4e3a\u5206\u7c7b\u7684\u6570\u7ec4.\u6bcf\u4e2a\u6210\u5458\u4e3a\u94fe\u8868.\n      // ByteSizeForClass\u662f\u53d6\u51fa\u5bf9\u5e94\u7bb1\u53f7\u5185\u7684\u7406\u8bba\u5185\u5b58\u5927\u5c0f.\n\n\n  // \u4ee5\u4e0aassert \u68c0\u67e5,\u7406\u5e94\u5728\u8c03\u7528\u8be5\u51fd\u6570\u4e4b\u524d\u4fdd\u8bc1.\n\n  FreeList* list = \nlist_[cl];\n  if (list-\nempty()) {\n    return FetchFromCentralCache(cl, size);\n  }\n  size_ -= size;\n  return list-\nPop();\n}\n\n\n\n\n\n```\n\n\n\u6211\u4eec\u91cd\u70b9\u63cf\u8ff0\u4e0b,TC\u5411CC\u7533\u8bf7\u5185\u5b58\u7684\u8fc7\u7a0b.\u9996\u5148,\u6211\u4eec\u9700\u8981\u77e5\u9053,CC\u4e5f\u6309\u7167TC\u7684\u5185\u5b58\u5206\u7c7b\u65b9\u5f0f,\u5b58\u5728\u5404\u4e2a\u5206\u7c7b\u7684\u7bb1\u5b50.\u6240\u4ee5,\u5b9e\u9645\u4e0a\u662f\u5411CC\u4e2d\u7684\u5bf9\u5e94\u5206\u7c7b\u83b7\u53d6\u4e00\u8fde\u4e32\u7684\u7a7a\u95f2\u5185\u5b58.\u9996\u5148,\u6211\u4eec\u5f97\u786e\u5b9a,\u79fb\u52a8\u7684\u5185\u5b58\u6570\u91cf,\u4e5f\u5c31\u662f\u5bf9\u5e94\u5206\u7c7b\u7684\u5185\u5b58\u5757\u4e2a\u6570.\u9ed8\u8ba4\u60c5\u51b5\u4e0b, \u6709\u4e00\u4e2a\u89c4\u5219\u786e\u5b9a\u6bcf\u4e2a\u5206\u7c7b\u5bf9\u5e94\u7684\u8be5\u79fb\u52a8\u7684\u5185\u5b58\u6570\u91cf.\u4ee564K\u4e3a\u57fa\u51c6,\u9664\u4ee5\u5bf9\u5e94\u5206\u7c7b\u7684\u5185\u5b58\u5927\u5c0f,\u7b97\u51fa\u6765\u7684\u4e3a\u79fb\u52a8\u7684\u5185\u5b58\u6570\u91cf.\u4f46\u662f,\u5bf9\u4e8e\u4e00\u4e9b\u6781\u5c0f\u5185\u5b58,\u8fd9\u4e2a\u503c\u5c06\u5f88\u5927,\u6240\u4ee5,\u6211\u4eec\u9650\u5236\u6700\u5927\u4e3a32768\u4e2a,\u540c\u7406,\u5bf9\u4e8e\u6781\u5927\u5185\u5b58,\u8fd9\u4e2a\u503c\n=1,\u4f1a\u5bfc\u81f4\u8fd9\u4e2a\u5206\u7c7b\u7684\u5185\u5b58\u8bf7\u6c42\u6bcf\u6b21\u90fd\u5411CC\u8bf7\u6c42,\u6240\u4ee5,\u6211\u4eec\u8fd9\u53ea\u6700\u5c0f\u4e3a2,\u4fdd\u8bc1\u6700\u591a\u6bcf2\u6b21\u5411CC\u8bf7\u6c42\u4e00\u6b21\u5185\u5b58.\u4e0b\u9762\u4e3a,\u9ed8\u8ba4\u7684\u5206\u7c7b\u548c\u5bf9\u5e94\u7684\u79fb\u52a8\u6570\u91cf.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nidx\n\n\nclass_size\n\n\nnum_to_move_objs\n\n\nnum_to_move_pages\n\n\n\n\n\n\n\n\n\n\n1\n\n\n8\n\n\n8192\n\n\n2\n\n\n\n\n\n\n2\n\n\n16\n\n\n4096\n\n\n2\n\n\n\n\n\n\n3\n\n\n32\n\n\n2048\n\n\n2\n\n\n\n\n\n\n4\n\n\n48\n\n\n1365\n\n\n2\n\n\n\n\n\n\n5\n\n\n64\n\n\n1024\n\n\n2\n\n\n\n\n\n\n6\n\n\n80\n\n\n819\n\n\n2\n\n\n\n\n\n\n7\n\n\n96\n\n\n682\n\n\n2\n\n\n\n\n\n\n8\n\n\n112\n\n\n585\n\n\n2\n\n\n\n\n\n\n9\n\n\n128\n\n\n512\n\n\n2\n\n\n\n\n\n\n10\n\n\n144\n\n\n455\n\n\n2\n\n\n\n\n\n\n11\n\n\n160\n\n\n409\n\n\n2\n\n\n\n\n\n\n12\n\n\n176\n\n\n372\n\n\n2\n\n\n\n\n\n\n13\n\n\n192\n\n\n341\n\n\n2\n\n\n\n\n\n\n14\n\n\n208\n\n\n315\n\n\n2\n\n\n\n\n\n\n15\n\n\n224\n\n\n292\n\n\n2\n\n\n\n\n\n\n16\n\n\n240\n\n\n273\n\n\n2\n\n\n\n\n\n\n17\n\n\n256\n\n\n256\n\n\n2\n\n\n\n\n\n\n18\n\n\n288\n\n\n227\n\n\n2\n\n\n\n\n\n\n19\n\n\n320\n\n\n204\n\n\n2\n\n\n\n\n\n\n20\n\n\n352\n\n\n186\n\n\n2\n\n\n\n\n\n\n21\n\n\n384\n\n\n170\n\n\n2\n\n\n\n\n\n\n22\n\n\n416\n\n\n157\n\n\n2\n\n\n\n\n\n\n23\n\n\n448\n\n\n146\n\n\n2\n\n\n\n\n\n\n24\n\n\n480\n\n\n136\n\n\n2\n\n\n\n\n\n\n25\n\n\n512\n\n\n128\n\n\n2\n\n\n\n\n\n\n26\n\n\n576\n\n\n113\n\n\n2\n\n\n\n\n\n\n27\n\n\n640\n\n\n102\n\n\n2\n\n\n\n\n\n\n28\n\n\n704\n\n\n93\n\n\n2\n\n\n\n\n\n\n29\n\n\n768\n\n\n85\n\n\n2\n\n\n\n\n\n\n30\n\n\n832\n\n\n78\n\n\n2\n\n\n\n\n\n\n31\n\n\n896\n\n\n73\n\n\n2\n\n\n\n\n\n\n32\n\n\n960\n\n\n68\n\n\n2\n\n\n\n\n\n\n33\n\n\n1024\n\n\n64\n\n\n2\n\n\n\n\n\n\n34\n\n\n1152\n\n\n56\n\n\n2\n\n\n\n\n\n\n35\n\n\n1280\n\n\n51\n\n\n2\n\n\n\n\n\n\n36\n\n\n1408\n\n\n46\n\n\n2\n\n\n\n\n\n\n37\n\n\n1536\n\n\n42\n\n\n2\n\n\n\n\n\n\n38\n\n\n1792\n\n\n36\n\n\n2\n\n\n\n\n\n\n39\n\n\n2048\n\n\n32\n\n\n2\n\n\n\n\n\n\n40\n\n\n2304\n\n\n28\n\n\n2\n\n\n\n\n\n\n41\n\n\n2560\n\n\n25\n\n\n2\n\n\n\n\n\n\n42\n\n\n2816\n\n\n23\n\n\n3\n\n\n\n\n\n\n43\n\n\n3072\n\n\n21\n\n\n2\n\n\n\n\n\n\n44\n\n\n3328\n\n\n19\n\n\n3\n\n\n\n\n\n\n45\n\n\n4096\n\n\n16\n\n\n2\n\n\n\n\n\n\n46\n\n\n4608\n\n\n14\n\n\n3\n\n\n\n\n\n\n47\n\n\n5120\n\n\n12\n\n\n2\n\n\n\n\n\n\n48\n\n\n6144\n\n\n10\n\n\n3\n\n\n\n\n\n\n49\n\n\n6656\n\n\n9\n\n\n5\n\n\n\n\n\n\n50\n\n\n8192\n\n\n8\n\n\n2\n\n\n\n\n\n\n51\n\n\n9216\n\n\n7\n\n\n5\n\n\n\n\n\n\n52\n\n\n10240\n\n\n6\n\n\n4\n\n\n\n\n\n\n53\n\n\n12288\n\n\n5\n\n\n3\n\n\n\n\n\n\n54\n\n\n13312\n\n\n4\n\n\n5\n\n\n\n\n\n\n55\n\n\n16384\n\n\n4\n\n\n2\n\n\n\n\n\n\n56\n\n\n20480\n\n\n3\n\n\n5\n\n\n\n\n\n\n57\n\n\n24576\n\n\n2\n\n\n3\n\n\n\n\n\n\n58\n\n\n26624\n\n\n2\n\n\n7\n\n\n\n\n\n\n59\n\n\n32768\n\n\n2\n\n\n4\n\n\n\n\n\n\n60\n\n\n40960\n\n\n2\n\n\n5\n\n\n\n\n\n\n61\n\n\n49152\n\n\n2\n\n\n6\n\n\n\n\n\n\n62\n\n\n57344\n\n\n2\n\n\n7\n\n\n\n\n\n\n63\n\n\n65536\n\n\n2\n\n\n8\n\n\n\n\n\n\n64\n\n\n73728\n\n\n2\n\n\n9\n\n\n\n\n\n\n65\n\n\n81920\n\n\n2\n\n\n10\n\n\n\n\n\n\n66\n\n\n90112\n\n\n2\n\n\n11\n\n\n\n\n\n\n67\n\n\n98304\n\n\n2\n\n\n12\n\n\n\n\n\n\n68\n\n\n106496\n\n\n2\n\n\n13\n\n\n\n\n\n\n69\n\n\n114688\n\n\n2\n\n\n14\n\n\n\n\n\n\n70\n\n\n122880\n\n\n2\n\n\n15\n\n\n\n\n\n\n71\n\n\n131072\n\n\n2\n\n\n16\n\n\n\n\n\n\n72\n\n\n139264\n\n\n2\n\n\n17\n\n\n\n\n\n\n73\n\n\n147456\n\n\n2\n\n\n18\n\n\n\n\n\n\n74\n\n\n155648\n\n\n2\n\n\n19\n\n\n\n\n\n\n75\n\n\n163840\n\n\n2\n\n\n20\n\n\n\n\n\n\n76\n\n\n172032\n\n\n2\n\n\n21\n\n\n\n\n\n\n77\n\n\n180224\n\n\n2\n\n\n22\n\n\n\n\n\n\n78\n\n\n188416\n\n\n2\n\n\n23\n\n\n\n\n\n\n79\n\n\n196608\n\n\n2\n\n\n24\n\n\n\n\n\n\n80\n\n\n204800\n\n\n2\n\n\n25\n\n\n\n\n\n\n81\n\n\n212992\n\n\n2\n\n\n26\n\n\n\n\n\n\n82\n\n\n221184\n\n\n2\n\n\n27\n\n\n\n\n\n\n83\n\n\n229376\n\n\n2\n\n\n28\n\n\n\n\n\n\n84\n\n\n237568\n\n\n2\n\n\n29\n\n\n\n\n\n\n85\n\n\n245760\n\n\n2\n\n\n30\n\n\n\n\n\n\n86\n\n\n253952\n\n\n2\n\n\n31\n\n\n\n\n\n\n87\n\n\n262144\n\n\n2\n\n\n32\n\n\n\n\n\n\n\n\n    \n\u4ee5\u4e0a\u53ea\u662f\u9ed8\u8ba4\u503c\n,\n\u8fd9\u4e2a\u503c\u662f\u4f1a\u968f\u7740\u5185\u5b58\u7533\u8bf7\u6b21\u6570\u7684\u589e\u52a0\u800c\u8c03\u6574\n,\n \ngoogle\n\u7ed9\u8fd9\u4e2a\u7b97\u6cd5\u53d6\u540d\u4e3a\u6162\u542f\u52a8\n(\nslow-start\n)\n\u7b97\u6cd5\n.\n \n\u6211\u4eec\u6765\u770b\u4e0b\n.\n\u9996\u5148\n,\n \nlist\n\u6709\u4e2a\u6700\u5927\u503c\n,\n\u6211\u4eec\u80fd\u79fb\u52a8\u7684\u5927\u5c0f\u4e3a\nlist\n\u6700\u5927\u957f\u5ea6\u548c\u9ed8\u8ba4\u4e2d\u7684\u6700\u5c0f\u503c\n.\n \n\u4e3a\u4e86\u4fdd\u8bc1\n,\n\u5728\u5927\u91cf\u7533\u8bf7\u65f6\u7684\u6548\u7387\n,\n \n\u5728\nmax\n \nlength\n \n \n\u9ed8\u8ba4\u503c\u65f6\n,\n\u6211\u4eec\u6162\u6162\u589e\u957f\nmax\n \nlength\n,\n \n\u9632\u6b62\u6d6a\u8d39\u7a7a\u95f4\n,\n\u53c8\u80fd\u6709\u6548\u5730\u9010\u6e10\u63d0\u9ad8\u6548\u7387\n.\n \n\u5728\nmax\n \nlength\n \n \n\u9ed8\u8ba4\u503c\u65f6\n,\n\u8981\u4e48\u65f6\u5927\u91cf\u8bf7\u6c42\n,\n\u8981\u4e48\u662f\u7531\u4e8e\u8bf7\u6c42\u7684\u5185\u5b58\u5f88\u5927\n,\n\u5bfc\u81f4\u9ed8\u8ba4\u503c\u5c0f\n,\n\u6240\u4ee5\n,\n\u8fd9\u4e2a\u65f6\u5019\n,\n\u53ef\u4ee5\u6bcf\u6b21\u589e\u52a0\u9ed8\u8ba4\u503c\u5927\u5c0f\n.\n\u4f46\u6700\u5927\u79fb\u52a8\u6570\u4f9d\u7136\u65f6\u9ed8\u8ba4\u7684\u79fb\u52a8\u6570\n.\n\n\n    \n```\n\n        \n//\n \nslow-start\n\n                \n(\nsetq\n \nbatch_size\n \nnum_to_move\n)\n\n                \n(\nsetq\n \nlist_length\n \nget_list_length_max_length\n)\n\n                \n(\nfetch-mem\n \n(\nmin\n \nbatch_size\n \nlist_length\n))\n\n                \n(\nset-list-max-length\n \n                        \n(\nif\n \n(\n \nlist_length\n \nbatch_size\n)\n\n                               \n(+\n \nlist_length\n \n1\n)\n\n                              \n(+\n \nlist_length\n \nbatch_size\n)))\n\n\n        \n//\n \nRemove\n \nsome\n \nobjects\n \nof\n \nclass\n \ncl\n \nfrom\n \ncentral\n \ncache\n \nand\n \nadd\n \nto\n \nthread\n \nheap\n.\n\n        \n//\n \nOn\n \nsuccess\n,\n \nreturn\n \nthe\n \nfirst\n \nobject\n \nfor\n \nimmediate\n \nuse\n;\n \notherwise\n \nreturn\n \nNULL\n.\n\n        \nvoid\n*\n \nThreadCache\n::\nFetchFromCentralCache\n(\nsize_t\n \ncl\n,\n \nsize_t\n \nbyte_size\n)\n \n{\n\n          \nFreeList*\n \nlist\n \n=\n \nlist_\n[\ncl\n]\n;\n\n          \nASSERT(list-\nempty())\n;\n\n          \n//\n \nbatch_size\n \n\u4e3a\u9ed8\u8ba4\u7684\u79fb\u52a8\u6570\u91cf\n\n          \nconst\n \nint\n \nbatch_size\n \n=\n \nStatic\n:\n:\nsizemap\n()\n-\nnum_objects_to_move\n(\ncl\n);\n\n\n          \n//\n \n\u8003\u8651\u5230list\u7684\u5927\u5c0f,\u6211\u4eec\u53d6list\u6700\u5927\u957f\u5ea6\u548cbatch_size\u4e2d\u7684\u6700\u5c0f\u503c.\n\n          \nconst\n \nint\n \nnum_to_move\n \n=\n \nmin\nint\n(list-\nmax_length(),\n \nbatch_size)\n;\n\n          \nvoid\n \n*start,\n \n*end\n;\n\n          \n//\n \n\u4eceCC\u83b7\u53d6\u5185\u5b58,\n \n\u53ea\u662f\u7b80\u5355\u7684\u94fe\u8868\u5220\u9664\u64cd\u4f5c\n\n          \nint\n \nfetch_count\n \n=\n \nStatic\n:\n:\ncentral_cache\n()\n[\ncl\n]\n.\nRemoveRange\n(\n\n              \nstart\n,\n \nend\n,\n \nnum_to_move\n);\n\n\n          \nASSERT((start\n \n==\n \nNULL)\n \n==\n \n(fetch_count\n \n==\n \n0))\n;\n\n          \nif\n \n(--fetch_count\n \n=\n \n0)\n \n{\n\n            \n//\n \nsize_\u4e3a\u83b7\u53d6\u5230\u7684\u5185\u5b58\u5927\u5c0f\n\n            \nsize_\n \n+=\n \nbyte_size\n \n*\n \nfetch_count\n;\n\n            \n//\n \n\u6dfb\u52a0\u5230\u5355\u5411\u94fe\u8868\u4e2d.\u94fe\u8868\u63d2\u5165\u64cd\u4f5c.\n\n            \nlist-\nPushRange(fetch_count,\n \nSLL_Next(start),\n \nend)\n;\n\n          \n}\n\n\n          \n//\n \n\u5982\u679c\nlist\n\u7684\u6700\u5927\u957f\u5ea6\n \n \n\u9ed8\u8ba4\u79fb\u52a8\u957f\u5ea6\n,\n \n\u5219\nlist\n\u6700\u5927\u957f\u5ea6\n+\n1\n,\n \n\u6162\u6162\u9760\u8fd1\u9ed8\u8ba4\u79fb\u52a8\u957f\u5ea6\n.\n\n          \nif\n \n(\nlist-\nmax_length\n()\n \n \nbatch_size\n)\n \n{\n\n            \nlist-\nset_max_length(list-\nmax_length()\n \n+\n \n1)\n;\n\n          \n}\n \nelse\n \n{\n\n            \n//\n \n\u5426\u5219,\u6211\u4eec\u76f4\u63a5\u589e\u957fbatch_size\n \n\u957f\u5ea6,\n \n\u5f53\u7136\u4e0d\u5141\u8bb8\u65e0\u9650\u589e\u957f.\n\n            \nint\n \nnew_length\n \n=\n \nmin\nint\n(list-\nmax_length()\n \n+\n \nbatch_size,\n\n                                      \nkMaxDynamicFreeListLength)\n;\n\n            \n//\n \n\u5fc5\u987b\u4fdd\u8bc1max_length\n \n\u65f6batch_size\u7684\u6574\u6570\u500d,\u8fd9\u6837\u624d\u80fd\u505a\u5230\u5728N\u6b21batch_size\u7684\u79fb\u52a8\u6b63\u597d\u91ca\u653e\u5b8clist,\n \n\u800c\u4e0d\u9700\u8981\u5206\u5272.\n\n            \nnew_length\n \n-=\n \nnew_length\n \n%\n \nbatch_size\n;\n\n            \nASSERT(new_length\n \n%\n \nbatch_size\n \n==\n \n0)\n;\n\n            \nlist-\nset_max_length(new_length)\n;\n\n          \n}\n\n          \nreturn\n \nstart\n;\n\n        \n}\n\n    \n```\n\n\n    \n\u8fd9\u91cc\u5b9e\u9645\u4ece\nCC\n\u83b7\u53d6\u7a7a\u95f2\u7a7a\u95f4\u7684\u51fd\u6570\u662f\nRemoveRange\n\u51fd\u6570\n.\n\u9996\u5148\u5e38\u8bd5\u76f4\u63a5\u4ece\nslots\n\u4e2d\u83b7\u53d6\n,\n\u5982\u679c\nslots\n\u4e0d\u591f\n,\n\u5219\u518d\u4ece\nspans\n\u83b7\u53d6\n.\n\n\n    \n```\n\n        \nint\n \nCentralFreeList\n::\nRemoveRange\n(\nvoid\n \n**\nstart\n,\n \nvoid\n \n**\nend\n,\n \nint\n \nN\n)\n \n{\n\n          \nASSERT(N\n \n \n0)\n;\n\n          \nlock_.Lock()\n;\n\n          \nif\n \n(N\n \n==\n \nStatic\n:\n:\nsizemap\n()\n-\nnum_objects_to_move\n(\nsize_class_\n)\n \n\n              \nused_slots_\n \n \n0\n)\n \n{\n\n            \nint\n \nslot\n \n=\n \n--\nused_slots_\n;\n\n            \nASSERT(slot\n \n=\n \n0)\n;\n\n            \nTCEntry\n \n*entry\n \n=\n \ntc_slots_\n[\nslot\n]\n;\n\n            \n*start\n \n=\n \nentry-\nhead\n;\n\n            \n*end\n \n=\n \nentry-\ntail\n;\n\n            \nlock_.Unlock()\n;\n\n            \nreturn\n \nN\n;\n\n          \n}\n\n\n          \nint\n \nresult\n \n=\n \n0\n;\n\n          \nvoid\n*\n \nhead\n \n=\n \nNULL\n;\n\n          \nvoid\n*\n \ntail\n \n=\n \nNULL\n;\n\n          \n//\n \nTODO\n:\n \nPrefetch\n \nmultiple\n \nTCEntries\n?\n\n          \ntail\n \n=\n \nFetchFromSpansSafe\n();\n\n          \nif\n \n(\ntail\n \n!=\n \nNULL\n)\n \n{\n\n            \nSLL_SetNext(tail,\n \nNULL)\n;\n\n            \nhead\n \n=\n \ntail\n;\n\n            \nresult\n \n=\n \n1\n;\n\n            \nwhile\n \n(result\n \n \nN)\n \n{\n\n              \nvoid\n \n*t\n \n=\n \nFetchFromSpans()\n;\n\n              \nif\n \n(!t)\n \nbreak\n;\n\n              \nSLL_Push(\nhead,\n \nt)\n;\n\n              \nresult++\n;\n\n            \n}\n\n          \n}\n\n          \nlock_\n.\nUnlock\n();\n\n          \n*\nstart\n \n=\n \nhead\n;\n\n          \n*\nend\n \n=\n \ntail\n;\n\n          \nreturn\n \nresult\n;\n\n        \n}\n\n\n        \nint\n \nSizeMap\n::\nNumMoveSize\n(\nsize_t\n \nsize\n)\n \n{\n\n          \nif\n \n(size\n \n==\n \n0)\n \nreturn\n \n0\n;\n\n\n          \nint\n \nnum\n \n=\n \nstatic_cast\nint\n(64.0\n \n*\n \n1024.0\n \n/\n \nsize)\n;\n\n          \nif\n \n(num\n \n \n2)\n \nnum\n \n=\n \n2\n;\n\n\n          \nif\n \n(num\n \n \nFLAGS_tcmalloc_transfer_num_objects)\n\n            \nnum\n \n=\n \nFLAGS_tcmalloc_transfer_num_objects\n;\n\n\n          \nreturn\n \nnum\n;\n\n        \n}\n\n\n```\n\n\n\n*\n \nTC\n\u5411\nCC\n\u91ca\u653e\u5185\u5b58\n\n    \nTC\n\u5411\nCC\n\u91ca\u653e\u5185\u5b58\u7684\u6761\u4ef6\u662f\n,\n\u5728\u8fdb\u7a0b\u5411\nTC\n\u91ca\u653e\u5185\u5b58\u65f6\n,\nTC\n\u5bf9\u5e94\u7684\u5206\u7c7b\nfree\n \nlist\n\u7684\n \n`\nlength\n \n \nmax_length\n`\n \n\u6216\u8005\n \nTC\n\u7684\u603b\n \n`\nsize\n \n \nmax_size\n`\n,\n \n\u5206\u522b\u89e6\u53d1\nListTooLong\n\u548c\nScavenge\n\u5185\u5b58\u56de\u6536\n.\n\n\n    \nListTooLong\n \n\u56de\u6536\u5185\u5b58\u89c4\u5219\n:\n\n\n        \n*\n \n\u5982\u679c\n \n`\nlist\n \nlength\n \n \nbatch_size\n`\n \n,\n\u5219\u6e05\u7a7a\u94fe\u8868\n.\n \n\u8fd9\u79cd\u60c5\u51b5\u4e0b\n,\n\u53ea\u6709\u975e\u9891\u7e41\u5185\u5b58\u8bf7\u6c42\n,\n\u624d\u4f1a\n \n`\nlength\n \n \nbatch_size\n`\n,\n \n\u6240\u4ee5\n,\n \n\u5728\u65f6\u95f4\u548c\u7a7a\u95f4\u4e0a\n,\n\u8003\u8651\u4f18\u5148\u7a7a\u95f4\n,\n\u91ca\u653e\u5185\u5b58\n.\n\n        \n*\n \n\u5982\u679c\n \n`\nlist\n \nlength\n \n \nbatch_size\n`\n,\n \n\u5219\u91ca\u653e\n \n`\nbatch_size\n`\n \n\u4e2a\nobject\n.\n\u5e76\u4e14\u51cf\u5c11\nlist\n\u7684\nmax\n \nlength\n,\n \n\u5c3d\u53ef\u80fd\u5229\u7528\u6162\u542f\u52a8\n,\n \n\u51cf\u5c11\u7a7a\u95f4\u6d6a\u8d39\u7684\u95ee\u9898\n.\n\n\n    \nScavenge\n\u56de\u6536\u5185\u5b58\u89c4\u5219\n:\n\n\n        \n*\n \n\u904d\u5386\nTC\n\u4e2d\u6240\u6709\u7684\nfree\n \nlist\n,\n \n\u5c06\n(\nlowwatermark\n \n \n0\n)\n\u7684\nlist\n \n\u91ca\u653e\n \n(\nlowwatermark\n \n/\n \n2\n \n)\n\u4e2a\nobjects\n.\n\n        \n*\n \n\u5982\u679c\nlowwatermark\n \n \n0\n\u7684\n \n`\nlist\n \nlength\n \n \nbatch_size\n`\n,\n \n\u5219\u66f4\u65b0`\nmax_length\n`\n \n\u4e3a\n \n`\nmax_length\n \n-\n \nbatch_size\n`\n,\n \n\u5229\u7528\u6162\u542f\u52a8\u7b97\u6cd5\n,\n\u51cf\u6162\u5185\u5b58\u589e\u957f\u7684\u901f\u5ea6\n.\n\n        \n*\n \n\u91cd\u7f6e\u6240\u6709\nlist\n\u7684\n \nlowwatermark\n\u4e3a\u5f53\u524d\u7684\nlength\n.(\nlowwatermark\n\u4f1a\u5728\nlist\n\u7684\nlength\n\u51cf\u5c0f\u65f6\u66f4\u65b0\n,\n\u59cb\u7ec8\u4fdd\u6301\u4e3a\nlist\n\u6700\u5c0f\u7684\nlength\n).\n\n        \n*\n \n\u5077\u53d6\u5176\u4ed6\nTC\n\u7684\n \n`\nmax_length\n`\n.\n\u7531\u4e8e\u5f53\u524d\nTC\n\u5bb9\u91cf\u4e0d\u591f\n,\n\u6240\u4ee5\n,\n\u5077\u53d6\u5176\u4ed6\nTC\n\u5bb9\n\n        \n\u91cf\n,\n\u4fdd\u8bc1\u65e0\u7528\u7ebf\u7a0b\u4e0d\u4f1a\u6d6a\u8d39\u8fc7\u591a\u7a7a\u95f4\n.\n\n\n    \nTC\n\u5bb9\u91cf\u5077\u53d6\n:\n\n\n        \n*\n \n\u5982\u679c\u5b58\u5728\u65e0\u4eba\u8ba4\u9886\u7684\u5185\u5b58\n(\n\u65e0\u4eba\u8ba4\u9886\u5185\u5b58\n:\n\u7ebf\u7a0b\u7ed3\u675f\u540e\n(\nTC\n\u7684\nHeap\n\u88ab\u91ca\u653e\n)\n\u7684\u5185\u5b58\n,\n \n\u6700\u5927\u4e3a\n \n8u\n \n*\n \n4\n \n \n20\n),\n\u5219\u4f18\u5148\u4ece\u5176\u9886\u53d6\u9700\u8981\u7684\u5185\u5b58\n,\n\u589e\u5927\u5f53\u524d\u7ebf\u7a0b\u7684\u5bb9\u91cf\n.\n\n        \n*\n \n\u4e0a\u8ff0\u6761\u4ef6\u4e0d\u6ee1\u8db3\n,\n\u5219\u904d\u5386\u6240\u6709\u7684\nTC\n,\n \n\u5982\u679c\u67d0\u4e2a\nTC\n\u7684\u5bb9\u91cf\n \n \nkMinThreadCacheSize\n \n(\nkMaxSize\n \n*\n \n2\n \n=\n \n512K\n)\n \n,\n \n\u5219\u5077\u53d6\u5176\u5bb9\u91cf\n.\n\n\n    \n```\ncpp\n        \n        \nvoid\n \nThreadCache\n::\nListTooLong\n(\nFreeList\n*\n \nlist\n,\n \nsize_t\n \ncl\n)\n \n{\n\n          \nconst\n \nint\n \nbatch_size\n \n=\n \nStatic\n:\n:\nsizemap\n()\n-\nnum_objects_to_move\n(\ncl\n);\n\n          \n//\n \n\u5982\u679clist\u957f\u5ea6\u5c0f\u4e8e\n \nbatch_size,\n \n\u91ca\u653e\u6240\u6709,\n \n\u5426\u5219,\n \n\u91ca\u653ebatch_size\u4e2a\u5757.\n\n          \nReleaseToCentralCache(list,\n \ncl,\n \nbatch_size)\n;\n\n\n          \nif\n \n(list-\nmax_length()\n \n \nbatch_size)\n \n{\n\n            \n//\n \nSlow\n \nstart\n \nthe\n \nmax_length\n \nso\n \nwe\n \ndon\nt\n \noverreserve.\n\n            \nlist-\nset_max_length(list-\nmax_length()\n \n+\n \n1)\n;\n\n          \n}\n \nelse\n \nif\n \n(\nlist-\nmax_length\n()\n \n \nbatch_size\n)\n \n{\n\n            \n//\n \nIf\n \nwe\n \nconsistently\n \ngo\n \nover\n \nmax_length,\n \nshrink\n \nmax_length.\n  \nIf\n \nwe\n \ndon\nt\n\n            \n//\n \nshrink\n \nit,\n \nsome\n \namount\n \nof\n \nmemory\n \nwill\n \nalways\n \nstay\n \nin\n \nthis\n \nfreelist.\n\n            \nlist-\nset_length_overages(list-\nlength_overages()\n \n+\n \n1)\n;\n\n            \nif\n \n(list-\nlength_overages()\n \n \nkMaxOverages)\n \n{\n\n              \nASSERT(list-\nmax_length()\n \n \nbatch_size)\n;\n\n              \nlist-\nset_max_length(list-\nmax_length()\n \n-\n \nbatch_size)\n;\n\n              \nlist-\nset_length_overages(0)\n;\n\n            \n}\n\n          \n}\n\n        \n}\n\n    \n```\n\n\n    \nReleaseToCentralCache\n\u4e2d\u6267\u884c\u4e86\n,\n\u5c06\u94fe\u8868\u8fd4\u56de\u7ed9\nCC\n\u7684\u52a8\u4f5c\n,\n\u91cc\u9762\u6d89\u53ca\u5230\u4e86\nslots\n\u7ed3\u6784\n,\n\u6211\u4eec\u6765\u770b\u4e0b\n.\n\n\n    \n```\n\n        \n//\n \nRemove\n \nsome\n \nobjects\n \nof\n \nclass\n \ncl\n \nfrom\n \nthread\n \nheap\n \nand\n \nadd\n \nto\n \ncentral\n \ncache\n\n        \nvoid\n \nThreadCache\n::\nReleaseToCentralCache\n(\nFreeList\n*\n \nsrc\n,\n \nsize_t\n \ncl\n,\n \nint\n \nN\n)\n \n{\n\n          \nASSERT(src\n \n==\n \nlist_\n[\ncl\n]\n)\n;\n\n          \nif\n \n(N\n \n \nsrc-\nlength())\n \nN\n \n=\n \nsrc-\nlength()\n;\n\n          \nsize_t\n \ndelta_bytes\n \n=\n \nN\n \n*\n \nStatic\n:\n:\nsizemap\n()\n-\nByteSizeForClass\n(\ncl\n);\n\n\n          \n//\n \nWe\n \nreturn\n \nprepackaged\n \nchains\n \nof\n \nthe\n \ncorrect\n \nsize\n \nto\n \nthe\n \ncentral\n \ncache.\n\n          \n//\n \nTODO\n:\n \nUse\n \nthe\n \nsame\n \nformat\n \ninternally\n \nin\n \nthe\n \nthread\n \ncaches\n?\n\n          \nint\n \nbatch_size\n \n=\n \nStatic\n::\nsizemap\n()\n-\nnum_objects_to_move\n(\ncl\n);\n\n          \nwhile\n \n(N\n \n \nbatch_size)\n \n{\n\n            \nvoid\n \n*tail,\n \n*head\n;\n\n            \nsrc-\nPopRange(batch_size,\n \nhead,\n \ntail)\n;\n\n            \nStatic\n:\n:\ncentral_cache\n()\n[\ncl\n]\n.\nInsertRange\n(\nhead\n,\n \ntail\n,\n \nbatch_size\n);\n\n            \nN\n \n-=\n \nbatch_size\n;\n\n          \n}\n\n          \nvoid\n \n*\ntail\n,\n \n*\nhead\n;\n\n          \nsrc-\nPopRange\n(\nN\n,\n \nhead\n,\n \ntail\n);\n\n          \nStatic\n::\ncentral_cache\n()\n[\ncl\n]\n.\nInsertRange\n(\nhead\n,\n \ntail\n,\n \nN\n);\n\n          \nsize_\n \n-\n=\n \ndelta_bytes\n;\n\n        \n}\n\n    \n```\n\n\n    \n\u8fd9\u4e2a\u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u4ece\nTC\n\u91ca\u653e\u5230\nCC\n\u65f6\u8c03\u7528\n.\n\n\n    \n```\n\n        \nvoid\n \nCentralFreeList\n::\nInsertRange\n(\nvoid\n \n*\nstart\n,\n \nvoid\n \n*\nend\n,\n \nint\n \nN\n)\n \n{\n\n          \nSpinLockHolder\n \nh(\nlock_)\n;\n\n          \nif\n \n(N\n \n==\n \nStatic\n:\n:\nsizemap\n()\n-\nnum_objects_to_move\n(\nsize_class_\n)\n \n\n            \nMakeCacheSpace\n())\n \n{\n\n            \n//\n \nslots\n \n\u662f\u5b58\u5728\nCC\n \n\u7684\u94fe\u8868\u4e2d\u7684\u7ed3\u6784\n.\n\n            \n//\n \n\u6bcf\u4e2a\nCC\n\u7684\u94fe\u8868\u8282\u70b9\u662f\nslots\n.\n\n            \n//\n \n\u6bcf\u4e2a\nslots\n\u4e2d\u7684\u6570\u636e\u6b63\u597d\u662f\nTC\n\u4e2d\u79fb\u52a8\u6570\u636e\u7684\u5927\u5c0f\n.\n\n            \nint\n \nslot\n \n=\n \nused_slots_\n++\n;\n\n            \nASSERT(slot\n \n=0)\n;\n\n            \nASSERT(slot\n \n \nmax_cache_size_)\n;\n\n            \nTCEntry\n \n*entry\n \n=\n \ntc_slots_\n[\nslot\n]\n;\n\n            \nentry-\nhead\n \n=\n \nstart\n;\n\n            \nentry-\ntail\n \n=\n \nend\n;\n\n            \nreturn\n;\n\n          \n}\n\n          \nReleaseListToSpans\n(\nstart\n);\n\n        \n}\n\n    \n```\n\n\n    \n```\n\n        \nvoid\n \nThreadCache\n::\nScavenge\n()\n \n{\n\n          \n//\n \nIf\n \nthe\n \nlow-water\n \nmark\n \nfor\n \nthe\n \nfree\n \nlist\n \nis\n \nL,\n \nit\n \nmeans\n \nwe\n \nwould\n\n          \n//\n \nnot\n \nhave\n \nhad\n \nto\n \nallocate\n \nanything\n \nfrom\n \nthe\n \ncentral\n \ncache\n \neven\n \nif\n\n          \n//\n \nwe\n \nhad\n \nreduced\n \nthe\n \nfree\n \nlist\n \nsize\n \nby\n \nL.\n  \nWe\n \naim\n \nto\n \nget\n \ncloser\n \nto\n\n          \n//\n \nthat\n \nsituation\n \nby\n \ndropping\n \nL/2\n \nnodes\n \nfrom\n \nthe\n \nfree\n \nlist.\n  \nThis\n\n          \n//\n \nmay\n \nnot\n \nrelease\n \nmuch\n \nmemory,\n \nbut\n \nif\n \nso\n \nwe\n \nwill\n \ncall\n \nscavenge\n \nagain\n\n          \n//\n \npretty\n \nsoon\n \nand\n \nthe\n \nlow-water\n \nmarks\n \nwill\n \nbe\n \nhigh\n \non\n \nthat\n \ncall.\n\n          \n//int64\n \nstart\n \n=\n \nCycleClock\n:\n:\nNow\n();\n\n          \nfor\n \n(int\n \ncl\n \n=\n \n0\n;\n \ncl\n \n \nkNumClasses\n;\n \ncl++)\n \n{\n\n            \nFreeList*\n \nlist\n \n=\n \nlist_\n[\ncl\n]\n;\n\n            \nconst\n \nint\n \nlowmark\n \n=\n \nlist-\nlowwatermark()\n;\n\n            \n//\n \n\u9996\u5148\u6e05\u7406\n \nlowmark\n \n \n0\n \n\u7684.\u5c31\u7b97\u67d0\u4e9blowmark\u503c\u4e0d\u5bf9,\n \n\u5728\u8be5\u8f6e\u7ed3\u675f\u540e,\u4f1a\u901a\u8fc7clear_lowwatermark()\u91cd\u7f6e,\u4e0b\u4e00\u6b21\u5c06\u4f1a\u6210\u529f\u91ca\u653e\u5927\u91cf\u5185\u5b58.\n\n            \nif\n \n(lowmark\n \n \n0)\n \n{\n\n              \nconst\n \nint\n \ndrop\n \n=\n \n(lowmark\n \n \n1)\n \n?\n \nlowmark/2\n \n:\n \n1\n;\n\n              \nReleaseToCentralCache(list,\n \ncl,\n \ndrop)\n;\n\n\n              \n//\n \nShrink\n \nthe\n \nmax\n \nlength\n \nif\n \nit\n \nisn\nt\n \nused.\n  \nOnly\n \nshrink\n \ndown\n \nto\n\n              \n//\n \nbatch_size\n \n--\n \nif\n \nthe\n \nthread\n \nwas\n \nactive\n \nenough\n \nto\n \nget\n \nthe\n \nmax_length\n\n              \n//\n \nabove\n \nbatch_size,\n \nit\n \nwill\n \nlikely\n \nbe\n \nthat\n \nactive\n \nagain.\n  \nIf\n\n              \n//\n \nmax_length\n \nshinks\n \nbelow\n \nbatch_size,\n \nthe\n \nthread\n \nwill\n \nhave\n \nto\n\n              \n//\n \ngo\n \nthrough\n \nthe\n \nslow-start\n \nbehavior\n \nagain.\n  \nThe\n \nslow-start\n \nis\n \nuseful\n\n              \n//\n \nmainly\n \nfor\n \nthreads\n \nthat\n \nstay\n \nrelatively\n \nidle\n \nfor\n \ntheir\n \nentire\n\n              \n//\n \nlifetime.\n\n              \n//\n \n\u7531\u4e8e\u8be5TC\u5185\u5b58\u5feb\u6ee1\u4e86,\u6240\u4ee5,\u6211\u4eec\u51cf\u5c11batch_size,\n \n\u51cf\u6162\u6162\u542f\u52a8\u7b97\u6cd5,\u4fdd\u8bc1\u7a7a\u95f4\u4e0d\u4f1a\u6d6a\u8d39\u592a\u591a.\n\n              \nconst\n \nint\n \nbatch_size\n \n=\n \nStatic\n:\n:\nsizemap\n()\n-\nnum_objects_to_move\n(\ncl\n);\n\n              \nif\n \n(list-\nmax_length()\n \n \nbatch_size)\n \n{\n\n                \nlist-\nset_max_length(\n\n                    \nmax\nint\n(list-\nmax_length()\n \n-\n \nbatch_size,\n \nbatch_size))\n;\n \n//\n \n\u51cf\u5c11\u540e\u548cbatch_size\u4e2d\u7684\u6700\u5927\u503c.\n\n              \n}\n\n            \n}\n\n            \nlist-\nclear_lowwatermark\n();\n  \n//\n\u6e05\u7406\u4f4e\u6c34\u5e73\u6807\u5fd7\u4f4d\n.\n\u5176\u5b9e\u5c31\u662f\u8bbe\u7f6e\u4e3a\u5f53\u524d\u957f\u5ea6\n...\n\n          \n}\n\n          \n//\n \n\u65e0\u803b\u5730\u5077\u53d6\u5176\u4ed6\u7ebf\u7a0b\u7684\u5bb9\u91cf\n.\n\n          \nIncreaseCacheLimit\n();\n\n        \n}\n\n    \n```\n\n\n    \n\u4ee5\u4e0a\u662f\u5185\u5b58\u91ca\u653e\u7684\u60c5\u51b5\n,\n\u8fd8\u6709\u4e2a\u4fdd\u8bc1\u81ea\u5df1\u7ebf\u7a0b\u5bb9\u91cf\u5145\u88d5\u7684\u65e0\u803b\u505a\u6cd5\u662f\n,\n\u5077\u53d6\u5176\u4ed6\u7ebf\u7a0b\u7684\u5bb9\u91cf\n.\n\u5077\u53d6\u4e34\u8fd1\n10\n\u4e2a\nTC\n\u7684\n \n1\n \n \n16\n\u5bb9\u91cf\n.\n \n\u5f53\u7136\n,\n\u5982\u679c\u5176\u5bb9\u91cf\u5c0f\u4e8e\u6700\u5c0f\u503c\n,\n\u5c31\u653e\u8fc7\u4e86\uff0e\u4e5f\u5c31\u662f\u8bf4\n,\n\u5bf9\u4e8e\u5f88\u5c11\u542f\u52a8\u6162\u542f\u52a8\u7684\u7ebf\u7a0b\n,\n\u5176\u7ebf\u7a0b\u5bb9\u91cf\u5c06\u4f1a\u7531\u4e8e\u88ab\u5077\u53d6\u800c\u6301\u7eed\u51cf\u5c11\n,\n \n\u6709\u6548\u63a7\u5236\u4e86\u8fd9\u79cd\u7ebf\u7a0b\u5185\u5b58\u7684\u6d6a\u8d39\n,\n\u901a\u8fc7\u8fd9\u79cd\u673a\u5236\n,\n\u6709\u6548\u5730\u4fdd\u8bc1\u8fdb\u7a0b\u95f4\u7a7a\u95f4\u4e0d\u4f1a\u6d6a\u8d39\u592a\u591a\n.\n \n\u9700\u6c42\u5927\u7684\u7ebf\u7a0b\u53ef\u4ee5\u83b7\u5f97\u66f4\u591a\u7684\u5bb9\u91cf\n,\n\u800c\u9700\u6c42\u5c0f\u7684\u7ebf\u7a0b\u83b7\u53d6\u5c11\u7684\u5bb9\u91cf\n.\n\u5982\u679c\u5b58\u5728\u65e0\u4eba\u8ba4\u9886\u7684\u5185\u5b58\n,\n\u54b1\u4eec\u5c31\u5077\u4e86\n!!\n\u6240\u8c13\u65e0\u4eba\u8ba4\u9886\u7684\u5185\u5b58\n,\n\u662f\u6307\u7ebf\u7a0b\u88ab\u91ca\u653e\u540e\n,\n \n\u5176\u91ca\u653e\u7684\u5185\u5b58\n.\n\n\n    \n```\ncpp\n\n        \nvoid\n \nThreadCache\n::\nIncreaseCacheLimitLocked\n()\n \n{\n\n          \nif\n \n(unclaimed_cache_space_\n \n \n0)\n \n{\n\n            \n//\n \nPossibly\n \nmake\n \nunclaimed_cache_space_\n \nnegative.\n\n            \nunclaimed_cache_space_\n \n-=\n \nkStealAmount\n;\n\n            \nmax_size_\n \n+=\n \nkStealAmount\n;\n\n            \nreturn\n;\n\n          \n}\n\n          \n//\n \nDon\nt\n \nhold\n \npageheap_lock\n \ntoo\n \nlong\n.\n  \nTry\n \nto\n \nsteal\n \nfrom\n \n10\n \nother\n\n          \n//\n \nthreads\n \nbefore\n \ngiving\n \nup\n.\n  \nThe\n \ni\n \n \n10\n \ncondition\n \nalso\n \nprevents\n \nan\n\n          \n//\n \ninfinite\n \nloop\n \nin\n \ncase\n \nnone\n \nof\n \nthe\n \nexisting\n \nthread\n \nheaps\n \nare\n\n          \n//\n \nsuitable\n \nplaces\n \nto\n \nsteal\n \nfrom\n.\n\n          \nfor\n \n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n \n10\n;\n\n               \n++\ni\n,\n \nnext_memory_steal_\n \n=\n \nnext_memory_steal_-\nnext_\n)\n \n{\n\n            \n//\n \nReached\n \nthe\n \nend\n \nof\n \nthe\n \nlinked\n \nlist.\n  \nStart\n \nat\n \nthe\n \nbeginning.\n\n            \nif\n \n(next_memory_steal_\n \n==\n \nNULL)\n \n{\n\n              \nASSERT(thread_heaps_\n \n!=\n \nNULL)\n;\n\n              \n//\n \nnext_memory_steal_\n \n\u5728\u521d\u59cb\u5316\u65f6\u9ed8\u8ba4\u4e3aTC\u7684Heap\u7684\u94fe\u8868\u5934.\n\n              \n//\n \n\u6240\u4ee5,\u8fd9\u4e2a\u5faa\u73af\u4f1a\u4e0d\u505c\u8f6e\u6d41\u5077\u53d6\u94fe\u8868\u91cc\u7684\u6240\u6709\u7ebf\u7a0b,\u5305\u62ec\u81ea\u5df1.\n\n              \nnext_memory_steal_\n \n=\n \nthread_heaps_\n;\n\n            \n}\n\n            \nif\n \n(\nnext_memory_steal_\n \n==\n \nthis\n \n||\n\n                \nnext_memory_steal_-\nmax_size_\n \n=\n \nkMinThreadCacheSize\n)\n \n{\n\n              \ncontinue\n;\n\n            \n}\n\n            \nnext_memory_steal_-\nmax_size_\n \n-\n=\n \nkStealAmount\n;\n\n            \nmax_size_\n \n+=\n \nkStealAmount\n;\n\n\n            \nnext_memory_steal_\n \n=\n \nnext_memory_steal_-\nnext_\n;\n\n            \nreturn\n;\n\n          \n}\n\n        \n}\n\n    \n```\n\n\n\n\n\n\n\n\n\n\nCC\u5411PH \u7533\u8bf7\u548c\u91ca\u653e\u5185\u5b58\n\n\n\n\n\n\nPH\u7684\u5185\u5b58\u7ba1\u7406\n\n\nPH\u7684\u7ba1\u7406,\u8ddfTC\u4e00\u6837\u4e5f\u662f\u8fdb\u884c\u4e86\u5206\u7c7b,\u633a\u590d\u6742\u7684.\u9996\u5148, \u6240\u6709\u7684\u5185\u5b58,\u6620\u5c04\u5230\u8fdb\u7a0b\u7a7a\u95f4\u7684\u5185\u5b58,\u90fd\u4f1a\u5360\u636e\u7740PH\u4e2d\u7684\u67d0\u4e2alist. PH\u7684\u5185\u5b58\u662f\u76f4\u63a5\u4ece\u7cfb\u7edf\u7684sbrk\u6216\u8005mmap\u5206\u914d\u7684.\u540c\u6837, \u5927\u5185\u5b58\u4e5f\u662f\u4ecePH\u5206\u914d\u7684,\u6240\u4ee5,\u5b83\u5f88\u590d\u6742!\n\n\nPH\u7684\u5206\u7c7b,\u662f\u6309page\u6570\u91cf\u8fdb\u884c. \nfree_\n \u4ece \n0 - kMaxPages\n, \u6bcf\u4e2a\u6570\u7ec4\u6210\u5458\u5305\u542b\u6570\u7ec4\u4e0b\u6807\u4e2apages, \u4e5f\u5c31\u662f \nfree_\n\u5305\u542b1\u4e2apage\u957f\u5ea6\u7684Spans.\u6bcf\u4e2a\u6570\u7ec4\u6210\u5458\u5305\u542b2\u4e2a\u53cc\u5411\u73af\u5f62\u94fe\u8868normal\u548creturned.\u800c\u5927\u4e8ekMaxPages\u7684\u5f52\u5c5e\u5230large\n\u4e2d.\n\n\nnormal: \u5b58\u653e\u7a7a\u95f2\u7684span list.\n\n\nreturned: \u5b58\u653e\u901a\u8fc7madvise\u7684 \nMADV_FREE\n \u65b9\u5f0f\u91ca\u653e\u7684span.\u524d\u63d0\u65f6\u7cfb\u7edf\u652f\u6301 \nMADV_FREE\n \u6216 \nMADV_DONTNEED\n \u5426\u5219\u5c31\u4e0d\u91ca\u653e\u5185\u5b58.\n\n\n\u6240\u8c13madvise\u7684\nMADV_FREE\n \u91ca\u653e\u5185\u5b58, \u662f\u5185\u6838\u5b9e\u73b0\u7684\u4e00\u79cdlazy free\u65b9\u5f0f.\u5728process\u901a\u8fc7 madvise\nMADV_FREE\n \u65b9\u5f0f\u901a\u77e5kernel, \u67d0\u6bb5pages\u4e2d\u7684\u6570\u636e\u4e0d\u518d\u4f7f\u7528\u4e86,\u5982\u679ckernel\u9700\u8981,\u53ef\u4ee5\u6e05\u695a.\u5982\u679cprocess\u5148\u4e8ekernel\u518d\u6b21\u8bbf\u95ee\u4e86\u8be5\u533a\u57df,process\u53ef\u4ee5\u5feb\u901f\u83b7\u53d6\u5230\u8be5\u4f4d\u7f6e\u7684\u539f\u5148\u6570\u636e. \u5982\u679ckernel\u5148\u4e8eprocess\u9700\u8981\u8be5pages,\u5219\u5f53process\u8bbf\u95ee\u65f6,\u4f1a\u83b7\u5f97\u88ab\u6e05\u7a7a\u7684pages.\n\n\n\u5982\u679c\u6211\u4eec\u7cfb\u7edf\u4e0d\u652f\u6301\nMADV_FREE\n, \u5219\u4f7f\u7528\nMADV_DONTNEED\n. \nMADV_DONTNEED\n\u4e0e\nMADV_FREE\n\u7684\u533a\u522b\u5728\u4e8e,\nMADV_DONTNEED\n\u7684\u60c5\u51b5\u4e0b,\u4e0d\u7ba1\u4ec0\u4e48\u60c5\u51b5\u4e0b\u518d\u6b21\u8bbf\u95ee\u8fd9\u6bb5pages, \u83b7\u5f97\u7684\u603b\u662f\u88ab\u6e050\u7684\u5185\u5b58\u533a\u57df.\n\n\nmore info about MADV_FREE and MADV_DONTNEED\n\n\n\u5bf9\u4e8espan, span\u4e2dobjects\u7684\u5730\u5740\u548c span\u7684PageID\u4e4b\u95f4, \u5728PH\u4e2d\u5b58\u5728\u76f8\u5e94\u7684\u7b97\u6cd5\u8fdb\u884c\u6620\u5c04. PageMap \u662f\u4e00\u4e2a\u57fa\u6570\u6811(radix tree), \u80fd\u5c06\u67d0\u4e2a\u5730\u5740\u6620\u5c04\u5230\u5bf9\u5e94\u7684span. \u800cPageMapCache\u662fHashTable\u80fd\u5c06\u5bf9\u5e94\u7684PageId\u6620\u5c04\u5230\u5176size class.\n\n\n```\n    // We segregate spans of a given size into two circular linked\n    // lists: one for normal spans, and one for spans whose memory\n    // has been returned to the system.\n    struct SpanList {\n      Span        normal;    // \u5b58\u653e\u88ab\u6620\u5c04\u5230\u8fdb\u7a0b\u7a7a\u95f4\u7684spans..\n      Span        returned;  // \u5b58\u653e\u5df2\u7ecf\u88ab\u91ca\u653e\u56de\u7cfb\u7edf\u7684spans..(?)\n    };\n\n\n// List of free spans of length \n= kMaxPages\nSpanList large_; // \u6240\u6709\n 128 pages\u7684spans, \u90fd\u5f52\u5c5e\u5230\u8be5list\n\n// Array mapping from span length to a doubly linked list of free spans\nSpanList free_[kMaxPages]; // kMaxPages = 1 \n (20 - kPageShift) (= 128); \u4e5f\u5c31\u662f\u8bf4\u6709128\u4e2a\u5206\u7c7b.\n\n\n\n\n\n```\n\n\n\n\n\n\nCC \u5411PH \u5185\u5b58\u7533\u8bf7\n\n\nCC\u5411PH\u7533\u8bf7\u5185\u5b58\u7684\u6761\u4ef6\u662f,\u5f53\u524dCentralFreeList\u4e2d\u7a7a\u95f2span\u4e0d\u591f.\u6240\u6709\u5411PH\u7533\u8bf7\u7684\u5185\u5b58\u90fd\u662fPage\u7684N\u500d,\u6240\u4ee5,\u53c2\u6570\u662fN. PageHeap::New(Length n).\n\n\n* \u9996\u5148, \u641c\u7d22\u6240\u6709 \n= N (N \n= kMaxPages)\u7684free list, \u67e5\u627e\u6700\u7b26\u5408\u8981\u6c42\u7684span.\u5982\u679c\u627e\u5230,\u5219\u76f4\u63a5\u4ece\u53cc\u5411\u94fe\u8868\u4e2d\u5220\u9664. \u5982\u679cspan\u6bd4\u8981\u6c42\u7684\u5927,\u5219\u5207\u5206(Carve),\u5c06\u5269\u4e0b\u7684\u65b0\u7533\u8bf7\u4e00\u4e2aspan,\u653e\u5165\u5bf9\u5e94\u7684size class\u4e2d.\u8fd9\u79cd\u7b97\u6cd5\u67e5\u627e\u6700\u9002\u5408\u7684,\u4f46\u4f1a\u5bfc\u81f4\u5730\u5740\u4e0d\u8fde\u7eed.\n* \u5982\u679c\u6240\u6709\u7684free list\u4e2d\u6ca1\u6709\u5339\u914d\u7684,\u5219\u904d\u5386large list.\u7531\u4e8elarge list\u4e2d\u662f\u672a\u6392\u5e8f\u7684, \u6240\u4ee5, \u5728\u641c\u7d22\u65f6, \u9700\u8981\u4e0d\u505c\u5730\u8bb0\u5f55\u6700\u63a5\u8fd1\u8bf7\u6c42\u5927\u5c0f\u7684span. \u6240\u4ee5\u8be5\u7b97\u6cd5\u662fO(n), \u8d39\u65f6.\n* \u5982\u679c\u4ee5\u4e0a\u67e5\u627e\u90fd\u5931\u8d25,\u5219PH\u5c31\u5411\u7cfb\u7edf\u7533\u8bf7N pages \u5e76\u5b58\u5165\u5bf9\u5e94\u7684size class.\u7136\u540e\u4ece\u5934\u5f00\u59cb.\u5982\u679c\u7533\u8bf7\u5931\u8d25,\u5219\u8fd4\u56deNULL.\n\n\n\n\n\n\u6211\u4eec\u5ef6\u7eed\u4e4b\u524dTC\u5411CC\u8bf7\u6c42\u5185\u5b58\u65f6\u7684\u60c5\u51b5,\u5728slots\u4e0d\u591f\u65f6,\u4f1a\u5411spans\u8bf7\u6c42.\u5982\u4e0b\u4ee3\u7801:\n\n\n```\n    void\n CentralFreeList::FetchFromSpansSafe() {\n      // \u7b2c\u4e00\u6b21\u5c1d\u8bd5,\u5982\u679c\u5931\u8d25,\u5219\u610f\u5473\u7740spans\u7a7a\u95f4\u4e0d\u591f,\u9700\u8981\u5411PH\u7533\u8bf7\u5185\u5b58.\n      void \nt = FetchFromSpans();\n      if (!t) {\n        // \u5411PH\u7533\u8bf7\u5185\u5b58,\u5e76\u5212\u5206\u83b7\u53d6\u7684spans,\u7528\u4e8e\u8be5\u5206\u7c7b\u7684slots.\n        Populate();\n        // \u518d\u6b21\u5c1d\u8bd5\u83b7\u53d6objects.\n        t = FetchFromSpans();\n      }\n      return t;\n    }\n\n\n//\n \nFetch\n \nmemory\n \nfrom\n \nthe\n \nsystem\n \nand\n \nadd\n \nto\n \nthe\n \ncentral\n \ncache\n \nfreelist\n.\n\n\nvoid\n \nCentralFreeList\n::\nPopulate\n()\n \n{\n\n  \n//\n \nRelease\n \ncentral\n \nlist\n \nlock\n \nwhile\n \noperating\n \non\n \npageheap\n\n  \nlock_.Unlock()\n;\n\n  \n//\n \n\u83b7\u53d6\u8be5\u7c7b\u522b\u5bf9\u5e94\u7684\u9700\u8981\u4ecePH\u83b7\u53d6\u7684page\u6570\u91cf.\u5177\u4f53\u6570\u503c\u53ef\u4ee5\u53c2\u8003\u4e0a\u9762slots\u5206\u7c7b\u7684\u6570\u636e.\n\n  \nconst\n \nsize_t\n \nnpages\n \n=\n \nStatic\n:\n:\nsizemap\n()\n-\nclass_to_pages\n(\nsize_class_\n);\n\n\n  \nSpan*\n \nspan\n;\n\n  \n{\n\n    \nSpinLockHolder\n \nh(\nStatic\n:\n:\npageheap_lock\n());\n\n    \n//\n \n\u4ecePH\n \n\u83b7\u53d6npages\n\n    \nspan\n \n=\n \nStatic\n:\n:\npageheap\n()\n-\nNew\n(\nnpages\n);\n\n    \n//\n \n\u5c06\u8fd9\u4e2aspan\u4e0e\u8be5\u7c7b\u522b\u5728PH\u4e2d\u5bf9\u5e94\u8d77\u6765.\n\n    \nif\n \n(span)\n \nStatic\n:\n:\npageheap\n()\n-\nRegisterSizeClass\n(\nspan\n,\n \nsize_class_\n);\n\n  \n}\n\n  \nif\n \n(\nspan\n \n==\n \nNULL\n)\n \n{\n\n    \nLog(kLog,\n \n__FILE__,\n \n__LINE__,\n\n        \ntcmalloc\n:\n \nallocation\n \nfailed\n,\n \nnpages\n \n \nkPageShift\n);\n\n    \nlock_.Lock()\n;\n\n    \nreturn\n;\n\n  \n}\n\n  \nASSERT\n(\nspan-\nlength\n \n==\n \nnpages\n);\n\n  \n//\n \nCache\n \nsizeclass\n \ninfo\n \neagerly\n.\n  \nLocking\n \nis\n \nnot\n \nnecessary\n.\n\n  \n//\n \n(\nInstead\n \nof\n \nbeing\n \neager\n,\n \nwe\n \ncould\n \njust\n \nreplace\n \nany\n \nstale\n \ninfo\n\n  \n//\n \nabout\n \nthis\n \nspan\n,\n \nbut\n \nthat\n \nseems\n \nto\n \nbe\n \nno\n \nbetter\n \nin\n \npractice\n.)\n\n  \nfor\n \n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n \nnpages\n;\n \ni\n++)\n \n{\n\n    \n//\n \n\u5c06pages\u7684\u4fe1\u606f\u548c\u5bf9\u5e94\u7684size_class\n \n\u6ce8\u518c\u5230PH\u4e2d\u7684hash\u8868\u4e2d,\n \n\u4e5f\u5c31\u662fPageMapCache\n\n    \nStatic\n:\n:\npageheap\n()\n-\nCacheSizeClass\n(\nspan\n-\nstart\n \n+\n \ni\n,\n \nsize_class_\n);\n\n  \n}\n\n\n  \n//\n \nSplit\n \nthe\n \nblock\n \ninto\n \npieces\n \nand\n \nadd\n \nto\n \nthe\n \nfree-list\n\n  \n//\n \nTODO\n:\n \ncoloring\n \nof\n \nobjects\n \nto\n \navoid\n \ncache\n \nconflicts\n?\n\n  \n//\n \n\u5206\u5272\u8be5\nspan\n\u4e2d\nobjects\n\u5230\u5f53\u524d\u7684\nfree-list\n\u4e2d\n.\n\n  \nvoid\n**\n \ntail\n \n=\n \nspan-\nobjects\n;\n\n  \nchar\n*\n \nptr\n \n=\n \nreinterpret_cast\nchar\n*\n(\nspan-\nstart\n \n \nkPageShift\n);\n\n  \nchar\n*\n \nlimit\n \n=\n \nptr\n \n+\n \n(\nnpages\n \n \nkPageShift\n);\n\n  \nconst\n \nsize_t\n \nsize\n \n=\n \nStatic\n::\nsizemap\n()\n-\nByteSizeForClass\n(\nsize_class_\n);\n\n  \nint\n \nnum\n \n=\n \n0\n;\n\n  \nwhile\n \n(\nptr\n \n+\n \nsize\n \n=\n \nlimit\n)\n \n{\n\n    \n*tail\n \n=\n \nptr\n;\n\n    \ntail\n \n=\n \nreinterpret_cast\nvoid**\n(ptr)\n;\n\n    \nptr\n \n+=\n \nsize\n;\n\n    \nnum++\n;\n\n  \n}\n\n  \nASSERT\n(\nptr\n \n=\n \nlimit\n);\n\n  \n*\ntail\n \n=\n \nNULL\n;\n\n  \nspan-\nrefcount\n \n=\n \n0\n;\n \n//\n \nNo\n \nsub-object\n \nin\n \nuse\n \nyet\n\n\n  \n//\n \nAdd\n \nspan\n \nto\n \nlist\n \nof\n \nnon-empty\n \nspans\n\n  \nlock_\n.\nLock\n();\n\n  \n//\n \n\u5c06\u8be5\nspan\n\u6dfb\u52a0\u5230\nnoneempty\n\u5217\u8868\u4e2d\n.\n\n  \ntcmalloc\n::\nDLL_Prepend\n(\nnonempty_\n,\n \nspan\n);\n\n  \n++\nnum_spans_\n;\n\n  \ncounter_\n \n+=\n \nnum\n;\n\n\n}\n\n\n\n\n\n\n```\n\n\n```\n    void\n CentralFreeList::FetchFromSpans() {\n      // \u68c0\u67e5nonempty list, \u5982\u679c\u4e3a\u7a7a,\u610f\u5473\u7740\u6ca1\u6709\u7a7a\u95f2\u7684span.\n      if (tcmalloc::DLL_IsEmpty(\nnonempty_)) return NULL;\n      Span\n span = nonempty_.next;\n\n\n  \nASSERT\n(\nspan-\nobjects\n \n!=\n \nNULL\n);\n\n  \n//\n \nspan\n\u7684\nrefcount\n \n\u6307\u5411\u88ab\u4f7f\u7528\u6b21\u6570\n.\n \n\u6bcf\u4e00\u6b21\u88ab\u5206\u914d\u5185\u5b58\n,\n\u5f15\u7528\n++,\n \n\u91ca\u653e\u65f6\u5f15\u7528\n--\n.\n \n  \n//\n \n\u5728\u91ca\u653e\u65f6\n,\n\u5982\u679c\nrefcount\n\u4e3a\n0\n,\n \n\u5c31\u4f1a\u91ca\u653e\u7ed9\nPH\n.\n\n  \nspan-\nrefcount\n++;\n\n  \nvoid\n*\n \nresult\n \n=\n \nspan-\nobjects\n;\n\n  \n//\n \n\u52a0\u5165\u5230\u94fe\u8868\n\n  \nspan-\nobjects\n \n=\n \n*(\nreinterpret_cast\nvoid\n**\n(\nresult\n));\n\n  \nif\n \n(\nspan-\nobjects\n \n==\n \nNULL\n)\n \n{\n\n    \n//\n \nMove\n \nto\n \nempty\n \nlist\n\n    \ntcmalloc\n:\n:\nDLL_Remove\n(\nspan\n);\n\n    \ntcmalloc\n:\n:\nDLL_Prepend\n(\nempty_\n,\n \nspan\n);\n\n    \nEvent(span,\n \nE\n,\n \n0)\n;\n\n  \n}\n\n  \ncounter_--\n;\n\n  \nreturn\n \nresult\n;\n\n\n}\n\n\n\n\n\n\n```\n\n\n\u4e0b\u9762,\u6211\u4eec\u770b\u4e0bPH\u7684\u5185\u5b58\u5206\u914d, \u4e5f\u5c31\u662fPageHeap::New(Length n)\u7684\u903b\u8f91.\n\n\n```\n    Span* PageHeap::New(Length n) {\n      ASSERT(Check());\n      ASSERT(n \n 0);\n\n\n  // \u641c\u7d22span\u89c4\u5219.\n  Span* result = SearchFreeAndLargeLists(n);\n  if (result != NULL)\n    return result;\n\n  // ...\n\n  // \u589e\u957f\u5185\u5b58, \u5b9e\u9645\u662f\u6267\u884c\u7cfb\u7edf\u8c03\u7528\n  // Grow the heap and try again.\n  if (!GrowHeap(n)) {\n    ASSERT(Check());\n    return NULL;\n  }\n  return SearchFreeAndLargeLists(n);\n}\n\n\n\n\n\n```\n\n\n```\n    Span* PageHeap::SearchFreeAndLargeLists(Length n) {\n      ASSERT(Check());\n      ASSERT(n \n 0);\n\n\n  \n//\n \nFind\n \nfirst\n \nsize\n \n=\n \nn\n \nthat\n \nhas\n \na\n \nnon-empty\n \nlist\n\n  \n//\n \n\u4ece\nn\n\u5f00\u59cb\u67e5\u627e\n,\n\u5bfb\u627e\u7b2c\u4e00\u4e2a\u975e\u7a7a\u7684\u94fe\u8868\n.\n\n  \nfor\n \n(\nLength\n \ns\n \n=\n \nn\n;\n \ns\n \n \nkMaxPages\n;\n \ns\n++)\n \n{\n\n    \nSpan*\n \nll\n \n=\n \nfree_\n[\ns\n]\n.normal\n;\n\n    \n//\n \nIf\n \nwe\nre\n \nlucky,\n \nll\n \nis\n \nnon-empty,\n \nmeaning\n \nit\n \nhas\n \na\n \nsuitable\n \nspan.\n\n    \nif\n \n(!DLL_IsEmpty(ll))\n \n{\n\n      \nASSERT(ll-\nnext-\nlocation\n \n==\n \nSpan\n:\n:\nON_NORMAL_FREELIST\n);\n\n      \n//\n \n\u627e\u5230,\n \n\u7136\u540e,\u6211\u4eec\u5c1d\u8bd5\u5206\u5272.\n\n      \nreturn\n \nCarve(ll-\nnext,\n \nn)\n;\n\n    \n}\n\n    \n//\n \nAlternatively\n,\n \nmaybe\n \nthere\ns\n \na\n \nusable\n \nreturned\n \nspan\n.\n\n    \n//\n \nreturned\n \n\u662f\u901a\u8fc7\nmadvice\n\u91ca\u653e\u7684\u5185\u5b58\n.\n\n    \nll\n \n=\n \nfree_\n[\ns\n]\n.\nreturned\n;\n\n    \nif\n \n(!\nDLL_IsEmpty\n(\nll\n))\n \n{\n\n      \n//\n \nWe\n \ndid\n \nnot\n \ncall\n \nEnsureLimit\n \nbefore,\n \nto\n \navoid\n \nreleasing\n \nthe\n \nspan\n\n      \n//\n \nthat\n \nwill\n \nbe\n \ntaken\n \nimmediately\n \nback.\n\n      \n//\n \nCalling\n \nEnsureLimit\n \nhere\n \nis\n \nnot\n \nvery\n \nexpensive,\n \nas\n \nit\n \nfails\n \nonly\n \nif\n\n      \n//\n \nthere\n \nis\n \nno\n \nmore\n \nnormal\n \nspans\n \n(and\n \nit\n \nfails\n \nefficiently)\n\n      \n//\n \nor\n \nSystemRelease\n \ndoes\n \nnot\n \nwork\n \n(there\n \nis\n \nprobably\n \nno\n \nreturned\n \nspans).\n\n      \nif\n \n(EnsureLimit(n))\n \n{\n\n        \n//\n \nll\n \nmay\n \nhave\n \nbecame\n \nempty\n \ndue\n \nto\n \ncoalescing\n\n        \nif\n \n(!DLL_IsEmpty(ll))\n \n{\n\n          \nASSERT(ll-\nnext-\nlocation\n \n==\n \nSpan\n:\n:\nON_RETURNED_FREELIST\n);\n\n          \nreturn\n \nCarve(ll-\nnext,\n \nn)\n;\n\n        \n}\n\n      \n}\n\n    \n}\n\n  \n}\n\n  \n//\n \nNo\n \nluck\n \nin\n \nfree\n \nlists\n,\n \nour\n \nlast\n \nchance\n \nis\n \nin\n \na\n \nlarger\n \nclass\n.\n\n  \n//\n \n\u8fd9\u662f\u4e2a\u4e0d\u5e78\u7684\u6d88\u606f\n,\n\u6211\u4eec\u53ea\u80fd\u641c\u7d22\u6700\u540e\u4e00\u4e2a\nlarge_\n \n\u94fe\u8868\n.\n\n  \nreturn\n \nAllocLarge\n(\nn\n);\n  \n//\n \nMay\n \nbe\n \nNULL\n\n\n}\n\n\n\n\n\n\n```\n\n\n\u7531\u4e8e\nlarge_\n \u4e2d\u7684\u5bf9\u8c61\u6ca1\u6709\u6392\u5e8f,\u6240\u4ee5,\u9700\u8981\u904d\u5386\u6240\u6709,\u4e0d\u505c\u5730\u5339\u914d. \u8fd9\u4e2a\u64cd\u4f5c\u8d39\u65f6, \u4f46\u57fa\u672c\u4e0a\u903b\u8f91\u8fdb\u5230\u8fd9\u91cc\u7684\u51e0\u7387\u4e0d\u9ad8.\u8fd9\u91cc\u4f1a\u68c0\u67e5PH\u7684\u5bb9\u91cf,\u5e76\u6267\u884c\u53ef\u80fd\u9700\u8981\u7684\u5185\u5b58\u91ca\u653e.\n\n\n```\n    Span\n PageHeap::AllocLarge(Length n) {\n      // find the best span (closest to n in size).\n      // The following loops implements address-ordered best-fit.\n      Span \nbest = NULL;\n\n\n  \n\u641c\u7d22\nnormal\n \nlist\n\n  \nfor\n \n(\nSpan\n*\n \nspan\n \n=\n \nlarge_\n.\nnormal\n.\nnext\n;\n\n       \nspan\n \n!=\n \nlarge_\n.\nnormal\n;\n\n       \nspan\n \n=\n \nspan-\nnext\n)\n \n{\n\n    \nif\n \n(span-\nlength\n \n=\n \nn)\n \n{\n\n      \nif\n \n((best\n \n==\n \nNULL)\n\n          \n||\n \n(span-\nlength\n \n \nbest-\nlength)\n\n          \n||\n \n((span-\nlength\n \n==\n \nbest-\nlength)\n \n \n(span-\nstart\n \n \nbest-\nstart)))\n \n{\n\n        \nbest\n \n=\n \nspan\n;\n\n        \nASSERT(best-\nlocation\n \n==\n \nSpan\n:\n:\nON_NORMAL_FREELIST\n);\n\n      \n}\n\n    \n}\n\n  \n}\n\n\n  \nSpan\n \n*\nbestNormal\n \n=\n \nbest\n;\n\n\n  \n//\n \n\u641c\u7d22\nreturned\n \nlist\n.\n\n  \nfor\n \n(\nSpan\n*\n \nspan\n \n=\n \nlarge_\n.\nreturned\n.\nnext\n;\n\n       \nspan\n \n!=\n \nlarge_\n.\nreturned\n;\n\n       \nspan\n \n=\n \nspan-\nnext\n)\n \n{\n\n    \nif\n \n(span-\nlength\n \n=\n \nn)\n \n{\n\n      \nif\n \n((best\n \n==\n \nNULL)\n\n          \n||\n \n(span-\nlength\n \n \nbest-\nlength)\n\n          \n||\n \n((span-\nlength\n \n==\n \nbest-\nlength)\n \n \n(span-\nstart\n \n \nbest-\nstart)))\n \n{\n\n        \nbest\n \n=\n \nspan\n;\n\n        \nASSERT(best-\nlocation\n \n==\n \nSpan\n:\n:\nON_RETURNED_FREELIST\n);\n\n      \n}\n\n    \n}\n\n  \n}\n\n\n  \n//\n \nbest\n\u6765\u81ea\nnormal\n\n  \nif\n \n(\nbest\n \n==\n \nbestNormal\n)\n \n{\n\n    \nreturn\n \nbest\n \n==\n \nNULL\n \n?\n \nNULL\n \n:\n \nCarve\n(\nbest\n,\n \nn\n);\n\n  \n}\n\n\n  \n//\n \nbest\n \n\u6765\u81ea\nreturned\n,\n \n\u6211\u4eec\u5982\u679c\u53d6\u56de\nbest\n,\n\u9700\u8981\u5224\u65ad\nPH\n\u662f\u5426\u8fbe\u5230\u5bb9\u91cf\u4e0a\u9650\n.\n\n  \n//\n \n\u53ea\u662f\u68c0\u67e5\n.\n\n  \n//\n \ntrue\n \n\u4e3a\u672a\u8fbe\u5230\u4e0a\u9650\n.\n\u53c2\u6570\nfalse\n\u8868\u793a\n,\n\u8fbe\u5230\u4e0a\u9650\n,\n\u4e0d\u91ca\u653e\u5185\u5b58\n.\n\n  \nif\n \n(\nEnsureLimit\n(\nn\n,\n \nfalse\n))\n \n{\n\n    \nreturn\n \nCarve(best,\n \nn)\n;\n\n  \n}\n\n\n  \n//\n \n\u5bb9\u91cf\u4e0a\u9650\n,\n\u91ca\u653e\u5185\u5b58\n.\n\n  \n//\n \n\u91ca\u653e\u5185\u5b58\u7684\u903b\u8f91\u4e0e\nTC\n\u7684\u7c7b\u4f3c\n,\n\u4ece\u6bcf\u4e2a\nlist\n\u4e2d\u91ca\u653e\u4e00\u90e8\u5206\n.\n\n  \n//\n \n\u6700\u540e\u8c03\u7528\nTCMalloc_SystemRelease\n \n\u8fdb\u884c\nmadvise\n\u91ca\u653e\n.\n\n  \n//\n \n\u7cfb\u7edf\u5fc5\u987b\u652f\u6301\nmadvise\n,\n \n\u5426\u5219\ntcmalloc\n\u65e0\u6cd5\u5de5\u4f5c\n.\n\n  \nif\n \n(\nEnsureLimit\n(\nn\n,\n \ntrue\n))\n \n{\n\n    \n//\n \nbest\n \ncould\n \nhave\n \nbeen\n \ndestroyed\n \nby\n \ncoalescing.\n\n    \n//\n \nbestNormal\n \nis\n \nnot\n \na\n \nbest-fit,\n \nand\n \nit\n \ncould\n \nbe\n \ndestroyed\n \nas\n \nwell.\n\n    \n//\n \nWe\n \nretry,\n \nthe\n \nlimit\n \nis\n \nalready\n \nensured\n:\n\n    \nreturn\n \nAllocLarge\n(\nn\n);\n\n  \n}\n\n\n  \n//\n \nIf\n \nbestNormal\n \nexisted\n,\n \nEnsureLimit\n \nwould\n \nsucceeded\n:\n\n  \nASSERT\n(\nbestNormal\n \n==\n \nNULL\n);\n\n  \n//\n \nWe\n \nare\n \nnot\n \nallowed\n \nto\n \ntake\n \nbest\n \nfrom\n \nreturned\n \nlist\n.\n\n  \nreturn\n \nNULL\n;\n\n\n}\n\n\n\n\n\n\n```\n\n\n\u6211\u4eec\u6765\u770b\u4e0b\u5206\u5272\u7684\u884c\u4e3a.\u8ddfdlmalloc\u5206\u5272\u5185\u5b58\u4e00\u6837\u7684. \u90fd\u662f\u5c06\u5269\u4e0b\u7684\u91cd\u65b0\u63d2\u5165\u5230\u5bf9\u5e94\u7684\u5206\u533a\u4e2d.\n\n\n```\n    Span\n PageHeap::Carve(Span\n span, Length n) {\n      ASSERT(n \n 0);\n      ASSERT(span-\nlocation != Span::IN_USE);\n      const int old_location = span-\nlocation;\n      // \u4ece\u94fe\u8868\u4e2d\u79fb\u9664.\n      RemoveFromFreeList(span);\n      span-\nlocation = Span::IN_USE;\n      Event(span, 'A', n);\n\n\n  const int extra = span-\nlength - n;\n  ASSERT(extra \n= 0);\n  if (extra \n 0) {\n    // \u5c06\u5269\u4f59\u90e8\u5206\u751f\u6210\u65b0\u7684span\n    Span* leftover = NewSpan(span-\nstart + n, extra);\n    leftover-\nlocation = old_location;\n    Event(leftover, \nS\n, extra);\n    RecordSpan(leftover);\n    // \u63d2\u5165\u5bf9\u5e94\u7684list\n    PrependToFreeList(leftover);\n    span-\nlength = n;\n    // \u5c06span\u7684\u5730\u5740\u533a\u57df\u548cspan\u7684\u5b88\u5730\u5740\u5728radix tree\u4e2d\u5bf9\u5e94\u8d77\u6765.\n    pagemap_.set(span-\nstart + n - 1, span);\n  }\n  ASSERT(Check());\n  return span;\n}\n\n\n\n\n\n```\n\n\n\u7136\u540e\u6211\u4eec\u770b\u4e0bGrowHeap, \u662f\u5982\u4f55\u4ece\u7cfb\u7edf\u83b7\u53d6\u5185\u5b58\u7684\n\n\n```\n    bool PageHeap::GrowHeap(Length n) {\n      ASSERT(kMaxPages \n= kMinSystemAlloc);\n      if (n \n kMaxValidPages) return false;\n      // \u5224\u65ad\u9700\u8981\u8bf7\u6c42\u7684page\u6570\u91cf.\n      Length ask = (n\nkMinSystemAlloc) ? n : static_cast\n(kMinSystemAlloc);\n      size_t actual_size;\n      void* ptr = NULL;\n\n\n  // \u786e\u5b9a\u6dfb\u52a0ask\u7684\u6570\u91cf\u540e,\u6ca1\u6709\u8fbe\u5230\u5bb9\u91cf\u8981\u6c42\n  if (EnsureLimit(ask)) {\n      ptr = TCMalloc_SystemAlloc(ask \n kPageShift, \nactual_size, kPageSize);\n  }\n  if (ptr == NULL) {\n    if (n \n ask) {\n      // Try growing just \nn\n pages\n      ask = n;\n      if (EnsureLimit(ask)) {\n        ptr = TCMalloc_SystemAlloc(ask \n kPageShift, \nactual_size, kPageSize);\n      }\n    }\n    if (ptr == NULL) return false;\n  }\n  ask = actual_size \n kPageShift;\n  RecordGrowth(ask \n kPageShift);\n\n  // \u8bb0\u5f55\u7cfb\u7edf\u5df2\u7ecf\u5206\u914d\u7684page\u6570\u91cf.\n  uint64_t old_system_bytes = stats_.system_bytes;\n  stats_.system_bytes += (ask \n kPageShift);\n  const PageID p = reinterpret_cast\nuintptr_t\n(ptr) \n kPageShift;\n  ASSERT(p \n 0);\n\n  // If we have already a lot of pages allocated, just pre allocate a bunch of\n  // memory for the page map. This prevents fragmentation by pagemap metadata\n  // when a program keeps allocating and freeing large blocks.\n  if (old_system_bytes \n kPageMapBigAllocationThreshold\n      \n stats_.system_bytes \n= kPageMapBigAllocationThreshold) {\n    pagemap_.PreallocateMoreMemory();\n  }\n\n  // Make sure pagemap_ has entries for all of the new pages.\n  // Plus ensure one before and one after so coalescing code\n  // does not need bounds-checking.\n  // \u4e0e\u524d\u4e00\u4e2a\u5408\u5e76,\u5982\u679c\u524d\u4e00\u4e2a\u662f\u7a7a\u95f2\u7684\u8bdd.\n  if (pagemap_.Ensure(p-1, ask+2)) {\n    // Pretend the new area is allocated and then Delete() it to cause\n    // any necessary coalescing to occur.\n    Span* span = NewSpan(p, ask);\n    RecordSpan(span);\n    Delete(span);\n    ASSERT(Check());\n    return true;\n  } else {\n    // We could not allocate memory within \npagemap_\n\n    // TODO: Once we can return memory to the system, return the new span\n    return false;\n  }\n}\n\n\n\n\n\n```\n\n\n\u7136\u540e,\u5c31\u662f\u8ddf\u7cfb\u7edf\u4e92\u52a8\u7684 \nTCMalloc::SystemAlloc\n.\u5176\u4e2d\u6709\u4e24\u4e2aallocator, mmap\u548c\nsbrk.\u5b83\u4f1a\u904d\u5386\u6240\u6709\u7684allocs, \u76f4\u5230\u80fd\u6210\u529f\u5206\u914d\u5185\u5b58.\u5728\u6211\u4eec\u7684\u7cfb\u7edf\u4e0a,\u5148\u5c1d\u8bd5sbrk,\u7136\u540e\u624d\u662fmmap.\n\n\nvoid* DefaultSysAllocator::Alloc(size_t size, size_t *actual_size,\n                                     size_t alignment) {\n      for (int i = 0; i \n kMaxAllocators; i++) {\n        if (!failed_[i] \n allocs_[i] != NULL) {\n          void* result = allocs_[i]-\nAlloc(size, actual_size, alignment);\n          if (result != NULL) {\n            return result;\n          }\n          failed_[i] = true;\n        }\n      }\n      // After both failed, reset \"failed_\" to false so that a single failed\n      // allocation won't make the allocator never work again.\n      for (int i = 0; i \n kMaxAllocators; i++) {\n        failed_[i] = false;\n      }\n      return NULL;\n    }\n\n\n\n\n\n\nCC \u5411PH \u91ca\u653e\u5185\u5b58\n\n\nCC\u5411PH\u91ca\u653e\u5185\u5b58\u7684\u6761\u4ef6\u662f, slots\u6ee1,\u5e76\u4e14span\u4e2dobjects\u5168\u90e8\u56de\u6536 (refcount\u4e3a0). \u524d\u6587\u63d0\u5230,CC\u548cPH\u4e4b\u95f4\u79fb\u52a8\u7684\u5355\u4f4d\u65f6span, \u6240\u4ee5, \u91ca\u653e\u65f6\u9700\u8981\u7684\u53c2\u6570\u5c31\u662f span. PageHeap::Delete(Span * span). \u8be5\u51fd\u6570\u7684\u4f5c\u7528\u5c31\u662f\u5c06\u91ca\u653e\u7684\u5185\u5b58\u4e0e\u5176\u524d\u540e\u7a7a\u95f2\u5185\u5b58\u5408\u5e76,\u63d2\u5165size class.\n\n\n* \u9996\u5148,\u4ecePageMap\u83b7\u53d6\u5230\u76f8\u8fde\u7684span, \u5982\u679c\u5b83\u4eec\u90fd\u662f\u7a7a\u95f2\u7684,\u5219\u8fdb\u884c\u5408\u5e76.\n* \u5c06\u5408\u5e76\u540e\u7684\u65b0span\u6216\u8005\u4e0d\u9700\u8981\u5408\u5e76\u7684span\u63d2\u5165\u5bf9\u5e94\u7684free list\u4e2d.\n* PageHeap\u68c0\u67e5\u662f\u5426\u9700\u8981\u91ca\u653e\u5185\u5b58\u5230\u7cfb\u7edf.\u8fd9\u91cc\u91ca\u653e\u7684\u673a\u5236\u4e0eTC\u91ca\u653e\u7684\u673a\u5236\u6709\u70b9\u4e0d\u540c,\u4e0d\u4f1a\u9488\u5bf9\u67d0\u4e2a\u5206\u7c7b\u5927\u5c0f\u8fdb\u884c\u91ca\u653e,\u800c\u662f\u9488\u5bf9\u6574\u4e2aPH\u8fdb\u884c\u91ca\u653e.\n\n\n\n\n\nvoid PageHeap::Delete(Span* span) {\n      ASSERT(Check());\n      ASSERT(span-\nlocation == Span::IN_USE);\n      ASSERT(span-\nlength \n 0);\n      ASSERT(GetDescriptor(span-\nstart) == span);\n      ASSERT(GetDescriptor(span-\nstart + span-\nlength - 1) == span);\n      const Length n = span-\nlength;\n      span-\nsizeclass = 0;\n      span-\nsample = 0;\n      // \u8bbe\u7f6e\u4e3a\u5728normal list\n      span-\nlocation = Span::ON_NORMAL_FREELIST;\n      Event(span, 'D', span-\nlength);\n      // \u4e0e\u524d\u540e\u5408\u5e76\n      MergeIntoFreeList(span);  // Coalesces if possible\n      // \u5185\u5b58\u91ca\u653e\u7684\u903b\u8f91.\n      IncrementalScavenge(n);\n      ASSERT(Check());\n    }\n\n\n\u9996\u5148\u6211\u4eec\u770b\u4e0b\u5408\u5e76\u7684\u903b\u8f91. \u8ddfdlmalloc\u5176\u5b9e\u6ca1\u5dee. \u5373\u4f7f\u6839\u636espan\u7684\u83b7\u53d6\u5230\u5bf9\u5e94\u7684 pageID,\u7136\u540e\u67e5\u627e(pageID - 1) \u7684page\u548c(pageID +\uff11)\u7684page,\u5982\u679c\u90fd\u4e3a\u7a7a\u95f2,\u5408\u5e76.\n\n\n```\n    void PageHeap::MergeIntoFreeList(Span* span) {\n      ASSERT(span-\nlocation != Span::IN_USE);\n\n\n  const PageID p = span-\nstart;\n  const Length n = span-\nlength;\n  // GetDescriptor \u5c31\u662f\u901a\u8fc7pagemap, \u5c06pageID\u6620\u5c04\u6210span\u7684\u5730\u5740.\n  Span* prev = GetDescriptor(p-1);\n  // \u8fd9\u91cc\u7684location, \u4e0d\u662f\u8ddf\u5730\u5740\u76f8\u5173\u7684,\u800c\u662f\u8868\u793a\u8fd9\u4e2aspan\u5b58\u5728\u7684list(normal or returned)\n  // \u8fd9\u91cc\u662f\u4fdd\u8bc1, normal\u4e2d\u7684span\u4e0d\u4f1a\u548creturned\u4e2d\u7684span\u8fdb\u884c\u5408\u5e76.\n  if (prev != NULL \n prev-\nlocation == span-\nlocation) {\n    // Merge preceding span into this span\n    ASSERT(prev-\nstart + prev-\nlength == p);\n    const Length len = prev-\nlength;\n    // \u5c06\u4e0a\u4e00\u4e2aspan\u4ece\u961f\u5217\u79fb\u9664\n    RemoveFromFreeList(prev);\n    // \u5220\u9664span\u5bf9\u8c61\n    DeleteSpan(prev);\n    // \u5408\u5e76\u9996\u5730\u5740\n    span-\nstart -= len;\n    // \u5408\u5e76\u957f\u5ea6\n    span-\nlength += len;\n    // \u5c06\u65b0span\u7684pageID\u548cspan\u7684\u5730\u5740\u5728pagemap\u4e2d\u8fdb\u884c\u6620\u5c04\n    pagemap_.set(span-\nstart, span);\n    Event(span, \nL\n, len);\n  }\n  // same as above\n  Span* next = GetDescriptor(p+n);\n  if (next != NULL \n next-\nlocation == span-\nlocation) {\n    // Merge next span into this span\n    ASSERT(next-\nstart == p+n);\n    const Length len = next-\nlength;\n    RemoveFromFreeList(next);\n    DeleteSpan(next);\n    span-\nlength += len;\n    pagemap_.set(span-\nstart + span-\nlength - 1, span);\n    Event(span, \nR\n, len);\n  }\n\n  // \u91cd\u65b0\u5c06\u751f\u6210\u7684span\u63d2\u5165\u76f8\u5e94\u7684list\u4e2d.\n  PrependToFreeList(span);\n}\n\n\n\n\n\n```\n\n\n\u4e0b\u9762,\u6211\u4eec\u770b\u4e0b\u589e\u91cf\u91ca\u653e\u51fd\u6570IncrementalScavenge.\u5b83\u4e0d\u662f\u6bcf\u6b21\u90fd\u8fdb\u884c\u5185\u5b58\u91ca\u653e.\u5f53\u67d0\u6b64\u5185\u5b58\u672a\u91ca\u653e\u7684\u60c5\u51b5\u4e0b,\u4f1a\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4. \u6240\u4ee5,PH\u7684\u5bb9\u91cf\u662f\u5141\u8bb8\u8d85\u8fc7\u7684.\n\n\n```\n    void PageHeap::IncrementalScavenge(Length n) {\n      // Fast path; not yet time to release memory\n      // scaveng_counter_ \u662f\u4e00\u4e2a\u8d85\u65f6\u8ba1\u6570,\u5355\u4f4d\u4e3apage\u6570.\n      scavenge_counter_ -= n;\n      if (scavenge_counter_ \n= 0) return;  // Not yet time to scavenge\n\n\n  // \u56de\u6536\u7387, \u5982\u679c\u8fc7\u4f4e,\u5219\u4e0d\u56de\u6536\n  const double rate = FLAGS_tcmalloc_release_rate;\n  if (rate \n= 1e-6) {\n    // Tiny release rate means that releasing is disabled.\n    scavenge_counter_ = kDefaultReleaseDelay;\n    return;\n  }\n\n  // \u5c1d\u8bd5\u91ca\u653e\u4e00\u4e2a\u9875\u9762, \u5b9e\u9645\u4e0a\u662f\u4ee5span\u4e3a\u5355\u4f4d\u91ca\u653e. \u4e5f\u5c31\u662f\u8bf4,\n  // \u9875\u9762\u6570\u4f1a\u5bf9\u9f50\u5230\u4e00\u4e2aspan\u4e2d,\u7136\u540e\u91ca\u653e\u8be5span.\n  Length released_pages = ReleaseAtLeastNPages(1);\n\n  // \u5b9e\u9645\u6ca1\u5f52\u8fd8,\u5219\u7b49\u5f85\u9ed8\u8ba4\u957f\u5ea6.\n  // \u6ca1\u5f52\u8fd8\u7684\u539f\u56e0\u662f, \u7cfb\u7edf\u4e0d\u652f\u6301madvise\u6216\u8005\u5185\u5b58\u91ca\u653e\u5931\u8d25.\n  if (released_pages == 0) {\n    // Nothing to scavenge, delay for a while.\n    // kDefaultReleaseDelay = 1 \n 18; \u57fa\u672c\u7b49\u4e8e\u662f\u4e0d\u518d\u91ca\u653e\u5185\u5b58.\n    scavenge_counter_ = kDefaultReleaseDelay;\n  } else {\n    // Compute how long to wait until we return memory.\n    // FLAGS_tcmalloc_release_rate==1 means wait for 1000 pages\n    // after releasing one page.\n    // \u91ca\u653e\u6210\u529f,\u5219\u8ba1\u7b97\u4e0b\u4e00\u6b21\u7b49\u5f85\u65f6\u95f4.\n    const double mult = 1000.0 / rate;\n    double wait = mult * static_cast\ndouble\n(released_pages);\n    if (wait \n kMaxReleaseDelay) {\n      // Avoid overflow and bound to reasonable range.\n      wait = kMaxReleaseDelay;\n    }\n    scavenge_counter_ = static_cast\nint64_t\n(wait);\n  }\n}\n\n\n\n\n\n```\n\n\n\u6211\u4eec\u770b\u4e0bReleaseAtLeastNPages, \u8fd9\u4e1c\u897f\u91ca\u653e\u7684\u5355\u4f4d\u4e3aspan, \u6240\u4ee5,\u4f20\u5165\u7684\u53c2\u6570, page\u6570\u91cf,\u5b9e\u9645\u4e0a\u662f\u6307\u6700\u5c0f\u9700\u8981\u91ca\u653e\u957f\u5ea6,\u8fbe\u5230\u4e86\u6216\u8005\u6ca1\u6709\u53ef\u91ca\u653e\u7684span,\u5219\u505c\u6b62, \u5426\u5219,\u6301\u7eed\u91ca\u653e.\n\n\n```\n    Length PageHeap::ReleaseAtLeastNPages(Length num_pages) {\n      Length released_pages = 0;\n\n\n  // Round robin through the lists of free spans, releasing the last\n  // span in each list.  Stop after releasing at least num_pages\n  // or when there is nothing more to release.\n  while (released_pages \n num_pages \n stats_.free_bytes \n 0) {\n    for (int i = 0; i \n kMaxPages+1 \n released_pages \n num_pages;\n         i++, release_index_++) {\n      if (release_index_ \n kMaxPages) release_index_ = 0;\n      SpanList* slist = (release_index_ == kMaxPages) ?\n          \nlarge_ : \nfree_[release_index_];\n      if (!DLL_IsEmpty(\nslist-\nnormal)) {\n        // \u83b7\u53d6normal\u975e\u7a7a\u7684list, \u91ca\u653e\u5176\u6700\u540e\u4e00\u4e2aspan.\n        Length released_len = ReleaseLastNormalSpan(slist);\n        // Some systems do not support release\n        if (released_len == 0) return released_pages;\n        released_pages += released_len;\n      }\n    }\n  }\n  return released_pages;\n}\n\n\n\n\n\n```\n\n\n\u5728ReleaseLastNormalSpan\u4e2d,\u5c31\u662f\u53d6\u51falist\u4e2d\u6700\u540e\u4e00\u4e2aspan, \u8c03\u7528 TCMalloc::SystemRelease,\u91ca\u653e.\u800c TCMalloc::SystemRelease\u4e2d,\u5b9e\u9645\u8c03\u7528\u7684\u662fmadvise\u5b9e\u73b0.\n\n\n\n\n\n\n\n\n\n\n\u5927\u5bf9\u8c61\u5185\u5b58\u5206\u914d\n\n\n\u5728\u5206\u6790\u5c0f\u5185\u5b58\u65f6,\u5728\u8bf7\u6c42\u5185\u5b58\u6570 \n kMaxSize(256k)\u65f6, \u5219\u6267\u884c\u5927\u5185\u5b58\u5206\u914d. \u5927\u5185\u5b58\u7684\u5206\u914d\u67d0\u4e9b\u89c4\u5219\u4e0eCC\u5411PH\u7533\u8bf7\u5185\u5b58\u4e00\u6837.\n\n\n\n\n\u6839\u636e\u8bf7\u6c42\u5927\u5c0f,\u5bf9\u9f50\u5230PH\u7684\u5206\u7c7b\u4e2d\u6700\u63a5\u8fd1\u7684\u5927\u5c0f, \u83b7\u53d6\u5230 \nnum_pages\n.\n\n\n\u6267\u884c \nPageHeap::New(Length n)\n, \u4e0eCC\u5411PH\u7533\u8bf7\u5185\u5b58\u4e00\u6837.\n\n\n\n\n\u800c\u5185\u5b58\u91ca\u653e, \u6211\u4eec\u5728\u5c0f\u5185\u5b58\u65f6,\u5df2\u7ecf\u63d0\u5230. \u5e76\u4e14,\u5176\u884c\u4e3a\u8ddfCC\u5411PH\u91ca\u653e\u5185\u5b58\u903b\u8f91\u4e00\u6837.\n\n\n\n\n\u6839\u636e\u88ab\u91ca\u653e\u7684\u5185\u5b58, \u83b7\u53d6\u5176pageID.\n\n\n\u5982\u679cpageID\u5c5e\u4e8espan, \u5219\u8c03\u7528 \nPageHeap::Delete(Span* span)\n .\n\n\n\n\n\u7b97\u6cd5\n\n\n\u4ee3\u7801review\n\n\n\u603b\u7ed3\n\n\ntcmalloc\u4f18\u52bf\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u5c06tcmalloc\u4e2d\u7684\u6a21\u5757\u4e0edlmalloc\u4e2d\u4f5c\u6620\u5c04. CC \u770b\u6210dlmalloc\u4e2d\u5c0f\u5185\u5b58\u6a21\u5757, PH\u770b\u6210dlmalloc\u4e2d\u7684\u5927\u5185\u5b58\u6a21\u5757.\u5219tcmalloc\u4e2d\u591a\u4e86\u4e00\u4e2a\u65e0\u9501\u7684TC\u6a21\u5757.\u6240\u4ee5,\u5728\u5c0f\u5185\u5b58\u4e0a\u5b58\u5728\u7684\u4e00\u4e2a\u4f18\u52bf\u662f,\u53ef\u4ee5\u5728\u4e00\u5b9a\u8303\u56f4\u5185\u65e0\u9501\u83b7\u53d6\u548c\u91ca\u653e\u5185\u5b58.\n\n\n\u7b2c\u4e00\u6761\u4f18\u52bf\u7684\u524d\u63d0\u662f,TC\u7a7a\u95f4\u8db3\u591f. \u4f46\u5c31\u7b97\u7a7a\u95f4\u4e0d\u591f\u7684\u60c5\u51b5\u4e0b, TC\u5411CC\u8bf7\u6c42\u5185\u5b58, \u6700\u591a\u4e5f\u662f\u6bcf2\u6b21TC\u8bf7\u6c42\u9700\u8981\u52a0\u89e3\u4e00\u6b21\u9501.\u800cCC\u5411PH\u8bf7\u6c42\u5185\u5b58,\u5728\u5c0f\u5185\u5b58\u7684\u60c5\u51b5\u4e0b,\u6c38\u8fdc\u4e0d\u53ef\u80fd\u51fa\u73b0\u6bcf\u4e00\u6b21CC\u8bf7\u6c42\u89e6\u53d1\u4e00\u6b21PH\u8bf7\u6c42.\n\n\n\n\ntcmalloc\u52a3\u52bf\n\n\n\n\ntcmalloc\u7684\u52a3\u52bf,\u5f88\u660e\u663e,\u7531\u4e8e\u5b58\u57283\u7ea7\u5185\u5b58\u8bf7\u6c42,\u548c\u5927\u91cf\u5185\u5b58\u7684\u9884\u5206\u914d, \u5176\u521d\u59cb\u5316\u7684\u901f\u5ea6\u6bd4dlmalloc\u6162\u5f88\u591a.\n\n\n\u7531\u4e8e\u5bf9\u4e8e\u6bcf\u4e2a\u7ebf\u7a0b\u5b58\u5728TC, \u7a7a\u95f4\u6d6a\u8d39\u76f8\u5bf9dlmalloc\u4f1a\u591a\u4e00\u4e9b.\u867d\u7136\u5b58\u5728\u5404\u79cd\u7b97\u6cd5\u548c\u4f18\u5316\u4e86tcmalloc\u4e2d\u6570\u636e\u5757\u7684\u7ed3\u6784,\u4f46\u5728\u7ebf\u7a0b\u6570\u591a\u548c\u5185\u5b58\u8bf7\u6c42\u6b21\u6570\u5927\u7684\u60c5\u51b5\u4e0b,\u4f9d\u7136\u4e0d\u53ef\u907f\u514d\u5730\u5728TC\u4e2d\u6d6a\u8d39\u4e86\u5185\u5b58.\n\n\n\u5185\u5b58\u788e\u7247\u7387\u9ad8. \u5c5e\u4e8e\u4e2a\u4eba\u7406\u89e3.\u5728tcmalloc\u4e2d,\u53ea\u5bf9\u76f8\u8fde\u7684pages(spans)\u8fdb\u884c\u5408\u5e76,\u800cpages\u7684\u5355\u4f4d\u4e3a4K, \u76f8\u5f53\u4e8e,\u8fd9\u4e2apage\u4e2d\u53ea\u8981\u5b58\u5728\u88ab\u4f7f\u7528\u7684\u5185\u5b58,\u5c31\u6c38\u8fdc\u4e0d\u4f1a\u4e0e\u524d\u540e\u7684page\u8fdb\u884c\u5408\u5e76. \u800c\u5728dlmalloc\u4e2d,\u5b58\u5728\u8fb9\u754c\u6807\u8bb0\u6cd5,\u4efb\u4f55\u4e00\u4e2a\u91ca\u653e\u7684\u5185\u5b58\u5757(\u4efb\u610f\u5927\u5c0f),\u53ea\u8981\u5176\u76f8\u8fde\u5757\u6709\u7a7a\u95f2,\u5219\u8fdb\u884c\u5408\u5e76.\n\n\n\n\n\u5bf9mem\u6d4b\u8bd5\u7684\u6570\u636e\u603b\u7ed3\n\n\n\n\n\n\n\n\n\n\n\u5bf9\u56fe\u8868\u7684\u51e0\u4e2a\u8bf4\u660e:\n\n\n\n\n\u56fe\u8868\u662f\u5728\u7ebf\u7a0b\u6570\u4e3a4\u7684\u57fa\u7840\u4e0a\u505a\u7684\u6d4b\u8bd5. \u5e76\u4e14\u662f\u5728\u8fde\u7eed\u5206\u914d\u4e00\u5b9a\u6b21\u6570\u7684\u5185\u5b58\u540e\u518d\u8fde\u7eed\u91ca\u653e,\u6570\u636e\u53ea\u80fd\u4ece\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53cd\u6620\u4e86tcmalloc\u4e0edlmalloc\u7684\u6027\u80fd\u5dee\u5f02.\n\n\n\u672c\u6b21\u6d4b\u8bd5\u662f\u8ba1\u7b97\u51fa4\u4e2a\u7ebf\u7a0b\u7684\u5185\u5b58\u8bf7\u6c42\u548c\u91ca\u653e\u7684\u5e73\u5747\u65f6\u95f4, \u548c\u6807\u51c6\u504f\u5dee.\u7531\u4e8e\u56fe\u8868\u7ef4\u5ea6\u4e0d\u591f,\u53ea\u4f7f\u7528\u4e86\u5e73\u5747\u65f6\u95f4\u4f5c\u4e3a\u5b9e\u9645\u7684\u6027\u80fd\u6bd4\u8f83.\n\n\n\u6d4b\u8bd5\u65f6\u7684\u4e24\u4e2a\u53d8\u91cf\u5206\u522b\u4e3a, \u5355\u6b21\u7533\u8bf7\u5185\u5b58\u5927\u5c0f,\u548c\u7533\u8bf7\u6b21\u6570,\u6027\u80fd\u6307\u6807\u4e3a\u6267\u884c\u6240\u6709\u5185\u5b58\u7533\u8bf7\u91ca\u653e\u7684\u7ebf\u7a0b\u5e73\u5747\u65f6\u95f4.\n\n\n\u8be5\u6570\u636e\u4e0d\u5305\u542b\u5185\u5b58\u5206\u914d\u5668\u521d\u59cb\u5316\u7684\u65f6\u95f4(\u5373,\u7b2c\u4e00\u6b21\u5185\u5b58\u5206\u914d\u65f6\u95f4).\u5b9e\u9645\u4e0a,\u5185\u5b58\u5206\u914d\u5668\u521d\u59cb\u5316,tcmalloc\u82b1\u8d39\u7684\u65f6\u95f4\u662fdlmalloc\u591a.\u4f46\u53ea\u662f\u9488\u5bf9\u7b2c\u4e00\u6b21,\u6240\u4ee5,\u4e0d\u8bb0\u5f55\u5230\u56fe\u6807\u6570\u636e\u4e2d.\n\n\n\u4ee5\u4e0b\u6240\u6709\u63d0\u5230\u7684\u5185\u5b58\u7533\u8bf7\u6570,\u5982\u672a\u8bf4\u660e,\u90fd\u662f\u6307\u5355\u6b21\u5185\u5b58\u7533\u8bf7\u7684\u5927\u5c0f.\n\n\n\n\n\n\n\n\n\u5206\u6790:\n\n\n\n\ntcmalloc \u5185\u5b58\u5206\u914d\u6982\u8981:\n\n\ntcmalloc \u4e2d\u5b58\u5728\u5206\u7ea7\u8bf7\u6c42\u5185\u5b58\u7684\u673a\u5236. \u5206\u4e3a3\u7ea7,\u5206\u522b\u4e3aTC(ThreadCache), CC(Central Cache) \u548c PH(PageHeap)\n\n\nTC \u5411CC \u7533\u8bf7\u5185\u5b58, CC \u5411PH\u7533\u8bf7\u5185\u5b58. \u800c\u4ed6\u4eec\u4e4b\u95f4\u7684\u5185\u5b58\u662f\u6279\u91cf\u79fb\u52a8,\u4e00\u822c\u4e3a\u7533\u8bf7\u5185\u5b58\u5bf9\u9f50\u540e\u7684N\u500d\u8fdb\u884c\u79fb\u52a8.\n\n\nTC \u5b58\u5728\u7ebf\u7a0b\u5c40\u90e8\u7a7a\u95f4\u4e2d. \u5411TC\u7533\u8bf7\u5185\u5b58\u4e0d\u9700\u8981\u52a0\u89e3\u9501,\u5411CC\u548cPH \u7533\u8bf7\u5185\u5b58\u9700\u8981\u52a0\u89e3\u9501.\n\n\n\n\n\n\n\n\ndlmalloc \u5185\u5b58\u5206\u914d\u6982\u8981:\n\n\n\n\ndlmalloc\u6bcf\u6b21\u5185\u5b58\u7533\u8bf7\u90fd\u4f1a\u6267\u884c\u52a0\u89e3\u9501\u64cd\u4f5c.\n\n\n256byte\u4ee5\u4e0b\u7684\u5185\u5b58,\u4ece\u5c0f\u5185\u5b58\u5206\u914d.256byte\u4ee5\u4e0a\u7684\u4ece\u5927\u5185\u5b58\u5206\u914d.\u5728\u7a7a\u95f2\u5185\u5b58\u4e0d\u591f\u5e76\u4e14\u7533\u8bf7\u5185\u5b58\u5927\u4e8e256K\u7684,\u76f4\u63a5\u7531mmap\u5206\u914d.\n\n\n\n\n\n\n\n\n\u9996\u5148,\u4ece\u56fe\u8868\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u7ed3\u8bba,\u5728\u5355\u6b21\u5185\u5b5830K\u4ee5\u5185\u7684\u5185\u5b58\u5206\u914d\u548c\u91ca\u653e, \u6548\u7387\u4e0a,tcmalloc\u6bd4dlmalloc\u9ad8,\u5e76\u4e14\u57281K\u4ee5\u5185,\u7533\u8bf7\u6b21\u6570\u5927\u4e8e26\u6b21\u7684\u60c5\u51b5\u4e0b,\u751a\u81f3\u53ef\u4ee5\u8fbe\u523010\u500d\u6027\u80fd.\u539f\u56e0\u662f,\u5728tcmalloc\u4e2d,\u6240\u6709\u5c0f\u4e8e256k\u7684\u5185\u5b58\u90fd\u4f1a\u4f18\u5148\u4eceTC(\u907f\u514d\u52a0\u89e3\u9501\u64cd\u4f5c)\u5206\u914d, \u5728TC\u4e0d\u591f\u7684\u60c5\u51b5\u4e0b,\u5411CC\u7533\u8bf7 2 - 32 \u500d\u7684\u5185\u5b58\u6570\u91cf,\u5e76\u5b58\u653e\u5230TC\u4e2d,\u76f8\u5f53\u4e8e, N(N\n2)\u6b21\u5185\u5b58\u8bf7\u6c42\u624d\u6267\u884c1\u6b21\u52a0\u89e3\u9501.\u800cdlmalloc\u6bcf\u6b21\u5185\u5b58\u8bf7\u6c42\u90fd\u4f1a\u52a0\u89e3\u9501.\u6240\u4ee5,tcmalloc\u5728\u5c0f\u5185\u5b58\u5206\u914d\u4e0a,\u6027\u80fd\u9ad8\u4e8edlmalloc.\n\n\n\n\n\u800c\u572830K - 256K,\u5728\u67d0\u4e9b\u533a\u57df\u5185,tcmalloc\u7684\u6027\u80fd\u53cd\u800c\u4e0d\u5982dlmalloc. \u53ef\u80fd\u539f\u56e0\u5982\u4e0b: tcmalloc\u5728\u6bcf\u6b21\u5f80CC\u4e2d\u62f7\u8d1d\u6570\u636e\u65f6, \u6709\u4e2a\u5927\u5c0f\u4e0a\u9650\u4e3a64K,\u4e5f\u6709\u4e00\u4e2a\u6700\u5c0f\u4e0b\u9650\u4e3a2\u500d\u8bf7\u6c42\u5185\u5b58\u5bf9\u9f50\u540e\u7684\u5927\u5c0f. \u6240\u4ee5,\u5728\u8fd9\u4e2a\u533a\u95f4\u5185,\u76f8\u5f53\u4e8e\u6bcf2\u6b21\u5185\u5b58\u8bf7\u6c42\u90fd\u4f1a\u52a0\u89e3\u4e00\u6b21\u9501. \u800cCC\u4e5f\u6709\u5b58\u5728\u5185\u5b58\u4e0d\u8db3\u7684\u60c5\u51b5,\u4e5f\u4f1a\u51fa\u73b0\u52a0\u89e3\u9501,\u8fdb\u4e00\u6b65\u5411PH\u7533\u8bf7\u7a7a\u95f4. \u6240\u4ee5,\u5c31\u76f8\u5f53\u4e8e\u6bcf\u6b21\u5185\u5b58\u7533\u8bf7\u90fd\u4f1a\u52a0\u89e3\u9501.\u81f3\u4e8e,\u5728\u7533\u8bf7\u6b21\u6570\u8fbe\u5230\u4e00\u5b9a\u503c\u4e4b\u540e,tcmalloc\u7684\u6027\u80fd\u53c8\u9ad8\u4e8edlmalloc\u7684\u539f\u56e0\u662f:CC\u4e0ePH\u4e4b\u95f4\u7684\u5185\u5b58\u79fb\u52a8\u7684\u503c\u662f\u52a8\u6001\u4fee\u6b63\u7684,\u4e5f\u5c31\u662f\u8bf4,\u5728\u7533\u8bf7\u6b21\u6570\u8fbe\u5230\u4e00\u5b9a\u503c\u4e4b\u540e,CC\u5411PH\u7533\u8bf7\u7684\u5185\u5b58\u6570\u53d8\u5927,\u800c\u8bf7\u6c42\u6b21\u6570\u51cf\u5c11,\u5bfc\u81f4tcmalloc\u7684\u6027\u80fd\u518d\u6b21\u63d0\u5347.\n\n\n\n\n\n\n256K \u7684\u60c5\u51b5\u4e0b,tcmalloc\u7684\u6027\u80fd\u4e5f\u7565\u597d\u4e8edlmalloc. \u539f\u56e0\u672a\u77e5.\u5206\u6790\u5982\u4e0b. \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b,\u5bf9\u4e8edlmalloc\u800c\u8a00,\u5982\u679c\u6ca1\u6709\u8db3\u591f\u7a7a\u95f2\u5185\u5b58(\u672c\u6b21\u6d4b\u8bd5\u4e2d\u4e0d\u53ef\u80fd\u6709\u8db3\u591f\u7a7a\u95f2\u5185\u5b58), dlmalloc\u4f1a\u76f4\u63a5\u8c03\u7528mmap\u8fdb\u884c\u5185\u5b58\u5206\u914d, \u76f8\u5f53\u4e0e\u4e00\u6b21\u52a0\u89e3\u9501,\u4e00\u6b21\u7cfb\u7edf\u8c03\u7528\u7684\u65f6\u95f4.\u800ctcmalloc\u4f9d\u7136\u5411PH\u7533\u8bf7\u5185\u5b58,\u5f53\u7136PH\u4e5f\u4f1a\u76f4\u63a5\u4ece\u7cfb\u7edf\u5206\u914d.\n\n\n\n\n\n\n\n\n\n\n\n\n\u7ed3\u8bba: (\u4ee5\u4e0b\u7ed3\u8bba,\u53ea\u67091\u4ece\u56fe\u8868\u4e2d\u5f97\u51fa)\n\n\n\n\n\u5927\u91cf\u5c0f\u5185\u5b58\u8bf7\u6c42\u7684\u60c5\u51b5\u4e0b,tcmalloc\u6027\u80fd\u9ad8\u4e8edlmalloc, \u8282\u7701\u4e86\u52a0\u89e3\u9501\u7684\u65f6\u95f4.\n\n\n\u5982\u679c\u53ea\u5b58\u5728\u5c11\u91cf\u7684\u5185\u5b58\u8bf7\u6c42,\u5373\u4f7f\u662f\u5c0f\u5185\u5b58,\u4ece\u603b\u7684\u7533\u8bf7\u5185\u5b58\u65f6\u95f4\u4e0a,dlmalloc\u4f1a\u4f18\u4e8etcmalloc,\u539f\u56e0\u662f,\u5728\u7b2c\u4e00\u6b21\u5185\u5b58\u7533\u8bf7\u65f6,tcmalloc\u521d\u59cb\u5316\u7684\u65f6\u95f4\u662fdlmalloc\u7684\u8fd110\u500d.\n\n\n\u4ece\u4ee3\u7801\u4e2d\u5206\u6790,tcmalloc\u7684\u5185\u5b58\u5229\u7528\u7387\u5c0f\u4e8edlmalloc,\u867d\u7136,tcmalloc\u4f7f\u7528\u4e86\u5404\u79cd\u7b97\u6cd5\u6765\u63d0\u9ad8\u5185\u5b58\u5229\u7528\u7387,\u4f46\u4f9d\u7136\u65e0\u6cd5\u907f\u514d\u7ebf\u7a0b\u5c40\u90e8\u7a7a\u95f4\u4e2d\u7684\u5185\u5b58\u6d6a\u8d39.\n\n\n\n\n\n\n\n\n\u8be5\u6d4b\u8bd5\u7684\u5c40\u9650\u6027:\n\n\n\n\n\u7531\u4e8e\u8be5\u6d4b\u8bd5\u662f\u8fde\u7eed\u5185\u5b58\u7533\u8bf7\u4e4b\u540e,\u8fde\u7eed\u91ca\u653e,\u6240\u4ee5\u65e0\u6cd5\u6d4b\u8bd5\u7533\u8bf7\u5df2\u91ca\u653e\u5185\u5b58\u7684\u6548\u7387.\u4f46\u4ece\u4ee3\u7801\u4e0a\u548ctcmalloc/dlmalloc\u52a0\u89e3\u9501\u7684\u673a\u5236\u4e0a\u770b, tcmalloc \u4f9d\u7136\u4f1a\u4f18\u4e8e dlmalloc.\n\n\n\u65e0\u6cd5\u6d4b\u8bd5\u5bf9\u4e8e\u751f\u547d\u5468\u671f\u8d85\u957f\u7684\u8fdb\u7a0b,\u5185\u5b58\u7684\u788e\u7247\u7387.", 
            "title": "tcmalloc2.1 \u6d45\u6790"
        }, 
        {
            "location": "/tcmalloc2.1\u6d45\u6790/#tcmalloc21", 
            "text": "\u6765\u6e90: https://pengzhangdev.github.io/tcmalloc2.1%E6%B5%85%E6%9E%90/", 
            "title": "tcmalloc2.1 \u6d45\u6790"
        }, 
        {
            "location": "/tcmalloc2.1\u6d45\u6790/#_1", 
            "text": "tcmalloc(thread cached malloc) \u662f\u7531google\u4e3a\u5e76\u53d1\u7a0b\u5e8f\u800c\u5f00\u53d1\u7684\u5185\u5b58\u5206\u914d\u7ba1\u7406\u5668.tcmalloc\u81f4\u529b\u4e8e\u51cf\u5c11\u591a\u7ebf\u7a0b\u5185\u5b58\u8bf7\u6c42\u65f6\u5bf9\u9501\u7684\u7ade\u4e89, \u5728\u5bf9\u5c0f\u5185\u5b58\u7684\u7533\u8bf7\u65f6,\u53ef\u4ee5\u5728\u65e0\u9700\u9501\u7684\u60c5\u51b5\u4e0b\u9ad8\u6548\u83b7\u53d6\u5185\u5b58;\u800c\u5728\u83b7\u53d6\u5927\u5185\u5b58\u65f6,\u4f7f\u7528\u9ad8\u6821\u7684spinlocks.\u6b63\u56e0\u4e3atcmalloc\u662f\u5728\u7ebf\u7a0b\u5c40\u90e8\u7a7a\u95f4(TLS)\u9884\u5148\u5b58\u50a8\u90e8\u5206\u7a7a\u95f2\u5185\u5b58\u7528\u4e8e\u5206\u914d, \u5728\u7a0b\u5e8f\u521a\u542f\u52a8\u65f6,\u5176\u6240\u5360\u7528\u7684\u5185\u5b58\u4f1a\u6bd4dlmalloc\u6216\u5176\u4ed6\u7684\u5185\u5b58\u7ba1\u7406\u5668\u66f4\u5927,\u4f46\u5176\u589e\u957f\u901f\u5e45\u5ea6\u6bd4\u5176\u4ed6\u7ba1\u7406\u5668\u5c0f,\u6240\u4ee5,\u5728\u540e\u671f,\u5b9e\u9645\u5360\u7528\u5185\u5b58\u7a7a\u95f4\u4f1a\u76f8\u63a5\u8fd1.", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/tcmalloc2.1\u6d45\u6790/#_2", 
            "text": "", 
            "title": "\u539f\u7406\u7b80\u6790"
        }, 
        {
            "location": "/tcmalloc2.1\u6d45\u6790/#overview", 
            "text": "tcmalloc\u4e3a\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u5206\u914d\u4e00\u4e2a\u7ebf\u7a0b\u672c\u5730\u7f13\u5b58(Thread Cache, \u4ee5\u4e0b\u7b80\u79f0TC)\uff0e\u6240\u6709\u5c0f\u5bf9\u8c61( 256K)\u90fd\u4f1a\u4f18\u5148\u4eceThreadCache\u5206\u914d\uff0e\u800c\u5f53ThreadCache\u6ca1\u6709\u8db3\u591f\u7a7a\u95f2\u5185\u5b58\u65f6\uff0c\u5c31\u4f1a\u4eceCentralCache(\u4ee5\u4e0b\u7b80\u79f0CC)\u7533\u8bf7\u5185\u5b58.\u800c\u5f53Thread Cache\u5185\u5b58\u5bcc\u88d5\u65f6,\u4f1a\u5c06\u5185\u5b58\u8fd4\u56de\u7ed9Central Cache. Central Cache\u662f\u4ee5\u8fdb\u7a0b\u4e3a\u5355\u4f4d\u5b58\u5728,ThreadCache\u662f\u4ee5\u7ebf\u7a0b\u4e3a\u5355\u4f4d\u5b58\u5728.\u5bf9\u4e8e\u5927\u5185\u5b58( 256K), \u76f4\u63a5\u4ecePage Heap(\u4ee5\u4e0b\u7b80\u79f0PH)\u6309\u9875\u5bf9\u9f50(4K)\u7533\u8bf7.\u901a\u5e38\u60c5\u51b5\u4e0b,\u4e00\u8fde\u4e32\u7684\u9875\u9762(4k)\u53ef\u4ee5\u591a\u4e2a\u5c0f\u5185\u5b58\u5e8f\u5217,\u6bcf\u4e2a\u5e8f\u5217\u5143\u7d20\u7b49\u5927\u5c0f.TC, CC, PH \u7684\u5173\u7cfb\u662f, TC \u5411CC\u7533\u8bf7\u5185\u5b58\u5e76GC\u7ed9CC. CC \u5411PH \u7533\u8bf7\u5185\u5b58\u5e76GC\u7ed9PH.\u5728TC\u4e2d\u7684\u6570\u636e\u5355\u4f4d\u65f6\u5b57\u8282,\u6309\u5927\u5c0f\u4e3a\u5355\u4f4d\u5206\u7c7b,\u6bcf\u4e2a\u7c7b\u4e2d\u65f6\u94fe\u8868.\u5728PH\u4e2d\u7684\u6570\u636e\u5355\u4f4d\u65f6Page(4K),\u6309PageNum\u5206\u7c7b,\u6bcf\u4e2a\u5206\u7c7b\u5185\u90e8\u7528\u94fe\u8868\u7ba1\u7406,\u7b2cPageNum\u7c7b\u7684\u94fe\u8868\u7ed3\u70b9\u4e3aPageNum\u4e2aPage.\u5728CC\u4e2d\u5b58\u5728\u6700\u591a\u7684\u6570\u636e\u7ed3\u6784,\u5b83\u8fde\u63a5\u7740TC\u548cPH.\u5176\u5b58\u653e\u4e86\u6765\u81eaCC\u7684slot\u7ed3\u6784,\u548c\u6765\u81eaPH\u7684PH\u7684span\u7ed3\u6784.\u6570\u636e\u7684\u79fb\u52a8. \u6240\u6709\u7684\u6570\u636e\u4eceTC - CC - PH\u90fd\u662f\u6279\u91cf(batch)\u79fb\u52a8.\u4eceTC\u7533\u8bf7\u6216\u91ca\u653e\u7684\u5185\u5b58\u90fd\u4f1a\u4f18\u5148\u4eceCC\u7684slots\u6570\u7ec4\u5904\u7406.slots\u5b58\u653e\u7684\u5c31\u662f\u6700\u8fd1\u4eceTC\u91ca\u653e\u7684\u5185\u5b58,\u7528\u4e8e\u5feb\u901f\u7684TC\u5185\u5b58\u7533\u8bf7.\u5982\u679cslots\u6761\u4ef6\u4e0d\u6ee1\u8db3,\u5c31\u4f1a\u64cd\u4f5cCC\u4e2d\u7684spans\u5bf9\u8c61.\u6240\u6709\u79fb\u52a8\u7684\u6570\u636e\u7684\u5927\u5c0f\u548cTC\u4e2d\u7684\u6700\u5927\u5927\u5c0f\u90fd\u662f\u5728\u52a8\u6001\u8c03\u6574\u7684.", 
            "title": "overview"
        }, 
        {
            "location": "/tcmalloc2.1\u6d45\u6790/#_3", 
            "text": "\u4e0a\u56fe\u4e3a\u5c0f\u5185\u5b58\u7ba1\u7406\u65f6\u7684sizemap\u5206\u7c7b\u7684\u793a\u610f\u56fe.\u5c0f\u5185\u5b58\u7684\u7ba1\u7406\u90fd\u5904\u4e8eThreadCache\u4e2d.\u6240\u6709\u5bf9\u4e8e256k\u4ee5\u4e0b\u7684\u5185\u5b58\u7533\u8bf7\u90fd\u662f\u4eceTC\u4e2d\u83b7\u53d6.\u4e2a\u4eba\u628a\u5c0f\u5185\u5b58\u5206\u914d,\u7406\u89e3\u4e3a3\u7ea7\u5185\u5b58\u8bf7\u6c42.\u8fdb\u7a0b\u5411TC\u8bf7\u6c42\u5185\u5b58, TC\u5411CC\u8bf7\u6c42\u5185\u5b58,CC\u5411PH\u8bf7\u6c42\u5185\u5b58.    \u8fdb\u7a0b\u5411TC\u8bf7\u6c42\u548c\u91ca\u653e\u5185\u5b58\u5185\u5b58   TC\u5185\u5b58\u7ba1\u7406\n  \u9996\u5148, \u5728\u8fdb\u7a0b\u7a7a\u95f4\u4e2d,\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7ebf\u7a0b,\u5b58\u5728\u4e0e\u5176\u5bf9\u5e94\u7684TC, \u6240\u6709\u7684TC\u88ab\u7528\u94fe\u8868\u4e32\u8054,\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u4e2a\u7ebf\u7a0b\u72ec\u6709.\u901a\u8fc7\u8fd9\u79cd,\u6bcf\u4e00\u4e2aTC\u90fd\u53ef\u4ee5\u770b\u5230\u4efb\u4f55\u4e00\u4e2aTC.\u5982\u4e0a\u56fe,\u5728TC\u4e2d\u5bf9\u5185\u5b58\u8fdb\u884c\u4e86\u5206\u7c7b\u7ba1\u7406,\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u7684\u5185\u5b58\u5927\u5c0f\u90fd\u4f1a\u5411\u4e0a\u53d6\u6574\u5230\u5bf9\u5e94\u5206\u7c7b,\u7136\u540e\u76f4\u63a5\u4ece\u5bf9\u5e94\u7684\u94fe\u8868\u4e2d\u53d6\u51fa\u4e00\u9879.   \u8fdb\u7a0b\u5411TC\u7533\u8bf7\u5185\u5b58   \u5c06\u8bf7\u6c42\u5185\u5b58\u5411\u4e0a\u5bf9\u5176\u5230size class.  \u4ece\u5bf9\u5e94size class\u4e2d\u67e5\u627e\u7a7a\u95f2\u5185\u5b58, \u5982\u679c\u5b58\u5728,\u76f4\u63a5\u8fd4\u56de.  \u5982\u679csize class\u4e2d\u65e0\u7a7a\u95f2\u5185\u5b58,\u5219\u89e6\u53d1\u5411CC\u8bf7\u6c42\u5185\u5b58\u7684\u673a\u5236.     \u8fdb\u7a0b\u5411TC\u91ca\u653e\u5185\u5b58   \u4ece\u91ca\u653e\u5185\u5b58\u7684\u5730\u5740,\u67e5\u627e\u5bf9\u5e94\u7684pageID.  \u5982\u679cpage ID \u5c5e\u4e8eTC, \u5e76\u4e14TC\u7684Heap\u5b58\u5728,\u5219\u91ca\u653e\u5230TC\u4e2d  \u5982\u679cPageID\u5c5e\u4e8eTC,\u800cTC\u7684Heap\u4e0d\u5b58\u5728(\u8de8\u7ebf\u7a0b\u5185\u5b58\u7533\u8bf7\u548c\u91ca\u653e, \u7533\u8bf7\u7ebf\u7a0b\u88ab\u9500\u6bc1\u7684\u60c5\u51b5\u4e0b),\u5219\u91ca\u653e\u5230CC\u4e2d,\u53c2\u8003TC\u5411CC\u91ca\u653e\u5185\u5b58  \u5982\u679cpageID\u5c5e\u4e8ePH\u4e2d(\u5927\u5185\u5b58), \u5219\u76f4\u63a5\u91ca\u653e\u5230PH\u4e2d.       TC\u5411CC\u8bf7\u6c42\u548c\u91ca\u653e\u5185\u5b58    CC\u7684\u5185\u5b58\u7ba1\u7406.\n    \u5728CC\u4e2d\u540c\u6837\u7ef4\u62a4\u4e86\u4e0eTC\u4e2d\u5bf9\u5e94\u7684\u5206\u7c7b\u7bb1\u5b50.\u6bcf\u4e2a\u7c7b\u522b\u4e2d\u662f\u4e00\u4e2aCentralFreeList\u7c7b. \u8be5\u7c7b\u4e2d\u7ef4\u62a4\u4e86\u4e00\u4e2aslots\u53cc\u5411\u94fe\u8868,\u7528\u4e8e\u5feb\u901f\u5206\u914d\u5185\u5b58\u7ed9CC\u5e76\u63a5\u6536\u91ca\u653e\u7684\u5185\u5b58, \u5176\u5185\u5b58\u7c92\u5ea6\u4e0eTC\u4e2d\u76f8\u540c.\u540c\u6837,\u8be5\u7c7b\u4e2d\u4e5f\u7ef4\u62a4\u4e86\u4e24\u4e2aspan\u53cc\u5411\u94fe\u8868,empty(\u4e0d\u5305\u542b\u7a7a\u95f2\u5757)\u548cnonempty(\u5305\u542b\u7a7a\u95f2\u5757).span\u4f1a\u5728\u8fd9\u4e24\u4e2a\u94fe\u8868\u4e2d\u79fb\u52a8.Span\u662f\u4e2a\u4ec0\u4e48\u4e1c\u897f\u5462?\u5b83\u662fPH\u5185\u5b58\u7ba1\u7406\u7684\u4e00\u4e2a\u7c92\u5ea6,\u5176\u8868\u793a\u7684\u5185\u5b58\u5927\u5c0f\u4e3apage(4K)\u7684\u500d\u6570.\u540c\u65f6,\u5b83\u5305\u542b\u4e86\u66f4\u5c0f\u7684\u7c92\u5ea6\u5355\u4f4dobjects. \u6240\u4ee5,\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u662fCC\u548cPH\u4e4b\u95f4\u79fb\u52a8\u7684\u5185\u5b58\u5355\u5143.\u6240\u4ee5,Span\u548cslots\u7684\u5173\u7cfb\u662f,spans\u53ef\u4ee5\u62c6\u5206\u6210slots  \u8fd9\u91cc,\u6211\u4eec\u8ba4\u4e3aspan\u5c5e\u4e8ePH\u7684,\u6240\u4ee5,\u8ddfspan\u7684\u76f8\u5173\u64cd\u4f5c\u6211\u4eec\u5728PH\u8bb2\u89e3.  ```  \n    class CentralFreeList {\n       // ...  private : \n    //... \n\n   // We keep linked lists of empty and non-empty spans. \n   size_t     size_class_ ;       // My size class \n   Span       empty_ ;            // Dummy header for list of empty spans \n   Span       nonempty_ ;         // Dummy header for list of non-empty spans \n   size_t     num_spans_ ;        // Number of spans in empty_ plus nonempty_ \n   size_t     counter_ ;          // Number of free objects in cache entry \n\n   // Here we reserve space for TCEntry cache slots.  Space is preallocated \n   // for the largest possible number of entries than any one size class may \n   // accumulate.  Not all size classes are allowed to accumulate \n   // kMaxNumTransferEntries, so there is some wasted space for those size \n   // classes. \n   TCEntry   tc_slots_ [ kMaxNumTransferEntries ]; \n\n   // ...  };  // Information kept for a span (a contiguous run of pages).  struct   Span   { \n   PageID          start ;            // Starting page number \n   Length          length ;           // Number of pages in span \n   Span *           next ;             // Used when in link list \n   Span *           prev ;             // Used when in link list \n   void *           objects ;          // Linked list of free objects \n   unsigned   int    refcount   :   16 ;    // Number of non-free objects // \u5f53refcount\u4e3a0, \u5219\u91ca\u653e\u7ed9PageHeap. \n   unsigned   int    sizeclass   :   8 ;    // Size-class for small objects (or 0)  // \u8fd9\u4e2a\u662fTC\u7684 SizeClass \u5206\u7c7b.\u56e0\u4e3a\u6bcf\u4e2a\u5206\u7c7b\u5bf9\u5e94\u4e00\u4e2aCentralFreeList,\u6bcf\u4e2aList\u5bf9\u5e941\u4e2aslots\u548c2\u4e2aspans. \u6240\u4ee5,spans\u4e2d\u7684objects\u90fd\u7edf\u4e00\u5c5e\u4e8e\u67d0\u4e2aSizeClass, \u8fd9\u91cc\u9700\u8981\u7ef4\u62a4\u8fd9\u4e2a\u6570\u636e\u5bf9object\u7684. \n   unsigned   int    location   :   2 ;     // Is the span on a freelist, and if so, which?  // \u5728empty/nonempty list? \n   unsigned   int    sample   :   1 ;       // Sampled object?  #undef SPAN_HISTORY  #ifdef SPAN_HISTORY \n   // For debugging, we can keep a log events per span \n   int   nexthistory ; \n   char   history [ 64 ]; \n   int   value [ 64 ];  #endif \n\n   // What freelist the span is on: IN_USE if on none, or normal or returned \n   enum   {   IN_USE ,   ON_NORMAL_FREELIST ,   ON_RETURNED_FREELIST   };  };   ```    TC\u5411CC\u8bf7\u6c42\u5185\u5b58\n    TC\u53ea\u6709\u5728\u5176\u5bf9\u5e94\u7684\u5206\u7c7b\u4e2d,\u4e0d\u5b58\u5728\u7a7a\u95f2\u5757\u65f6,\u624d\u4f1a\u5411CC\u7684\u5bf9\u5e94\u5206\u7c7b\u7533\u8bf7batch_size\u7684\u7a7a\u95f2\u5757.   \u6839\u636e\u5f53\u524d\u8bf7\u6c42\u7684\u5185\u5b58,\u627e\u5230\u5bf9\u5e94\u7684\u5206\u7c7b,\u548c\u8be5\u5206\u7c7b\u4e0b\u7684\u9ed8\u8ba4CC\u8bf7\u6c42\u7684\u5bf9\u8c61\u4e2a\u6570( batch_size ). \u5728\u8be5\u5206\u7c7bfree list\u7684\u6700\u5927\u957f\u5ea6\u548c batch_size \u4e2d\u53d6\u6700\u5c0f\u503c\u4e3a\u9700\u8981\u7533\u8bf7\u7684\u5bf9\u8c61\u4e2a\u6570( num_to_move ).  \u57fa\u4e8e\u6162\u542f\u52a8\u7b97\u6cd5,\u7f13\u6162\u589e\u52a0\u5f53\u524d\u5206\u7c7b\u7684free list\u5bb9\u91cf.  \u4eceCC\u7684\u5bf9\u5e94\u5206\u7c7b\u4e2d\u7684slots\u5bf9\u50cf,\u83b7\u53d6\u76f8\u5e94\u6570\u91cf\u7684objects.  \u5982\u679cslots\u4e0d\u6ee1\u8db3,\u5219\u4ecespans\u5bf9\u8c61\u4e2d\u83b7\u53d6\u76f8\u5e94\u7684objects.  \u5982\u679cspans\u4e0d\u6ee1\u8db3(nonempty\u4e3aNULL),\u5219\u89e6\u53d1CC\u5411PH\u8bf7\u6c42\u5185\u5b58.   ```\n    inline void* ThreadCache::Allocate(size_t size, size_t cl) {\n      // size \u5df2\u7ecf\u88ab\u5411\u4e0a\u5bf9\u9f50, cl\u4e3a\u5206\u7c7b\u7684\u7bb1\u53f7\n      ASSERT(size  = kMaxSize);\n      // kMaxSzie == 256 * 1024\n      ASSERT(size == Static::sizemap()- ByteSizeForClass(cl));\n      // sizemap() \u4e3a\u5206\u7c7b\u7684\u6570\u7ec4.\u6bcf\u4e2a\u6210\u5458\u4e3a\u94fe\u8868.\n      // ByteSizeForClass\u662f\u53d6\u51fa\u5bf9\u5e94\u7bb1\u53f7\u5185\u7684\u7406\u8bba\u5185\u5b58\u5927\u5c0f.    // \u4ee5\u4e0aassert \u68c0\u67e5,\u7406\u5e94\u5728\u8c03\u7528\u8be5\u51fd\u6570\u4e4b\u524d\u4fdd\u8bc1.\n\n  FreeList* list =  list_[cl];\n  if (list- empty()) {\n    return FetchFromCentralCache(cl, size);\n  }\n  size_ -= size;\n  return list- Pop();\n}  ```  \u6211\u4eec\u91cd\u70b9\u63cf\u8ff0\u4e0b,TC\u5411CC\u7533\u8bf7\u5185\u5b58\u7684\u8fc7\u7a0b.\u9996\u5148,\u6211\u4eec\u9700\u8981\u77e5\u9053,CC\u4e5f\u6309\u7167TC\u7684\u5185\u5b58\u5206\u7c7b\u65b9\u5f0f,\u5b58\u5728\u5404\u4e2a\u5206\u7c7b\u7684\u7bb1\u5b50.\u6240\u4ee5,\u5b9e\u9645\u4e0a\u662f\u5411CC\u4e2d\u7684\u5bf9\u5e94\u5206\u7c7b\u83b7\u53d6\u4e00\u8fde\u4e32\u7684\u7a7a\u95f2\u5185\u5b58.\u9996\u5148,\u6211\u4eec\u5f97\u786e\u5b9a,\u79fb\u52a8\u7684\u5185\u5b58\u6570\u91cf,\u4e5f\u5c31\u662f\u5bf9\u5e94\u5206\u7c7b\u7684\u5185\u5b58\u5757\u4e2a\u6570.\u9ed8\u8ba4\u60c5\u51b5\u4e0b, \u6709\u4e00\u4e2a\u89c4\u5219\u786e\u5b9a\u6bcf\u4e2a\u5206\u7c7b\u5bf9\u5e94\u7684\u8be5\u79fb\u52a8\u7684\u5185\u5b58\u6570\u91cf.\u4ee564K\u4e3a\u57fa\u51c6,\u9664\u4ee5\u5bf9\u5e94\u5206\u7c7b\u7684\u5185\u5b58\u5927\u5c0f,\u7b97\u51fa\u6765\u7684\u4e3a\u79fb\u52a8\u7684\u5185\u5b58\u6570\u91cf.\u4f46\u662f,\u5bf9\u4e8e\u4e00\u4e9b\u6781\u5c0f\u5185\u5b58,\u8fd9\u4e2a\u503c\u5c06\u5f88\u5927,\u6240\u4ee5,\u6211\u4eec\u9650\u5236\u6700\u5927\u4e3a32768\u4e2a,\u540c\u7406,\u5bf9\u4e8e\u6781\u5927\u5185\u5b58,\u8fd9\u4e2a\u503c =1,\u4f1a\u5bfc\u81f4\u8fd9\u4e2a\u5206\u7c7b\u7684\u5185\u5b58\u8bf7\u6c42\u6bcf\u6b21\u90fd\u5411CC\u8bf7\u6c42,\u6240\u4ee5,\u6211\u4eec\u8fd9\u53ea\u6700\u5c0f\u4e3a2,\u4fdd\u8bc1\u6700\u591a\u6bcf2\u6b21\u5411CC\u8bf7\u6c42\u4e00\u6b21\u5185\u5b58.\u4e0b\u9762\u4e3a,\u9ed8\u8ba4\u7684\u5206\u7c7b\u548c\u5bf9\u5e94\u7684\u79fb\u52a8\u6570\u91cf.         idx  class_size  num_to_move_objs  num_to_move_pages      1  8  8192  2    2  16  4096  2    3  32  2048  2    4  48  1365  2    5  64  1024  2    6  80  819  2    7  96  682  2    8  112  585  2    9  128  512  2    10  144  455  2    11  160  409  2    12  176  372  2    13  192  341  2    14  208  315  2    15  224  292  2    16  240  273  2    17  256  256  2    18  288  227  2    19  320  204  2    20  352  186  2    21  384  170  2    22  416  157  2    23  448  146  2    24  480  136  2    25  512  128  2    26  576  113  2    27  640  102  2    28  704  93  2    29  768  85  2    30  832  78  2    31  896  73  2    32  960  68  2    33  1024  64  2    34  1152  56  2    35  1280  51  2    36  1408  46  2    37  1536  42  2    38  1792  36  2    39  2048  32  2    40  2304  28  2    41  2560  25  2    42  2816  23  3    43  3072  21  2    44  3328  19  3    45  4096  16  2    46  4608  14  3    47  5120  12  2    48  6144  10  3    49  6656  9  5    50  8192  8  2    51  9216  7  5    52  10240  6  4    53  12288  5  3    54  13312  4  5    55  16384  4  2    56  20480  3  5    57  24576  2  3    58  26624  2  7    59  32768  2  4    60  40960  2  5    61  49152  2  6    62  57344  2  7    63  65536  2  8    64  73728  2  9    65  81920  2  10    66  90112  2  11    67  98304  2  12    68  106496  2  13    69  114688  2  14    70  122880  2  15    71  131072  2  16    72  139264  2  17    73  147456  2  18    74  155648  2  19    75  163840  2  20    76  172032  2  21    77  180224  2  22    78  188416  2  23    79  196608  2  24    80  204800  2  25    81  212992  2  26    82  221184  2  27    83  229376  2  28    84  237568  2  29    85  245760  2  30    86  253952  2  31    87  262144  2  32          \u4ee5\u4e0a\u53ea\u662f\u9ed8\u8ba4\u503c , \u8fd9\u4e2a\u503c\u662f\u4f1a\u968f\u7740\u5185\u5b58\u7533\u8bf7\u6b21\u6570\u7684\u589e\u52a0\u800c\u8c03\u6574 ,   google \u7ed9\u8fd9\u4e2a\u7b97\u6cd5\u53d6\u540d\u4e3a\u6162\u542f\u52a8 ( slow-start ) \u7b97\u6cd5 .   \u6211\u4eec\u6765\u770b\u4e0b . \u9996\u5148 ,   list \u6709\u4e2a\u6700\u5927\u503c , \u6211\u4eec\u80fd\u79fb\u52a8\u7684\u5927\u5c0f\u4e3a list \u6700\u5927\u957f\u5ea6\u548c\u9ed8\u8ba4\u4e2d\u7684\u6700\u5c0f\u503c .   \u4e3a\u4e86\u4fdd\u8bc1 , \u5728\u5927\u91cf\u7533\u8bf7\u65f6\u7684\u6548\u7387 ,   \u5728 max   length     \u9ed8\u8ba4\u503c\u65f6 , \u6211\u4eec\u6162\u6162\u589e\u957f max   length ,   \u9632\u6b62\u6d6a\u8d39\u7a7a\u95f4 , \u53c8\u80fd\u6709\u6548\u5730\u9010\u6e10\u63d0\u9ad8\u6548\u7387 .   \u5728 max   length     \u9ed8\u8ba4\u503c\u65f6 , \u8981\u4e48\u65f6\u5927\u91cf\u8bf7\u6c42 , \u8981\u4e48\u662f\u7531\u4e8e\u8bf7\u6c42\u7684\u5185\u5b58\u5f88\u5927 , \u5bfc\u81f4\u9ed8\u8ba4\u503c\u5c0f , \u6240\u4ee5 , \u8fd9\u4e2a\u65f6\u5019 , \u53ef\u4ee5\u6bcf\u6b21\u589e\u52a0\u9ed8\u8ba4\u503c\u5927\u5c0f . \u4f46\u6700\u5927\u79fb\u52a8\u6570\u4f9d\u7136\u65f6\u9ed8\u8ba4\u7684\u79fb\u52a8\u6570 . \n\n     ``` \n         //   slow-start \n                 ( setq   batch_size   num_to_move ) \n                 ( setq   list_length   get_list_length_max_length ) \n                 ( fetch-mem   ( min   batch_size   list_length )) \n                 ( set-list-max-length  \n                         ( if   (   list_length   batch_size ) \n                                (+   list_length   1 ) \n                               (+   list_length   batch_size ))) \n\n         //   Remove   some   objects   of   class   cl   from   central   cache   and   add   to   thread   heap . \n         //   On   success ,   return   the   first   object   for   immediate   use ;   otherwise   return   NULL . \n         void *   ThreadCache :: FetchFromCentralCache ( size_t   cl ,   size_t   byte_size )   { \n           FreeList*   list   =   list_ [ cl ] ; \n           ASSERT(list- empty()) ; \n           //   batch_size   \u4e3a\u9ed8\u8ba4\u7684\u79fb\u52a8\u6570\u91cf \n           const   int   batch_size   =   Static : : sizemap () - num_objects_to_move ( cl ); \n\n           //   \u8003\u8651\u5230list\u7684\u5927\u5c0f,\u6211\u4eec\u53d6list\u6700\u5927\u957f\u5ea6\u548cbatch_size\u4e2d\u7684\u6700\u5c0f\u503c. \n           const   int   num_to_move   =   min int (list- max_length(),   batch_size) ; \n           void   *start,   *end ; \n           //   \u4eceCC\u83b7\u53d6\u5185\u5b58,   \u53ea\u662f\u7b80\u5355\u7684\u94fe\u8868\u5220\u9664\u64cd\u4f5c \n           int   fetch_count   =   Static : : central_cache () [ cl ] . RemoveRange ( \n               start ,   end ,   num_to_move ); \n\n           ASSERT((start   ==   NULL)   ==   (fetch_count   ==   0)) ; \n           if   (--fetch_count   =   0)   { \n             //   size_\u4e3a\u83b7\u53d6\u5230\u7684\u5185\u5b58\u5927\u5c0f \n             size_   +=   byte_size   *   fetch_count ; \n             //   \u6dfb\u52a0\u5230\u5355\u5411\u94fe\u8868\u4e2d.\u94fe\u8868\u63d2\u5165\u64cd\u4f5c. \n             list- PushRange(fetch_count,   SLL_Next(start),   end) ; \n           } \n\n           //   \u5982\u679c list \u7684\u6700\u5927\u957f\u5ea6     \u9ed8\u8ba4\u79fb\u52a8\u957f\u5ea6 ,   \u5219 list \u6700\u5927\u957f\u5ea6 + 1 ,   \u6162\u6162\u9760\u8fd1\u9ed8\u8ba4\u79fb\u52a8\u957f\u5ea6 . \n           if   ( list- max_length ()     batch_size )   { \n             list- set_max_length(list- max_length()   +   1) ; \n           }   else   { \n             //   \u5426\u5219,\u6211\u4eec\u76f4\u63a5\u589e\u957fbatch_size   \u957f\u5ea6,   \u5f53\u7136\u4e0d\u5141\u8bb8\u65e0\u9650\u589e\u957f. \n             int   new_length   =   min int (list- max_length()   +   batch_size, \n                                       kMaxDynamicFreeListLength) ; \n             //   \u5fc5\u987b\u4fdd\u8bc1max_length   \u65f6batch_size\u7684\u6574\u6570\u500d,\u8fd9\u6837\u624d\u80fd\u505a\u5230\u5728N\u6b21batch_size\u7684\u79fb\u52a8\u6b63\u597d\u91ca\u653e\u5b8clist,   \u800c\u4e0d\u9700\u8981\u5206\u5272. \n             new_length   -=   new_length   %   batch_size ; \n             ASSERT(new_length   %   batch_size   ==   0) ; \n             list- set_max_length(new_length) ; \n           } \n           return   start ; \n         } \n     ``` \n\n     \u8fd9\u91cc\u5b9e\u9645\u4ece CC \u83b7\u53d6\u7a7a\u95f2\u7a7a\u95f4\u7684\u51fd\u6570\u662f RemoveRange \u51fd\u6570 . \u9996\u5148\u5e38\u8bd5\u76f4\u63a5\u4ece slots \u4e2d\u83b7\u53d6 , \u5982\u679c slots \u4e0d\u591f , \u5219\u518d\u4ece spans \u83b7\u53d6 . \n\n     ``` \n         int   CentralFreeList :: RemoveRange ( void   ** start ,   void   ** end ,   int   N )   { \n           ASSERT(N     0) ; \n           lock_.Lock() ; \n           if   (N   ==   Static : : sizemap () - num_objects_to_move ( size_class_ )   \n               used_slots_     0 )   { \n             int   slot   =   -- used_slots_ ; \n             ASSERT(slot   =   0) ; \n             TCEntry   *entry   =   tc_slots_ [ slot ] ; \n             *start   =   entry- head ; \n             *end   =   entry- tail ; \n             lock_.Unlock() ; \n             return   N ; \n           } \n\n           int   result   =   0 ; \n           void *   head   =   NULL ; \n           void *   tail   =   NULL ; \n           //   TODO :   Prefetch   multiple   TCEntries ? \n           tail   =   FetchFromSpansSafe (); \n           if   ( tail   !=   NULL )   { \n             SLL_SetNext(tail,   NULL) ; \n             head   =   tail ; \n             result   =   1 ; \n             while   (result     N)   { \n               void   *t   =   FetchFromSpans() ; \n               if   (!t)   break ; \n               SLL_Push( head,   t) ; \n               result++ ; \n             } \n           } \n           lock_ . Unlock (); \n           * start   =   head ; \n           * end   =   tail ; \n           return   result ; \n         } \n\n         int   SizeMap :: NumMoveSize ( size_t   size )   { \n           if   (size   ==   0)   return   0 ; \n\n           int   num   =   static_cast int (64.0   *   1024.0   /   size) ; \n           if   (num     2)   num   =   2 ; \n\n           if   (num     FLAGS_tcmalloc_transfer_num_objects) \n             num   =   FLAGS_tcmalloc_transfer_num_objects ; \n\n           return   num ; \n         }  ```  *   TC \u5411 CC \u91ca\u653e\u5185\u5b58 \n     TC \u5411 CC \u91ca\u653e\u5185\u5b58\u7684\u6761\u4ef6\u662f , \u5728\u8fdb\u7a0b\u5411 TC \u91ca\u653e\u5185\u5b58\u65f6 , TC \u5bf9\u5e94\u7684\u5206\u7c7b free   list \u7684   ` length     max_length `   \u6216\u8005   TC \u7684\u603b   ` size     max_size ` ,   \u5206\u522b\u89e6\u53d1 ListTooLong \u548c Scavenge \u5185\u5b58\u56de\u6536 . \n\n     ListTooLong   \u56de\u6536\u5185\u5b58\u89c4\u5219 : \n\n         *   \u5982\u679c   ` list   length     batch_size `   , \u5219\u6e05\u7a7a\u94fe\u8868 .   \u8fd9\u79cd\u60c5\u51b5\u4e0b , \u53ea\u6709\u975e\u9891\u7e41\u5185\u5b58\u8bf7\u6c42 , \u624d\u4f1a   ` length     batch_size ` ,   \u6240\u4ee5 ,   \u5728\u65f6\u95f4\u548c\u7a7a\u95f4\u4e0a , \u8003\u8651\u4f18\u5148\u7a7a\u95f4 , \u91ca\u653e\u5185\u5b58 . \n         *   \u5982\u679c   ` list   length     batch_size ` ,   \u5219\u91ca\u653e   ` batch_size `   \u4e2a object . \u5e76\u4e14\u51cf\u5c11 list \u7684 max   length ,   \u5c3d\u53ef\u80fd\u5229\u7528\u6162\u542f\u52a8 ,   \u51cf\u5c11\u7a7a\u95f4\u6d6a\u8d39\u7684\u95ee\u9898 . \n\n     Scavenge \u56de\u6536\u5185\u5b58\u89c4\u5219 : \n\n         *   \u904d\u5386 TC \u4e2d\u6240\u6709\u7684 free   list ,   \u5c06 ( lowwatermark     0 ) \u7684 list   \u91ca\u653e   ( lowwatermark   /   2   ) \u4e2a objects . \n         *   \u5982\u679c lowwatermark     0 \u7684   ` list   length     batch_size ` ,   \u5219\u66f4\u65b0` max_length `   \u4e3a   ` max_length   -   batch_size ` ,   \u5229\u7528\u6162\u542f\u52a8\u7b97\u6cd5 , \u51cf\u6162\u5185\u5b58\u589e\u957f\u7684\u901f\u5ea6 . \n         *   \u91cd\u7f6e\u6240\u6709 list \u7684   lowwatermark \u4e3a\u5f53\u524d\u7684 length .( lowwatermark \u4f1a\u5728 list \u7684 length \u51cf\u5c0f\u65f6\u66f4\u65b0 , \u59cb\u7ec8\u4fdd\u6301\u4e3a list \u6700\u5c0f\u7684 length ). \n         *   \u5077\u53d6\u5176\u4ed6 TC \u7684   ` max_length ` . \u7531\u4e8e\u5f53\u524d TC \u5bb9\u91cf\u4e0d\u591f , \u6240\u4ee5 , \u5077\u53d6\u5176\u4ed6 TC \u5bb9 \n         \u91cf , \u4fdd\u8bc1\u65e0\u7528\u7ebf\u7a0b\u4e0d\u4f1a\u6d6a\u8d39\u8fc7\u591a\u7a7a\u95f4 . \n\n     TC \u5bb9\u91cf\u5077\u53d6 : \n\n         *   \u5982\u679c\u5b58\u5728\u65e0\u4eba\u8ba4\u9886\u7684\u5185\u5b58 ( \u65e0\u4eba\u8ba4\u9886\u5185\u5b58 : \u7ebf\u7a0b\u7ed3\u675f\u540e ( TC \u7684 Heap \u88ab\u91ca\u653e ) \u7684\u5185\u5b58 ,   \u6700\u5927\u4e3a   8u   *   4     20 ), \u5219\u4f18\u5148\u4ece\u5176\u9886\u53d6\u9700\u8981\u7684\u5185\u5b58 , \u589e\u5927\u5f53\u524d\u7ebf\u7a0b\u7684\u5bb9\u91cf . \n         *   \u4e0a\u8ff0\u6761\u4ef6\u4e0d\u6ee1\u8db3 , \u5219\u904d\u5386\u6240\u6709\u7684 TC ,   \u5982\u679c\u67d0\u4e2a TC \u7684\u5bb9\u91cf     kMinThreadCacheSize   ( kMaxSize   *   2   =   512K )   ,   \u5219\u5077\u53d6\u5176\u5bb9\u91cf . \n\n     ``` cpp         \n         void   ThreadCache :: ListTooLong ( FreeList *   list ,   size_t   cl )   { \n           const   int   batch_size   =   Static : : sizemap () - num_objects_to_move ( cl ); \n           //   \u5982\u679clist\u957f\u5ea6\u5c0f\u4e8e   batch_size,   \u91ca\u653e\u6240\u6709,   \u5426\u5219,   \u91ca\u653ebatch_size\u4e2a\u5757. \n           ReleaseToCentralCache(list,   cl,   batch_size) ; \n\n           if   (list- max_length()     batch_size)   { \n             //   Slow   start   the   max_length   so   we   don t   overreserve. \n             list- set_max_length(list- max_length()   +   1) ; \n           }   else   if   ( list- max_length ()     batch_size )   { \n             //   If   we   consistently   go   over   max_length,   shrink   max_length.    If   we   don t \n             //   shrink   it,   some   amount   of   memory   will   always   stay   in   this   freelist. \n             list- set_length_overages(list- length_overages()   +   1) ; \n             if   (list- length_overages()     kMaxOverages)   { \n               ASSERT(list- max_length()     batch_size) ; \n               list- set_max_length(list- max_length()   -   batch_size) ; \n               list- set_length_overages(0) ; \n             } \n           } \n         } \n     ``` \n\n     ReleaseToCentralCache \u4e2d\u6267\u884c\u4e86 , \u5c06\u94fe\u8868\u8fd4\u56de\u7ed9 CC \u7684\u52a8\u4f5c , \u91cc\u9762\u6d89\u53ca\u5230\u4e86 slots \u7ed3\u6784 , \u6211\u4eec\u6765\u770b\u4e0b . \n\n     ``` \n         //   Remove   some   objects   of   class   cl   from   thread   heap   and   add   to   central   cache \n         void   ThreadCache :: ReleaseToCentralCache ( FreeList *   src ,   size_t   cl ,   int   N )   { \n           ASSERT(src   ==   list_ [ cl ] ) ; \n           if   (N     src- length())   N   =   src- length() ; \n           size_t   delta_bytes   =   N   *   Static : : sizemap () - ByteSizeForClass ( cl ); \n\n           //   We   return   prepackaged   chains   of   the   correct   size   to   the   central   cache. \n           //   TODO :   Use   the   same   format   internally   in   the   thread   caches ? \n           int   batch_size   =   Static :: sizemap () - num_objects_to_move ( cl ); \n           while   (N     batch_size)   { \n             void   *tail,   *head ; \n             src- PopRange(batch_size,   head,   tail) ; \n             Static : : central_cache () [ cl ] . InsertRange ( head ,   tail ,   batch_size ); \n             N   -=   batch_size ; \n           } \n           void   * tail ,   * head ; \n           src- PopRange ( N ,   head ,   tail ); \n           Static :: central_cache () [ cl ] . InsertRange ( head ,   tail ,   N ); \n           size_   - =   delta_bytes ; \n         } \n     ``` \n\n     \u8fd9\u4e2a\u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u4ece TC \u91ca\u653e\u5230 CC \u65f6\u8c03\u7528 . \n\n     ``` \n         void   CentralFreeList :: InsertRange ( void   * start ,   void   * end ,   int   N )   { \n           SpinLockHolder   h( lock_) ; \n           if   (N   ==   Static : : sizemap () - num_objects_to_move ( size_class_ )   \n             MakeCacheSpace ())   { \n             //   slots   \u662f\u5b58\u5728 CC   \u7684\u94fe\u8868\u4e2d\u7684\u7ed3\u6784 . \n             //   \u6bcf\u4e2a CC \u7684\u94fe\u8868\u8282\u70b9\u662f slots . \n             //   \u6bcf\u4e2a slots \u4e2d\u7684\u6570\u636e\u6b63\u597d\u662f TC \u4e2d\u79fb\u52a8\u6570\u636e\u7684\u5927\u5c0f . \n             int   slot   =   used_slots_ ++ ; \n             ASSERT(slot   =0) ; \n             ASSERT(slot     max_cache_size_) ; \n             TCEntry   *entry   =   tc_slots_ [ slot ] ; \n             entry- head   =   start ; \n             entry- tail   =   end ; \n             return ; \n           } \n           ReleaseListToSpans ( start ); \n         } \n     ``` \n\n     ``` \n         void   ThreadCache :: Scavenge ()   { \n           //   If   the   low-water   mark   for   the   free   list   is   L,   it   means   we   would \n           //   not   have   had   to   allocate   anything   from   the   central   cache   even   if \n           //   we   had   reduced   the   free   list   size   by   L.    We   aim   to   get   closer   to \n           //   that   situation   by   dropping   L/2   nodes   from   the   free   list.    This \n           //   may   not   release   much   memory,   but   if   so   we   will   call   scavenge   again \n           //   pretty   soon   and   the   low-water   marks   will   be   high   on   that   call. \n           //int64   start   =   CycleClock : : Now (); \n           for   (int   cl   =   0 ;   cl     kNumClasses ;   cl++)   { \n             FreeList*   list   =   list_ [ cl ] ; \n             const   int   lowmark   =   list- lowwatermark() ; \n             //   \u9996\u5148\u6e05\u7406   lowmark     0   \u7684.\u5c31\u7b97\u67d0\u4e9blowmark\u503c\u4e0d\u5bf9,   \u5728\u8be5\u8f6e\u7ed3\u675f\u540e,\u4f1a\u901a\u8fc7clear_lowwatermark()\u91cd\u7f6e,\u4e0b\u4e00\u6b21\u5c06\u4f1a\u6210\u529f\u91ca\u653e\u5927\u91cf\u5185\u5b58. \n             if   (lowmark     0)   { \n               const   int   drop   =   (lowmark     1)   ?   lowmark/2   :   1 ; \n               ReleaseToCentralCache(list,   cl,   drop) ; \n\n               //   Shrink   the   max   length   if   it   isn t   used.    Only   shrink   down   to \n               //   batch_size   --   if   the   thread   was   active   enough   to   get   the   max_length \n               //   above   batch_size,   it   will   likely   be   that   active   again.    If \n               //   max_length   shinks   below   batch_size,   the   thread   will   have   to \n               //   go   through   the   slow-start   behavior   again.    The   slow-start   is   useful \n               //   mainly   for   threads   that   stay   relatively   idle   for   their   entire \n               //   lifetime. \n               //   \u7531\u4e8e\u8be5TC\u5185\u5b58\u5feb\u6ee1\u4e86,\u6240\u4ee5,\u6211\u4eec\u51cf\u5c11batch_size,   \u51cf\u6162\u6162\u542f\u52a8\u7b97\u6cd5,\u4fdd\u8bc1\u7a7a\u95f4\u4e0d\u4f1a\u6d6a\u8d39\u592a\u591a. \n               const   int   batch_size   =   Static : : sizemap () - num_objects_to_move ( cl ); \n               if   (list- max_length()     batch_size)   { \n                 list- set_max_length( \n                     max int (list- max_length()   -   batch_size,   batch_size)) ;   //   \u51cf\u5c11\u540e\u548cbatch_size\u4e2d\u7684\u6700\u5927\u503c. \n               } \n             } \n             list- clear_lowwatermark ();    // \u6e05\u7406\u4f4e\u6c34\u5e73\u6807\u5fd7\u4f4d . \u5176\u5b9e\u5c31\u662f\u8bbe\u7f6e\u4e3a\u5f53\u524d\u957f\u5ea6 ... \n           } \n           //   \u65e0\u803b\u5730\u5077\u53d6\u5176\u4ed6\u7ebf\u7a0b\u7684\u5bb9\u91cf . \n           IncreaseCacheLimit (); \n         } \n     ``` \n\n     \u4ee5\u4e0a\u662f\u5185\u5b58\u91ca\u653e\u7684\u60c5\u51b5 , \u8fd8\u6709\u4e2a\u4fdd\u8bc1\u81ea\u5df1\u7ebf\u7a0b\u5bb9\u91cf\u5145\u88d5\u7684\u65e0\u803b\u505a\u6cd5\u662f , \u5077\u53d6\u5176\u4ed6\u7ebf\u7a0b\u7684\u5bb9\u91cf . \u5077\u53d6\u4e34\u8fd1 10 \u4e2a TC \u7684   1     16 \u5bb9\u91cf .   \u5f53\u7136 , \u5982\u679c\u5176\u5bb9\u91cf\u5c0f\u4e8e\u6700\u5c0f\u503c , \u5c31\u653e\u8fc7\u4e86\uff0e\u4e5f\u5c31\u662f\u8bf4 , \u5bf9\u4e8e\u5f88\u5c11\u542f\u52a8\u6162\u542f\u52a8\u7684\u7ebf\u7a0b , \u5176\u7ebf\u7a0b\u5bb9\u91cf\u5c06\u4f1a\u7531\u4e8e\u88ab\u5077\u53d6\u800c\u6301\u7eed\u51cf\u5c11 ,   \u6709\u6548\u63a7\u5236\u4e86\u8fd9\u79cd\u7ebf\u7a0b\u5185\u5b58\u7684\u6d6a\u8d39 , \u901a\u8fc7\u8fd9\u79cd\u673a\u5236 , \u6709\u6548\u5730\u4fdd\u8bc1\u8fdb\u7a0b\u95f4\u7a7a\u95f4\u4e0d\u4f1a\u6d6a\u8d39\u592a\u591a .   \u9700\u6c42\u5927\u7684\u7ebf\u7a0b\u53ef\u4ee5\u83b7\u5f97\u66f4\u591a\u7684\u5bb9\u91cf , \u800c\u9700\u6c42\u5c0f\u7684\u7ebf\u7a0b\u83b7\u53d6\u5c11\u7684\u5bb9\u91cf . \u5982\u679c\u5b58\u5728\u65e0\u4eba\u8ba4\u9886\u7684\u5185\u5b58 , \u54b1\u4eec\u5c31\u5077\u4e86 !! \u6240\u8c13\u65e0\u4eba\u8ba4\u9886\u7684\u5185\u5b58 , \u662f\u6307\u7ebf\u7a0b\u88ab\u91ca\u653e\u540e ,   \u5176\u91ca\u653e\u7684\u5185\u5b58 . \n\n     ``` cpp \n         void   ThreadCache :: IncreaseCacheLimitLocked ()   { \n           if   (unclaimed_cache_space_     0)   { \n             //   Possibly   make   unclaimed_cache_space_   negative. \n             unclaimed_cache_space_   -=   kStealAmount ; \n             max_size_   +=   kStealAmount ; \n             return ; \n           } \n           //   Don t   hold   pageheap_lock   too   long .    Try   to   steal   from   10   other \n           //   threads   before   giving   up .    The   i     10   condition   also   prevents   an \n           //   infinite   loop   in   case   none   of   the   existing   thread   heaps   are \n           //   suitable   places   to   steal   from . \n           for   ( int   i   =   0 ;   i     10 ; \n                ++ i ,   next_memory_steal_   =   next_memory_steal_- next_ )   { \n             //   Reached   the   end   of   the   linked   list.    Start   at   the   beginning. \n             if   (next_memory_steal_   ==   NULL)   { \n               ASSERT(thread_heaps_   !=   NULL) ; \n               //   next_memory_steal_   \u5728\u521d\u59cb\u5316\u65f6\u9ed8\u8ba4\u4e3aTC\u7684Heap\u7684\u94fe\u8868\u5934. \n               //   \u6240\u4ee5,\u8fd9\u4e2a\u5faa\u73af\u4f1a\u4e0d\u505c\u8f6e\u6d41\u5077\u53d6\u94fe\u8868\u91cc\u7684\u6240\u6709\u7ebf\u7a0b,\u5305\u62ec\u81ea\u5df1. \n               next_memory_steal_   =   thread_heaps_ ; \n             } \n             if   ( next_memory_steal_   ==   this   || \n                 next_memory_steal_- max_size_   =   kMinThreadCacheSize )   { \n               continue ; \n             } \n             next_memory_steal_- max_size_   - =   kStealAmount ; \n             max_size_   +=   kStealAmount ; \n\n             next_memory_steal_   =   next_memory_steal_- next_ ; \n             return ; \n           } \n         } \n     ```     CC\u5411PH \u7533\u8bf7\u548c\u91ca\u653e\u5185\u5b58    PH\u7684\u5185\u5b58\u7ba1\u7406  PH\u7684\u7ba1\u7406,\u8ddfTC\u4e00\u6837\u4e5f\u662f\u8fdb\u884c\u4e86\u5206\u7c7b,\u633a\u590d\u6742\u7684.\u9996\u5148, \u6240\u6709\u7684\u5185\u5b58,\u6620\u5c04\u5230\u8fdb\u7a0b\u7a7a\u95f4\u7684\u5185\u5b58,\u90fd\u4f1a\u5360\u636e\u7740PH\u4e2d\u7684\u67d0\u4e2alist. PH\u7684\u5185\u5b58\u662f\u76f4\u63a5\u4ece\u7cfb\u7edf\u7684sbrk\u6216\u8005mmap\u5206\u914d\u7684.\u540c\u6837, \u5927\u5185\u5b58\u4e5f\u662f\u4ecePH\u5206\u914d\u7684,\u6240\u4ee5,\u5b83\u5f88\u590d\u6742!  PH\u7684\u5206\u7c7b,\u662f\u6309page\u6570\u91cf\u8fdb\u884c.  free_  \u4ece  0 - kMaxPages , \u6bcf\u4e2a\u6570\u7ec4\u6210\u5458\u5305\u542b\u6570\u7ec4\u4e0b\u6807\u4e2apages, \u4e5f\u5c31\u662f  free_ \u5305\u542b1\u4e2apage\u957f\u5ea6\u7684Spans.\u6bcf\u4e2a\u6570\u7ec4\u6210\u5458\u5305\u542b2\u4e2a\u53cc\u5411\u73af\u5f62\u94fe\u8868normal\u548creturned.\u800c\u5927\u4e8ekMaxPages\u7684\u5f52\u5c5e\u5230large \u4e2d.  normal: \u5b58\u653e\u7a7a\u95f2\u7684span list.  returned: \u5b58\u653e\u901a\u8fc7madvise\u7684  MADV_FREE  \u65b9\u5f0f\u91ca\u653e\u7684span.\u524d\u63d0\u65f6\u7cfb\u7edf\u652f\u6301  MADV_FREE  \u6216  MADV_DONTNEED  \u5426\u5219\u5c31\u4e0d\u91ca\u653e\u5185\u5b58.  \u6240\u8c13madvise\u7684 MADV_FREE  \u91ca\u653e\u5185\u5b58, \u662f\u5185\u6838\u5b9e\u73b0\u7684\u4e00\u79cdlazy free\u65b9\u5f0f.\u5728process\u901a\u8fc7 madvise MADV_FREE  \u65b9\u5f0f\u901a\u77e5kernel, \u67d0\u6bb5pages\u4e2d\u7684\u6570\u636e\u4e0d\u518d\u4f7f\u7528\u4e86,\u5982\u679ckernel\u9700\u8981,\u53ef\u4ee5\u6e05\u695a.\u5982\u679cprocess\u5148\u4e8ekernel\u518d\u6b21\u8bbf\u95ee\u4e86\u8be5\u533a\u57df,process\u53ef\u4ee5\u5feb\u901f\u83b7\u53d6\u5230\u8be5\u4f4d\u7f6e\u7684\u539f\u5148\u6570\u636e. \u5982\u679ckernel\u5148\u4e8eprocess\u9700\u8981\u8be5pages,\u5219\u5f53process\u8bbf\u95ee\u65f6,\u4f1a\u83b7\u5f97\u88ab\u6e05\u7a7a\u7684pages.  \u5982\u679c\u6211\u4eec\u7cfb\u7edf\u4e0d\u652f\u6301 MADV_FREE , \u5219\u4f7f\u7528 MADV_DONTNEED .  MADV_DONTNEED \u4e0e MADV_FREE \u7684\u533a\u522b\u5728\u4e8e, MADV_DONTNEED \u7684\u60c5\u51b5\u4e0b,\u4e0d\u7ba1\u4ec0\u4e48\u60c5\u51b5\u4e0b\u518d\u6b21\u8bbf\u95ee\u8fd9\u6bb5pages, \u83b7\u5f97\u7684\u603b\u662f\u88ab\u6e050\u7684\u5185\u5b58\u533a\u57df.  more info about MADV_FREE and MADV_DONTNEED  \u5bf9\u4e8espan, span\u4e2dobjects\u7684\u5730\u5740\u548c span\u7684PageID\u4e4b\u95f4, \u5728PH\u4e2d\u5b58\u5728\u76f8\u5e94\u7684\u7b97\u6cd5\u8fdb\u884c\u6620\u5c04. PageMap \u662f\u4e00\u4e2a\u57fa\u6570\u6811(radix tree), \u80fd\u5c06\u67d0\u4e2a\u5730\u5740\u6620\u5c04\u5230\u5bf9\u5e94\u7684span. \u800cPageMapCache\u662fHashTable\u80fd\u5c06\u5bf9\u5e94\u7684PageId\u6620\u5c04\u5230\u5176size class.  ```\n    // We segregate spans of a given size into two circular linked\n    // lists: one for normal spans, and one for spans whose memory\n    // has been returned to the system.\n    struct SpanList {\n      Span        normal;    // \u5b58\u653e\u88ab\u6620\u5c04\u5230\u8fdb\u7a0b\u7a7a\u95f4\u7684spans..\n      Span        returned;  // \u5b58\u653e\u5df2\u7ecf\u88ab\u91ca\u653e\u56de\u7cfb\u7edf\u7684spans..(?)\n    };  // List of free spans of length  = kMaxPages\nSpanList large_; // \u6240\u6709  128 pages\u7684spans, \u90fd\u5f52\u5c5e\u5230\u8be5list\n\n// Array mapping from span length to a doubly linked list of free spans\nSpanList free_[kMaxPages]; // kMaxPages = 1   (20 - kPageShift) (= 128); \u4e5f\u5c31\u662f\u8bf4\u6709128\u4e2a\u5206\u7c7b.  ```    CC \u5411PH \u5185\u5b58\u7533\u8bf7  CC\u5411PH\u7533\u8bf7\u5185\u5b58\u7684\u6761\u4ef6\u662f,\u5f53\u524dCentralFreeList\u4e2d\u7a7a\u95f2span\u4e0d\u591f.\u6240\u6709\u5411PH\u7533\u8bf7\u7684\u5185\u5b58\u90fd\u662fPage\u7684N\u500d,\u6240\u4ee5,\u53c2\u6570\u662fN. PageHeap::New(Length n).  * \u9996\u5148, \u641c\u7d22\u6240\u6709  = N (N  = kMaxPages)\u7684free list, \u67e5\u627e\u6700\u7b26\u5408\u8981\u6c42\u7684span.\u5982\u679c\u627e\u5230,\u5219\u76f4\u63a5\u4ece\u53cc\u5411\u94fe\u8868\u4e2d\u5220\u9664. \u5982\u679cspan\u6bd4\u8981\u6c42\u7684\u5927,\u5219\u5207\u5206(Carve),\u5c06\u5269\u4e0b\u7684\u65b0\u7533\u8bf7\u4e00\u4e2aspan,\u653e\u5165\u5bf9\u5e94\u7684size class\u4e2d.\u8fd9\u79cd\u7b97\u6cd5\u67e5\u627e\u6700\u9002\u5408\u7684,\u4f46\u4f1a\u5bfc\u81f4\u5730\u5740\u4e0d\u8fde\u7eed.\n* \u5982\u679c\u6240\u6709\u7684free list\u4e2d\u6ca1\u6709\u5339\u914d\u7684,\u5219\u904d\u5386large list.\u7531\u4e8elarge list\u4e2d\u662f\u672a\u6392\u5e8f\u7684, \u6240\u4ee5, \u5728\u641c\u7d22\u65f6, \u9700\u8981\u4e0d\u505c\u5730\u8bb0\u5f55\u6700\u63a5\u8fd1\u8bf7\u6c42\u5927\u5c0f\u7684span. \u6240\u4ee5\u8be5\u7b97\u6cd5\u662fO(n), \u8d39\u65f6.\n* \u5982\u679c\u4ee5\u4e0a\u67e5\u627e\u90fd\u5931\u8d25,\u5219PH\u5c31\u5411\u7cfb\u7edf\u7533\u8bf7N pages \u5e76\u5b58\u5165\u5bf9\u5e94\u7684size class.\u7136\u540e\u4ece\u5934\u5f00\u59cb.\u5982\u679c\u7533\u8bf7\u5931\u8d25,\u5219\u8fd4\u56deNULL.  \u6211\u4eec\u5ef6\u7eed\u4e4b\u524dTC\u5411CC\u8bf7\u6c42\u5185\u5b58\u65f6\u7684\u60c5\u51b5,\u5728slots\u4e0d\u591f\u65f6,\u4f1a\u5411spans\u8bf7\u6c42.\u5982\u4e0b\u4ee3\u7801:  ```\n    void  CentralFreeList::FetchFromSpansSafe() {\n      // \u7b2c\u4e00\u6b21\u5c1d\u8bd5,\u5982\u679c\u5931\u8d25,\u5219\u610f\u5473\u7740spans\u7a7a\u95f4\u4e0d\u591f,\u9700\u8981\u5411PH\u7533\u8bf7\u5185\u5b58.\n      void  t = FetchFromSpans();\n      if (!t) {\n        // \u5411PH\u7533\u8bf7\u5185\u5b58,\u5e76\u5212\u5206\u83b7\u53d6\u7684spans,\u7528\u4e8e\u8be5\u5206\u7c7b\u7684slots.\n        Populate();\n        // \u518d\u6b21\u5c1d\u8bd5\u83b7\u53d6objects.\n        t = FetchFromSpans();\n      }\n      return t;\n    }  //   Fetch   memory   from   the   system   and   add   to   the   central   cache   freelist .  void   CentralFreeList :: Populate ()   { \n   //   Release   central   list   lock   while   operating   on   pageheap \n   lock_.Unlock() ; \n   //   \u83b7\u53d6\u8be5\u7c7b\u522b\u5bf9\u5e94\u7684\u9700\u8981\u4ecePH\u83b7\u53d6\u7684page\u6570\u91cf.\u5177\u4f53\u6570\u503c\u53ef\u4ee5\u53c2\u8003\u4e0a\u9762slots\u5206\u7c7b\u7684\u6570\u636e. \n   const   size_t   npages   =   Static : : sizemap () - class_to_pages ( size_class_ ); \n\n   Span*   span ; \n   { \n     SpinLockHolder   h( Static : : pageheap_lock ()); \n     //   \u4ecePH   \u83b7\u53d6npages \n     span   =   Static : : pageheap () - New ( npages ); \n     //   \u5c06\u8fd9\u4e2aspan\u4e0e\u8be5\u7c7b\u522b\u5728PH\u4e2d\u5bf9\u5e94\u8d77\u6765. \n     if   (span)   Static : : pageheap () - RegisterSizeClass ( span ,   size_class_ ); \n   } \n   if   ( span   ==   NULL )   { \n     Log(kLog,   __FILE__,   __LINE__, \n         tcmalloc :   allocation   failed ,   npages     kPageShift ); \n     lock_.Lock() ; \n     return ; \n   } \n   ASSERT ( span- length   ==   npages ); \n   //   Cache   sizeclass   info   eagerly .    Locking   is   not   necessary . \n   //   ( Instead   of   being   eager ,   we   could   just   replace   any   stale   info \n   //   about   this   span ,   but   that   seems   to   be   no   better   in   practice .) \n   for   ( int   i   =   0 ;   i     npages ;   i ++)   { \n     //   \u5c06pages\u7684\u4fe1\u606f\u548c\u5bf9\u5e94\u7684size_class   \u6ce8\u518c\u5230PH\u4e2d\u7684hash\u8868\u4e2d,   \u4e5f\u5c31\u662fPageMapCache \n     Static : : pageheap () - CacheSizeClass ( span - start   +   i ,   size_class_ ); \n   } \n\n   //   Split   the   block   into   pieces   and   add   to   the   free-list \n   //   TODO :   coloring   of   objects   to   avoid   cache   conflicts ? \n   //   \u5206\u5272\u8be5 span \u4e2d objects \u5230\u5f53\u524d\u7684 free-list \u4e2d . \n   void **   tail   =   span- objects ; \n   char *   ptr   =   reinterpret_cast char * ( span- start     kPageShift ); \n   char *   limit   =   ptr   +   ( npages     kPageShift ); \n   const   size_t   size   =   Static :: sizemap () - ByteSizeForClass ( size_class_ ); \n   int   num   =   0 ; \n   while   ( ptr   +   size   =   limit )   { \n     *tail   =   ptr ; \n     tail   =   reinterpret_cast void** (ptr) ; \n     ptr   +=   size ; \n     num++ ; \n   } \n   ASSERT ( ptr   =   limit ); \n   * tail   =   NULL ; \n   span- refcount   =   0 ;   //   No   sub-object   in   use   yet \n\n   //   Add   span   to   list   of   non-empty   spans \n   lock_ . Lock (); \n   //   \u5c06\u8be5 span \u6dfb\u52a0\u5230 noneempty \u5217\u8868\u4e2d . \n   tcmalloc :: DLL_Prepend ( nonempty_ ,   span ); \n   ++ num_spans_ ; \n   counter_   +=   num ;  }   ```  ```\n    void  CentralFreeList::FetchFromSpans() {\n      // \u68c0\u67e5nonempty list, \u5982\u679c\u4e3a\u7a7a,\u610f\u5473\u7740\u6ca1\u6709\u7a7a\u95f2\u7684span.\n      if (tcmalloc::DLL_IsEmpty( nonempty_)) return NULL;\n      Span  span = nonempty_.next;     ASSERT ( span- objects   !=   NULL ); \n   //   span \u7684 refcount   \u6307\u5411\u88ab\u4f7f\u7528\u6b21\u6570 .   \u6bcf\u4e00\u6b21\u88ab\u5206\u914d\u5185\u5b58 , \u5f15\u7528 ++,   \u91ca\u653e\u65f6\u5f15\u7528 -- .  \n   //   \u5728\u91ca\u653e\u65f6 , \u5982\u679c refcount \u4e3a 0 ,   \u5c31\u4f1a\u91ca\u653e\u7ed9 PH . \n   span- refcount ++; \n   void *   result   =   span- objects ; \n   //   \u52a0\u5165\u5230\u94fe\u8868 \n   span- objects   =   *( reinterpret_cast void ** ( result )); \n   if   ( span- objects   ==   NULL )   { \n     //   Move   to   empty   list \n     tcmalloc : : DLL_Remove ( span ); \n     tcmalloc : : DLL_Prepend ( empty_ ,   span ); \n     Event(span,   E ,   0) ; \n   } \n   counter_-- ; \n   return   result ;  }   ```  \u4e0b\u9762,\u6211\u4eec\u770b\u4e0bPH\u7684\u5185\u5b58\u5206\u914d, \u4e5f\u5c31\u662fPageHeap::New(Length n)\u7684\u903b\u8f91.  ```\n    Span* PageHeap::New(Length n) {\n      ASSERT(Check());\n      ASSERT(n   0);    // \u641c\u7d22span\u89c4\u5219.\n  Span* result = SearchFreeAndLargeLists(n);\n  if (result != NULL)\n    return result;\n\n  // ...\n\n  // \u589e\u957f\u5185\u5b58, \u5b9e\u9645\u662f\u6267\u884c\u7cfb\u7edf\u8c03\u7528\n  // Grow the heap and try again.\n  if (!GrowHeap(n)) {\n    ASSERT(Check());\n    return NULL;\n  }\n  return SearchFreeAndLargeLists(n);\n}  ```  ```\n    Span* PageHeap::SearchFreeAndLargeLists(Length n) {\n      ASSERT(Check());\n      ASSERT(n   0);     //   Find   first   size   =   n   that   has   a   non-empty   list \n   //   \u4ece n \u5f00\u59cb\u67e5\u627e , \u5bfb\u627e\u7b2c\u4e00\u4e2a\u975e\u7a7a\u7684\u94fe\u8868 . \n   for   ( Length   s   =   n ;   s     kMaxPages ;   s ++)   { \n     Span*   ll   =   free_ [ s ] .normal ; \n     //   If   we re   lucky,   ll   is   non-empty,   meaning   it   has   a   suitable   span. \n     if   (!DLL_IsEmpty(ll))   { \n       ASSERT(ll- next- location   ==   Span : : ON_NORMAL_FREELIST ); \n       //   \u627e\u5230,   \u7136\u540e,\u6211\u4eec\u5c1d\u8bd5\u5206\u5272. \n       return   Carve(ll- next,   n) ; \n     } \n     //   Alternatively ,   maybe   there s   a   usable   returned   span . \n     //   returned   \u662f\u901a\u8fc7 madvice \u91ca\u653e\u7684\u5185\u5b58 . \n     ll   =   free_ [ s ] . returned ; \n     if   (! DLL_IsEmpty ( ll ))   { \n       //   We   did   not   call   EnsureLimit   before,   to   avoid   releasing   the   span \n       //   that   will   be   taken   immediately   back. \n       //   Calling   EnsureLimit   here   is   not   very   expensive,   as   it   fails   only   if \n       //   there   is   no   more   normal   spans   (and   it   fails   efficiently) \n       //   or   SystemRelease   does   not   work   (there   is   probably   no   returned   spans). \n       if   (EnsureLimit(n))   { \n         //   ll   may   have   became   empty   due   to   coalescing \n         if   (!DLL_IsEmpty(ll))   { \n           ASSERT(ll- next- location   ==   Span : : ON_RETURNED_FREELIST ); \n           return   Carve(ll- next,   n) ; \n         } \n       } \n     } \n   } \n   //   No   luck   in   free   lists ,   our   last   chance   is   in   a   larger   class . \n   //   \u8fd9\u662f\u4e2a\u4e0d\u5e78\u7684\u6d88\u606f , \u6211\u4eec\u53ea\u80fd\u641c\u7d22\u6700\u540e\u4e00\u4e2a large_   \u94fe\u8868 . \n   return   AllocLarge ( n );    //   May   be   NULL  }   ```  \u7531\u4e8e large_  \u4e2d\u7684\u5bf9\u8c61\u6ca1\u6709\u6392\u5e8f,\u6240\u4ee5,\u9700\u8981\u904d\u5386\u6240\u6709,\u4e0d\u505c\u5730\u5339\u914d. \u8fd9\u4e2a\u64cd\u4f5c\u8d39\u65f6, \u4f46\u57fa\u672c\u4e0a\u903b\u8f91\u8fdb\u5230\u8fd9\u91cc\u7684\u51e0\u7387\u4e0d\u9ad8.\u8fd9\u91cc\u4f1a\u68c0\u67e5PH\u7684\u5bb9\u91cf,\u5e76\u6267\u884c\u53ef\u80fd\u9700\u8981\u7684\u5185\u5b58\u91ca\u653e.  ```\n    Span  PageHeap::AllocLarge(Length n) {\n      // find the best span (closest to n in size).\n      // The following loops implements address-ordered best-fit.\n      Span  best = NULL;     \u641c\u7d22 normal   list \n   for   ( Span *   span   =   large_ . normal . next ; \n        span   !=   large_ . normal ; \n        span   =   span- next )   { \n     if   (span- length   =   n)   { \n       if   ((best   ==   NULL) \n           ||   (span- length     best- length) \n           ||   ((span- length   ==   best- length)     (span- start     best- start)))   { \n         best   =   span ; \n         ASSERT(best- location   ==   Span : : ON_NORMAL_FREELIST ); \n       } \n     } \n   } \n\n   Span   * bestNormal   =   best ; \n\n   //   \u641c\u7d22 returned   list . \n   for   ( Span *   span   =   large_ . returned . next ; \n        span   !=   large_ . returned ; \n        span   =   span- next )   { \n     if   (span- length   =   n)   { \n       if   ((best   ==   NULL) \n           ||   (span- length     best- length) \n           ||   ((span- length   ==   best- length)     (span- start     best- start)))   { \n         best   =   span ; \n         ASSERT(best- location   ==   Span : : ON_RETURNED_FREELIST ); \n       } \n     } \n   } \n\n   //   best \u6765\u81ea normal \n   if   ( best   ==   bestNormal )   { \n     return   best   ==   NULL   ?   NULL   :   Carve ( best ,   n ); \n   } \n\n   //   best   \u6765\u81ea returned ,   \u6211\u4eec\u5982\u679c\u53d6\u56de best , \u9700\u8981\u5224\u65ad PH \u662f\u5426\u8fbe\u5230\u5bb9\u91cf\u4e0a\u9650 . \n   //   \u53ea\u662f\u68c0\u67e5 . \n   //   true   \u4e3a\u672a\u8fbe\u5230\u4e0a\u9650 . \u53c2\u6570 false \u8868\u793a , \u8fbe\u5230\u4e0a\u9650 , \u4e0d\u91ca\u653e\u5185\u5b58 . \n   if   ( EnsureLimit ( n ,   false ))   { \n     return   Carve(best,   n) ; \n   } \n\n   //   \u5bb9\u91cf\u4e0a\u9650 , \u91ca\u653e\u5185\u5b58 . \n   //   \u91ca\u653e\u5185\u5b58\u7684\u903b\u8f91\u4e0e TC \u7684\u7c7b\u4f3c , \u4ece\u6bcf\u4e2a list \u4e2d\u91ca\u653e\u4e00\u90e8\u5206 . \n   //   \u6700\u540e\u8c03\u7528 TCMalloc_SystemRelease   \u8fdb\u884c madvise \u91ca\u653e . \n   //   \u7cfb\u7edf\u5fc5\u987b\u652f\u6301 madvise ,   \u5426\u5219 tcmalloc \u65e0\u6cd5\u5de5\u4f5c . \n   if   ( EnsureLimit ( n ,   true ))   { \n     //   best   could   have   been   destroyed   by   coalescing. \n     //   bestNormal   is   not   a   best-fit,   and   it   could   be   destroyed   as   well. \n     //   We   retry,   the   limit   is   already   ensured : \n     return   AllocLarge ( n ); \n   } \n\n   //   If   bestNormal   existed ,   EnsureLimit   would   succeeded : \n   ASSERT ( bestNormal   ==   NULL ); \n   //   We   are   not   allowed   to   take   best   from   returned   list . \n   return   NULL ;  }   ```  \u6211\u4eec\u6765\u770b\u4e0b\u5206\u5272\u7684\u884c\u4e3a.\u8ddfdlmalloc\u5206\u5272\u5185\u5b58\u4e00\u6837\u7684. \u90fd\u662f\u5c06\u5269\u4e0b\u7684\u91cd\u65b0\u63d2\u5165\u5230\u5bf9\u5e94\u7684\u5206\u533a\u4e2d.  ```\n    Span  PageHeap::Carve(Span  span, Length n) {\n      ASSERT(n   0);\n      ASSERT(span- location != Span::IN_USE);\n      const int old_location = span- location;\n      // \u4ece\u94fe\u8868\u4e2d\u79fb\u9664.\n      RemoveFromFreeList(span);\n      span- location = Span::IN_USE;\n      Event(span, 'A', n);    const int extra = span- length - n;\n  ASSERT(extra  = 0);\n  if (extra   0) {\n    // \u5c06\u5269\u4f59\u90e8\u5206\u751f\u6210\u65b0\u7684span\n    Span* leftover = NewSpan(span- start + n, extra);\n    leftover- location = old_location;\n    Event(leftover,  S , extra);\n    RecordSpan(leftover);\n    // \u63d2\u5165\u5bf9\u5e94\u7684list\n    PrependToFreeList(leftover);\n    span- length = n;\n    // \u5c06span\u7684\u5730\u5740\u533a\u57df\u548cspan\u7684\u5b88\u5730\u5740\u5728radix tree\u4e2d\u5bf9\u5e94\u8d77\u6765.\n    pagemap_.set(span- start + n - 1, span);\n  }\n  ASSERT(Check());\n  return span;\n}  ```  \u7136\u540e\u6211\u4eec\u770b\u4e0bGrowHeap, \u662f\u5982\u4f55\u4ece\u7cfb\u7edf\u83b7\u53d6\u5185\u5b58\u7684  ```\n    bool PageHeap::GrowHeap(Length n) {\n      ASSERT(kMaxPages  = kMinSystemAlloc);\n      if (n   kMaxValidPages) return false;\n      // \u5224\u65ad\u9700\u8981\u8bf7\u6c42\u7684page\u6570\u91cf.\n      Length ask = (n kMinSystemAlloc) ? n : static_cast (kMinSystemAlloc);\n      size_t actual_size;\n      void* ptr = NULL;    // \u786e\u5b9a\u6dfb\u52a0ask\u7684\u6570\u91cf\u540e,\u6ca1\u6709\u8fbe\u5230\u5bb9\u91cf\u8981\u6c42\n  if (EnsureLimit(ask)) {\n      ptr = TCMalloc_SystemAlloc(ask   kPageShift,  actual_size, kPageSize);\n  }\n  if (ptr == NULL) {\n    if (n   ask) {\n      // Try growing just  n  pages\n      ask = n;\n      if (EnsureLimit(ask)) {\n        ptr = TCMalloc_SystemAlloc(ask   kPageShift,  actual_size, kPageSize);\n      }\n    }\n    if (ptr == NULL) return false;\n  }\n  ask = actual_size   kPageShift;\n  RecordGrowth(ask   kPageShift);\n\n  // \u8bb0\u5f55\u7cfb\u7edf\u5df2\u7ecf\u5206\u914d\u7684page\u6570\u91cf.\n  uint64_t old_system_bytes = stats_.system_bytes;\n  stats_.system_bytes += (ask   kPageShift);\n  const PageID p = reinterpret_cast uintptr_t (ptr)   kPageShift;\n  ASSERT(p   0);\n\n  // If we have already a lot of pages allocated, just pre allocate a bunch of\n  // memory for the page map. This prevents fragmentation by pagemap metadata\n  // when a program keeps allocating and freeing large blocks.\n  if (old_system_bytes   kPageMapBigAllocationThreshold\n        stats_.system_bytes  = kPageMapBigAllocationThreshold) {\n    pagemap_.PreallocateMoreMemory();\n  }\n\n  // Make sure pagemap_ has entries for all of the new pages.\n  // Plus ensure one before and one after so coalescing code\n  // does not need bounds-checking.\n  // \u4e0e\u524d\u4e00\u4e2a\u5408\u5e76,\u5982\u679c\u524d\u4e00\u4e2a\u662f\u7a7a\u95f2\u7684\u8bdd.\n  if (pagemap_.Ensure(p-1, ask+2)) {\n    // Pretend the new area is allocated and then Delete() it to cause\n    // any necessary coalescing to occur.\n    Span* span = NewSpan(p, ask);\n    RecordSpan(span);\n    Delete(span);\n    ASSERT(Check());\n    return true;\n  } else {\n    // We could not allocate memory within  pagemap_ \n    // TODO: Once we can return memory to the system, return the new span\n    return false;\n  }\n}  ```  \u7136\u540e,\u5c31\u662f\u8ddf\u7cfb\u7edf\u4e92\u52a8\u7684  TCMalloc::SystemAlloc .\u5176\u4e2d\u6709\u4e24\u4e2aallocator, mmap\u548c\nsbrk.\u5b83\u4f1a\u904d\u5386\u6240\u6709\u7684allocs, \u76f4\u5230\u80fd\u6210\u529f\u5206\u914d\u5185\u5b58.\u5728\u6211\u4eec\u7684\u7cfb\u7edf\u4e0a,\u5148\u5c1d\u8bd5sbrk,\u7136\u540e\u624d\u662fmmap.  void* DefaultSysAllocator::Alloc(size_t size, size_t *actual_size,\n                                     size_t alignment) {\n      for (int i = 0; i   kMaxAllocators; i++) {\n        if (!failed_[i]   allocs_[i] != NULL) {\n          void* result = allocs_[i]- Alloc(size, actual_size, alignment);\n          if (result != NULL) {\n            return result;\n          }\n          failed_[i] = true;\n        }\n      }\n      // After both failed, reset \"failed_\" to false so that a single failed\n      // allocation won't make the allocator never work again.\n      for (int i = 0; i   kMaxAllocators; i++) {\n        failed_[i] = false;\n      }\n      return NULL;\n    }    CC \u5411PH \u91ca\u653e\u5185\u5b58  CC\u5411PH\u91ca\u653e\u5185\u5b58\u7684\u6761\u4ef6\u662f, slots\u6ee1,\u5e76\u4e14span\u4e2dobjects\u5168\u90e8\u56de\u6536 (refcount\u4e3a0). \u524d\u6587\u63d0\u5230,CC\u548cPH\u4e4b\u95f4\u79fb\u52a8\u7684\u5355\u4f4d\u65f6span, \u6240\u4ee5, \u91ca\u653e\u65f6\u9700\u8981\u7684\u53c2\u6570\u5c31\u662f span. PageHeap::Delete(Span * span). \u8be5\u51fd\u6570\u7684\u4f5c\u7528\u5c31\u662f\u5c06\u91ca\u653e\u7684\u5185\u5b58\u4e0e\u5176\u524d\u540e\u7a7a\u95f2\u5185\u5b58\u5408\u5e76,\u63d2\u5165size class.  * \u9996\u5148,\u4ecePageMap\u83b7\u53d6\u5230\u76f8\u8fde\u7684span, \u5982\u679c\u5b83\u4eec\u90fd\u662f\u7a7a\u95f2\u7684,\u5219\u8fdb\u884c\u5408\u5e76.\n* \u5c06\u5408\u5e76\u540e\u7684\u65b0span\u6216\u8005\u4e0d\u9700\u8981\u5408\u5e76\u7684span\u63d2\u5165\u5bf9\u5e94\u7684free list\u4e2d.\n* PageHeap\u68c0\u67e5\u662f\u5426\u9700\u8981\u91ca\u653e\u5185\u5b58\u5230\u7cfb\u7edf.\u8fd9\u91cc\u91ca\u653e\u7684\u673a\u5236\u4e0eTC\u91ca\u653e\u7684\u673a\u5236\u6709\u70b9\u4e0d\u540c,\u4e0d\u4f1a\u9488\u5bf9\u67d0\u4e2a\u5206\u7c7b\u5927\u5c0f\u8fdb\u884c\u91ca\u653e,\u800c\u662f\u9488\u5bf9\u6574\u4e2aPH\u8fdb\u884c\u91ca\u653e.  void PageHeap::Delete(Span* span) {\n      ASSERT(Check());\n      ASSERT(span- location == Span::IN_USE);\n      ASSERT(span- length   0);\n      ASSERT(GetDescriptor(span- start) == span);\n      ASSERT(GetDescriptor(span- start + span- length - 1) == span);\n      const Length n = span- length;\n      span- sizeclass = 0;\n      span- sample = 0;\n      // \u8bbe\u7f6e\u4e3a\u5728normal list\n      span- location = Span::ON_NORMAL_FREELIST;\n      Event(span, 'D', span- length);\n      // \u4e0e\u524d\u540e\u5408\u5e76\n      MergeIntoFreeList(span);  // Coalesces if possible\n      // \u5185\u5b58\u91ca\u653e\u7684\u903b\u8f91.\n      IncrementalScavenge(n);\n      ASSERT(Check());\n    }  \u9996\u5148\u6211\u4eec\u770b\u4e0b\u5408\u5e76\u7684\u903b\u8f91. \u8ddfdlmalloc\u5176\u5b9e\u6ca1\u5dee. \u5373\u4f7f\u6839\u636espan\u7684\u83b7\u53d6\u5230\u5bf9\u5e94\u7684 pageID,\u7136\u540e\u67e5\u627e(pageID - 1) \u7684page\u548c(pageID +\uff11)\u7684page,\u5982\u679c\u90fd\u4e3a\u7a7a\u95f2,\u5408\u5e76.  ```\n    void PageHeap::MergeIntoFreeList(Span* span) {\n      ASSERT(span- location != Span::IN_USE);    const PageID p = span- start;\n  const Length n = span- length;\n  // GetDescriptor \u5c31\u662f\u901a\u8fc7pagemap, \u5c06pageID\u6620\u5c04\u6210span\u7684\u5730\u5740.\n  Span* prev = GetDescriptor(p-1);\n  // \u8fd9\u91cc\u7684location, \u4e0d\u662f\u8ddf\u5730\u5740\u76f8\u5173\u7684,\u800c\u662f\u8868\u793a\u8fd9\u4e2aspan\u5b58\u5728\u7684list(normal or returned)\n  // \u8fd9\u91cc\u662f\u4fdd\u8bc1, normal\u4e2d\u7684span\u4e0d\u4f1a\u548creturned\u4e2d\u7684span\u8fdb\u884c\u5408\u5e76.\n  if (prev != NULL   prev- location == span- location) {\n    // Merge preceding span into this span\n    ASSERT(prev- start + prev- length == p);\n    const Length len = prev- length;\n    // \u5c06\u4e0a\u4e00\u4e2aspan\u4ece\u961f\u5217\u79fb\u9664\n    RemoveFromFreeList(prev);\n    // \u5220\u9664span\u5bf9\u8c61\n    DeleteSpan(prev);\n    // \u5408\u5e76\u9996\u5730\u5740\n    span- start -= len;\n    // \u5408\u5e76\u957f\u5ea6\n    span- length += len;\n    // \u5c06\u65b0span\u7684pageID\u548cspan\u7684\u5730\u5740\u5728pagemap\u4e2d\u8fdb\u884c\u6620\u5c04\n    pagemap_.set(span- start, span);\n    Event(span,  L , len);\n  }\n  // same as above\n  Span* next = GetDescriptor(p+n);\n  if (next != NULL   next- location == span- location) {\n    // Merge next span into this span\n    ASSERT(next- start == p+n);\n    const Length len = next- length;\n    RemoveFromFreeList(next);\n    DeleteSpan(next);\n    span- length += len;\n    pagemap_.set(span- start + span- length - 1, span);\n    Event(span,  R , len);\n  }\n\n  // \u91cd\u65b0\u5c06\u751f\u6210\u7684span\u63d2\u5165\u76f8\u5e94\u7684list\u4e2d.\n  PrependToFreeList(span);\n}  ```  \u4e0b\u9762,\u6211\u4eec\u770b\u4e0b\u589e\u91cf\u91ca\u653e\u51fd\u6570IncrementalScavenge.\u5b83\u4e0d\u662f\u6bcf\u6b21\u90fd\u8fdb\u884c\u5185\u5b58\u91ca\u653e.\u5f53\u67d0\u6b64\u5185\u5b58\u672a\u91ca\u653e\u7684\u60c5\u51b5\u4e0b,\u4f1a\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4. \u6240\u4ee5,PH\u7684\u5bb9\u91cf\u662f\u5141\u8bb8\u8d85\u8fc7\u7684.  ```\n    void PageHeap::IncrementalScavenge(Length n) {\n      // Fast path; not yet time to release memory\n      // scaveng_counter_ \u662f\u4e00\u4e2a\u8d85\u65f6\u8ba1\u6570,\u5355\u4f4d\u4e3apage\u6570.\n      scavenge_counter_ -= n;\n      if (scavenge_counter_  = 0) return;  // Not yet time to scavenge    // \u56de\u6536\u7387, \u5982\u679c\u8fc7\u4f4e,\u5219\u4e0d\u56de\u6536\n  const double rate = FLAGS_tcmalloc_release_rate;\n  if (rate  = 1e-6) {\n    // Tiny release rate means that releasing is disabled.\n    scavenge_counter_ = kDefaultReleaseDelay;\n    return;\n  }\n\n  // \u5c1d\u8bd5\u91ca\u653e\u4e00\u4e2a\u9875\u9762, \u5b9e\u9645\u4e0a\u662f\u4ee5span\u4e3a\u5355\u4f4d\u91ca\u653e. \u4e5f\u5c31\u662f\u8bf4,\n  // \u9875\u9762\u6570\u4f1a\u5bf9\u9f50\u5230\u4e00\u4e2aspan\u4e2d,\u7136\u540e\u91ca\u653e\u8be5span.\n  Length released_pages = ReleaseAtLeastNPages(1);\n\n  // \u5b9e\u9645\u6ca1\u5f52\u8fd8,\u5219\u7b49\u5f85\u9ed8\u8ba4\u957f\u5ea6.\n  // \u6ca1\u5f52\u8fd8\u7684\u539f\u56e0\u662f, \u7cfb\u7edf\u4e0d\u652f\u6301madvise\u6216\u8005\u5185\u5b58\u91ca\u653e\u5931\u8d25.\n  if (released_pages == 0) {\n    // Nothing to scavenge, delay for a while.\n    // kDefaultReleaseDelay = 1   18; \u57fa\u672c\u7b49\u4e8e\u662f\u4e0d\u518d\u91ca\u653e\u5185\u5b58.\n    scavenge_counter_ = kDefaultReleaseDelay;\n  } else {\n    // Compute how long to wait until we return memory.\n    // FLAGS_tcmalloc_release_rate==1 means wait for 1000 pages\n    // after releasing one page.\n    // \u91ca\u653e\u6210\u529f,\u5219\u8ba1\u7b97\u4e0b\u4e00\u6b21\u7b49\u5f85\u65f6\u95f4.\n    const double mult = 1000.0 / rate;\n    double wait = mult * static_cast double (released_pages);\n    if (wait   kMaxReleaseDelay) {\n      // Avoid overflow and bound to reasonable range.\n      wait = kMaxReleaseDelay;\n    }\n    scavenge_counter_ = static_cast int64_t (wait);\n  }\n}  ```  \u6211\u4eec\u770b\u4e0bReleaseAtLeastNPages, \u8fd9\u4e1c\u897f\u91ca\u653e\u7684\u5355\u4f4d\u4e3aspan, \u6240\u4ee5,\u4f20\u5165\u7684\u53c2\u6570, page\u6570\u91cf,\u5b9e\u9645\u4e0a\u662f\u6307\u6700\u5c0f\u9700\u8981\u91ca\u653e\u957f\u5ea6,\u8fbe\u5230\u4e86\u6216\u8005\u6ca1\u6709\u53ef\u91ca\u653e\u7684span,\u5219\u505c\u6b62, \u5426\u5219,\u6301\u7eed\u91ca\u653e.  ```\n    Length PageHeap::ReleaseAtLeastNPages(Length num_pages) {\n      Length released_pages = 0;    // Round robin through the lists of free spans, releasing the last\n  // span in each list.  Stop after releasing at least num_pages\n  // or when there is nothing more to release.\n  while (released_pages   num_pages   stats_.free_bytes   0) {\n    for (int i = 0; i   kMaxPages+1   released_pages   num_pages;\n         i++, release_index_++) {\n      if (release_index_   kMaxPages) release_index_ = 0;\n      SpanList* slist = (release_index_ == kMaxPages) ?\n           large_ :  free_[release_index_];\n      if (!DLL_IsEmpty( slist- normal)) {\n        // \u83b7\u53d6normal\u975e\u7a7a\u7684list, \u91ca\u653e\u5176\u6700\u540e\u4e00\u4e2aspan.\n        Length released_len = ReleaseLastNormalSpan(slist);\n        // Some systems do not support release\n        if (released_len == 0) return released_pages;\n        released_pages += released_len;\n      }\n    }\n  }\n  return released_pages;\n}  ```  \u5728ReleaseLastNormalSpan\u4e2d,\u5c31\u662f\u53d6\u51falist\u4e2d\u6700\u540e\u4e00\u4e2aspan, \u8c03\u7528 TCMalloc::SystemRelease,\u91ca\u653e.\u800c TCMalloc::SystemRelease\u4e2d,\u5b9e\u9645\u8c03\u7528\u7684\u662fmadvise\u5b9e\u73b0.", 
            "title": "\u5c0f\u5bf9\u8c61\u5185\u5b58\u5206\u914d"
        }, 
        {
            "location": "/tcmalloc2.1\u6d45\u6790/#_4", 
            "text": "\u5728\u5206\u6790\u5c0f\u5185\u5b58\u65f6,\u5728\u8bf7\u6c42\u5185\u5b58\u6570   kMaxSize(256k)\u65f6, \u5219\u6267\u884c\u5927\u5185\u5b58\u5206\u914d. \u5927\u5185\u5b58\u7684\u5206\u914d\u67d0\u4e9b\u89c4\u5219\u4e0eCC\u5411PH\u7533\u8bf7\u5185\u5b58\u4e00\u6837.   \u6839\u636e\u8bf7\u6c42\u5927\u5c0f,\u5bf9\u9f50\u5230PH\u7684\u5206\u7c7b\u4e2d\u6700\u63a5\u8fd1\u7684\u5927\u5c0f, \u83b7\u53d6\u5230  num_pages .  \u6267\u884c  PageHeap::New(Length n) , \u4e0eCC\u5411PH\u7533\u8bf7\u5185\u5b58\u4e00\u6837.   \u800c\u5185\u5b58\u91ca\u653e, \u6211\u4eec\u5728\u5c0f\u5185\u5b58\u65f6,\u5df2\u7ecf\u63d0\u5230. \u5e76\u4e14,\u5176\u884c\u4e3a\u8ddfCC\u5411PH\u91ca\u653e\u5185\u5b58\u903b\u8f91\u4e00\u6837.   \u6839\u636e\u88ab\u91ca\u653e\u7684\u5185\u5b58, \u83b7\u53d6\u5176pageID.  \u5982\u679cpageID\u5c5e\u4e8espan, \u5219\u8c03\u7528  PageHeap::Delete(Span* span)  .", 
            "title": "\u5927\u5bf9\u8c61\u5185\u5b58\u5206\u914d"
        }, 
        {
            "location": "/tcmalloc2.1\u6d45\u6790/#_5", 
            "text": "", 
            "title": "\u7b97\u6cd5"
        }, 
        {
            "location": "/tcmalloc2.1\u6d45\u6790/#review", 
            "text": "", 
            "title": "\u4ee3\u7801review"
        }, 
        {
            "location": "/tcmalloc2.1\u6d45\u6790/#_6", 
            "text": "", 
            "title": "\u603b\u7ed3"
        }, 
        {
            "location": "/tcmalloc2.1\u6d45\u6790/#tcmalloc", 
            "text": "\u6211\u4eec\u53ef\u4ee5\u5c06tcmalloc\u4e2d\u7684\u6a21\u5757\u4e0edlmalloc\u4e2d\u4f5c\u6620\u5c04. CC \u770b\u6210dlmalloc\u4e2d\u5c0f\u5185\u5b58\u6a21\u5757, PH\u770b\u6210dlmalloc\u4e2d\u7684\u5927\u5185\u5b58\u6a21\u5757.\u5219tcmalloc\u4e2d\u591a\u4e86\u4e00\u4e2a\u65e0\u9501\u7684TC\u6a21\u5757.\u6240\u4ee5,\u5728\u5c0f\u5185\u5b58\u4e0a\u5b58\u5728\u7684\u4e00\u4e2a\u4f18\u52bf\u662f,\u53ef\u4ee5\u5728\u4e00\u5b9a\u8303\u56f4\u5185\u65e0\u9501\u83b7\u53d6\u548c\u91ca\u653e\u5185\u5b58.  \u7b2c\u4e00\u6761\u4f18\u52bf\u7684\u524d\u63d0\u662f,TC\u7a7a\u95f4\u8db3\u591f. \u4f46\u5c31\u7b97\u7a7a\u95f4\u4e0d\u591f\u7684\u60c5\u51b5\u4e0b, TC\u5411CC\u8bf7\u6c42\u5185\u5b58, \u6700\u591a\u4e5f\u662f\u6bcf2\u6b21TC\u8bf7\u6c42\u9700\u8981\u52a0\u89e3\u4e00\u6b21\u9501.\u800cCC\u5411PH\u8bf7\u6c42\u5185\u5b58,\u5728\u5c0f\u5185\u5b58\u7684\u60c5\u51b5\u4e0b,\u6c38\u8fdc\u4e0d\u53ef\u80fd\u51fa\u73b0\u6bcf\u4e00\u6b21CC\u8bf7\u6c42\u89e6\u53d1\u4e00\u6b21PH\u8bf7\u6c42.", 
            "title": "tcmalloc\u4f18\u52bf"
        }, 
        {
            "location": "/tcmalloc2.1\u6d45\u6790/#tcmalloc_1", 
            "text": "tcmalloc\u7684\u52a3\u52bf,\u5f88\u660e\u663e,\u7531\u4e8e\u5b58\u57283\u7ea7\u5185\u5b58\u8bf7\u6c42,\u548c\u5927\u91cf\u5185\u5b58\u7684\u9884\u5206\u914d, \u5176\u521d\u59cb\u5316\u7684\u901f\u5ea6\u6bd4dlmalloc\u6162\u5f88\u591a.  \u7531\u4e8e\u5bf9\u4e8e\u6bcf\u4e2a\u7ebf\u7a0b\u5b58\u5728TC, \u7a7a\u95f4\u6d6a\u8d39\u76f8\u5bf9dlmalloc\u4f1a\u591a\u4e00\u4e9b.\u867d\u7136\u5b58\u5728\u5404\u79cd\u7b97\u6cd5\u548c\u4f18\u5316\u4e86tcmalloc\u4e2d\u6570\u636e\u5757\u7684\u7ed3\u6784,\u4f46\u5728\u7ebf\u7a0b\u6570\u591a\u548c\u5185\u5b58\u8bf7\u6c42\u6b21\u6570\u5927\u7684\u60c5\u51b5\u4e0b,\u4f9d\u7136\u4e0d\u53ef\u907f\u514d\u5730\u5728TC\u4e2d\u6d6a\u8d39\u4e86\u5185\u5b58.  \u5185\u5b58\u788e\u7247\u7387\u9ad8. \u5c5e\u4e8e\u4e2a\u4eba\u7406\u89e3.\u5728tcmalloc\u4e2d,\u53ea\u5bf9\u76f8\u8fde\u7684pages(spans)\u8fdb\u884c\u5408\u5e76,\u800cpages\u7684\u5355\u4f4d\u4e3a4K, \u76f8\u5f53\u4e8e,\u8fd9\u4e2apage\u4e2d\u53ea\u8981\u5b58\u5728\u88ab\u4f7f\u7528\u7684\u5185\u5b58,\u5c31\u6c38\u8fdc\u4e0d\u4f1a\u4e0e\u524d\u540e\u7684page\u8fdb\u884c\u5408\u5e76. \u800c\u5728dlmalloc\u4e2d,\u5b58\u5728\u8fb9\u754c\u6807\u8bb0\u6cd5,\u4efb\u4f55\u4e00\u4e2a\u91ca\u653e\u7684\u5185\u5b58\u5757(\u4efb\u610f\u5927\u5c0f),\u53ea\u8981\u5176\u76f8\u8fde\u5757\u6709\u7a7a\u95f2,\u5219\u8fdb\u884c\u5408\u5e76.", 
            "title": "tcmalloc\u52a3\u52bf"
        }, 
        {
            "location": "/tcmalloc2.1\u6d45\u6790/#mem", 
            "text": "\u5bf9\u56fe\u8868\u7684\u51e0\u4e2a\u8bf4\u660e:   \u56fe\u8868\u662f\u5728\u7ebf\u7a0b\u6570\u4e3a4\u7684\u57fa\u7840\u4e0a\u505a\u7684\u6d4b\u8bd5. \u5e76\u4e14\u662f\u5728\u8fde\u7eed\u5206\u914d\u4e00\u5b9a\u6b21\u6570\u7684\u5185\u5b58\u540e\u518d\u8fde\u7eed\u91ca\u653e,\u6570\u636e\u53ea\u80fd\u4ece\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53cd\u6620\u4e86tcmalloc\u4e0edlmalloc\u7684\u6027\u80fd\u5dee\u5f02.  \u672c\u6b21\u6d4b\u8bd5\u662f\u8ba1\u7b97\u51fa4\u4e2a\u7ebf\u7a0b\u7684\u5185\u5b58\u8bf7\u6c42\u548c\u91ca\u653e\u7684\u5e73\u5747\u65f6\u95f4, \u548c\u6807\u51c6\u504f\u5dee.\u7531\u4e8e\u56fe\u8868\u7ef4\u5ea6\u4e0d\u591f,\u53ea\u4f7f\u7528\u4e86\u5e73\u5747\u65f6\u95f4\u4f5c\u4e3a\u5b9e\u9645\u7684\u6027\u80fd\u6bd4\u8f83.  \u6d4b\u8bd5\u65f6\u7684\u4e24\u4e2a\u53d8\u91cf\u5206\u522b\u4e3a, \u5355\u6b21\u7533\u8bf7\u5185\u5b58\u5927\u5c0f,\u548c\u7533\u8bf7\u6b21\u6570,\u6027\u80fd\u6307\u6807\u4e3a\u6267\u884c\u6240\u6709\u5185\u5b58\u7533\u8bf7\u91ca\u653e\u7684\u7ebf\u7a0b\u5e73\u5747\u65f6\u95f4.  \u8be5\u6570\u636e\u4e0d\u5305\u542b\u5185\u5b58\u5206\u914d\u5668\u521d\u59cb\u5316\u7684\u65f6\u95f4(\u5373,\u7b2c\u4e00\u6b21\u5185\u5b58\u5206\u914d\u65f6\u95f4).\u5b9e\u9645\u4e0a,\u5185\u5b58\u5206\u914d\u5668\u521d\u59cb\u5316,tcmalloc\u82b1\u8d39\u7684\u65f6\u95f4\u662fdlmalloc\u591a.\u4f46\u53ea\u662f\u9488\u5bf9\u7b2c\u4e00\u6b21,\u6240\u4ee5,\u4e0d\u8bb0\u5f55\u5230\u56fe\u6807\u6570\u636e\u4e2d.  \u4ee5\u4e0b\u6240\u6709\u63d0\u5230\u7684\u5185\u5b58\u7533\u8bf7\u6570,\u5982\u672a\u8bf4\u660e,\u90fd\u662f\u6307\u5355\u6b21\u5185\u5b58\u7533\u8bf7\u7684\u5927\u5c0f.     \u5206\u6790:   tcmalloc \u5185\u5b58\u5206\u914d\u6982\u8981:  tcmalloc \u4e2d\u5b58\u5728\u5206\u7ea7\u8bf7\u6c42\u5185\u5b58\u7684\u673a\u5236. \u5206\u4e3a3\u7ea7,\u5206\u522b\u4e3aTC(ThreadCache), CC(Central Cache) \u548c PH(PageHeap)  TC \u5411CC \u7533\u8bf7\u5185\u5b58, CC \u5411PH\u7533\u8bf7\u5185\u5b58. \u800c\u4ed6\u4eec\u4e4b\u95f4\u7684\u5185\u5b58\u662f\u6279\u91cf\u79fb\u52a8,\u4e00\u822c\u4e3a\u7533\u8bf7\u5185\u5b58\u5bf9\u9f50\u540e\u7684N\u500d\u8fdb\u884c\u79fb\u52a8.  TC \u5b58\u5728\u7ebf\u7a0b\u5c40\u90e8\u7a7a\u95f4\u4e2d. \u5411TC\u7533\u8bf7\u5185\u5b58\u4e0d\u9700\u8981\u52a0\u89e3\u9501,\u5411CC\u548cPH \u7533\u8bf7\u5185\u5b58\u9700\u8981\u52a0\u89e3\u9501.     dlmalloc \u5185\u5b58\u5206\u914d\u6982\u8981:   dlmalloc\u6bcf\u6b21\u5185\u5b58\u7533\u8bf7\u90fd\u4f1a\u6267\u884c\u52a0\u89e3\u9501\u64cd\u4f5c.  256byte\u4ee5\u4e0b\u7684\u5185\u5b58,\u4ece\u5c0f\u5185\u5b58\u5206\u914d.256byte\u4ee5\u4e0a\u7684\u4ece\u5927\u5185\u5b58\u5206\u914d.\u5728\u7a7a\u95f2\u5185\u5b58\u4e0d\u591f\u5e76\u4e14\u7533\u8bf7\u5185\u5b58\u5927\u4e8e256K\u7684,\u76f4\u63a5\u7531mmap\u5206\u914d.     \u9996\u5148,\u4ece\u56fe\u8868\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u7ed3\u8bba,\u5728\u5355\u6b21\u5185\u5b5830K\u4ee5\u5185\u7684\u5185\u5b58\u5206\u914d\u548c\u91ca\u653e, \u6548\u7387\u4e0a,tcmalloc\u6bd4dlmalloc\u9ad8,\u5e76\u4e14\u57281K\u4ee5\u5185,\u7533\u8bf7\u6b21\u6570\u5927\u4e8e26\u6b21\u7684\u60c5\u51b5\u4e0b,\u751a\u81f3\u53ef\u4ee5\u8fbe\u523010\u500d\u6027\u80fd.\u539f\u56e0\u662f,\u5728tcmalloc\u4e2d,\u6240\u6709\u5c0f\u4e8e256k\u7684\u5185\u5b58\u90fd\u4f1a\u4f18\u5148\u4eceTC(\u907f\u514d\u52a0\u89e3\u9501\u64cd\u4f5c)\u5206\u914d, \u5728TC\u4e0d\u591f\u7684\u60c5\u51b5\u4e0b,\u5411CC\u7533\u8bf7 2 - 32 \u500d\u7684\u5185\u5b58\u6570\u91cf,\u5e76\u5b58\u653e\u5230TC\u4e2d,\u76f8\u5f53\u4e8e, N(N 2)\u6b21\u5185\u5b58\u8bf7\u6c42\u624d\u6267\u884c1\u6b21\u52a0\u89e3\u9501.\u800cdlmalloc\u6bcf\u6b21\u5185\u5b58\u8bf7\u6c42\u90fd\u4f1a\u52a0\u89e3\u9501.\u6240\u4ee5,tcmalloc\u5728\u5c0f\u5185\u5b58\u5206\u914d\u4e0a,\u6027\u80fd\u9ad8\u4e8edlmalloc.   \u800c\u572830K - 256K,\u5728\u67d0\u4e9b\u533a\u57df\u5185,tcmalloc\u7684\u6027\u80fd\u53cd\u800c\u4e0d\u5982dlmalloc. \u53ef\u80fd\u539f\u56e0\u5982\u4e0b: tcmalloc\u5728\u6bcf\u6b21\u5f80CC\u4e2d\u62f7\u8d1d\u6570\u636e\u65f6, \u6709\u4e2a\u5927\u5c0f\u4e0a\u9650\u4e3a64K,\u4e5f\u6709\u4e00\u4e2a\u6700\u5c0f\u4e0b\u9650\u4e3a2\u500d\u8bf7\u6c42\u5185\u5b58\u5bf9\u9f50\u540e\u7684\u5927\u5c0f. \u6240\u4ee5,\u5728\u8fd9\u4e2a\u533a\u95f4\u5185,\u76f8\u5f53\u4e8e\u6bcf2\u6b21\u5185\u5b58\u8bf7\u6c42\u90fd\u4f1a\u52a0\u89e3\u4e00\u6b21\u9501. \u800cCC\u4e5f\u6709\u5b58\u5728\u5185\u5b58\u4e0d\u8db3\u7684\u60c5\u51b5,\u4e5f\u4f1a\u51fa\u73b0\u52a0\u89e3\u9501,\u8fdb\u4e00\u6b65\u5411PH\u7533\u8bf7\u7a7a\u95f4. \u6240\u4ee5,\u5c31\u76f8\u5f53\u4e8e\u6bcf\u6b21\u5185\u5b58\u7533\u8bf7\u90fd\u4f1a\u52a0\u89e3\u9501.\u81f3\u4e8e,\u5728\u7533\u8bf7\u6b21\u6570\u8fbe\u5230\u4e00\u5b9a\u503c\u4e4b\u540e,tcmalloc\u7684\u6027\u80fd\u53c8\u9ad8\u4e8edlmalloc\u7684\u539f\u56e0\u662f:CC\u4e0ePH\u4e4b\u95f4\u7684\u5185\u5b58\u79fb\u52a8\u7684\u503c\u662f\u52a8\u6001\u4fee\u6b63\u7684,\u4e5f\u5c31\u662f\u8bf4,\u5728\u7533\u8bf7\u6b21\u6570\u8fbe\u5230\u4e00\u5b9a\u503c\u4e4b\u540e,CC\u5411PH\u7533\u8bf7\u7684\u5185\u5b58\u6570\u53d8\u5927,\u800c\u8bf7\u6c42\u6b21\u6570\u51cf\u5c11,\u5bfc\u81f4tcmalloc\u7684\u6027\u80fd\u518d\u6b21\u63d0\u5347.    256K \u7684\u60c5\u51b5\u4e0b,tcmalloc\u7684\u6027\u80fd\u4e5f\u7565\u597d\u4e8edlmalloc. \u539f\u56e0\u672a\u77e5.\u5206\u6790\u5982\u4e0b. \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b,\u5bf9\u4e8edlmalloc\u800c\u8a00,\u5982\u679c\u6ca1\u6709\u8db3\u591f\u7a7a\u95f2\u5185\u5b58(\u672c\u6b21\u6d4b\u8bd5\u4e2d\u4e0d\u53ef\u80fd\u6709\u8db3\u591f\u7a7a\u95f2\u5185\u5b58), dlmalloc\u4f1a\u76f4\u63a5\u8c03\u7528mmap\u8fdb\u884c\u5185\u5b58\u5206\u914d, \u76f8\u5f53\u4e0e\u4e00\u6b21\u52a0\u89e3\u9501,\u4e00\u6b21\u7cfb\u7edf\u8c03\u7528\u7684\u65f6\u95f4.\u800ctcmalloc\u4f9d\u7136\u5411PH\u7533\u8bf7\u5185\u5b58,\u5f53\u7136PH\u4e5f\u4f1a\u76f4\u63a5\u4ece\u7cfb\u7edf\u5206\u914d.       \u7ed3\u8bba: (\u4ee5\u4e0b\u7ed3\u8bba,\u53ea\u67091\u4ece\u56fe\u8868\u4e2d\u5f97\u51fa)   \u5927\u91cf\u5c0f\u5185\u5b58\u8bf7\u6c42\u7684\u60c5\u51b5\u4e0b,tcmalloc\u6027\u80fd\u9ad8\u4e8edlmalloc, \u8282\u7701\u4e86\u52a0\u89e3\u9501\u7684\u65f6\u95f4.  \u5982\u679c\u53ea\u5b58\u5728\u5c11\u91cf\u7684\u5185\u5b58\u8bf7\u6c42,\u5373\u4f7f\u662f\u5c0f\u5185\u5b58,\u4ece\u603b\u7684\u7533\u8bf7\u5185\u5b58\u65f6\u95f4\u4e0a,dlmalloc\u4f1a\u4f18\u4e8etcmalloc,\u539f\u56e0\u662f,\u5728\u7b2c\u4e00\u6b21\u5185\u5b58\u7533\u8bf7\u65f6,tcmalloc\u521d\u59cb\u5316\u7684\u65f6\u95f4\u662fdlmalloc\u7684\u8fd110\u500d.  \u4ece\u4ee3\u7801\u4e2d\u5206\u6790,tcmalloc\u7684\u5185\u5b58\u5229\u7528\u7387\u5c0f\u4e8edlmalloc,\u867d\u7136,tcmalloc\u4f7f\u7528\u4e86\u5404\u79cd\u7b97\u6cd5\u6765\u63d0\u9ad8\u5185\u5b58\u5229\u7528\u7387,\u4f46\u4f9d\u7136\u65e0\u6cd5\u907f\u514d\u7ebf\u7a0b\u5c40\u90e8\u7a7a\u95f4\u4e2d\u7684\u5185\u5b58\u6d6a\u8d39.     \u8be5\u6d4b\u8bd5\u7684\u5c40\u9650\u6027:   \u7531\u4e8e\u8be5\u6d4b\u8bd5\u662f\u8fde\u7eed\u5185\u5b58\u7533\u8bf7\u4e4b\u540e,\u8fde\u7eed\u91ca\u653e,\u6240\u4ee5\u65e0\u6cd5\u6d4b\u8bd5\u7533\u8bf7\u5df2\u91ca\u653e\u5185\u5b58\u7684\u6548\u7387.\u4f46\u4ece\u4ee3\u7801\u4e0a\u548ctcmalloc/dlmalloc\u52a0\u89e3\u9501\u7684\u673a\u5236\u4e0a\u770b, tcmalloc \u4f9d\u7136\u4f1a\u4f18\u4e8e dlmalloc.  \u65e0\u6cd5\u6d4b\u8bd5\u5bf9\u4e8e\u751f\u547d\u5468\u671f\u8d85\u957f\u7684\u8fdb\u7a0b,\u5185\u5b58\u7684\u788e\u7247\u7387.", 
            "title": "\u5bf9mem\u6d4b\u8bd5\u7684\u6570\u636e\u603b\u7ed3"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/", 
            "text": "dlmalloc\u6d45\u6790\n\n\n\n\nversion 1.0 by Werther Zhang @ 2014.03.15 Write done @WizNote\n\n\nVersion 1.1   by Werther Zhang @ 2014.03.20 Export to @Word\n\n\nVersion  1.2  by Werther Zhang @ 2016.07.02 Move to @leanote\n\n\n\n\ndlmalloc\u4ecb\u7ecd\n\n\ndlmalloc\u5728\u67d0\u4e9b\u7a0b\u5ea6\u4e0a\u8bf4\uff0c\u662f\u6700\u597d\u7684\u5185\u5b58\u7ba1\u7406\u5de5\u5177\u4e4b\u4e00\u3002\u5b83\u662f\u7531Doug Lea \u57281987\u5e74\u5f00\u59cb\u7f16\u5199\uff0c\u6240\u4ee5\u5927\u90e8\u5206\u4eba\u4f1a\u79f0\u547c\u5b83\u4e3aDoug Lea's Malloc\uff0c \u7b80\u79f0dlmalloc\u3002\n\n\n\u7b97\u6cd5\u6982\u89c8\n\n\ndlmalloc \u6839\u636e\u5185\u5b58\u7c92\u5ea6\u7684\u5927\u5c0f\u5206\u522b\u4f7f\u7528chunk\u548csegment\u8fdb\u884c\u7ba1\u7406\u3002Segment\u662f\u901a\u8fc7sbrk\u5206\u914d\uff0c\u7c7b\u4f3c\u8fdb\u7a0b\u7684\u6570\u636e\u6bb5\uff0c\u5c5e\u4e8e\u6781\u5c11\u9047\u5230\u7684\u60c5\u51b5\u3002Dlmalloc\u4e2d\u5927\u91cf\u5b58\u5728\u7684\u5185\u5b58\u5757\u662fchunk\u3002Chunk\u7684\u7ed3\u6784\u5982\u4e0b\u3002\n\n\n\u88ab\u7528\u6237\u4f7f\u7528\u7684chunk\u7ed3\u6784\u770b\u8d77\u6765\u50cf\u4e0b\u9762\u8fd9\u6837\uff08\u975e\u7cbe\u786e\u56fe\uff09\uff1a\n\n\n\n\n\u800c\u672a\u88ab\u4f7f\u7528\u7684chunk\u770b\u8d77\u6765\u5982\u4e0b\uff08\u975e\u7cbe\u786e\u56fe\uff09\uff1a\n\n\n\n\n\n\u5728\u865a\u62df\u5730\u5740\u4e0a\uff0cdlmalloc\u4f1a\u4fdd\u8bc1\u7a7a\u95f2\u7684\u5185\u5b58\u5757\u5b58\u5728\u201c\u5b64\u5c9b\u6548\u5e94\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4efb\u4e00\u5757\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u524d\u540e\u5fc5\u5b9a\u662f\u88ab\u4f7f\u7528\u7684\u5185\u5b58\u5757\u3002\u56e0\u4e3a\u5728free\u6216\u8005\u5176\u4ed6\u4efb\u4f55\u65f6\u5019\uff0cdlmalloc\u603b\u662f\u4f1a\u5408\u5e76\u7a7a\u95f2\u7684\u5185\u5b58\u5757\u3002\n\n\n\u5bf9 \u4e8echunk\uff0c\u6839\u636e\u5176\u5927\u5c0f\uff0c\u5206\u4e3a\u5927\u5185\u5b58\u548c\u5c0f\u5185\u5b58\u3002\u5c0f\u5185\u5b58\u753132\u4e2a\u53cc\u5411\u94fe\u8868\u901a\u8fc7\u5206\u7bb1\uff08\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u5bf9\u5e94\u4e00\u4e2a\u5927\u5c0f\uff0c\u6bcf\u4e2a\u7bb1\u5b50\u4e2d\u5b58\u653e\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff09\u8fdb\u884c\u7ba1\u7406\uff0c\u800c\u5927 \u5185\u5b58\u7edf\u4e00\u7531bitwise tries\u6811\u901a\u8fc7\u5206\u7bb1\uff08\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u5bf9\u5e94\u4e00\u4e2a\u5185\u5b58\u8303\u56f4\uff0c\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u4e2d\u5b58\u653e\u4e00\u68f5\u6811\uff0c\u6bcf\u4e00\u68f5\u6811\u4e2d\u82e5\u6709\u7b49\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u7531\u53cc\u5411\u94fe\u8868\u7ba1\u7406\uff09 \u8fdb\u884c\u7ba1\u7406\u3002\n\n\n\u6bcf\u4e00\u4e2achunk\u7684\u5927\u5c0f\u5fc5\u987b\u4e3a8byte\u7684\u6574\u6570\u500d\u3002\u6240\u4ee5\u5728\u2019size of chunk\u2019 \u57df\u7684\u4f4e\u4e09\u4f4d\u5b58\u653e\u4e86\u8be5chunk\u5c5e\u6027\u7684\u6807\u5fd7\u4f4d\u3002\n\n\nP (PINUSE_BIT) \u4f4d, \u4fdd \u5b58\u5728\u5185\u5b58\u5757\u5927\u5c0f(\u4e00\u822c\u662f\u53cc\u5b57\u8282\u7684\u500d\u6570)\u7684\u672a\u4f7f\u7528\u7684\u4f4e\u4f4d, \u662f\u4e00\u4e2a\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u662f\u5426\u88ab\u4f7f\u7528\u7684bit\u4f4d.\u5982\u679c\u8fd9\u4e2abit\u4f4d\u88ab\u6e05\u7406\u4e86,\u90a3\u4e48\u5728\u5f53\u524d\u5185\u5b58\u5757 \u4e4b \u524d\u7684\u4e00\u4e2a\u5b57 \u5927\u5c0f\u6570\u636e\u4fdd\u5b58\u7740\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u7528\u4e8e\u5bfb\u627e\u524d\u4e00\u4e2a\u5185\u5b58\u5757.\u800c \u7b2c\u4e00\u4e2a\u5185\u5b58\u5757\u8fd9\u4e2abit\u4f4d\u603b\u662f\u88ab\u7f6e\u4e0a\u7684,\u9632\u6b62\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u5185\u5b58\u533a\u57df.\u5982\u679c\u67d0\u4e2a \u5185 \u5b58\u5757\u7684 pinuse\u88ab\u8bbe\u7f6e\u4e86,\u4f60\u5c31\u65e0\u6cd5\u51b3\u5b9a\u4e0a\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u5e76\u4e14\u5982\u679c\u4f60\u771f\u7684\u5c1d \u8bd5\u8fd9 \u4e48\u505a\u4e86,\u6709\u53ef\u80fd\u5185\u5b58\u8bbf\u95ee\u51fa\u9519.\n\n\nC (CINUSE_BIT) bit\u4f4d, \u4fdd\u5b58\u5728\u5185\u5b58\u5757\u7684\u7b2c\u4e8c\u4f4e\u7684bit\u4f4d,\u5197\u4f59\u5730\u8bb0\u5f55\u7740\u5f53\u524d\u5757\u662f \u5426\u88ab\u4f7f\u7528\u4e86(\u9664\u975e\u5f53\u524d\u5185\u5b58\u5757\u662f\u88ab\u6620\u5c04\u7684).\u8fd9\u4e2a\u5197\u4f59\u4fe1\u606f\u7528\u4e8e\u5728free\u548crealloc\u64cd \u4f5c\u65f6\u7684\u68c0\u67e5,\u5e76\u4e14\u51cf\u5c11\u5728\u6267\u884cfree\u548c\u5408\u5e76\u5185\u5b58\u5757\u65f6\u7684\u95f4\u63a5\u64cd\u4f5c.\n\n\n\u4efb\u4f55\u65b0\u5206\u914d\u7684\u5185\u5b58\u5757\u5fc5\u987b\u90fd\u8bbe\u7f6e\u4e86cinuse\u548cpinuse.\u8fd9\u610f\u5473\u7740,\u4efb\u4f55\u5206\u914d\u4e86\u7684\u5185 \u5b58\u5757\u7684\u8fb9\u754c\u8981\u4e48\u662f\u4e00\u4e2a\u5148\u524d\u5206\u914d\u5e76\u4e14\u4ecd\u7136\u5728\u4f7f\u7528(in-use)\u7684\u5185 \u5b58\u5757,\u8981\u4e48\u662f\u5b83\u81ea \u5df1\u7684\u5927\u5185\u5b58\u533a\u57df(segment)\u7684\u5730\u5740.\u8fd9\u6837\u786e\u4fdd\u6240\u6709\u7684\u5185\u5b58\u7533\u8bf7(allocations)\u90fd\u662f\u4ece\u4efb\u4f55\u80fd\u627e\u5230\u7684\u5185\u5b58\u5757\u7684\u201c\u6700\u4f4e\u201d\u90e8\u5206 \u83b7\u53d6.\u8fdb\u4e00\u6b65\u5730\u8bf4,\u4e0d\u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u7a7a\u95f2\u5185 \u5b58\u5757\u5728\u7269\u7406\u4e0a\u7d27\u90bb\u7740\u53e6 \u4e00\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757,\u6240\u4ee5\u6bcf\u4e00\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757\u88ab\u8bc1\u5b9e\u5728\u4f7f\u7528 (inuse)\u7684\u5185\u5b58\u5757\u6216\u8005\u5185\u5b58\u5c3e \u90e8\u4e4b\u524d\u548c\u4e4b\u540e.\n\n\n\u6ce8\u610f: \u5f53\u524d\u5757\u7684 \u2019foot\u2019\u5b9e\u9645\u4e0a\u4ee3\u8868\u7740\u4e0b\u4e00\u4e2a\u5185\u5b58\u5757\u7684prev_foot.\u8fd9\u4f7f\u5bf9\u9f50\u7b49\u64cd \u4f5c\u5904\u7406\u53d8\u5f97\u5bb9\u6613\u4f46\u4f1a\u4f7f\u4eba\u5728\u6269\u5c55\u6216\u7ef4\u62a4\u8fd9\u4efd\u4ee3\u7801\u65f6\u611f\u5230\u56f0\u60d1.\n\n\n\u4ee5\u4e0b\u662f\u5bf9\u7279\u6b8a\u7684\u5185\u5b58\u5757\u7684\u8bf4\u660e:\n\n\n\n\n\u7279 \u6b8a\u7684\u5185\u5b58\u5757\u2019top\u2019\u662f\u6700\u9876\u4e0a\u7684\u53ef\u7528\u5185\u5b58\u5757(i.e., \u7d27\u90bb\u7740\u53ef\u7528\u5185\u5b58\u7684\u8fb9\u754c). \u8fd9\u5757\u5185\u5b58\u5757\u4f1a\u88ab\u7279\u6b8a\u5bf9\u5f85. Top \u5185\u5b58\u5757\u4e0d\u4f1a\u88ab\u5305\u542b\u5728\u4efb\u4f55\u7684\u5185\u5b58\u5206 \u7c7b\u7bb1\u91cc, \u53ea\u6709\u5728\u6ca1\u6709\u4efb\u4f55\u5176\u4ed6\u5185\u5b58\u5757\u53ef\u4f7f\u7528\u65f6,\u624d\u88ab\u4f7f\u7528,\u5e76\u4e14\u5728\u5b83\u975e\u5e38\u5927\u65f6(\u67e5\u770b M_TRIM_THRESHOLD) \u4f1a\u88ab\u91ca\u653e\u4e00\u90e8\u5206\u56de\u7cfb\u7edf.\u5728\u5b9e\u9645 \u4e0a,top\u5185\u5b58\u5757\u4e00\u822c\u88ab\u8ba4 \u4e3a\u662f\u6bd4\u5176\u4ed6\u6240\u6709\u7684\u5185\u5b58\u5757\u90fd\u5927.Top\u5185\u5b58\u5757\u4ece\u6765\u4e0d\u4f1a\u66f4\u65b0\u5b83\u7684\u5c3e\u90e8\u6570\u636e\u533a\u57df\u56e0 \u4e3a\u6839\u672c\u6ca1\u6709\u5185\u5b58\u5757\u4f1a\u5728\u7d22\u5f15\u4e0a\u7d27\u8ddf\u5176\u540e.\u4f46\u662f,\u7a7a\u95f4 \u8fd8\u662f\u4f1a\u5206\u914d\u7ed9\u5b83 (TOP_FOOT_SIZE) \u7528\u6237\u505a\u5185\u5b58\u5757\u7684\u62c6\u5206\u548c\u5408\u5e76,\u5f53\u7a7a\u95f4\u9700\u8981\u6269\u5c55\u65f6.\n\n\ndv chunk \u662f\u4fdd\u5b58\u4e86\u6700\u8fd1\u88ab\u4f7f\u7528\u5e76\u5207\u5272\u8fc7\u7684\u5185\u5b58\u5757\uff0c\u4fdd\u5b58\u5728\u5168\u5c40\u7684gm\u4e2d\u3002\u5b83\u4e0d\u5f52\u5c5e\u5230\u53cc\u5411\u94fe\u8868\u6216\u8005\u6811\u4e2d\u7ba1\u7406\u3002\u4f46\u5f53\u5b83\u88ab\u66ff\u6362\u65f6\uff0c\u4e5f\u4f1a\u52a0\u5165\u5185\u5b58\u7ba1\u7406\u4e2d\u3002\n\n\nBitwise trie \u6811, \u5b9e\u9645\u4e0a\u662f\u7ed3\u5408\u4e86\u4e8c\u53c9\u6811\u548ctrie\u6811(\u53c8\u53eb\u5b57\u5178\u6811, \u524d\u7f00\u6570).\u4e8c\u53c9\u6811\u53ea\u6709\u5de6\u53f3\u5b50\u6811. Trie\u6811\u662f\u4e00\u79cd\u6709\u5e8f\u6811,\u7528\u4e8e\u4fdd\u5b58\u5173\u8054\u6570\u7ec4,\u7c7b\u4f3c hash table, \u6709key \u548c value \u7ed3\u6784. \u5982\u4e0b\u56fe.key \u5b9e\u9645\u4e0a\u5c31\u662f\u5230\u8fbevalue\u7684\u8def\u5f84.\u800cbitwise trie, \u5b83\u662f\u5c06 key\u8bbe\u7f6e\u4e3a0/1, \u6240\u4ee5, \u662f\u4e00\u68f5\u4e8c\u53c9\u6811.\u5728dlmalloc\u7684bitwise trie tree\u4e2d, 0 \u4ee3\u8868\u8fdb\u5165\u5de6\u5b50\u6811, 1 \u4ee3\u8868\u8fdb\u5165\u53f3\u5b50 \u6811. \u800ckey\u7684\u957f\u5ea6\u5bf9\u5e94\u8def\u5f84\u7684\u6df1\u5ea6.\u53c2\u8003 [treebins\u548c\u6811\u7ba1\u7406\u56fe\u89e3] \u7684\u56fe,\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u8981\u67e5\u627e\u7684\u662f512\u5bf9\u5e94\u7684\u7ed3\u70b9, \u5219\u5c06520\u5bf9 \u5e94\u4e8c\u8fdb\u5236\u7801\u662f1000001000, \u5bf9\u5e94\u7684\u7bb1\u5b50\u53f7\u662f2\u53f7,\u5219\u5176\u8868\u793a\u7684\u5185\u5b58\u8303\u56f4\u4e3a256, \u7279\u5f81\u7801\u957f\u5ea6\u4e3a8, \u4e5f\u5c31\u662f00001000.\u8003\u8651\u5230, \u6240\u6709\u8bf7 \u6c42\u5927\u5c0f\u4e3a8byte\u500d\u6570,\u6240\u4ee5, \u5b9e\u9645\u7279\u5f81\u7801\u4e3a00001, \u6811\u6df1\u4e3a5, \u524d4\u5c42\u4e3a\u5de6\u5b50\u6811,\u7b2c\u4e94\u5c42\u4e3a\u53f3\u5b50\u6811.\u4f46\u521a\u624d\u63cf\u8ff0\u7684\u662ftrie\u6811\u548c bitwise trie \u6811, \u4e0d\u662fdlmalloc\u4f7f\u7528\u7684\u6811.\n\n\n\n\n\n\n\u975eMSPACE\u4ee3\u7801\u903b\u8f91\u5206\u6790\n\n\nstruct\n \nmalloc_chunk\n \n{\n\n\nsize_t\n               \nprev_foot\n;\n  \n/* \u5982\u679c\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7a7a\u95f2,\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f */\n\n\nsize_t\n               \nhead\n;\n       \n/* \u5927\u5c0f\u548cinuse bit\u4f4d*/\n\n\nstruct\n \nmalloc_chunk\n*\n \nfd\n;\n         \n/* \u5982\u679c\u662f\u7a7a\u95f2\u5185\u5b58\u5757,\u6307\u5411\u53cc\u5411\u94fe\u8868*/\n\n\nstruct\n \nmalloc_chunk\n*\n \nbk\n;\n\n\n};\n\n\n\ntypedef\n \nstruct\n \nmalloc_chunk\n  \nmchunk\n;\n\n\ntypedef\n \nstruct\n \nmalloc_chunk\n*\n \nmchunkptr\n;\n\n\ntypedef\n \nstruct\n \nmalloc_chunk\n*\n \nsbinptr\n;\n  \n/* \u5185\u5b58\u5757\u5206\u7c7b\u7bb1\u7684\u7c7b\u578b */\n\ufeff\u200b\n\n\n\n\n\n\nhead \u57df\u4e2d\u53d8\u91cf\u7684\u8bf4\u660e:\n\n\nPINUSE_BIT \u5728\u524d\u4e00\u4e2a\u76f8\u90bb\u7684\u5185\u5b58\u5757\u88ab\u4f7f\u7528\u65f6,\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u88ab\u7f6e\u4e0a. CINUSE_BIT \u5728\u5f53\u524d\u5185\u5b58\u5757\u88ab\u4f7f\u7528\u65f6,\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u88ab\u7f6e\u4e0a. FLAG4_BIT \u5728\u5f53\u524d\u7248\u672c\u7684dlmalloc\u4e2d\u672a\u88ab\u4f7f\u7528\n\n\n\n\u5982 \u4f55\u505a\u5230\u5728head\u4e2d\u65e2\u5b58\u653e\u5757\u5927\u5c0f\u53c8\u5b58\u653e\u6807\u5fd7\u4f4d\u7684\u5462?\u9996\u5148\u63d0\u5230\u4e00\u70b9\u662f,\u6240\u6709\u7684\u5757\u7684 \u5927\u5c0f\u90fd\u662f\u6309\u6700\u5c118bit\u5bf9\u9f50\u7684,\u6362\u53e5\u8bdd\u8bf4,\u8868\u793a\u5927\u5c0f\u7684\u6570\u5b57,\u4f4e3\u4f4d\u5fc5\u5b9a\u4e3a 0,\u6240\u4ee5\u5c31\u6709 \u6548\u5730\u5229\u7528\u4e86\u4f4e3\u4f4d\u5b58\u653e\u6807\u5fd7\u4f4d.\u6240\u4ee5,\u83b7\u53d6chunk\u7684\u5927\u5c0f\u7528\u4e0b\u9762\u7684\u5b8f,\u5c06head\u7684\u4f4e\u4e09 \u4f4d\u6e05\u62100,\u53d6\u51fa.\n\n\n\n#define chunksize(p)        ((p)-\nhead \n ~(FLAG_BITS))\n\n\n\n\n\n\n\u4e0b\u9762\u4ecb\u7ecd\u4e0bdlmalloc\u7ef4\u62a4\u7684\u4e00\u4e2a\u5168\u5c40\u6570\u636e\u7ed3\u6784.\n\n\n2579\n \nstruct\n \nmalloc_state\n \n{\n \n\n2580\n   \nbinmap_t\n   \nsmallmap\n;\n  \n// 32bit, \u5c0f\u5185\u5b58\u7bb1\u5b50\u7684\u4f4d\u56fe.\n\n\n2581\n   \nbinmap_t\n   \ntreemap\n;\n    \n// 32bit, \u5927\u5185\u5b58\u7bb1\u5b50\u7684\u4f4d\u56fe\n\n\n2582\n   \nsize_t\n     \ndvsize\n;\n           \n//  dv chunk \u7684\u5927\u5c0f\n\n\n2583\n   \nsize_t\n     \ntopsize\n;\n          \n//  top chunk\u7684\u5927\u5c0f\n\n\n2584\n   \nchar\n*\n      \nleast_addr\n;\n    \n//  dlmalloc\u7ba1\u7406\u7684\u5185\u5b58\u7684\u6700\u5c0f\u5730\u5740,\u4e5f\u5c31\u662f\u6700\u5c0f\u7684segment \u57fa\u5730\u5740.\n\n\n2585\n   \nmchunkptr\n  \ndv\n;\n            \n// dv chunk. \u6700\u8fd1\u88ab\u5206\u5272\u4f7f\u7528\u7684chunk\n\n\n2586\n   \nmchunkptr\n  \ntop\n;\n           \n// top chunk. \u9876\u90e8,\u9760\u8fd1\u6709\u6548\u5185\u5b58\u7684chunk,\u8be6\u89c1\u603b\u7ed3\u56fe.\n\n\n2587\n   \nsize_t\n     \ntrim_check\n;\n    \n// \u68c0\u67e5top chunk\u5927\u5c0f\u662f\u5426\u8d85\u7684\u51fd\u6570.\n\n\n2588\n   \nsize_t\n     \nrelease_checks\n;\n  \n\n2589\n   \nsize_t\n     \nmagic\n;\n \n\n2590\n   \nmchunkptr\n  \nsmallbins\n[(\nNSMALLBINS\n+\n1\n)\n*\n2\n];\n   \n// 32\u4e2a\u94fe\u8868\u5934\n\n\n2591\n   \ntbinptr\n    \ntreebins\n[\nNTREEBINS\n];\n           \n// 32\u68f5\u6811\n\n\n2592\n   \nsize_t\n     \nfootprint\n;\n \n\n2593\n   \nsize_t\n     \nmax_footprint\n;\n \n\n2594\n   \nsize_t\n     \nfootprint_limit\n;\n \n/* zero means no limit */\n \n\n2595\n   \nflag_t\n     \nmflags\n;\n \n\n2596\n \n#\nif\n \nUSE_LOCKS\n \n\n2597\n   \nMLOCK_T\n    \nmutex\n;\n     \n/* locate lock among fields that rarely change */\n \n\n2598\n \n#\nendif\n \n/* USE_LOCKS */\n \n\n2599\n   \nmsegment\n   \nseg\n;\n        \n//  segment\u94fe\u8868.\n\n\n2600\n   \nvoid\n*\n      \nextp\n;\n      \n/* Unused but available for extensions */\n \n\n2601\n   \nsize_t\n     \nexts\n;\n \n\n2602\n \n};\n\ufeff\u200b\n\n\n\n\n\n\nmchunkptr  smallbins[(NSMALLBINS+1)*2];  \n\n\n\n\n\n\u8fd9\u91cc\u4f1a\u6709\u4e2a\u7591\u95ee,\u7406\u8bba\u4e0a, 32\u4e2a\u94fe\u8868\u5934,\u6211\u4eec\u4f1a\u4f7f\u7528\nstruct malloc_chunk  smallbins[NSMALLBINS];\n  \u4f46\u8fd9\u91cc\u4e0d\u4f7f\u7528\u7684\u539f\u56e0\u662f, \u5bf9\u4e8e\u94fe\u8868\u5934\u800c\u8a00,  \nmalloc_chunk\n\u7684 \nprev_foot\n\u548c\nhead\n\u4e24\u4e2a\u57df\u662f\u6ca1\u6709\u88ab\u4f7f\u7528\u7684,\u5b9e\u9645\u9700\u8981\u7684\u5927\u5c0f\u662f2\u4e2a\u6307\u9488\u5927 \u5c0f.\u6240\u4ee5,dlmalloc\u4f7f\u7528\u4e86\u8986\u76d6\u7684\u65b9\u6cd5. \u524d\u4e00\u4e2a malloc_state \u7684fb/bk \u8e29\u4e86\u540e\u4e00\u4e2a\u7684 malloc_state\u7684 prev_foot/head.\u6240\u4ee5\u5927\u5c0f\u5e94\u8be5\u4e3a 32 * 8 + 8, \u4e5f\u5c31\u662f33 * 2 \u4e2a\u6307\u9488\u5927\u5c0f.\n\n\n\n\n\u88ab\u8986\u76d6\u7684\u6570\u636e\u7ed3\u6784\n\n\n\u5f53\u5185\u5b58\u5757\u672a\u88ab\u4f7f\u7528\u65f6,\u4ed6\u4eec\u4f5c\u4e3a\u5217\u8868\u6216\u8005\u6811\u7684\u8282\u70b9.\n\n\n\u5c0f\u5185\u5b58(\u201cSmall\u201d) \u5757\u5b58\u50a8\u5728\u73af\u5f62\u53cc\u5411\u94fe\u8868\u4e2d,\u770b\u8d77\u6765\u50cf\u5982\u4e0b\u8fd9\u6837.\n\n\n\n\n\u800c \u5927 \u7684\u5185\u5b58\u5757\u4f7f\u7528\u5185\u5b58\u5757\u5927\u5c0f\u4e3a\u5173\u952e\u5b57\u7684bitwise digital tree (\u53c8\u53ebaka tree).\u56e0\u4e3amalloc_tree_trunks\u53ea\u662f \u7528\u4e8e\u5927\u5c0f\u5927\u4e8e256bytes\u7684\u7a7a\u95f2\u5185\u5b58\u5757,\u4ed6\u4eec \u7684\u5927\u5c0f\u4e0d\u4f1a\u53d7\u5230\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u7684\u9650\u5236.\u6bcf \u4e00\u4e2a\u8282\u70b9\u7684\u7ed3\u6784\u770b\u8d77\u6765\u50cf\u5982\u4e0b\u8fd9 \u6837.\n\n\n\n\n\u6bcf\u4e00\u68f5\u6811\u90fd\u62e5\u6709\u552f\u4e00\u7684\u5185\u5b58\u5757\u5927\u5c0f.\u800c\u5177\u6709\u540c\u6837\u5927\u5c0f\u7684\u5185\u5b58\u5757\u4f1a\u88ab\u5b89\u6392\u5728\u53cc\u5411\u94fe \u8868\u91cc,\u4e0e\u6700\u8001\u7684\u5185\u5b58\u5757\u4e00\u8d77(\u6307,\u4ee5FIFO\u7684\u89c4\u5219,\u4e0b\u4e00\u4e2a\u8981\u88ab\u4f7f\u7528\u7684\u5185\u5b58\u5757).\u5982\u679c\u4e00 \u4e2a\u5177\u6709\u540c\u6837\u5927\u5c0f\u7684\u5185\u5b58\u5757\u88ab\u63d2\u5165,\u5b83\u5c31\u4f1a\u7528\u7c7b\u4f3c\u5c0f\u5185\u5b58\u7684fb/bk\u7684\u6307\u9488\u4e00\u6837\u7684\u65b9\u5f0f,\u4ece \u539f\u6709\u7684\u8282\u70b9\u79fb\u9664.\n\n\n\n\u6bcf \u4e00 \u68f5\u6811\u5305\u542b\u5927\u5c0f\u4e3a2\u7684\u4e58\u65b9\u8303\u56f4\u7684\u5185\u5b58\u5757(\u6700\u5c0f\u4e3a0x100 \n= x \n 0x180),\u5728\u6811 \u7684\u6bcf\u4e00\u5c42\u90fd\u4f1a\u88ab\u5206\u6210\u4e00\u534a,\u5373\u5c0f\u7684\u4e00\u534a (0x100 \n= x \n 0x140)\u4f5c\u4e3a\u5de6\u5b50\u6811,\u5927\u7684\u4e00 \u534a\u4f5c\u4e3a\u53f3\u5b50\u6811(0x140 \n= x \n 0x180).\n\n\n\n\u901a\u8fc7\u4f7f\u7528\u8fd9\u79cd\u89c4\u5219,\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u5305\u542b\u7684\u5185\u5b58\u5757\u5927\u5c0f\u90fd\u5c0f\u96e8\u5176\u53f3\u5b50\u6811.\n\n\n\nSmallbins\u548c\u53cc\u5411\u94fe\u8868\u7ba1\u7406\u5c0f\u5185\u5b58\u56fe\u89e3\u3002\n\n\n\n\nTreebins\u548c\u6811\u7ba1\u7406\u5927\u5185\u5b58\u7684\u56fe\u89e3\uff1a\n\n\n\n\ndlmalloc\u4ee3\u7801\u5206\u6790\n\n\ndlmalloc \u5bf9\u5c0f\u5185\u5b58\u5206\u914d\u6709\u5982\u4e0b5\u4e2a\u89c4\u5219(\u6309\u4f18\u5148\u7ea7\u987a\u5e8f)\uff1a \n\n\n\n\n\u5982\u679c\u4e0e\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u5339\u914d\u7684\u7bb1\u5b50\u5b58\u5728\u7a7a\u95f2,\u5219\u4f7f\u7528\u5f53\u524d\u7bb1\u5b50\uff0c\u5426\u5219\u4f7f\u7528\u4e34\u8fd1\u7684 \u7bb1\u5b50\u3002\u5728\u80fd\u4e0d\u5206\u5272\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\u5c3d\u91cf\u4e0d\u5206\u5272\u5185\u5b58\u3002 \n\n\n\u5982\u679cdv chunk\u8db3\u591f\u5927\uff0c\u90a3\u4e48\u4f7f\u7528dv chunk\u3002 dv chunk\u662f\u6307\u6700\u8fd1\u4e00\u6b21\u5c0f\u5185\u5b58 \u7533\u8bf7\u65f6\u4f7f\u7528\u7684\u5185\u5b58\u5757\u3002 \u8fd9\u4e2a\u89c4\u5219\u662f\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u5206\u914d\u7684\u5185\u5b58\u8fde\u7eed\u3002 \n\n\n\u5728smallbin\u548ctreebin\u4e2d\u5bfb\u627e\u53ef\u4ee5\u4f7f\u7528\u7684\u5185\u5b58\u5757\uff0c\u5e76\u5206\u5272\u3002\u5c06\u5269\u4e0b\u7684\u5185\u5b58 \u5757\u4fdd\u5b58\u5230dv chunk\u4e2d\u3002 \n\n\n\u5982\u679ctop chunk \u8db3\u591f\u5927\uff0c\u5219\u4f7f\u7528top chunk\n\n\n\u5982\u679c\u8bf7\u6c42\u5185\u5b58\u5b9e\u5728\u592a\u5927\uff0c\u5219\u4f7f\u7528\u7cfb\u7edf\u5206\u914d\u5185\u5b58\u3002\n\n\n\n\n\n\u5927\u5185\u5b58\u5206\u914d\u7684\u89c4\u5219\uff1a\n\n\n\n\n\u5728treebin\u4e2d\u627e\u5230\u6700\u9002\u5408\u7684\u6700\u5c0f\u5185\u5b58\uff0c\u5982\u679c\u5b83\u6bd4dv chunk\u7684\u66f4\u5408\u9002\uff0c\u5c31\u4f7f\u7528\u5b83\uff0c \u5982\u679c\u6709\u9700\u8981\u5c31\u5206\u5272\u5b83\u3002 \n\n\n\u5982\u679cdv chunk \u6bd4\u5176\u4ed6\u6240\u6709\u7684\u66f4\u5408\u9002\uff0c\u4f7f\u7528dv chunk\u3002 \n\n\n\u5982\u679ctop \u8db3\u591f\u5927\uff0c\u4f7f\u7528top chunk\u3002 \n\n\n\u5982\u679c\u8bf7\u6c42\u7684\u5927\u5c0f \n= mmap threshold, \u5219\u4f7f\u7528\u7cfb\u7edf\u7684mmap\u3002\n\n\n\u76f4\u63a5\u4ece\u7cfb\u7edf\u5206\u914d\u5185\u5b58\u5e76\u4f7f\u7528\u3002\n\n\n\n\n\n\n\u5c0f\u5185\u5b58\u89c4\u5219\u4e00\n\n\n\n\n4597\n     \nif\n \n(\nbytes\n \n=\n \nMAX_SMALL_REQUEST\n)\n \n{\n\n\n\n\n\n\n// MAX_SMALL_REQUEST \u5b9e\u73b0\n2577 #define MAX_SMALL_REQUEST (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)\n\n\n\n\n\n\u8fd9\u91ccbytes\u4e3a\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f, \nMAX_SMALL_REQUEST\n\u5c31\u662f\u4e4b\u524d\u63d0\u5230\u8fc7\u7684\u6700\u5927\u7684\u5c0f\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u5c31\u662f256byte,\u5373,256byte\u4ee5\u4e0b\u7684\u6240\u6709\u5185\u5b58\u90fd\u662f\u5728\u53cc\u5411\u94fe\u8868\u4e2d\u5339\u914d.\n\n\n\n4600\n       \nnb\n \n=\n \n(\nbytes\n \n \nMIN_REQUEST\n)\n?\n \nMIN_CHUNK_SIZE\n \n:\n \npad_request\n(\nbytes\n);\n\n\n\n\n\n\n2225\n \n#\ndefine\n \nMIN_REQUEST\n         \n(\nMIN_CHUNK_SIZE\n \n-\n \nCHUNK_OVERHEAD\n \n-\n \nSIZE_T_ONE\n)\n\n\n\n2228\n \n#\ndefine\n \npad_request\n(\nreq\n)\n \\\n\n2229\n    \n(((\nreq\n)\n \n+\n \nCHUNK_OVERHEAD\n \n+\n \nCHUNK_ALIGN_MASK\n)\n \n \n~\nCHUNK_ALIGN_MASK\n)\n\n\n\n\n\n\n\u8fd9\u91ccnb\u5c31\u662f\u52a0\u4e0a\u534f\u8bae\u6570\u636e\u540e\u7684\u5b9e\u9645dlmalloc\u4f1a\u5206\u914d\u7684\u5185\u5b58\u5757\u5927\u5c0f.\u524d\u6587\u7b14\u8005\u63d0\u5230\u8fc7,\u5c0f\u5185\u5b58\u5757\u7684\u6700\u5c0f\u503c\u4e3a8byte,\u6240\u4ee5,\u4e0d\u8bba\u7533\u8bf7\u7684\u5185\u5b58\u591a\u5c0f,\u90fd\u4f7f\u7528\u6700\u5c0f\u503c.\n\n\n\n4601      idx = small_index(nb);\n\n\n\n\n\n2572\n \n#\ndefine\n \nSMALLBIN_SHIFT\n    \n(\n3U\n)\n\n\n\n2825\n \n#\ndefine\n \nsmall_index\n(\ns\n)\n      \n(\nbindex_t\n)((\ns\n)\n  \n \nSMALLBIN_SHIFT\n)\n\n\n\n\n\n\n\u8fd9\u91ccidx\u5f97\u5230\u7684\u662f\u8be5\u5185\u5b58\u5757\u5bf9\u5e94\u7684smallbin\u7bb1\u5b50\u7684\u7bb1\u53f7.\u524d\u6587\u5728\u63d0\u5230head\u65f6,\u63d0\u5230\u8fc7,\u5c0f\u5185\u5b58\u5757\u7684\u5927\u5c0f\u4e3a8byte\u7684\u500d\u6570,\u6240\u4ee5,\u53f3\u79fb3\u4f4d\u6765\u5b9a\u4f4d\u5bf9\u5e94\u7bb1\u5b50\u7684\u7bb1\u53f7.\n\n\n\n4602\n       \nsmallbits\n \n=\n \ngm\n-\nsmallmap\n \n \nidx\n;\n\n\n\n\n\n\nsmallmap \u662f\u5404\u4e2a\u7bb1\u5b50\u7684\u4f4d\u56fe,32bit,\u5bf9\u5e9432\u4e2a\u7bb1\u5b50,\u6bcf\u4e00\u4f4d\u4e3a1\u8868\u793a\u8be5\u7bb1\u53f7\u4e2d\u6709\u5bf9\n\u5e94\u5927\u5c0f\u7684\u5185\u5b58\u5757,\u4e3a0\u5219\u8868\u793a\u6ca1\u6709.\u8be5\u884c\u4ee3\u7801\u662f\u628a\u5bf9\u5e94\u7bb1\u53f7\u7684\u6bd4\u7279\u4f4d\u79fb\u5230\u6700\u53f3\u4fa7.\n\n\n\n4604\n       \nif\n \n((\nsmallbits\n \n \n0x3U\n)\n \n!=\n \n0\n)\n \n{\n\n\n4605\n         \nmchunkptr\n \nb\n,\n \np\n;\n\n\n4606\n         \nidx\n \n+=\n \n~\nsmallbits\n \n \n1\n;\n       \n/* Uses next bin if idx empty */\n\n\n4607\n         \nb\n \n=\n \nsmallbin_at\n(\ngm\n,\n \nidx\n);\n\n\n\n\n\n\n\u8fd9\u91cc 0x3U \u4f4e8\u4f4d\u5c31\u662f 0000 0011. \u6240\u4ee5,smallbits\n0x3U \u4e3a\u771f\u7684\u6761\u4ef6\u5982\u4e0b:(\u4e0a\u6587\u63d0\u5230,smallbits\u7684\u6700\u53f3\u4f4d\u8868\u793aidx\u7bb1\u53f7\u662f\u5426\u6709\u7a7a\u95f2\u5757)\n\n\n\n\n\u4f4e2\u4f4d\u4e3a 11. idx\u6709\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u6709\u7a7a\u95f2\u5757.\n\n\n\u4f4e2\u4f4d\u4e3a 10. idx\u65e0\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u6709\u7a7a\u95f2\u5757.\n\n\n\u4f4e2\u4f4d\u4e3a 01. idx\u6709\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u65e0\u7a7a\u95f2\u5757.\n\n\n\n\n4606\u884c\u662f\u5728\u91cd\u65b0\u5b9a\u4f4d\u5230\u771f\u6b63\u6709\u7a7a\u95f2\u5757\u7684\u7bb1\u53f7. ~smallbits \n 1 \u5728\u5f53\u524d\u7bb1\u5b50\u4e3a0\u7684\n\u60c5\u51b5\u4e0b,\u503c\u4e3a1;\u5f53\u524d\u7bb1\u5b50\u4e3a1\u7684\u60c5\u51b5\u4e0b,\u503c\u4e3a0.\u6240\u4ee5\u662f\u6709\u9650\u662f\u7528\u6b63\u597d\u6ee1\u8db3\u5927\u5c0f\u7684\u7bb1\n\u5b50.\n\n\n\n2831 #define smallbin_at(M, i)\n((sbinptr)((void*)\n((M)-\nsmallbins[(i)\n1])))\n\n\n\n\n\ni \u5c31\u662f idx, \u800cM\u5219\u662fgm(\n\u9700\u8981\u5728\u4e0a\u6587\u9884\u5148\u63cf\u8ff0gm\u7ed3\u6784\u4f53\u6210\u5458\u4f5c\u7528\n).smallbins(\n\u9700\u5728\u4e0a\u6587\u63cf\u8ff0\n)\u5c31\u662f\u53cc\u5411\u94fe\u8868\u6570\u7ec4,\u4e5f\u5c31\u662f\u5bf9\u5e94\u7bb1\u53f7\u5185\u90e8\u7684\u7a7a\u95f2\u5757\u94fe\u8868\u7684\u9996\u5730\u5740.\n\n\n\u503c\u5f97\u9ad8\u5174\u7684\u662f,\u6211\u4eec\u62ff\u5230\u94fe\u8868\u4e86,\u63a5\u4e0b\u6765\u5c31\u662f\u53d6\u51fa\u7a7a\u95f2\u5757,\u548c\u4e00\u4e9b\u6807\u5fd7\u4f4d\u7684\u5904\u7406\u4e86.\n\n\n\n4608        p = b-\nfd;\n4609        assert(chunksize(p) == small_index2size(idx));\n4610        unlink_first_small_chunk(gm, b, p, idx);\n4611        set_inuse_and_pinuse(gm, p, small_index2size(idx));\n4612        mem = chunk2mem(p);\n4613        check_malloced_chunk(gm, mem, nb);\n4614        goto postaction;\n\n\n\n\n\nfd\u57df\u662f\u524d\u4e00\u4e2a\u94fe\u8868\u8282\u70b9.\u800cB\u662f\u8868\u5934, \u4e5f\u5c31\u662f\u8bf4,\u6211\u4eec\u53d6\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20,\u53d6\u5230\u6211\u4eec\u9700\u8981\u7684\u5185\u5b58\u5757\u5730\u5740.\u8fd9\u4e2aassert\u5176\u5b9e\u5c31\u662f\u786e\u8ba4\u4e0b,\u5f53\u524d\u7684\u7bb1\u53f7\u7684\u5185\u5b58\u5757\u5927\u5c0f\u8ddf\u5f53\u524d\u5185\u5b58\u5757\u7684\u5927\u5c0f\u662f\u5426\u5339\u914d.\n\n\n\n\n3629#define unlink_first_small_chunk(M, B, P, I) {\\\n3630  mchunkptr F = P-\nfd;\\\n3631  assert(P != B);\\\n3632  assert(P != F);\\\n3633  assert(chunksize(P) == small_index2size(I));\\\n3634  if (B == F) {\\\n3635    clear_smallmap(M, I);\\\n3636  }\\\n3637  else if (RTCHECK(ok_address(M, F) \n F-\nbk == P)) {\\\n3638    F-\nbk = B;\\\n3639    B-\nfd = F;\\\n3640  }\\\n3641  else {\\\n3642    CORRUPTION_ERROR_ACTION(M);\\\n3643  }\\\n3644}\n\n\n\n\n\n2921#define clear_smallmap(M,i)     ((M)-\nsmallmap \n= ~idx2bit(i))\n\n\n\n\n\n\u8fd9\u91cc B P F\u7684\u5173\u7cfb\u662f F -\n P -\n B , \u6240\u4ee5,\u7406\u8bba\u4e0a, P \u4e0d\u7b49\u4e8eF \u4e5f\u4e0d\u7b49\u4e8eB,\u5982\n\u679c\u76f8\u7b49,\u5c31\u610f\u5473\u7740\u662f\u7a7a\u94fe\u8868(\u53ea\u6709\u8868\u5934).\u800c\u5982\u679cB == F,  \u610f\u5473\u7740\u8be5\u94fe\u8868\u4e2d\u53ea\u6709\u4e00\n\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757.\u53d6\u51fa\u8be5\u5185\u5b58\u5757\u4e4b\u540e,\u54b1\u4eec\u8981\u628a\u8be5\u7bb1\u5b50\u6807\u8bb0\u4e3a\u7a7a(3635, 2921).\u5f53\u7136,\n\u66f4\u591a\u7684\u60c5\u51b5\u662f\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9P.\n\n\n\n// 4611 \u884c\u51fd\u6570\u5b9e\u73b0\n\n3058#define set_inuse_and_pinuse(M,p,s)\\\n3059  ((p)-\nhead = (s|PINUSE_BIT|CINUSE_BIT),\\\n3060  ((mchunkptr)(((char*)(p)) + (s)))-\nhead |= PINUSE_BIT)\n\n\n\n\n\n\u8fd9\u5c31\u662f\u5728P \u7684head\u4e2d\u7f6e\u4e0aCINUSE\u4f4d\u548cP \u7684\u4e0b\u4e00\u5757\u5185\u5b58\u7684head\u4e2d\u8bbe\u7f6e\u4e0aPINUSE\u4f4d.\n\n\n\u6700\u540emem = chunk2mem(p);  \u5c31\u662f\u53d6\u51fa\u4f20\u9012\u4e2a\u7528\u6237\u7684\u6709\u6548\u5185\u5b58\u5730\u5740,.\ncheck_malloced_chunk(gm, mem, nb); \u662f\u8c03\u8bd5\u7528\u7684,\u68c0\u67e5\u8be5\u5206\u914d\u7684\u5185\u5b58\u5757\u7684\u5404\u4e2a\n\u5c5e\u6027\u662f\u5426\u6b63\u5e38.\n\n\n\u5230\u6b64,\u5c0f\u5185\u5b58\u7684,\u6b63\u597d\u7b26\u5408\u6216\u6b63\u597d\u4e34\u8fd1\u7bb1\u5b50\u6709\u7a7a\u95f2\u5757\u7684\u903b\u8f91\u5206\u6790\u5b8c\u6210,\u54b1\u4eec\u62ff\u5230\u4e86\n\u9700\u8981\u7684\u5185\u5b58.\n\n\n\u5c0f\u5185\u5b58\u89c4\u5219\u4e09\n\n\n\u4e0b\u9762,\u662f\u4e0a\u8ff0\u60c5\u51b5\u4e0d\u6ee1\u8db3,\u4e5f\u5c31\u662f\u5f53\u524d\u5185\u5b58\u8bf7\u6c42\u5bf9\u5e94\u7684\u7bb1\u53f7idx\u7684smallbits\u4f4e2\u4f4d\u4e3a 00 ,\u4e5f\u5c31\u662f\u8bf4,\u6ca1\u6709\u7a7a\u95f2\u5757.\n\n\n4617      else if (nb \n gm-\ndvsize) {\n4618        if (smallbits != 0) {\n\n\n\n\n\n(\ndvsize\u9700\u8981\u5728gm\u7684\u5206\u6790\u4e2d\u63cf\u8ff0\u6389\n)  smallbits != 0 \u610f\u5473\u7740,\u5728\u6bd4\u8bf7\u6c42\u7684\u5185\u5b58\u5757\u5927\u7684\u7bb1\u5b50\u4e2d,\u603b\u6709\u7a7a\u95f2\u5757\u5b58\u5728.\u6240\u4ee5\u63a5\u4e0b\u6765\u7684\u76ee\u7684\u662f\u627e\u5230\u6700\u5c0f\u7684\u7a7a\u95f2\u5757.\n\n\n4622          binmap_t leftbits = (smallbits \n idx) \n left_bits(idx2bit(idx));\n4623          binmap_t leastbit = least_bit(leftbits);\n4624          compute_bit2idx(leastbit, i);\n\n\n\n\n\n2917#define idx2bit(i)              ((binmap_t)(1) \n (i))\n\n2929#define least_bit(x)         ((x) \n -(x))\n\n2932#define left_bits(x)         ((x\n1) | -(x\n1))\n\n\n\n\n\n4622 \u884c \u4f4d\u4e0e\u7684\u53f3\u64cd\u4f5c\u6570\u662f\u4e00\u4e2a32bit\u7684\u6570\uff0c\u8be5\u6570\u7684\u4f4e\uff08idx+1\uff09\u4f4d\u4e3a0,\u5176\u4f59\u4f4d\u4e3a1;\u5de6\u64cd\u4f5c\u6570\u5c31\u662f\u5bf9\u5e94\u4f4eidx\u4f4d\u4e3a0,\u540c\u65f6\u4ee3\u7801\u903b\u8f91\u8d70\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\uff0c\u4f4e\uff08idx+2\uff09\u4e3a0\u3002\nleast_bit \u7684\u529f\u80fd\u662f\uff0c\u4fdd\u7559leftbits\u4e2d\u4ece\u53f3\u5f80\u5de6\u7684\u7b2c\u4e00\u4e2a\u4e3a1\u7684\u4f4d\uff0c\u5176\u4f59\u4f4d\u4e3a0. \u5219\u8be5leastbit\u5bf9\u5e94\u7684\u5c31\u662f\u7b26\u5408\u8bf7\u6c42\u7684\u6700\u5c0f\u5185\u5b58\u5757\u7684\u4f4d\u56fe\u3002compute_bit2idx \u662f\u5c06leastit\u4f4d\u56fe\u8f6c\u6362\u6210\u7bb1\u53f7\u3002 \u8fd9\u91cc i \u5c31\u662f\u83b7\u53d6\u5230\u7684\u7bb1\u53f7\u3002\n\n\n4625          b = smallbin_at(gm, i);\n4626          p = b-\nfd;\n4627          assert(chunksize(p) == small_index2size(i));\n4628          unlink_first_small_chunk(gm, b, p, i);\n\n\n\n\n\n\u62ff\u5230\u7bb1\u53f7\u4e4b\u540e\uff0c\u8fd9\u5757\u7684\u903b\u8f91\u4e0e\u4e0a\u6587\u89c4\u5219\u4e00\u7684\u903b\u8f91\u4e00\u6837\u3002\n\n\n4629          rsize = small_index2size(i) - nb;\n\n\n\n\n\n\u53d6\u51fa\u5f53\u524d\u7bb1\u5b50\u7684\u5185\u5b58\u5757\u5927\u5c0f\uff0c\u51cf\u53bb\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u5269\u4f59\u7684\u5185\u5b58\u5757\uff0c\u8fd9\u4e2a\u5269\u4f59\u5185\u5b58\u5757\u4f1a\u653e\u5230dv chunk\u4e2d\u3002\n\n\n4631          if (SIZE_T_SIZE != 4 \n rsize \n MIN_CHUNK_SIZE)\n4632            set_inuse_and_pinuse(gm, p, small_index2size(i));\n4633          else {\n4634            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);\n4635            r = chunk_plus_offset(p, nb);\n4636            set_size_and_pinuse_of_free_chunk(r, rsize);\n4637            replace_dv(gm, r, rsize);\n4638          }\n\n\n\n\n\n2269#define chunk_plus_offset(p, s)  ((mchunkptr)(((char*)(p)) + (s)))\n\n2284#define set_size_and_pinuse_of_free_chunk(p, s)\\\n2285  ((p)-\nhead = (s|PINUSE_BIT), set_foot(p, s))\n\n3063#define set_size_and_pinuse_of_inuse_chunk(M, p, s)\\\n3064  ((p)-\nhead = (s|PINUSE_BIT|CINUSE_BIT))\n\n3584#define insert_small_chunk(M, P, S) {\\\n3585  bindex_t I  = small_index(S);\\\n3586  mchunkptr B = smallbin_at(M, I);\\\n3587  mchunkptr F = B;\\\n3588  assert(S \n= MIN_CHUNK_SIZE);\\\n3589  if (!smallmap_is_marked(M, I))\\\n        // \u5982\u679c\u662f\u5bf9\u5e94\u7bb1\u53f7\u539f\u72b6\u6001\u4e3a0,\u5219\u7f6e1.\n3590    mark_smallmap(M, I);\\\n3591  else if (RTCHECK(ok_address(M, B-\nfd)))\\\n3592    F = B-\nfd;\\\n3593  else {\\\n3594    CORRUPTION_ERROR_ACTION(M);\\\n3595  }\\\n3596  B-\nfd = P;\\\n3597  F-\nbk = P;\\\n3598  P-\nfd = F;\\\n3599  P-\nbk = B;\\\n3600}\n\n3648#define replace_dv(M, P, S) {\\\n3649  size_t DVS = M-\ndvsize;\\\n3650  assert(is_small(DVS));\\\n3651  if (DVS != 0) {\\\n3652    mchunkptr DV = M-\ndv;\\\n3653    insert_small_chunk(M, DV, DVS);\\\n3654  }\\\n3655  M-\ndvsize = S;\\\n3656  M-\ndv = P;\\\n3657}\n\n\n\n\n\n\u5982\u679c\u5269\u4f59\u5927\u5c0frsize\u5c0f\u4e8eMIN_CHUNK_SIZE\uff0c\u54b1\u4eec\u76f4\u63a5\u5c06\u6240\u6709\u5185\u5b58\u5206\u914d\u7ed9\u7528\u6237\u3002\u5426\u5219\u5219\u5206\u5272\u5185\u5b58\uff0c\u5e76\u5c06\u5269\u4f59\u7684\u5185\u5b58\u5757\u8f6c\u6210mchunkptr\uff0c \u5373 r\u3002\u6211\u4eec\u7136\u540e\uff0cr\u76f8\u5f53\u4e8e\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u5757\uff0c\u6211\u4eec\u8bbe\u7f6e\u5176head\u5c5e\u6027\uff08size\uff0cPINUSE_BIT\uff0cCINUSE_BIT\uff09\u3002\nreplace_dv \u4e2d\uff0c\u6211\u4eec\u5148\u83b7\u5f97dv size\uff0c\u786e\u8ba4\u662f\u5c0f\u5185\u5b58\u5757\u3002\u7136\u540e\uff0c\u5c31\u662f\u628adv\u5185\u5b58\u5757\u63d2\u5165\u5230\u5bf9\u5e94\u7684\u7bb1\u53f7\u91cc\u3002\u5c31\u8ddf\u4e4b\u524d\uff0c\u6839\u636e\u5927\u5c0f\u83b7\u53d6\u5230\u5bf9\u5e94\u7bb1\u53f7\u7684\u94fe\u8868\u5934\u7684\u903b\u8f91\u4e00\u6837\uff0c\n\u53ea\u662f\u8fd9\u91cc\u662f\u5c06\u5185\u5b58\u5757\u63d2\u5165\u53cc\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002\nok\uff0c \u63d2\u5165\u5b8c\u6210\u540e\uff0c\u54b1\u4eec\u628a\u521a\u624d\u5206\u5272\u5269\u4e0b\u7684\u5185\u5b58\u5b58\u653e\u5230dv chunk\u4e2d\u3002\n\n\n4639          mem = chunk2mem(p);\n4640          check_malloced_chunk(gm, mem, nb);\n4641          goto postaction;\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u8fd4\u56de\u5185\u5b58\u7ed9\u7528\u6237\uff0c\u89c4\u5219\u4e09\u7b2c\u4e00\u90e8\u5206\u5185\u5b58\u5206\u914d\u7ed3\u675f\u3002\n\n\n4644        else if (gm-\ntreemap != 0 \n (mem = tmalloc_small(gm, nb))\n!= 0) {\n4645          check_malloced_chunk(gm, mem, nb);\n4646          goto postaction;\n\n\n\n\n\n\u8fd9\u91ccelse \u5bf9\u5e94\u201c4618        if (smallbits != 0) {\u201d \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u5c0f\u5185\u5b58\u7684\n=\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u7684\u6240\u6709\u7bb1\u5b50\u4e0d\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5feb\u3002 \u7136\u540e\uff0c\u6211\u4eec\u68c0\u67e5treemap\u4e2d\u662f\u5426\u5b58\u5728\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u8c03\u7528tmalloc_small\u3002\n\n\n2833#define treebin_at(M,i)     (\n((M)-\ntreebins[i]))\n\n4527-static void* tmalloc_small(mstate m, size_t nb) {\n...\n4531  binmap_t leastbit = least_bit(m-\ntreemap);\n4532  compute_bit2idx(leastbit, i);\n4533  v = t = *treebin_at(m, i);\n4534  rsize = chunksize(t) - nb;\n\n\n\n\n\nleast_bit\n \u7684\u4f5c\u7528\u5c31\u662f\u4fdd\u7559\u6700\u53f3\u4fa7\u4e3a1\u7684bit\u4f4d\uff0c\u5176\u4f59\u4f4d\u4e3a0.\u6240\u4ee5\uff0c\nleast_bit\n\u548c\ncompute_bit2idx\n\u7684\u5171\u540c\u4f5c\u7528\u5c31\u662f\u5728treemap\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u53ef\u7528\u5185\u5b58\u7bb1\u5b50\u3002v\u548ct\u5373\u4e3a\u627e\u5230\u7684\u5185\u5b58\u5757\u6811\u7684\u6839\u8282\u70b9\u3002\n\n\n4536  while ((t = leftmost_child(t)) != 0) {\n4537    size_t trem = chunksize(t) - nb;\n4538    if (trem \n rsize) {\n4539      rsize = trem;\n4540      v = t;\n4541    }\n4542  }\n\n\n\n\n\n\u8fd9\u6bb5\u4ee3\u7801\u662f\u5bfb\u627et\u7684\u6700\u5de6\u5b50\u6811\u3002\u5728\u524d\u6587\u6211\u4eec\u4ecb\u7ecd\u8fc7aka\u6811\uff0c\u6bcf\u4e00\u68f5\u6811\u7684\u505a\u5b50\u6811\u603b\u5c0f\u4e8e\u5176\u53f3\u5b50\u6811\u3002\u8be5\u4ee3\u7801\u5c31\u662f\u5728\u5bfb\u627e\u6ee1\u8db3\u7528\u4e8e\u8bf7\u6c42\u5927\u5c0fnb\u7684\u6700\u63a5\u8fd1\u7684\u6811\u7684\u8282\u70b9\u3002\uff08\u8003\u8651\u5230\u8bf7\u6c42\u7684\u5b57\u8282nb\n=256byte, \u800c\u5728tree\u4e2d\u6700\u5c0f\u7684chunksize \n 256byte \u6240\u4ee5,\u4e0d\u4f1a\u51fa\u73b0\u8d1f\u6570.\uff09\n\n\n4545    mchunkptr r = chunk_plus_offset(v, nb);\n4546    assert(chunksize(v) == rsize + nb);\n4547    if (RTCHECK(ok_next(v, r))) {\n4548      unlink_large_chunk(m, v);\n4549      if (rsize \n MIN_CHUNK_SIZE)\n4550        set_inuse_and_pinuse(m, v, (rsize + nb));\n4551      else {\n4552        set_size_and_pinuse_of_inuse_chunk(m, v, nb);\n4553        set_size_and_pinuse_of_free_chunk(r, rsize);\n4554        replace_dv(m, r, rsize);\n4555      }\n4556      return chunk2mem(v);\n4557    }\n4558  }\n\n\n\n\n\n(NOT READY)\n\u8fd9\u6bb5\u4ee3\u7801\u8ddf\u4e0a\u6587\u5c0f\u5185\u5b58\u627e\u5230\u540e\u5904\u7406\u7684\u4ee3\u7801\u76f8\u4f3c\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\uff0cunlink_large_chunk\uff0c\u6240\u4ee5\u6211\u4eec\u770b\u4e0bunlink_large_chunk\u7684\u5b9e\u73b0.\u8fd9\u4e2a\u8fc7\u7a0b\u6709\u4e09\u4e2a\u6b65\u9aa4\n\n\n\n\n\u5982\u679c\u7ed3\u70b9X\u662f\u94fe\u8868\u7684\u7ed3\u70b9,\u5219\u5c06\u5176\u91cd\u94fe\u8868\u4e2d\u5220\u9664.\n\n\n\u5982\u679cX\u662f\u8be5\u5927\u5c0f\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9,\u4f46\u662f\u4e0d\u662f\u53f6\u5b50\u7ed3\u70b9,\u5b83\u5fc5\u987b\u7528\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u66ff\u6362.\u8fd9\u91cc\u67e5\u627e\u53f6\u5b50\u7ed3\u70b9\u7684\u65b9\u6cd5\u662f\u4ece\u6700\u53f3\u4fa7\u5f00\u59cb.\n\n\n\u5982\u679cX\u662f\u94fe\u8868\u7684\u5934(\u62e5\u6709parent linker),\u5c31\u9700\u8981\u91cd\u65b0\u5c06\u5176x\u7684\u7236\u7ed3\u70b9\u4e0e\u66ff\u6362x\u7684\u7ed3\u70b9\u91cd\u65b0\u8fde\u63a5.\n\n\n\n\n3730#define unlink_large_chunk(M, X) {\\\n3731  tchunkptr XP = X-\nparent;\\\n3732  tchunkptr R;\\\n\n\n\n\n\n3733  if (X-\nbk != X) {\\\n3734    tchunkptr F = X-\nfd;\\\n3735    R = X-\nbk;\\\n3736    if (RTCHECK(ok_address(M, F) \n F-\nbk == X \n R-\nfd == X)) {\\\n3737      F-\nbk = R;\\\n3738      R-\nfd = F;\\\n3739    }\\\n3740    else {\\\n3741      CORRUPTION_ERROR_ACTION(M);\\\n3742    }\\\n3743  }\\\n\n\n\n\n\n\u8fd9\u91cc\u662f\u7b2c\u4e00\u79cd\u60c5\u51b5,\u5373x\u662f\u5c5e\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9.\n\n\n3744  else {\\\n3745    tchunkptr* RP;\\\n3746    if (((R = *(RP = \n(X-\nchild[1]))) != 0) ||\\\n3747        ((R = *(RP = \n(X-\nchild[0]))) != 0)) {\\\n3748      tchunkptr* CP;\\\n3749      while ((*(CP = \n(R-\nchild[1])) != 0) ||\\\n3750             (*(CP = \n(R-\nchild[0])) != 0)) {\\\n3751        R = *(RP = CP);\\\n3752      }\\\n3753      if (RTCHECK(ok_address(M, RP)))\\\n3754        *RP = 0;\\\n3755      else {\\\n3756        CORRUPTION_ERROR_ACTION(M);\\\n3757      }\\\n3758    }\\\n3759  }\\\n\n\n\n\n\n\u8fd9\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5.\n\n\n3760  if (XP != 0) {\\ \n3761    tbinptr* H = treebin_at(M, X-\nindex);\\ \n3762    if (X == *H) {\\ \n3763      if ((*H = R) == 0) \\ \n3764        clear_treemap(M, X-\nindex);\\ \n3765    }\\ \n3766    else if (RTCHECK(ok_address(M, XP))) {\\ \n3767      if (XP-\nchild[0] == X) \\ \n3768        XP-\nchild[0] = R;\\ \n3769      else \\ \n3770        XP-\nchild[1] = R;\\ \n3771    }\\ \n3772    else\\ \n3773      CORRUPTION_ERROR_ACTION(M);\\ \n3774    if (R != 0) {\\ \n3775      if (RTCHECK(ok_address(M, R))) {\\ \n3776        tchunkptr C0, C1;\\ \n3777        R-\nparent = XP;\\ \n3778        if ((C0 = X-\nchild[0]) != 0) {\\ \n3779          if (RTCHECK(ok_address(M, C0))) {\\ \n3780            R-\nchild[0] = C0;\\ \n3781            C0-\nparent = R;\\ \n3782          }\\ \n3783          else\\ \n3784            CORRUPTION_ERROR_ACTION(M);\\ \n3785        }\\ \n3786        if ((C1 = X-\nchild[1]) != 0) {\\ \n3787          if (RTCHECK(ok_address(M, C1))) {\\ \n3788            R-\nchild[1] = C1;\\ \n3789            C1-\nparent = R;\\ \n3790          }\\ \n3791          else\\ \n3792            CORRUPTION_ERROR_ACTION(M);\\ \n3793        }\\ \n3794      }\\ \n3795      else\\ \n3796        CORRUPTION_ERROR_ACTION(M);\\ \n3797    }\\ \n3798  }\\ \n\n\n\n\n\n\u8fd9\u662f\u7b2c\u4e09\u79cd\u60c5\u51b5.\n\n\n\n\u4ee5\u4e0a,\u72ec\u5c5e\u4e8e\u5c0f\u5185\u5b58\u7684\u5206\u914d\u89c4\u5219\u7ed3\u675f!\n\n\n4650    else if (bytes \n= MAX_REQUEST)\n4651      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in\nsys alloc) */\n\n\n\n\n\n2224#define MAX_REQUEST         ((-((MCHUNK_SIZE + CHUNK_ALIGN_MASK) \n ~CHUNK_ALIGN_MASK)) \n 2)\n\n\n\n\n\n\u8fd9\u91cc,\u5f53\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\n= MAX_REQUEST\u65f6,\u6211\u4eec\u5f3a\u5236\u5206\u914d\u5931\u8d25.\nCHUNK_ALIGN_MASK\n \u4e3a \n2 * sizeof(void *) - 1\n,\u572832bit\u4e0a\u4e3a7.\u6240\u4ee5MAX_REQUEST\u662f\u4e00\u4e2a\u6781\u5927\u7684\u6570.\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b,\u6211\u4eec\u5c06nb\u8bbe\u7f6e\u4e3affffffff,\u5f3a\u5236\u5931\u8d25.\n\n\n\u5927\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e00\n\n\n\u7c7b\u4f3c\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e00,\u4ece\u6811\u4e2d\u627e\u5230\u6700\u9002\u5408\u7684\u5185\u5b58\u5757.\n\n\n4652    else {\n4653      nb = pad_request(bytes);\n4654      if (gm-\ntreemap != 0 \n (mem = tmalloc_large(gm, nb)) != 0) {\n4655        check_malloced_chunk(gm, mem, nb);\n4656        goto postaction;\n4657      }\n4658    }\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u7684\u91cd\u70b9\u662f\ntmalloc_large\n,\u5b83\u4e0e\ntmalloc_small\n\u7684\u5dee\u522b\u662f:\ntmalloc_small\n\u662f\u7528\u4e8e\u5c0f\u5185\u5b58\u5206\u914d\u7684,\u53ea\u9700\u8981\u5728treemap\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u6709\u6548\u6811,\u53d6\u51fa\u6811\u4e2d\u6700\u5c0f\u5185\u5b58\u5373\u53ef;\u800c\ntmalloc_large\n\u662f\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219,\u5728\u6240\u670932\u68f5\u6811\u4e2d\u627e\u5230\u6700\u5339\u914d\u5927\u5c0f\u7684\u5185\u5b58\u5757.\n\n\n4456static void* tmalloc_large(mstate m, size_t nb) {\n4457  tchunkptr v = 0;\n4458  size_t rsize = -nb; /* Unsigned negation */\n4459  tchunkptr t;\n4460  bindex_t idx;\n4461  compute_tree_index(nb, idx);\n4462  if ((t = *treebin_at(m, idx)) != 0) {\n\n\n\n\n\nrsize \u4e3a\u6781\u5927\u6570. \ncompute_tree_index\n\u901a\u8fc7\u8bf7\u6c42\u7684\u5927\u5c0fnb,\u4ecetreebinmap\u4e2d\u8ba1\u7b97\u51fa\u7bb1\u53f7.\ntreebin_at\n \u5219\u662f\u53d6\u51faidx\u7bb1\u53f7\u4e2d\u5bf9\u5e94\u7684\u6811\u6839\u7ed3\u70b9.\n\n\n2880#define compute_tree_index(S, I)\\\n2881{\\\n2882  size_t X = S \n TREEBIN_SHIFT;\\\n2883  if (X == 0)\\\n2884    I = 0;\\\n2885  else if (X \n 0xFFFF)\\\n2886    I = NTREEBINS-1;\\\n2887  else {\\\n2888    unsigned int Y = (unsigned int)X;\\\n2889    unsigned int N = ((Y - 0x100) \n 16) \n 8;\\\n2890    unsigned int K = (((Y \n= N) - 0x1000) \n 16) \n 4;\\\n2891    N += K;\\\n2892    N += K = (((Y \n= K) - 0x4000) \n 16) \n 2;\\\n2893    K = 14 - N + ((Y \n= K) \n 15);\\\n2894    I = (K \n 1) + ((S \n (K + (TREEBIN_SHIFT-1)) \n 1));\\\n2895  }\\\n2896}\n\n\n\n\n\n\u4ee5\u4e0a\u8ba1\u7b97\u7684\u7ed3\u679c\u5982\u4e0b,idx\u4e3a\u5bf9\u5e94\u7bb1\u53f7,mem\u5bf9\u5e94\u8be5\u7bb1\u5b50\u4e2d\u6700\u5c0f\u7684\u5185\u5b58\u5927\u5c0f.\n\n\nidx 0 mem 256 hex: 100\nidx 1 mem 384 hex: 180\nidx 2 mem 512 hex: 200\nidx 3 mem 768 hex: 300\nidx 4 mem 1024 hex: 400\nidx 5 mem 1536 hex: 600\nidx 6 mem 2048 hex: 800\nidx 7 mem 3072 hex: c00\nidx 8 mem 4096 hex: 1000\nidx 9 mem 6144 hex: 1800\nidx 10 mem 8192 hex: 2000\nidx 11 mem 12288 hex: 3000\nidx 12 mem 16384 hex: 4000\nidx 13 mem 24576 hex: 6000\nidx 14 mem 32768 hex: 8000\nidx 15 mem 49152 hex: c000\nidx 16 mem 65536 hex: 10000\nidx 17 mem 98304 hex: 18000\nidx 18 mem 131072 hex: 20000\nidx 19 mem 196608 hex: 30000\nidx 20 mem 262144 hex: 40000\nidx 21 mem 393216 hex: 60000\nidx 22 mem 524288 hex: 80000\nidx 23 mem 786432 hex: c0000\nidx 24 mem 1048576 hex: 100000\nidx 25 mem 1572864 hex: 180000\nidx 26 mem 2097152 hex: 200000\nidx 27 mem 3145728 hex: 300000\nidx 28 mem 4194304 hex: 400000\nidx 29 mem 6291456 hex: 600000\nidx 30 mem 8388608 hex: 800000\nidx 31 mem 12582912 hex: c00000\n\n\n\n\n\n4463    /* Traverse tree for this bin looking for node with size == nb */\n4464    size_t sizebits = nb \n leftshift_for_tree_index(idx);\n4465    tchunkptr rst = 0;  /* The deepest untaken right subtree */\n4466    for (;;) {\n4467      tchunkptr rt;\n4468      size_t trem = chunksize(t) - nb;\n4469      if (trem \n rsize) {\n4470        v = t;\n4471        if ((rsize = trem) == 0)\n4472          break;\n4473      }\n4474      rt = t-\nchild[1];\n4475      t = t-\nchild[(sizebits \n (SIZE_T_BITSIZE-SIZE_T_ONE)) \n 1];\n4476      if (rt != 0 \n rt != t)\n4477        rst = rt;\n4478      if (t == 0) {\n4479        t = rst; /* set t to least subtree holding sizes \n nb */\n4480        break;\n4481      }\n4482      sizebits \n= 1;\n4483    }\n\n\n\n\n\n\u8fd9\u662f\u6811\u7684\u641c\u7d22\u7b97\u6cd5,\u6211\u4eec\u6765\u8be6\u7ec6\u770b\u4e0b.\u9996\u5148sizebits\u53d8\u91cf,\u7c7b\u4f3cbinmap,\u6bcf\u4e00\u4f4d\u5bf9\u5e94\u6811\u7684\u5bf9\u5e94\u6df1\u5ea6\u7684\u5de6\u53f3\u5b50\u6811,\u53ef\u4ee5\u8ba4\u4e3a\u662f\u904d\u5386\u6811\u7684key bits.\n\n\n2904#define leftshift_for_tree_index(i) \\\n2905   ((i == NTREEBINS-1)? 0 : \\\n2906    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) \n 1) + TREEBIN_SHIFT - 2)))\n\n\n\n\n\n1601#define SIZE_T_BITSIZE      (sizeof(size_t) \n 3)\n1606#define SIZE_T_ONE          ((size_t)1)\n2574#define TREEBIN_SHIFT     (8U)\n\n\n\n\n\nleftshift_for_tree_index\n \u5b8f\u5c06\u5173\u952e\u7801\u79fb\u52a8\u5230\u4e86\u6700\u5de6.\u8ba1\u7b97\u7684\u7ed3\u679c\u4e3a (25 - (i \n 1)). \u76f8\u5bf9\u4e8e\u7bb1\u5b500, \u5185\u5b58\u8303\u56f4\u4e3a128, \u5173\u952e\u7801\u957f\u5ea6\u4e3a 7, \nleftshift_for_tree_index\n\u8ba1\u7b97\u7684\u7ed3\u679c\u4e3a25. \u6240\u4ee5,\u5c06 nb \n 25 , \u5c31\u662f\u5c06\u5173\u952e\u7801\u79fb\u52a8\u5230\u6700\u5de6\u7aef.\n\n\n\u7136\u540e\u6211\u4eec\u770bfor\u5faa\u73af\u5185\u90e8\u7684,\u8fd9\u5c31\u662f\u5728\u904d\u5386\u6811\u4e86.\n\n\n4467      tchunkptr rt;\n4468      size_t trem = chunksize(t) - nb;\n4469      if (trem \n rsize) {\n4470        v = t;\n4471        if ((rsize = trem) == 0)\n4472          break;\n4473      }\n\n\n\n\n\n\u4e0e \u5bfb\u627e\u6700\u5339\u914dnb\u6700\u8fd1\u7684\u70b9.\u5f53\u7136,\u5982\u679c\u627e\u5230\u5927\u5c0f\u76f8\u7b49\u7684,\u5c31\u76f4\u63a5\u8df3\u51fa, \u8fd9\u4e2a\u8df3\u51fa\u6761\u4ef6\u53ef\u80fd\u662f\u5173\u952e\u7801\u8fd8\u672a\u641c\u7d22\u5b8c.\u8fd9\u91cc\u5c31\u53ef\u4ee5\u770b\u51fa, dlmalloc\u6811\u4e0e bitwise trie\u6811\u7684\u5dee\u5f02,\u503c\u5728\u7279\u5f81\u7801\u7684\u8def\u5f84\u4e0a\u7684\u4efb\u610f\u70b9. \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u4e48\u505a\u5462?\u56e0\u4e3adlmalloc\u7684\u5206\u7bb1\u673a\u5236,\u5bfc\u81f4\u4e86,\u5982\u679c\u641c\u7d22\u5b8c\u5173\u952e\u7801,\u5219 \u8be5\u7ed3\u70b9\u5fc5\u5b9a\u53ea\u5b58\u5728\u53f6\u5b50\u7ed3\u70b9\u4e0a. \u5728\u8fd9\u4e2a\u524d\u63d0\u4e0b,\u4e3a\u4e86\u8282\u7701\u5185\u5b58\u7a7a\u95f4, \u5728\u63d2\u5165\u7ed3\u70b9\u65f6,\u53ea\u8981\u5728\u5173\u952e\u7801\u7684\u8def\u5f84\u4e0a\u4e0d\u5b58\u5728\u88ab\u5360\u7528\u7684\u70b9,\u5c31\u5c06\u8be5\u503c\u63d2\u5165. \u5728\u67e5\u770b\u4e86 \ninsert_large_chunk\n \u540e\u4f1a\u6709\u66f4\u6e05\u6670\u7684\u4f53\u4f1a.\n\n\n4474      rt = t-\nchild[1];\n4475      t = t-\nchild[(sizebits \n (SIZE_T_BITSIZE-SIZE_T_ONE)) \n 1];\n4476      if (rt != 0 \n rt != t)\n4477        rst = rt;\n4478      if (t == 0) {\n4479        t = rst; /* set t to least subtree holding sizes \n nb */\n4480        break;\n4481      }\n4482      sizebits \n= 1;\n\n\n\n\n\n(sizebits \n (SIZE_T_BITSIZE-SIZE_T_ONE))\n \u8fd9\u4e2a\u5c31\u662f\u6bcf\u4e00\u5c42\u6811\u7684\u7279\u5f81\u7801\u4e86.\u7ed3\u5408\u4e0a\u9762sizebits\u7684\u503c,\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u4e3a \nnb \n (6 + (i \n 1))\n. \u5982\u679c,\u6211\u4eec\u518d\u7ed3\u5408\ncompute_tree_index\n \u4e2d\u7684\u7ed3\u679c,\u5f97\u5230\u5982\u4e0b\u8868.idx\u4e3a\u7bb1\u53f7,mem\u4e3a\u8be5\u7bb1\u5b50\u4e2d\u7684\u6700\u5c0f\u5185\u5b58,hex\u4e3a\u8be5\u503c\u768416\u8fdb\u5236,mid\u4e3a\u533a\u5206\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u7279\u5f81\u7801,bitshift\u4e3a\u7279\u5f81\u7801\u7684\u65e0\u6548\u4f4d\u6570. \u6bd4\u5982,\u7bb1\u5b501\u4e2d,dix\u4e3a1,\u5176\u8868\u793a\u7684\u5185\u5b58\u8303\u56f4\u4e3a[384, 512),\u5219\u5176\u5de6\u5b50\u6811\u8868\u793a\u8303\u56f4\u4e3a[384,448),\u53f3\u5b50\u6811\u4e3a[448,512).448\u5373\u4e3a\u8be5\u6811\u7684\u7b2c\u4e00\u5c42\u7684\u7279\u5f81\u7801,\u4e5f\u5c31\u662f111000000.\u5982\u679cnb \n 448, \u5219\u7b2c7\u4f4d\u4e3a0,\u5426\u5219\u7b2c7\u4f4d\u4e3a1.\u6240\u4ee5,\u53ea\u8981\u901a\u8fc7\u5c06size \n bitshift \u4e4b\u540e\u4e0e1 \u505a\u4f4d\u4e0e\u8fd0\u7b97,\u5c31\u53ef\u4ee5\u5224\u65ad\u51fa\u5728\u8be5\u6811\u5bf9\u5e94\u5c42\u8be5\u8fdb\u5165\u5176\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811.\n\n\nidx 0 mem 256 hex: 100  mid: 101000000 bitshift: 6\nidx 1 mem 384 hex: 180 mid: 111000000 bitshift: 6\nidx 2 mem 512 hex: 200 mid: 1110000000 bitshift: 7\nidx 3 mem 768 hex: 300 mid: 1010000000 bitshift: 7\nidx 4 mem 1024 hex: 400 mid: 10100000000 bitshift: 8\nidx 5 mem 1536 hex: 600 mid: 11100000000 bitshift: 8\nidx 6 mem 2048 hex: 800 mid: 101000000000 bitshift: 9\nidx 7 mem 3072 hex: c00 mid: 111000000000 bitshift: 9\nidx 8 mem 4096 hex: 1000 mid: 1010000000000 bitshift: 10\nidx 9 mem 6144 hex: 1800 mid: 1110000000000 bitshift: 10\nidx 10 mem 8192 hex: 2000 mid: 10100000000000 bitshift: 11\nidx 11 mem 12288 hex: 3000 mid: 11100000000000 bitshift: 11\nidx 12 mem 16384 hex: 4000 mid: 101000000000000 bitshift: 12\nidx 13 mem 24576 hex: 6000 mid: 111000000000000 bitshift: 12\nidx 14 mem 32768 hex: 8000 mid: 1010000000000000 bitshift: 13\nidx 15 mem 49152 hex: c000 mid: 1110000000000000 bitshift: 13\nidx 16 mem 65536 hex: 10000 mid 10100000000000000 bitshift: 14\nidx 17 mem 98304 hex: 18000 mid 11100000000000000 bitshift: 14\nidx 18 mem 131072 hex: 20000 mid 101000000000000000 bitshift: 15\nidx 19 mem 196608 hex: 30000 mid 111000000000000000 bitshift: 15\nidx 20 mem 262144 hex: 40000 mid 1010000000000000000 bitshift: 16\nidx 21 mem 393216 hex: 60000 mid 1110000000000000000 bitshift: 16\nidx 22 mem 524288 hex: 80000 mid 10100000000000000000 bitshift: 17\nidx 23 mem 786432 hex: c0000 mid 11100000000000000000 bitshift: 17\nidx 24 mem 1048576 hex: 100000 mid 101000000000000000000 bitshift: 18\nidx 25 mem 1572864 hex: 180000 mid 111000000000000000000 bitshift: 18\nidx 26 mem 2097152 hex: 200000 mid 1010000000000000000000 bitshift: 19\nidx 27 mem 3145728 hex: 300000 mid 1110000000000000000000 bitshift: 19\nidx 28 mem 4194304 hex: 400000 mid 10100000000000000000000 bitshift: 20\nidx 29 mem 6291456 hex: 600000 mid 11100000000000000000000 bitshift: 20\nidx 30 mem 8388608 hex: 800000 mid 101000000000000000000000 bitshift: 21\nidx 31 mem 12582912 hex: c00000 bitshift: 31\n\n\n\n\n\n// \u56fe, dlammloc \u6811\u7684\u56fe.\n\n\n4485  if (t == 0 \n v == 0) { /* set t to root of next non-empty treebin */\n4486    binmap_t leftbits = left_bits(idx2bit(idx)) \n m-\ntreemap;\n4487    if (leftbits != 0) {\n4488      bindex_t i;\n4489      binmap_t leastbit = least_bit(leftbits);\n4490      compute_bit2idx(leastbit, i);\n4491      t = *treebin_at(m, i);\n4492    }\n4493  }\n\n\n\n\n\n\u8fd9\u91cc\u5bf9\u5e94\u4e0a\u6587\u7684\n4462  if ((t = *treebin_at(m, idx)) != 0) {\n , \u4e5f\u5c31\u662f\u8bf4\u5728\u5f53\u524d\u5927\u5c0f\u7684\u7bb1\u5b50\u5185\u4e0d\u5b58\u5728\u7a7a\u95f2\u7684\u5185\u5b58\u5757,\u6240\u4ee5\u6211\u4eec\u8981\u628at\u8bbe\u7f6e\u4e3a\u6700\u8fd1\u7684\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u7bb1\u53f7.\nleft_bits\n \u548c \nleast_bit\n \u8ddf\u4e0a\u6587\u5c0f\u5185\u5b58\u5bfb\u627e\u6700\u8fd1\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u7bb1\u5b50\u7b97\u6cd5\u4e00\u6837.\n\n\n4495  while (t != 0) { /* find smallest of tree or subtree */\n4496    size_t trem = chunksize(t) - nb;\n4497    if (trem \n rsize) {\n4498      rsize = trem;\n4499      v = t;\n4500    }\n4501    t = leftmost_child(t);\n4502  }\n\n\n\n\n\n\u8fd9\u91cc\u8ddf\ntmalloc_small\n\u5bfb\u627e\u6700\u5de6\u5b50\u6811(\u6700\u5c0f\u5185\u5b58)\u7684\u7b97\u6cd5\u4e00\u6837.\u8fd9\u6bb5\u4ee3\u7801\u5bf9\u4e0a\u9762\u7684\u4e24\u79cd\u60c5\u51b5\u90fd\u6709\u6548.\u5373,\u5982\u679c\u5728\u5bf9\u5e94\u7bb1\u53f7\u6709\u7a7a\u95f2\u5185\u5b58,\u5728\u57fa\u4e8e\u6811\u7684\u641c\u7d22\u7b97\u6cd5\u627e\u5230\u7684t\u5c31\u662f\u6700\u5339\u914dnb\u7684\u5927\u5c0f,\u6240\u4ee5\u8fd9\u91cc\u7684while\u5faa\u73af\u7ed3\u679ct\u5c31\u4e0d\u4f1a\u6539\u53d8;\u5982\u679c\u662f,\u5bfb\u627e\u6700\u8fd1\u6709\u7a7a\u95f2\u5757\u7684\u6811,\u90a3\u4e48\u8be5\u6811\u7684\u6700\u5c0f\u5185\u5b58\u90fd\u5927\u4e8e\u8bf7\u6c42\u5927\u5c0fnb,\u6240\u4ee5\u76f4\u63a5\u5bfb\u627e\u6700\u5de6\u5b50\u6811.\n\n\ndlmalloc\u6d45\u6790\n\n\n\n\nversion 1.0 by Werther Zhang @ 2014.03.15 Write done @WizNote\n\n\nVersion 1.1   by Werther Zhang @ 2014.03.20 Export to @Word\n\n\nVersion  1.2  by Werther Zhang @ 2016.07.02 Move to @leanote\n\n\n\n\ndlmalloc\u4ecb\u7ecd\n\n\ndlmalloc\u5728\u67d0\u4e9b\u7a0b\u5ea6\u4e0a\u8bf4\uff0c\u662f\u6700\u597d\u7684\u5185\u5b58\u7ba1\u7406\u5de5\u5177\u4e4b\u4e00\u3002\u5b83\u662f\u7531Doug Lea \u57281987\u5e74\u5f00\u59cb\u7f16\u5199\uff0c\u6240\u4ee5\u5927\u90e8\u5206\u4eba\u4f1a\u79f0\u547c\u5b83\u4e3aDoug Lea's Malloc\uff0c \u7b80\u79f0dlmalloc\u3002\n\n\n\u7b97\u6cd5\u6982\u89c8\n\n\ndlmalloc \u6839\u636e\u5185\u5b58\u7c92\u5ea6\u7684\u5927\u5c0f\u5206\u522b\u4f7f\u7528chunk\u548csegment\u8fdb\u884c\u7ba1\u7406\u3002Segment\u662f\u901a\u8fc7sbrk\u5206\u914d\uff0c\u7c7b\u4f3c\u8fdb\u7a0b\u7684\u6570\u636e\u6bb5\uff0c\u5c5e\u4e8e\u6781\u5c11\u9047\u5230\u7684\u60c5\u51b5\u3002Dlmalloc\u4e2d\u5927\u91cf\u5b58\u5728\u7684\u5185\u5b58\u5757\u662fchunk\u3002Chunk\u7684\u7ed3\u6784\u5982\u4e0b\u3002\n\n\n\u88ab\u7528\u6237\u4f7f\u7528\u7684chunk\u7ed3\u6784\u770b\u8d77\u6765\u50cf\u4e0b\u9762\u8fd9\u6837\uff08\u975e\u7cbe\u786e\u56fe\uff09\uff1a\n\n\n\n\n\u800c\u672a\u88ab\u4f7f\u7528\u7684chunk\u770b\u8d77\u6765\u5982\u4e0b\uff08\u975e\u7cbe\u786e\u56fe\uff09\uff1a\n\n\n\n\n\n\u5728\u865a\u62df\u5730\u5740\u4e0a\uff0cdlmalloc\u4f1a\u4fdd\u8bc1\u7a7a\u95f2\u7684\u5185\u5b58\u5757\u5b58\u5728\u201c\u5b64\u5c9b\u6548\u5e94\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4efb\u4e00\u5757\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u524d\u540e\u5fc5\u5b9a\u662f\u88ab\u4f7f\u7528\u7684\u5185\u5b58\u5757\u3002\u56e0\u4e3a\u5728free\u6216\u8005\u5176\u4ed6\u4efb\u4f55\u65f6\u5019\uff0cdlmalloc\u603b\u662f\u4f1a\u5408\u5e76\u7a7a\u95f2\u7684\u5185\u5b58\u5757\u3002\n\n\n\u5bf9 \u4e8echunk\uff0c\u6839\u636e\u5176\u5927\u5c0f\uff0c\u5206\u4e3a\u5927\u5185\u5b58\u548c\u5c0f\u5185\u5b58\u3002\u5c0f\u5185\u5b58\u753132\u4e2a\u53cc\u5411\u94fe\u8868\u901a\u8fc7\u5206\u7bb1\uff08\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u5bf9\u5e94\u4e00\u4e2a\u5927\u5c0f\uff0c\u6bcf\u4e2a\u7bb1\u5b50\u4e2d\u5b58\u653e\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff09\u8fdb\u884c\u7ba1\u7406\uff0c\u800c\u5927 \u5185\u5b58\u7edf\u4e00\u7531bitwise tries\u6811\u901a\u8fc7\u5206\u7bb1\uff08\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u5bf9\u5e94\u4e00\u4e2a\u5185\u5b58\u8303\u56f4\uff0c\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u4e2d\u5b58\u653e\u4e00\u68f5\u6811\uff0c\u6bcf\u4e00\u68f5\u6811\u4e2d\u82e5\u6709\u7b49\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u7531\u53cc\u5411\u94fe\u8868\u7ba1\u7406\uff09 \u8fdb\u884c\u7ba1\u7406\u3002\n\n\n\u6bcf\u4e00\u4e2achunk\u7684\u5927\u5c0f\u5fc5\u987b\u4e3a8byte\u7684\u6574\u6570\u500d\u3002\u6240\u4ee5\u5728\u2019size of chunk\u2019 \u57df\u7684\u4f4e\u4e09\u4f4d\u5b58\u653e\u4e86\u8be5chunk\u5c5e\u6027\u7684\u6807\u5fd7\u4f4d\u3002\n\n\nP (PINUSE_BIT) \u4f4d, \u4fdd \u5b58\u5728\u5185\u5b58\u5757\u5927\u5c0f(\u4e00\u822c\u662f\u53cc\u5b57\u8282\u7684\u500d\u6570)\u7684\u672a\u4f7f\u7528\u7684\u4f4e\u4f4d, \u662f\u4e00\u4e2a\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u662f\u5426\u88ab\u4f7f\u7528\u7684bit\u4f4d.\u5982\u679c\u8fd9\u4e2abit\u4f4d\u88ab\u6e05\u7406\u4e86,\u90a3\u4e48\u5728\u5f53\u524d\u5185\u5b58\u5757 \u4e4b \u524d\u7684\u4e00\u4e2a\u5b57 \u5927\u5c0f\u6570\u636e\u4fdd\u5b58\u7740\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u7528\u4e8e\u5bfb\u627e\u524d\u4e00\u4e2a\u5185\u5b58\u5757.\u800c \u7b2c\u4e00\u4e2a\u5185\u5b58\u5757\u8fd9\u4e2abit\u4f4d\u603b\u662f\u88ab\u7f6e\u4e0a\u7684,\u9632\u6b62\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u5185\u5b58\u533a\u57df.\u5982\u679c\u67d0\u4e2a \u5185 \u5b58\u5757\u7684 pinuse\u88ab\u8bbe\u7f6e\u4e86,\u4f60\u5c31\u65e0\u6cd5\u51b3\u5b9a\u4e0a\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u5e76\u4e14\u5982\u679c\u4f60\u771f\u7684\u5c1d \u8bd5\u8fd9 \u4e48\u505a\u4e86,\u6709\u53ef\u80fd\u5185\u5b58\u8bbf\u95ee\u51fa\u9519.\n\n\nC (CINUSE_BIT) bit\u4f4d, \u4fdd\u5b58\u5728\u5185\u5b58\u5757\u7684\u7b2c\u4e8c\u4f4e\u7684bit\u4f4d,\u5197\u4f59\u5730\u8bb0\u5f55\u7740\u5f53\u524d\u5757\u662f \u5426\u88ab\u4f7f\u7528\u4e86(\u9664\u975e\u5f53\u524d\u5185\u5b58\u5757\u662f\u88ab\u6620\u5c04\u7684).\u8fd9\u4e2a\u5197\u4f59\u4fe1\u606f\u7528\u4e8e\u5728free\u548crealloc\u64cd \u4f5c\u65f6\u7684\u68c0\u67e5,\u5e76\u4e14\u51cf\u5c11\u5728\u6267\u884cfree\u548c\u5408\u5e76\u5185\u5b58\u5757\u65f6\u7684\u95f4\u63a5\u64cd\u4f5c.\n\n\n\u4efb\u4f55\u65b0\u5206\u914d\u7684\u5185\u5b58\u5757\u5fc5\u987b\u90fd\u8bbe\u7f6e\u4e86cinuse\u548cpinuse.\u8fd9\u610f\u5473\u7740,\u4efb\u4f55\u5206\u914d\u4e86\u7684\u5185 \u5b58\u5757\u7684\u8fb9\u754c\u8981\u4e48\u662f\u4e00\u4e2a\u5148\u524d\u5206\u914d\u5e76\u4e14\u4ecd\u7136\u5728\u4f7f\u7528(in-use)\u7684\u5185 \u5b58\u5757,\u8981\u4e48\u662f\u5b83\u81ea \u5df1\u7684\u5927\u5185\u5b58\u533a\u57df(segment)\u7684\u5730\u5740.\u8fd9\u6837\u786e\u4fdd\u6240\u6709\u7684\u5185\u5b58\u7533\u8bf7(allocations)\u90fd\u662f\u4ece\u4efb\u4f55\u80fd\u627e\u5230\u7684\u5185\u5b58\u5757\u7684\u201c\u6700\u4f4e\u201d\u90e8\u5206 \u83b7\u53d6.\u8fdb\u4e00\u6b65\u5730\u8bf4,\u4e0d\u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u7a7a\u95f2\u5185 \u5b58\u5757\u5728\u7269\u7406\u4e0a\u7d27\u90bb\u7740\u53e6 \u4e00\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757,\u6240\u4ee5\u6bcf\u4e00\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757\u88ab\u8bc1\u5b9e\u5728\u4f7f\u7528 (inuse)\u7684\u5185\u5b58\u5757\u6216\u8005\u5185\u5b58\u5c3e \u90e8\u4e4b\u524d\u548c\u4e4b\u540e.\n\n\n\u6ce8\u610f: \u5f53\u524d\u5757\u7684 \u2019foot\u2019\u5b9e\u9645\u4e0a\u4ee3\u8868\u7740\u4e0b\u4e00\u4e2a\u5185\u5b58\u5757\u7684prev_foot.\u8fd9\u4f7f\u5bf9\u9f50\u7b49\u64cd \u4f5c\u5904\u7406\u53d8\u5f97\u5bb9\u6613\u4f46\u4f1a\u4f7f\u4eba\u5728\u6269\u5c55\u6216\u7ef4\u62a4\u8fd9\u4efd\u4ee3\u7801\u65f6\u611f\u5230\u56f0\u60d1.\n\n\n\u4ee5\u4e0b\u662f\u5bf9\u7279\u6b8a\u7684\u5185\u5b58\u5757\u7684\u8bf4\u660e:\n\n\n\n\n\u7279 \u6b8a\u7684\u5185\u5b58\u5757\u2019top\u2019\u662f\u6700\u9876\u4e0a\u7684\u53ef\u7528\u5185\u5b58\u5757(i.e., \u7d27\u90bb\u7740\u53ef\u7528\u5185\u5b58\u7684\u8fb9\u754c). \u8fd9\u5757\u5185\u5b58\u5757\u4f1a\u88ab\u7279\u6b8a\u5bf9\u5f85. Top \u5185\u5b58\u5757\u4e0d\u4f1a\u88ab\u5305\u542b\u5728\u4efb\u4f55\u7684\u5185\u5b58\u5206 \u7c7b\u7bb1\u91cc, \u53ea\u6709\u5728\u6ca1\u6709\u4efb\u4f55\u5176\u4ed6\u5185\u5b58\u5757\u53ef\u4f7f\u7528\u65f6,\u624d\u88ab\u4f7f\u7528,\u5e76\u4e14\u5728\u5b83\u975e\u5e38\u5927\u65f6(\u67e5\u770b M_TRIM_THRESHOLD) \u4f1a\u88ab\u91ca\u653e\u4e00\u90e8\u5206\u56de\u7cfb\u7edf.\u5728\u5b9e\u9645 \u4e0a,top\u5185\u5b58\u5757\u4e00\u822c\u88ab\u8ba4 \u4e3a\u662f\u6bd4\u5176\u4ed6\u6240\u6709\u7684\u5185\u5b58\u5757\u90fd\u5927.Top\u5185\u5b58\u5757\u4ece\u6765\u4e0d\u4f1a\u66f4\u65b0\u5b83\u7684\u5c3e\u90e8\u6570\u636e\u533a\u57df\u56e0 \u4e3a\u6839\u672c\u6ca1\u6709\u5185\u5b58\u5757\u4f1a\u5728\u7d22\u5f15\u4e0a\u7d27\u8ddf\u5176\u540e.\u4f46\u662f,\u7a7a\u95f4 \u8fd8\u662f\u4f1a\u5206\u914d\u7ed9\u5b83 (TOP_FOOT_SIZE) \u7528\u6237\u505a\u5185\u5b58\u5757\u7684\u62c6\u5206\u548c\u5408\u5e76,\u5f53\u7a7a\u95f4\u9700\u8981\u6269\u5c55\u65f6.\n\n\ndv chunk \u662f\u4fdd\u5b58\u4e86\u6700\u8fd1\u88ab\u4f7f\u7528\u5e76\u5207\u5272\u8fc7\u7684\u5185\u5b58\u5757\uff0c\u4fdd\u5b58\u5728\u5168\u5c40\u7684gm\u4e2d\u3002\u5b83\u4e0d\u5f52\u5c5e\u5230\u53cc\u5411\u94fe\u8868\u6216\u8005\u6811\u4e2d\u7ba1\u7406\u3002\u4f46\u5f53\u5b83\u88ab\u66ff\u6362\u65f6\uff0c\u4e5f\u4f1a\u52a0\u5165\u5185\u5b58\u7ba1\u7406\u4e2d\u3002\n\n\nBitwise trie \u6811, \u5b9e\u9645\u4e0a\u662f\u7ed3\u5408\u4e86\u4e8c\u53c9\u6811\u548ctrie\u6811(\u53c8\u53eb\u5b57\u5178\u6811, \u524d\u7f00\u6570).\u4e8c\u53c9\u6811\u53ea\u6709\u5de6\u53f3\u5b50\u6811. Trie\u6811\u662f\u4e00\u79cd\u6709\u5e8f\u6811,\u7528\u4e8e\u4fdd\u5b58\u5173\u8054\u6570\u7ec4,\u7c7b\u4f3c hash table, \u6709key \u548c value \u7ed3\u6784. \u5982\u4e0b\u56fe.key \u5b9e\u9645\u4e0a\u5c31\u662f\u5230\u8fbevalue\u7684\u8def\u5f84.\u800cbitwise trie, \u5b83\u662f\u5c06 key\u8bbe\u7f6e\u4e3a0/1, \u6240\u4ee5, \u662f\u4e00\u68f5\u4e8c\u53c9\u6811.\u5728dlmalloc\u7684bitwise trie tree\u4e2d, 0 \u4ee3\u8868\u8fdb\u5165\u5de6\u5b50\u6811, 1 \u4ee3\u8868\u8fdb\u5165\u53f3\u5b50 \u6811. \u800ckey\u7684\u957f\u5ea6\u5bf9\u5e94\u8def\u5f84\u7684\u6df1\u5ea6.\u53c2\u8003 [treebins\u548c\u6811\u7ba1\u7406\u56fe\u89e3] \u7684\u56fe,\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u8981\u67e5\u627e\u7684\u662f512\u5bf9\u5e94\u7684\u7ed3\u70b9, \u5219\u5c06520\u5bf9 \u5e94\u4e8c\u8fdb\u5236\u7801\u662f1000001000, \u5bf9\u5e94\u7684\u7bb1\u5b50\u53f7\u662f2\u53f7,\u5219\u5176\u8868\u793a\u7684\u5185\u5b58\u8303\u56f4\u4e3a256, \u7279\u5f81\u7801\u957f\u5ea6\u4e3a8, \u4e5f\u5c31\u662f00001000.\u8003\u8651\u5230, \u6240\u6709\u8bf7 \u6c42\u5927\u5c0f\u4e3a8byte\u500d\u6570,\u6240\u4ee5, \u5b9e\u9645\u7279\u5f81\u7801\u4e3a00001, \u6811\u6df1\u4e3a5, \u524d4\u5c42\u4e3a\u5de6\u5b50\u6811,\u7b2c\u4e94\u5c42\u4e3a\u53f3\u5b50\u6811.\u4f46\u521a\u624d\u63cf\u8ff0\u7684\u662ftrie\u6811\u548c bitwise trie \u6811, \u4e0d\u662fdlmalloc\u4f7f\u7528\u7684\u6811.\n\n\n\n\n\n\n\u975eMSPACE\u4ee3\u7801\u903b\u8f91\u5206\u6790\n\n\nstruct\n \nmalloc_chunk\n \n{\n\n\nsize_t\n               \nprev_foot\n;\n  \n/* \u5982\u679c\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7a7a\u95f2,\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f */\n\n\nsize_t\n               \nhead\n;\n       \n/* \u5927\u5c0f\u548cinuse bit\u4f4d*/\n\n\nstruct\n \nmalloc_chunk\n*\n \nfd\n;\n         \n/* \u5982\u679c\u662f\u7a7a\u95f2\u5185\u5b58\u5757,\u6307\u5411\u53cc\u5411\u94fe\u8868*/\n\n\nstruct\n \nmalloc_chunk\n*\n \nbk\n;\n\n\n};\n\n\n\ntypedef\n \nstruct\n \nmalloc_chunk\n  \nmchunk\n;\n\n\ntypedef\n \nstruct\n \nmalloc_chunk\n*\n \nmchunkptr\n;\n\n\ntypedef\n \nstruct\n \nmalloc_chunk\n*\n \nsbinptr\n;\n  \n/* \u5185\u5b58\u5757\u5206\u7c7b\u7bb1\u7684\u7c7b\u578b */\n\ufeff\u200b\n\n\n\n\n\n\nhead \u57df\u4e2d\u53d8\u91cf\u7684\u8bf4\u660e:\n\n\nPINUSE_BIT \u5728\u524d\u4e00\u4e2a\u76f8\u90bb\u7684\u5185\u5b58\u5757\u88ab\u4f7f\u7528\u65f6,\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u88ab\u7f6e\u4e0a. CINUSE_BIT \u5728\u5f53\u524d\u5185\u5b58\u5757\u88ab\u4f7f\u7528\u65f6,\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u88ab\u7f6e\u4e0a. FLAG4_BIT \u5728\u5f53\u524d\u7248\u672c\u7684dlmalloc\u4e2d\u672a\u88ab\u4f7f\u7528\n\n\n\n\u5982 \u4f55\u505a\u5230\u5728head\u4e2d\u65e2\u5b58\u653e\u5757\u5927\u5c0f\u53c8\u5b58\u653e\u6807\u5fd7\u4f4d\u7684\u5462?\u9996\u5148\u63d0\u5230\u4e00\u70b9\u662f,\u6240\u6709\u7684\u5757\u7684 \u5927\u5c0f\u90fd\u662f\u6309\u6700\u5c118bit\u5bf9\u9f50\u7684,\u6362\u53e5\u8bdd\u8bf4,\u8868\u793a\u5927\u5c0f\u7684\u6570\u5b57,\u4f4e3\u4f4d\u5fc5\u5b9a\u4e3a 0,\u6240\u4ee5\u5c31\u6709 \u6548\u5730\u5229\u7528\u4e86\u4f4e3\u4f4d\u5b58\u653e\u6807\u5fd7\u4f4d.\u6240\u4ee5,\u83b7\u53d6chunk\u7684\u5927\u5c0f\u7528\u4e0b\u9762\u7684\u5b8f,\u5c06head\u7684\u4f4e\u4e09 \u4f4d\u6e05\u62100,\u53d6\u51fa.\n\n\n\n#define chunksize(p)        ((p)-\nhead \n ~(FLAG_BITS))\n\n\n\n\n\n\n\u4e0b\u9762\u4ecb\u7ecd\u4e0bdlmalloc\u7ef4\u62a4\u7684\u4e00\u4e2a\u5168\u5c40\u6570\u636e\u7ed3\u6784.\n\n\n2579\n \nstruct\n \nmalloc_state\n \n{\n \n\n2580\n   \nbinmap_t\n   \nsmallmap\n;\n  \n// 32bit, \u5c0f\u5185\u5b58\u7bb1\u5b50\u7684\u4f4d\u56fe.\n\n\n2581\n   \nbinmap_t\n   \ntreemap\n;\n    \n// 32bit, \u5927\u5185\u5b58\u7bb1\u5b50\u7684\u4f4d\u56fe\n\n\n2582\n   \nsize_t\n     \ndvsize\n;\n           \n//  dv chunk \u7684\u5927\u5c0f\n\n\n2583\n   \nsize_t\n     \ntopsize\n;\n          \n//  top chunk\u7684\u5927\u5c0f\n\n\n2584\n   \nchar\n*\n      \nleast_addr\n;\n    \n//  dlmalloc\u7ba1\u7406\u7684\u5185\u5b58\u7684\u6700\u5c0f\u5730\u5740,\u4e5f\u5c31\u662f\u6700\u5c0f\u7684segment \u57fa\u5730\u5740.\n\n\n2585\n   \nmchunkptr\n  \ndv\n;\n            \n// dv chunk. \u6700\u8fd1\u88ab\u5206\u5272\u4f7f\u7528\u7684chunk\n\n\n2586\n   \nmchunkptr\n  \ntop\n;\n           \n// top chunk. \u9876\u90e8,\u9760\u8fd1\u6709\u6548\u5185\u5b58\u7684chunk,\u8be6\u89c1\u603b\u7ed3\u56fe.\n\n\n2587\n   \nsize_t\n     \ntrim_check\n;\n    \n// \u68c0\u67e5top chunk\u5927\u5c0f\u662f\u5426\u8d85\u7684\u51fd\u6570.\n\n\n2588\n   \nsize_t\n     \nrelease_checks\n;\n  \n\n2589\n   \nsize_t\n     \nmagic\n;\n \n\n2590\n   \nmchunkptr\n  \nsmallbins\n[(\nNSMALLBINS\n+\n1\n)\n*\n2\n];\n   \n// 32\u4e2a\u94fe\u8868\u5934\n\n\n2591\n   \ntbinptr\n    \ntreebins\n[\nNTREEBINS\n];\n           \n// 32\u68f5\u6811\n\n\n2592\n   \nsize_t\n     \nfootprint\n;\n \n\n2593\n   \nsize_t\n     \nmax_footprint\n;\n \n\n2594\n   \nsize_t\n     \nfootprint_limit\n;\n \n/* zero means no limit */\n \n\n2595\n   \nflag_t\n     \nmflags\n;\n \n\n2596\n \n#\nif\n \nUSE_LOCKS\n \n\n2597\n   \nMLOCK_T\n    \nmutex\n;\n     \n/* locate lock among fields that rarely change */\n \n\n2598\n \n#\nendif\n \n/* USE_LOCKS */\n \n\n2599\n   \nmsegment\n   \nseg\n;\n        \n//  segment\u94fe\u8868.\n\n\n2600\n   \nvoid\n*\n      \nextp\n;\n      \n/* Unused but available for extensions */\n \n\n2601\n   \nsize_t\n     \nexts\n;\n \n\n2602\n \n};\n\ufeff\u200b\n\n\n\n\n\n\nmchunkptr  smallbins[(NSMALLBINS+1)*2];  \n\n\n\n\n\n\u8fd9\u91cc\u4f1a\u6709\u4e2a\u7591\u95ee,\u7406\u8bba\u4e0a, 32\u4e2a\u94fe\u8868\u5934,\u6211\u4eec\u4f1a\u4f7f\u7528\nstruct malloc_chunk  smallbins[NSMALLBINS];\n  \u4f46\u8fd9\u91cc\u4e0d\u4f7f\u7528\u7684\u539f\u56e0\u662f, \u5bf9\u4e8e\u94fe\u8868\u5934\u800c\u8a00,  \nmalloc_chunk\n\u7684 \nprev_foot\n\u548c\nhead\n\u4e24\u4e2a\u57df\u662f\u6ca1\u6709\u88ab\u4f7f\u7528\u7684,\u5b9e\u9645\u9700\u8981\u7684\u5927\u5c0f\u662f2\u4e2a\u6307\u9488\u5927 \u5c0f.\u6240\u4ee5,dlmalloc\u4f7f\u7528\u4e86\u8986\u76d6\u7684\u65b9\u6cd5. \u524d\u4e00\u4e2a malloc_state \u7684fb/bk \u8e29\u4e86\u540e\u4e00\u4e2a\u7684 malloc_state\u7684 prev_foot/head.\u6240\u4ee5\u5927\u5c0f\u5e94\u8be5\u4e3a 32 * 8 + 8, \u4e5f\u5c31\u662f33 * 2 \u4e2a\u6307\u9488\u5927\u5c0f.\n\n\n\n\n\u88ab\u8986\u76d6\u7684\u6570\u636e\u7ed3\u6784\n\n\n\u5f53\u5185\u5b58\u5757\u672a\u88ab\u4f7f\u7528\u65f6,\u4ed6\u4eec\u4f5c\u4e3a\u5217\u8868\u6216\u8005\u6811\u7684\u8282\u70b9.\n\n\n\u5c0f\u5185\u5b58(\u201cSmall\u201d) \u5757\u5b58\u50a8\u5728\u73af\u5f62\u53cc\u5411\u94fe\u8868\u4e2d,\u770b\u8d77\u6765\u50cf\u5982\u4e0b\u8fd9\u6837.\n\n\n\n\n\u800c \u5927 \u7684\u5185\u5b58\u5757\u4f7f\u7528\u5185\u5b58\u5757\u5927\u5c0f\u4e3a\u5173\u952e\u5b57\u7684bitwise digital tree (\u53c8\u53ebaka tree).\u56e0\u4e3amalloc_tree_trunks\u53ea\u662f \u7528\u4e8e\u5927\u5c0f\u5927\u4e8e256bytes\u7684\u7a7a\u95f2\u5185\u5b58\u5757,\u4ed6\u4eec \u7684\u5927\u5c0f\u4e0d\u4f1a\u53d7\u5230\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u7684\u9650\u5236.\u6bcf \u4e00\u4e2a\u8282\u70b9\u7684\u7ed3\u6784\u770b\u8d77\u6765\u50cf\u5982\u4e0b\u8fd9 \u6837.\n\n\n\n\n\u6bcf\u4e00\u68f5\u6811\u90fd\u62e5\u6709\u552f\u4e00\u7684\u5185\u5b58\u5757\u5927\u5c0f.\u800c\u5177\u6709\u540c\u6837\u5927\u5c0f\u7684\u5185\u5b58\u5757\u4f1a\u88ab\u5b89\u6392\u5728\u53cc\u5411\u94fe \u8868\u91cc,\u4e0e\u6700\u8001\u7684\u5185\u5b58\u5757\u4e00\u8d77(\u6307,\u4ee5FIFO\u7684\u89c4\u5219,\u4e0b\u4e00\u4e2a\u8981\u88ab\u4f7f\u7528\u7684\u5185\u5b58\u5757).\u5982\u679c\u4e00 \u4e2a\u5177\u6709\u540c\u6837\u5927\u5c0f\u7684\u5185\u5b58\u5757\u88ab\u63d2\u5165,\u5b83\u5c31\u4f1a\u7528\u7c7b\u4f3c\u5c0f\u5185\u5b58\u7684fb/bk\u7684\u6307\u9488\u4e00\u6837\u7684\u65b9\u5f0f,\u4ece \u539f\u6709\u7684\u8282\u70b9\u79fb\u9664.\n\n\n\n\u6bcf \u4e00 \u68f5\u6811\u5305\u542b\u5927\u5c0f\u4e3a2\u7684\u4e58\u65b9\u8303\u56f4\u7684\u5185\u5b58\u5757(\u6700\u5c0f\u4e3a0x100 \n= x \n 0x180),\u5728\u6811 \u7684\u6bcf\u4e00\u5c42\u90fd\u4f1a\u88ab\u5206\u6210\u4e00\u534a,\u5373\u5c0f\u7684\u4e00\u534a (0x100 \n= x \n 0x140)\u4f5c\u4e3a\u5de6\u5b50\u6811,\u5927\u7684\u4e00 \u534a\u4f5c\u4e3a\u53f3\u5b50\u6811(0x140 \n= x \n 0x180).\n\n\n\n\u901a\u8fc7\u4f7f\u7528\u8fd9\u79cd\u89c4\u5219,\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u5305\u542b\u7684\u5185\u5b58\u5757\u5927\u5c0f\u90fd\u5c0f\u96e8\u5176\u53f3\u5b50\u6811.\n\n\n\nSmallbins\u548c\u53cc\u5411\u94fe\u8868\u7ba1\u7406\u5c0f\u5185\u5b58\u56fe\u89e3\u3002\n\n\n\n\nTreebins\u548c\u6811\u7ba1\u7406\u5927\u5185\u5b58\u7684\u56fe\u89e3\uff1a\n\n\n\n\ndlmalloc\u4ee3\u7801\u5206\u6790\n\n\ndlmalloc \u5bf9\u5c0f\u5185\u5b58\u5206\u914d\u6709\u5982\u4e0b5\u4e2a\u89c4\u5219(\u6309\u4f18\u5148\u7ea7\u987a\u5e8f)\uff1a \n\n\n\n\n\u5982\u679c\u4e0e\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u5339\u914d\u7684\u7bb1\u5b50\u5b58\u5728\u7a7a\u95f2,\u5219\u4f7f\u7528\u5f53\u524d\u7bb1\u5b50\uff0c\u5426\u5219\u4f7f\u7528\u4e34\u8fd1\u7684 \u7bb1\u5b50\u3002\u5728\u80fd\u4e0d\u5206\u5272\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\u5c3d\u91cf\u4e0d\u5206\u5272\u5185\u5b58\u3002 \n\n\n\u5982\u679cdv chunk\u8db3\u591f\u5927\uff0c\u90a3\u4e48\u4f7f\u7528dv chunk\u3002 dv chunk\u662f\u6307\u6700\u8fd1\u4e00\u6b21\u5c0f\u5185\u5b58 \u7533\u8bf7\u65f6\u4f7f\u7528\u7684\u5185\u5b58\u5757\u3002 \u8fd9\u4e2a\u89c4\u5219\u662f\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u5206\u914d\u7684\u5185\u5b58\u8fde\u7eed\u3002 \n\n\n\u5728smallbin\u548ctreebin\u4e2d\u5bfb\u627e\u53ef\u4ee5\u4f7f\u7528\u7684\u5185\u5b58\u5757\uff0c\u5e76\u5206\u5272\u3002\u5c06\u5269\u4e0b\u7684\u5185\u5b58 \u5757\u4fdd\u5b58\u5230dv chunk\u4e2d\u3002 \n\n\n\u5982\u679ctop chunk \u8db3\u591f\u5927\uff0c\u5219\u4f7f\u7528top chunk\n\n\n\u5982\u679c\u8bf7\u6c42\u5185\u5b58\u5b9e\u5728\u592a\u5927\uff0c\u5219\u4f7f\u7528\u7cfb\u7edf\u5206\u914d\u5185\u5b58\u3002\n\n\n\n\n\n\u5927\u5185\u5b58\u5206\u914d\u7684\u89c4\u5219\uff1a\n\n\n\n\n\u5728treebin\u4e2d\u627e\u5230\u6700\u9002\u5408\u7684\u6700\u5c0f\u5185\u5b58\uff0c\u5982\u679c\u5b83\u6bd4dv chunk\u7684\u66f4\u5408\u9002\uff0c\u5c31\u4f7f\u7528\u5b83\uff0c \u5982\u679c\u6709\u9700\u8981\u5c31\u5206\u5272\u5b83\u3002 \n\n\n\u5982\u679cdv chunk \u6bd4\u5176\u4ed6\u6240\u6709\u7684\u66f4\u5408\u9002\uff0c\u4f7f\u7528dv chunk\u3002 \n\n\n\u5982\u679ctop \u8db3\u591f\u5927\uff0c\u4f7f\u7528top chunk\u3002 \n\n\n\u5982\u679c\u8bf7\u6c42\u7684\u5927\u5c0f \n= mmap threshold, \u5219\u4f7f\u7528\u7cfb\u7edf\u7684mmap\u3002\n\n\n\u76f4\u63a5\u4ece\u7cfb\u7edf\u5206\u914d\u5185\u5b58\u5e76\u4f7f\u7528\u3002\n\n\n\n\n\n\n\u5c0f\u5185\u5b58\u89c4\u5219\u4e00\n\n\n\n\n4597\n     \nif\n \n(\nbytes\n \n=\n \nMAX_SMALL_REQUEST\n)\n \n{\n\n\n\n\n\n\n// MAX_SMALL_REQUEST \u5b9e\u73b0\n2577 #define MAX_SMALL_REQUEST (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)\n\n\n\n\n\n\u8fd9\u91ccbytes\u4e3a\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f, \nMAX_SMALL_REQUEST\n\u5c31\u662f\u4e4b\u524d\u63d0\u5230\u8fc7\u7684\u6700\u5927\u7684\u5c0f\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u5c31\u662f256byte,\u5373,256byte\u4ee5\u4e0b\u7684\u6240\u6709\u5185\u5b58\u90fd\u662f\u5728\u53cc\u5411\u94fe\u8868\u4e2d\u5339\u914d.\n\n\n\n4600\n       \nnb\n \n=\n \n(\nbytes\n \n \nMIN_REQUEST\n)\n?\n \nMIN_CHUNK_SIZE\n \n:\n \npad_request\n(\nbytes\n);\n\n\n\n\n\n\n2225\n \n#\ndefine\n \nMIN_REQUEST\n         \n(\nMIN_CHUNK_SIZE\n \n-\n \nCHUNK_OVERHEAD\n \n-\n \nSIZE_T_ONE\n)\n\n\n\n2228\n \n#\ndefine\n \npad_request\n(\nreq\n)\n \\\n\n2229\n    \n(((\nreq\n)\n \n+\n \nCHUNK_OVERHEAD\n \n+\n \nCHUNK_ALIGN_MASK\n)\n \n \n~\nCHUNK_ALIGN_MASK\n)\n\n\n\n\n\n\n\u8fd9\u91ccnb\u5c31\u662f\u52a0\u4e0a\u534f\u8bae\u6570\u636e\u540e\u7684\u5b9e\u9645dlmalloc\u4f1a\u5206\u914d\u7684\u5185\u5b58\u5757\u5927\u5c0f.\u524d\u6587\u7b14\u8005\u63d0\u5230\u8fc7,\u5c0f\u5185\u5b58\u5757\u7684\u6700\u5c0f\u503c\u4e3a8byte,\u6240\u4ee5,\u4e0d\u8bba\u7533\u8bf7\u7684\u5185\u5b58\u591a\u5c0f,\u90fd\u4f7f\u7528\u6700\u5c0f\u503c.\n\n\n\n4601      idx = small_index(nb);\n\n\n\n\n\n2572\n \n#\ndefine\n \nSMALLBIN_SHIFT\n    \n(\n3U\n)\n\n\n\n2825\n \n#\ndefine\n \nsmall_index\n(\ns\n)\n      \n(\nbindex_t\n)((\ns\n)\n  \n \nSMALLBIN_SHIFT\n)\n\n\n\n\n\n\n\u8fd9\u91ccidx\u5f97\u5230\u7684\u662f\u8be5\u5185\u5b58\u5757\u5bf9\u5e94\u7684smallbin\u7bb1\u5b50\u7684\u7bb1\u53f7.\u524d\u6587\u5728\u63d0\u5230head\u65f6,\u63d0\u5230\u8fc7,\u5c0f\u5185\u5b58\u5757\u7684\u5927\u5c0f\u4e3a8byte\u7684\u500d\u6570,\u6240\u4ee5,\u53f3\u79fb3\u4f4d\u6765\u5b9a\u4f4d\u5bf9\u5e94\u7bb1\u5b50\u7684\u7bb1\u53f7.\n\n\n\n4602\n       \nsmallbits\n \n=\n \ngm\n-\nsmallmap\n \n \nidx\n;\n\n\n\n\n\n\nsmallmap \u662f\u5404\u4e2a\u7bb1\u5b50\u7684\u4f4d\u56fe,32bit,\u5bf9\u5e9432\u4e2a\u7bb1\u5b50,\u6bcf\u4e00\u4f4d\u4e3a1\u8868\u793a\u8be5\u7bb1\u53f7\u4e2d\u6709\u5bf9\n\u5e94\u5927\u5c0f\u7684\u5185\u5b58\u5757,\u4e3a0\u5219\u8868\u793a\u6ca1\u6709.\u8be5\u884c\u4ee3\u7801\u662f\u628a\u5bf9\u5e94\u7bb1\u53f7\u7684\u6bd4\u7279\u4f4d\u79fb\u5230\u6700\u53f3\u4fa7.\n\n\n\n4604\n       \nif\n \n((\nsmallbits\n \n \n0x3U\n)\n \n!=\n \n0\n)\n \n{\n\n\n4605\n         \nmchunkptr\n \nb\n,\n \np\n;\n\n\n4606\n         \nidx\n \n+=\n \n~\nsmallbits\n \n \n1\n;\n       \n/* Uses next bin if idx empty */\n\n\n4607\n         \nb\n \n=\n \nsmallbin_at\n(\ngm\n,\n \nidx\n);\n\n\n\n\n\n\n\u8fd9\u91cc 0x3U \u4f4e8\u4f4d\u5c31\u662f 0000 0011. \u6240\u4ee5,smallbits\n0x3U \u4e3a\u771f\u7684\u6761\u4ef6\u5982\u4e0b:(\u4e0a\u6587\u63d0\u5230,smallbits\u7684\u6700\u53f3\u4f4d\u8868\u793aidx\u7bb1\u53f7\u662f\u5426\u6709\u7a7a\u95f2\u5757)\n\n\n\n\n\u4f4e2\u4f4d\u4e3a 11. idx\u6709\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u6709\u7a7a\u95f2\u5757.\n\n\n\u4f4e2\u4f4d\u4e3a 10. idx\u65e0\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u6709\u7a7a\u95f2\u5757.\n\n\n\u4f4e2\u4f4d\u4e3a 01. idx\u6709\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u65e0\u7a7a\u95f2\u5757.\n\n\n\n\n4606\u884c\u662f\u5728\u91cd\u65b0\u5b9a\u4f4d\u5230\u771f\u6b63\u6709\u7a7a\u95f2\u5757\u7684\u7bb1\u53f7. ~smallbits \n 1 \u5728\u5f53\u524d\u7bb1\u5b50\u4e3a0\u7684\n\u60c5\u51b5\u4e0b,\u503c\u4e3a1;\u5f53\u524d\u7bb1\u5b50\u4e3a1\u7684\u60c5\u51b5\u4e0b,\u503c\u4e3a0.\u6240\u4ee5\u662f\u6709\u9650\u662f\u7528\u6b63\u597d\u6ee1\u8db3\u5927\u5c0f\u7684\u7bb1\n\u5b50.\n\n\n\n2831 #define smallbin_at(M, i)\n((sbinptr)((void*)\n((M)-\nsmallbins[(i)\n1])))\n\n\n\n\n\ni \u5c31\u662f idx, \u800cM\u5219\u662fgm(\n\u9700\u8981\u5728\u4e0a\u6587\u9884\u5148\u63cf\u8ff0gm\u7ed3\u6784\u4f53\u6210\u5458\u4f5c\u7528\n).smallbins(\n\u9700\u5728\u4e0a\u6587\u63cf\u8ff0\n)\u5c31\u662f\u53cc\u5411\u94fe\u8868\u6570\u7ec4,\u4e5f\u5c31\u662f\u5bf9\u5e94\u7bb1\u53f7\u5185\u90e8\u7684\u7a7a\u95f2\u5757\u94fe\u8868\u7684\u9996\u5730\u5740.\n\n\n\u503c\u5f97\u9ad8\u5174\u7684\u662f,\u6211\u4eec\u62ff\u5230\u94fe\u8868\u4e86,\u63a5\u4e0b\u6765\u5c31\u662f\u53d6\u51fa\u7a7a\u95f2\u5757,\u548c\u4e00\u4e9b\u6807\u5fd7\u4f4d\u7684\u5904\u7406\u4e86.\n\n\n\n4608        p = b-\nfd;\n4609        assert(chunksize(p) == small_index2size(idx));\n4610        unlink_first_small_chunk(gm, b, p, idx);\n4611        set_inuse_and_pinuse(gm, p, small_index2size(idx));\n4612        mem = chunk2mem(p);\n4613        check_malloced_chunk(gm, mem, nb);\n4614        goto postaction;\n\n\n\n\n\nfd\u57df\u662f\u524d\u4e00\u4e2a\u94fe\u8868\u8282\u70b9.\u800cB\u662f\u8868\u5934, \u4e5f\u5c31\u662f\u8bf4,\u6211\u4eec\u53d6\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20,\u53d6\u5230\u6211\u4eec\u9700\u8981\u7684\u5185\u5b58\u5757\u5730\u5740.\u8fd9\u4e2aassert\u5176\u5b9e\u5c31\u662f\u786e\u8ba4\u4e0b,\u5f53\u524d\u7684\u7bb1\u53f7\u7684\u5185\u5b58\u5757\u5927\u5c0f\u8ddf\u5f53\u524d\u5185\u5b58\u5757\u7684\u5927\u5c0f\u662f\u5426\u5339\u914d.\n\n\n\n\n3629#define unlink_first_small_chunk(M, B, P, I) {\\\n3630  mchunkptr F = P-\nfd;\\\n3631  assert(P != B);\\\n3632  assert(P != F);\\\n3633  assert(chunksize(P) == small_index2size(I));\\\n3634  if (B == F) {\\\n3635    clear_smallmap(M, I);\\\n3636  }\\\n3637  else if (RTCHECK(ok_address(M, F) \n F-\nbk == P)) {\\\n3638    F-\nbk = B;\\\n3639    B-\nfd = F;\\\n3640  }\\\n3641  else {\\\n3642    CORRUPTION_ERROR_ACTION(M);\\\n3643  }\\\n3644}\n\n\n\n\n\n2921#define clear_smallmap(M,i)     ((M)-\nsmallmap \n= ~idx2bit(i))\n\n\n\n\n\n\u8fd9\u91cc B P F\u7684\u5173\u7cfb\u662f F -\n P -\n B , \u6240\u4ee5,\u7406\u8bba\u4e0a, P \u4e0d\u7b49\u4e8eF \u4e5f\u4e0d\u7b49\u4e8eB,\u5982\n\u679c\u76f8\u7b49,\u5c31\u610f\u5473\u7740\u662f\u7a7a\u94fe\u8868(\u53ea\u6709\u8868\u5934).\u800c\u5982\u679cB == F,  \u610f\u5473\u7740\u8be5\u94fe\u8868\u4e2d\u53ea\u6709\u4e00\n\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757.\u53d6\u51fa\u8be5\u5185\u5b58\u5757\u4e4b\u540e,\u54b1\u4eec\u8981\u628a\u8be5\u7bb1\u5b50\u6807\u8bb0\u4e3a\u7a7a(3635, 2921).\u5f53\u7136,\n\u66f4\u591a\u7684\u60c5\u51b5\u662f\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9P.\n\n\n\n// 4611 \u884c\u51fd\u6570\u5b9e\u73b0\n\n3058#define set_inuse_and_pinuse(M,p,s)\\\n3059  ((p)-\nhead = (s|PINUSE_BIT|CINUSE_BIT),\\\n3060  ((mchunkptr)(((char*)(p)) + (s)))-\nhead |= PINUSE_BIT)\n\n\n\n\n\n\u8fd9\u5c31\u662f\u5728P \u7684head\u4e2d\u7f6e\u4e0aCINUSE\u4f4d\u548cP \u7684\u4e0b\u4e00\u5757\u5185\u5b58\u7684head\u4e2d\u8bbe\u7f6e\u4e0aPINUSE\u4f4d.\n\n\n\u6700\u540emem = chunk2mem(p);  \u5c31\u662f\u53d6\u51fa\u4f20\u9012\u4e2a\u7528\u6237\u7684\u6709\u6548\u5185\u5b58\u5730\u5740,.\ncheck_malloced_chunk(gm, mem, nb); \u662f\u8c03\u8bd5\u7528\u7684,\u68c0\u67e5\u8be5\u5206\u914d\u7684\u5185\u5b58\u5757\u7684\u5404\u4e2a\n\u5c5e\u6027\u662f\u5426\u6b63\u5e38.\n\n\n\u5230\u6b64,\u5c0f\u5185\u5b58\u7684,\u6b63\u597d\u7b26\u5408\u6216\u6b63\u597d\u4e34\u8fd1\u7bb1\u5b50\u6709\u7a7a\u95f2\u5757\u7684\u903b\u8f91\u5206\u6790\u5b8c\u6210,\u54b1\u4eec\u62ff\u5230\u4e86\n\u9700\u8981\u7684\u5185\u5b58.\n\n\n\u5c0f\u5185\u5b58\u89c4\u5219\u4e09\n\n\n\u4e0b\u9762,\u662f\u4e0a\u8ff0\u60c5\u51b5\u4e0d\u6ee1\u8db3,\u4e5f\u5c31\u662f\u5f53\u524d\u5185\u5b58\u8bf7\u6c42\u5bf9\u5e94\u7684\u7bb1\u53f7idx\u7684smallbits\u4f4e2\u4f4d\u4e3a 00 ,\u4e5f\u5c31\u662f\u8bf4,\u6ca1\u6709\u7a7a\u95f2\u5757.\n\n\n4617      else if (nb \n gm-\ndvsize) {\n4618        if (smallbits != 0) {\n\n\n\n\n\n(\ndvsize\u9700\u8981\u5728gm\u7684\u5206\u6790\u4e2d\u63cf\u8ff0\u6389\n)  smallbits != 0 \u610f\u5473\u7740,\u5728\u6bd4\u8bf7\u6c42\u7684\u5185\u5b58\u5757\u5927\u7684\u7bb1\u5b50\u4e2d,\u603b\u6709\u7a7a\u95f2\u5757\u5b58\u5728.\u6240\u4ee5\u63a5\u4e0b\u6765\u7684\u76ee\u7684\u662f\u627e\u5230\u6700\u5c0f\u7684\u7a7a\u95f2\u5757.\n\n\n4622          binmap_t leftbits = (smallbits \n idx) \n left_bits(idx2bit(idx));\n4623          binmap_t leastbit = least_bit(leftbits);\n4624          compute_bit2idx(leastbit, i);\n\n\n\n\n\n2917#define idx2bit(i)              ((binmap_t)(1) \n (i))\n\n2929#define least_bit(x)         ((x) \n -(x))\n\n2932#define left_bits(x)         ((x\n1) | -(x\n1))\n\n\n\n\n\n4622 \u884c \u4f4d\u4e0e\u7684\u53f3\u64cd\u4f5c\u6570\u662f\u4e00\u4e2a32bit\u7684\u6570\uff0c\u8be5\u6570\u7684\u4f4e\uff08idx+1\uff09\u4f4d\u4e3a0,\u5176\u4f59\u4f4d\u4e3a1;\u5de6\u64cd\u4f5c\u6570\u5c31\u662f\u5bf9\u5e94\u4f4eidx\u4f4d\u4e3a0,\u540c\u65f6\u4ee3\u7801\u903b\u8f91\u8d70\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\uff0c\u4f4e\uff08idx+2\uff09\u4e3a0\u3002\nleast_bit \u7684\u529f\u80fd\u662f\uff0c\u4fdd\u7559leftbits\u4e2d\u4ece\u53f3\u5f80\u5de6\u7684\u7b2c\u4e00\u4e2a\u4e3a1\u7684\u4f4d\uff0c\u5176\u4f59\u4f4d\u4e3a0. \u5219\u8be5leastbit\u5bf9\u5e94\u7684\u5c31\u662f\u7b26\u5408\u8bf7\u6c42\u7684\u6700\u5c0f\u5185\u5b58\u5757\u7684\u4f4d\u56fe\u3002compute_bit2idx \u662f\u5c06leastit\u4f4d\u56fe\u8f6c\u6362\u6210\u7bb1\u53f7\u3002 \u8fd9\u91cc i \u5c31\u662f\u83b7\u53d6\u5230\u7684\u7bb1\u53f7\u3002\n\n\n4625          b = smallbin_at(gm, i);\n4626          p = b-\nfd;\n4627          assert(chunksize(p) == small_index2size(i));\n4628          unlink_first_small_chunk(gm, b, p, i);\n\n\n\n\n\n\u62ff\u5230\u7bb1\u53f7\u4e4b\u540e\uff0c\u8fd9\u5757\u7684\u903b\u8f91\u4e0e\u4e0a\u6587\u89c4\u5219\u4e00\u7684\u903b\u8f91\u4e00\u6837\u3002\n\n\n4629          rsize = small_index2size(i) - nb;\n\n\n\n\n\n\u53d6\u51fa\u5f53\u524d\u7bb1\u5b50\u7684\u5185\u5b58\u5757\u5927\u5c0f\uff0c\u51cf\u53bb\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u5269\u4f59\u7684\u5185\u5b58\u5757\uff0c\u8fd9\u4e2a\u5269\u4f59\u5185\u5b58\u5757\u4f1a\u653e\u5230dv chunk\u4e2d\u3002\n\n\n4631          if (SIZE_T_SIZE != 4 \n rsize \n MIN_CHUNK_SIZE)\n4632            set_inuse_and_pinuse(gm, p, small_index2size(i));\n4633          else {\n4634            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);\n4635            r = chunk_plus_offset(p, nb);\n4636            set_size_and_pinuse_of_free_chunk(r, rsize);\n4637            replace_dv(gm, r, rsize);\n4638          }\n\n\n\n\n\n2269#define chunk_plus_offset(p, s)  ((mchunkptr)(((char*)(p)) + (s)))\n\n2284#define set_size_and_pinuse_of_free_chunk(p, s)\\\n2285  ((p)-\nhead = (s|PINUSE_BIT), set_foot(p, s))\n\n3063#define set_size_and_pinuse_of_inuse_chunk(M, p, s)\\\n3064  ((p)-\nhead = (s|PINUSE_BIT|CINUSE_BIT))\n\n3584#define insert_small_chunk(M, P, S) {\\\n3585  bindex_t I  = small_index(S);\\\n3586  mchunkptr B = smallbin_at(M, I);\\\n3587  mchunkptr F = B;\\\n3588  assert(S \n= MIN_CHUNK_SIZE);\\\n3589  if (!smallmap_is_marked(M, I))\\\n        // \u5982\u679c\u662f\u5bf9\u5e94\u7bb1\u53f7\u539f\u72b6\u6001\u4e3a0,\u5219\u7f6e1.\n3590    mark_smallmap(M, I);\\\n3591  else if (RTCHECK(ok_address(M, B-\nfd)))\\\n3592    F = B-\nfd;\\\n3593  else {\\\n3594    CORRUPTION_ERROR_ACTION(M);\\\n3595  }\\\n3596  B-\nfd = P;\\\n3597  F-\nbk = P;\\\n3598  P-\nfd = F;\\\n3599  P-\nbk = B;\\\n3600}\n\n3648#define replace_dv(M, P, S) {\\\n3649  size_t DVS = M-\ndvsize;\\\n3650  assert(is_small(DVS));\\\n3651  if (DVS != 0) {\\\n3652    mchunkptr DV = M-\ndv;\\\n3653    insert_small_chunk(M, DV, DVS);\\\n3654  }\\\n3655  M-\ndvsize = S;\\\n3656  M-\ndv = P;\\\n3657}\n\n\n\n\n\n\u5982\u679c\u5269\u4f59\u5927\u5c0frsize\u5c0f\u4e8eMIN_CHUNK_SIZE\uff0c\u54b1\u4eec\u76f4\u63a5\u5c06\u6240\u6709\u5185\u5b58\u5206\u914d\u7ed9\u7528\u6237\u3002\u5426\u5219\u5219\u5206\u5272\u5185\u5b58\uff0c\u5e76\u5c06\u5269\u4f59\u7684\u5185\u5b58\u5757\u8f6c\u6210mchunkptr\uff0c \u5373 r\u3002\u6211\u4eec\u7136\u540e\uff0cr\u76f8\u5f53\u4e8e\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u5757\uff0c\u6211\u4eec\u8bbe\u7f6e\u5176head\u5c5e\u6027\uff08size\uff0cPINUSE_BIT\uff0cCINUSE_BIT\uff09\u3002\nreplace_dv \u4e2d\uff0c\u6211\u4eec\u5148\u83b7\u5f97dv size\uff0c\u786e\u8ba4\u662f\u5c0f\u5185\u5b58\u5757\u3002\u7136\u540e\uff0c\u5c31\u662f\u628adv\u5185\u5b58\u5757\u63d2\u5165\u5230\u5bf9\u5e94\u7684\u7bb1\u53f7\u91cc\u3002\u5c31\u8ddf\u4e4b\u524d\uff0c\u6839\u636e\u5927\u5c0f\u83b7\u53d6\u5230\u5bf9\u5e94\u7bb1\u53f7\u7684\u94fe\u8868\u5934\u7684\u903b\u8f91\u4e00\u6837\uff0c\n\u53ea\u662f\u8fd9\u91cc\u662f\u5c06\u5185\u5b58\u5757\u63d2\u5165\u53cc\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002\nok\uff0c \u63d2\u5165\u5b8c\u6210\u540e\uff0c\u54b1\u4eec\u628a\u521a\u624d\u5206\u5272\u5269\u4e0b\u7684\u5185\u5b58\u5b58\u653e\u5230dv chunk\u4e2d\u3002\n\n\n4639          mem = chunk2mem(p);\n4640          check_malloced_chunk(gm, mem, nb);\n4641          goto postaction;\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u8fd4\u56de\u5185\u5b58\u7ed9\u7528\u6237\uff0c\u89c4\u5219\u4e09\u7b2c\u4e00\u90e8\u5206\u5185\u5b58\u5206\u914d\u7ed3\u675f\u3002\n\n\n4644        else if (gm-\ntreemap != 0 \n (mem = tmalloc_small(gm, nb))\n!= 0) {\n4645          check_malloced_chunk(gm, mem, nb);\n4646          goto postaction;\n\n\n\n\n\n\u8fd9\u91ccelse \u5bf9\u5e94\u201c4618        if (smallbits != 0) {\u201d \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u5c0f\u5185\u5b58\u7684\n=\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u7684\u6240\u6709\u7bb1\u5b50\u4e0d\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5feb\u3002 \u7136\u540e\uff0c\u6211\u4eec\u68c0\u67e5treemap\u4e2d\u662f\u5426\u5b58\u5728\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u8c03\u7528tmalloc_small\u3002\n\n\n2833#define treebin_at(M,i)     (\n((M)-\ntreebins[i]))\n\n4527-static void* tmalloc_small(mstate m, size_t nb) {\n...\n4531  binmap_t leastbit = least_bit(m-\ntreemap);\n4532  compute_bit2idx(leastbit, i);\n4533  v = t = *treebin_at(m, i);\n4534  rsize = chunksize(t) - nb;\n\n\n\n\n\nleast_bit\n \u7684\u4f5c\u7528\u5c31\u662f\u4fdd\u7559\u6700\u53f3\u4fa7\u4e3a1\u7684bit\u4f4d\uff0c\u5176\u4f59\u4f4d\u4e3a0.\u6240\u4ee5\uff0c\nleast_bit\n\u548c\ncompute_bit2idx\n\u7684\u5171\u540c\u4f5c\u7528\u5c31\u662f\u5728treemap\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u53ef\u7528\u5185\u5b58\u7bb1\u5b50\u3002v\u548ct\u5373\u4e3a\u627e\u5230\u7684\u5185\u5b58\u5757\u6811\u7684\u6839\u8282\u70b9\u3002\n\n\n4536  while ((t = leftmost_child(t)) != 0) {\n4537    size_t trem = chunksize(t) - nb;\n4538    if (trem \n rsize) {\n4539      rsize = trem;\n4540      v = t;\n4541    }\n4542  }\n\n\n\n\n\n\u8fd9\u6bb5\u4ee3\u7801\u662f\u5bfb\u627et\u7684\u6700\u5de6\u5b50\u6811\u3002\u5728\u524d\u6587\u6211\u4eec\u4ecb\u7ecd\u8fc7aka\u6811\uff0c\u6bcf\u4e00\u68f5\u6811\u7684\u505a\u5b50\u6811\u603b\u5c0f\u4e8e\u5176\u53f3\u5b50\u6811\u3002\u8be5\u4ee3\u7801\u5c31\u662f\u5728\u5bfb\u627e\u6ee1\u8db3\u7528\u4e8e\u8bf7\u6c42\u5927\u5c0fnb\u7684\u6700\u63a5\u8fd1\u7684\u6811\u7684\u8282\u70b9\u3002\uff08\u8003\u8651\u5230\u8bf7\u6c42\u7684\u5b57\u8282nb\n=256byte, \u800c\u5728tree\u4e2d\u6700\u5c0f\u7684chunksize \n 256byte \u6240\u4ee5,\u4e0d\u4f1a\u51fa\u73b0\u8d1f\u6570.\uff09\n\n\n4545    mchunkptr r = chunk_plus_offset(v, nb);\n4546    assert(chunksize(v) == rsize + nb);\n4547    if (RTCHECK(ok_next(v, r))) {\n4548      unlink_large_chunk(m, v);\n4549      if (rsize \n MIN_CHUNK_SIZE)\n4550        set_inuse_and_pinuse(m, v, (rsize + nb));\n4551      else {\n4552        set_size_and_pinuse_of_inuse_chunk(m, v, nb);\n4553        set_size_and_pinuse_of_free_chunk(r, rsize);\n4554        replace_dv(m, r, rsize);\n4555      }\n4556      return chunk2mem(v);\n4557    }\n4558  }\n\n\n\n\n\n(NOT READY)\n\u8fd9\u6bb5\u4ee3\u7801\u8ddf\u4e0a\u6587\u5c0f\u5185\u5b58\u627e\u5230\u540e\u5904\u7406\u7684\u4ee3\u7801\u76f8\u4f3c\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\uff0cunlink_large_chunk\uff0c\u6240\u4ee5\u6211\u4eec\u770b\u4e0bunlink_large_chunk\u7684\u5b9e\u73b0.\u8fd9\u4e2a\u8fc7\u7a0b\u6709\u4e09\u4e2a\u6b65\u9aa4\n\n\n\n\n\u5982\u679c\u7ed3\u70b9X\u662f\u94fe\u8868\u7684\u7ed3\u70b9,\u5219\u5c06\u5176\u91cd\u94fe\u8868\u4e2d\u5220\u9664.\n\n\n\u5982\u679cX\u662f\u8be5\u5927\u5c0f\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9,\u4f46\u662f\u4e0d\u662f\u53f6\u5b50\u7ed3\u70b9,\u5b83\u5fc5\u987b\u7528\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u66ff\u6362.\u8fd9\u91cc\u67e5\u627e\u53f6\u5b50\u7ed3\u70b9\u7684\u65b9\u6cd5\u662f\u4ece\u6700\u53f3\u4fa7\u5f00\u59cb.\n\n\n\u5982\u679cX\u662f\u94fe\u8868\u7684\u5934(\u62e5\u6709parent linker),\u5c31\u9700\u8981\u91cd\u65b0\u5c06\u5176x\u7684\u7236\u7ed3\u70b9\u4e0e\u66ff\u6362x\u7684\u7ed3\u70b9\u91cd\u65b0\u8fde\u63a5.\n\n\n\n\n3730#define unlink_large_chunk(M, X) {\\\n3731  tchunkptr XP = X-\nparent;\\\n3732  tchunkptr R;\\\n\n\n\n\n\n3733  if (X-\nbk != X) {\\\n3734    tchunkptr F = X-\nfd;\\\n3735    R = X-\nbk;\\\n3736    if (RTCHECK(ok_address(M, F) \n F-\nbk == X \n R-\nfd == X)) {\\\n3737      F-\nbk = R;\\\n3738      R-\nfd = F;\\\n3739    }\\\n3740    else {\\\n3741      CORRUPTION_ERROR_ACTION(M);\\\n3742    }\\\n3743  }\\\n\n\n\n\n\n\u8fd9\u91cc\u662f\u7b2c\u4e00\u79cd\u60c5\u51b5,\u5373x\u662f\u5c5e\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9.\n\n\n3744  else {\\\n3745    tchunkptr* RP;\\\n3746    if (((R = *(RP = \n(X-\nchild[1]))) != 0) ||\\\n3747        ((R = *(RP = \n(X-\nchild[0]))) != 0)) {\\\n3748      tchunkptr* CP;\\\n3749      while ((*(CP = \n(R-\nchild[1])) != 0) ||\\\n3750             (*(CP = \n(R-\nchild[0])) != 0)) {\\\n3751        R = *(RP = CP);\\\n3752      }\\\n3753      if (RTCHECK(ok_address(M, RP)))\\\n3754        *RP = 0;\\\n3755      else {\\\n3756        CORRUPTION_ERROR_ACTION(M);\\\n3757      }\\\n3758    }\\\n3759  }\\\n\n\n\n\n\n\u8fd9\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5.\n\n\n3760  if (XP != 0) {\\ \n3761    tbinptr* H = treebin_at(M, X-\nindex);\\ \n3762    if (X == *H) {\\ \n3763      if ((*H = R) == 0) \\ \n3764        clear_treemap(M, X-\nindex);\\ \n3765    }\\ \n3766    else if (RTCHECK(ok_address(M, XP))) {\\ \n3767      if (XP-\nchild[0] == X) \\ \n3768        XP-\nchild[0] = R;\\ \n3769      else \\ \n3770        XP-\nchild[1] = R;\\ \n3771    }\\ \n3772    else\\ \n3773      CORRUPTION_ERROR_ACTION(M);\\ \n3774    if (R != 0) {\\ \n3775      if (RTCHECK(ok_address(M, R))) {\\ \n3776        tchunkptr C0, C1;\\ \n3777        R-\nparent = XP;\\ \n3778        if ((C0 = X-\nchild[0]) != 0) {\\ \n3779          if (RTCHECK(ok_address(M, C0))) {\\ \n3780            R-\nchild[0] = C0;\\ \n3781            C0-\nparent = R;\\ \n3782          }\\ \n3783          else\\ \n3784            CORRUPTION_ERROR_ACTION(M);\\ \n3785        }\\ \n3786        if ((C1 = X-\nchild[1]) != 0) {\\ \n3787          if (RTCHECK(ok_address(M, C1))) {\\ \n3788            R-\nchild[1] = C1;\\ \n3789            C1-\nparent = R;\\ \n3790          }\\ \n3791          else\\ \n3792            CORRUPTION_ERROR_ACTION(M);\\ \n3793        }\\ \n3794      }\\ \n3795      else\\ \n3796        CORRUPTION_ERROR_ACTION(M);\\ \n3797    }\\ \n3798  }\\ \n\n\n\n\n\n\u8fd9\u662f\u7b2c\u4e09\u79cd\u60c5\u51b5.\n\n\n\n\u4ee5\u4e0a,\u72ec\u5c5e\u4e8e\u5c0f\u5185\u5b58\u7684\u5206\u914d\u89c4\u5219\u7ed3\u675f!\n\n\n4650    else if (bytes \n= MAX_REQUEST)\n4651      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in\nsys alloc) */\n\n\n\n\n\n2224#define MAX_REQUEST         ((-((MCHUNK_SIZE + CHUNK_ALIGN_MASK) \n ~CHUNK_ALIGN_MASK)) \n 2)\n\n\n\n\n\n\u8fd9\u91cc,\u5f53\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\n= MAX_REQUEST\u65f6,\u6211\u4eec\u5f3a\u5236\u5206\u914d\u5931\u8d25.\nCHUNK_ALIGN_MASK\n \u4e3a \n2 * sizeof(void *) - 1\n,\u572832bit\u4e0a\u4e3a7.\u6240\u4ee5MAX_REQUEST\u662f\u4e00\u4e2a\u6781\u5927\u7684\u6570.\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b,\u6211\u4eec\u5c06nb\u8bbe\u7f6e\u4e3affffffff,\u5f3a\u5236\u5931\u8d25.\n\n\n\u5927\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e00\n\n\n\u7c7b\u4f3c\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e00,\u4ece\u6811\u4e2d\u627e\u5230\u6700\u9002\u5408\u7684\u5185\u5b58\u5757.\n\n\n4652    else {\n4653      nb = pad_request(bytes);\n4654      if (gm-\ntreemap != 0 \n (mem = tmalloc_large(gm, nb)) != 0) {\n4655        check_malloced_chunk(gm, mem, nb);\n4656        goto postaction;\n4657      }\n4658    }\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u7684\u91cd\u70b9\u662f\ntmalloc_large\n,\u5b83\u4e0e\ntmalloc_small\n\u7684\u5dee\u522b\u662f:\ntmalloc_small\n\u662f\u7528\u4e8e\u5c0f\u5185\u5b58\u5206\u914d\u7684,\u53ea\u9700\u8981\u5728treemap\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u6709\u6548\u6811,\u53d6\u51fa\u6811\u4e2d\u6700\u5c0f\u5185\u5b58\u5373\u53ef;\u800c\ntmalloc_large\n\u662f\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219,\u5728\u6240\u670932\u68f5\u6811\u4e2d\u627e\u5230\u6700\u5339\u914d\u5927\u5c0f\u7684\u5185\u5b58\u5757.\n\n\n4456static void* tmalloc_large(mstate m, size_t nb) {\n4457  tchunkptr v = 0;\n4458  size_t rsize = -nb; /* Unsigned negation */\n4459  tchunkptr t;\n4460  bindex_t idx;\n4461  compute_tree_index(nb, idx);\n4462  if ((t = *treebin_at(m, idx)) != 0) {\n\n\n\n\n\nrsize \u4e3a\u6781\u5927\u6570. \ncompute_tree_index\n\u901a\u8fc7\u8bf7\u6c42\u7684\u5927\u5c0fnb,\u4ecetreebinmap\u4e2d\u8ba1\u7b97\u51fa\u7bb1\u53f7.\ntreebin_at\n \u5219\u662f\u53d6\u51faidx\u7bb1\u53f7\u4e2d\u5bf9\u5e94\u7684\u6811\u6839\u7ed3\u70b9.\n\n\n2880#define compute_tree_index(S, I)\\\n2881{\\\n2882  size_t X = S \n TREEBIN_SHIFT;\\\n2883  if (X == 0)\\\n2884    I = 0;\\\n2885  else if (X \n 0xFFFF)\\\n2886    I = NTREEBINS-1;\\\n2887  else {\\\n2888    unsigned int Y = (unsigned int)X;\\\n2889    unsigned int N = ((Y - 0x100) \n 16) \n 8;\\\n2890    unsigned int K = (((Y \n= N) - 0x1000) \n 16) \n 4;\\\n2891    N += K;\\\n2892    N += K = (((Y \n= K) - 0x4000) \n 16) \n 2;\\\n2893    K = 14 - N + ((Y \n= K) \n 15);\\\n2894    I = (K \n 1) + ((S \n (K + (TREEBIN_SHIFT-1)) \n 1));\\\n2895  }\\\n2896}\n\n\n\n\n\n\u4ee5\u4e0a\u8ba1\u7b97\u7684\u7ed3\u679c\u5982\u4e0b,idx\u4e3a\u5bf9\u5e94\u7bb1\u53f7,mem\u5bf9\u5e94\u8be5\u7bb1\u5b50\u4e2d\u6700\u5c0f\u7684\u5185\u5b58\u5927\u5c0f.\n\n\nidx 0 mem 256 hex: 100\nidx 1 mem 384 hex: 180\nidx 2 mem 512 hex: 200\nidx 3 mem 768 hex: 300\nidx 4 mem 1024 hex: 400\nidx 5 mem 1536 hex: 600\nidx 6 mem 2048 hex: 800\nidx 7 mem 3072 hex: c00\nidx 8 mem 4096 hex: 1000\nidx 9 mem 6144 hex: 1800\nidx 10 mem 8192 hex: 2000\nidx 11 mem 12288 hex: 3000\nidx 12 mem 16384 hex: 4000\nidx 13 mem 24576 hex: 6000\nidx 14 mem 32768 hex: 8000\nidx 15 mem 49152 hex: c000\nidx 16 mem 65536 hex: 10000\nidx 17 mem 98304 hex: 18000\nidx 18 mem 131072 hex: 20000\nidx 19 mem 196608 hex: 30000\nidx 20 mem 262144 hex: 40000\nidx 21 mem 393216 hex: 60000\nidx 22 mem 524288 hex: 80000\nidx 23 mem 786432 hex: c0000\nidx 24 mem 1048576 hex: 100000\nidx 25 mem 1572864 hex: 180000\nidx 26 mem 2097152 hex: 200000\nidx 27 mem 3145728 hex: 300000\nidx 28 mem 4194304 hex: 400000\nidx 29 mem 6291456 hex: 600000\nidx 30 mem 8388608 hex: 800000\nidx 31 mem 12582912 hex: c00000\n\n\n\n\n\n4463    /* Traverse tree for this bin looking for node with size == nb */\n4464    size_t sizebits = nb \n leftshift_for_tree_index(idx);\n4465    tchunkptr rst = 0;  /* The deepest untaken right subtree */\n4466    for (;;) {\n4467      tchunkptr rt;\n4468      size_t trem = chunksize(t) - nb;\n4469      if (trem \n rsize) {\n4470        v = t;\n4471        if ((rsize = trem) == 0)\n4472          break;\n4473      }\n4474      rt = t-\nchild[1];\n4475      t = t-\nchild[(sizebits \n (SIZE_T_BITSIZE-SIZE_T_ONE)) \n 1];\n4476      if (rt != 0 \n rt != t)\n4477        rst = rt;\n4478      if (t == 0) {\n4479        t = rst; /* set t to least subtree holding sizes \n nb */\n4480        break;\n4481      }\n4482      sizebits \n= 1;\n4483    }\n\n\n\n\n\n\u8fd9\u662f\u6811\u7684\u641c\u7d22\u7b97\u6cd5,\u6211\u4eec\u6765\u8be6\u7ec6\u770b\u4e0b.\u9996\u5148sizebits\u53d8\u91cf,\u7c7b\u4f3cbinmap,\u6bcf\u4e00\u4f4d\u5bf9\u5e94\u6811\u7684\u5bf9\u5e94\u6df1\u5ea6\u7684\u5de6\u53f3\u5b50\u6811,\u53ef\u4ee5\u8ba4\u4e3a\u662f\u904d\u5386\u6811\u7684key bits.\n\n\n2904#define leftshift_for_tree_index(i) \\\n2905   ((i == NTREEBINS-1)? 0 : \\\n2906    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) \n 1) + TREEBIN_SHIFT - 2)))\n\n\n\n\n\n1601#define SIZE_T_BITSIZE      (sizeof(size_t) \n 3)\n1606#define SIZE_T_ONE          ((size_t)1)\n2574#define TREEBIN_SHIFT     (8U)\n\n\n\n\n\nleftshift_for_tree_index\n \u5b8f\u5c06\u5173\u952e\u7801\u79fb\u52a8\u5230\u4e86\u6700\u5de6.\u8ba1\u7b97\u7684\u7ed3\u679c\u4e3a (25 - (i \n 1)). \u76f8\u5bf9\u4e8e\u7bb1\u5b500, \u5185\u5b58\u8303\u56f4\u4e3a128, \u5173\u952e\u7801\u957f\u5ea6\u4e3a 7, \nleftshift_for_tree_index\n\u8ba1\u7b97\u7684\u7ed3\u679c\u4e3a25. \u6240\u4ee5,\u5c06 nb \n 25 , \u5c31\u662f\u5c06\u5173\u952e\u7801\u79fb\u52a8\u5230\u6700\u5de6\u7aef.\n\n\n\u7136\u540e\u6211\u4eec\u770bfor\u5faa\u73af\u5185\u90e8\u7684,\u8fd9\u5c31\u662f\u5728\u904d\u5386\u6811\u4e86.\n\n\n4467      tchunkptr rt;\n4468      size_t trem = chunksize(t) - nb;\n4469      if (trem \n rsize) {\n4470        v = t;\n4471        if ((rsize = trem) == 0)\n4472          break;\n4473      }\n\n\n\n\n\n\u4e0e \u5bfb\u627e\u6700\u5339\u914dnb\u6700\u8fd1\u7684\u70b9.\u5f53\u7136,\u5982\u679c\u627e\u5230\u5927\u5c0f\u76f8\u7b49\u7684,\u5c31\u76f4\u63a5\u8df3\u51fa, \u8fd9\u4e2a\u8df3\u51fa\u6761\u4ef6\u53ef\u80fd\u662f\u5173\u952e\u7801\u8fd8\u672a\u641c\u7d22\u5b8c.\u8fd9\u91cc\u5c31\u53ef\u4ee5\u770b\u51fa, dlmalloc\u6811\u4e0e bitwise trie\u6811\u7684\u5dee\u5f02,\u503c\u5728\u7279\u5f81\u7801\u7684\u8def\u5f84\u4e0a\u7684\u4efb\u610f\u70b9. \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u4e48\u505a\u5462?\u56e0\u4e3adlmalloc\u7684\u5206\u7bb1\u673a\u5236,\u5bfc\u81f4\u4e86,\u5982\u679c\u641c\u7d22\u5b8c\u5173\u952e\u7801,\u5219 \u8be5\u7ed3\u70b9\u5fc5\u5b9a\u53ea\u5b58\u5728\u53f6\u5b50\u7ed3\u70b9\u4e0a. \u5728\u8fd9\u4e2a\u524d\u63d0\u4e0b,\u4e3a\u4e86\u8282\u7701\u5185\u5b58\u7a7a\u95f4, \u5728\u63d2\u5165\u7ed3\u70b9\u65f6,\u53ea\u8981\u5728\u5173\u952e\u7801\u7684\u8def\u5f84\u4e0a\u4e0d\u5b58\u5728\u88ab\u5360\u7528\u7684\u70b9,\u5c31\u5c06\u8be5\u503c\u63d2\u5165. \u5728\u67e5\u770b\u4e86 \ninsert_large_chunk\n \u540e\u4f1a\u6709\u66f4\u6e05\u6670\u7684\u4f53\u4f1a.\n\n\n4474      rt = t-\nchild[1];\n4475      t = t-\nchild[(sizebits \n (SIZE_T_BITSIZE-SIZE_T_ONE)) \n 1];\n4476      if (rt != 0 \n rt != t)\n4477        rst = rt;\n4478      if (t == 0) {\n4479        t = rst; /* set t to least subtree holding sizes \n nb */\n4480        break;\n4481      }\n4482      sizebits \n= 1;\n\n\n\n\n\n(sizebits \n (SIZE_T_BITSIZE-SIZE_T_ONE))\n \u8fd9\u4e2a\u5c31\u662f\u6bcf\u4e00\u5c42\u6811\u7684\u7279\u5f81\u7801\u4e86.\u7ed3\u5408\u4e0a\u9762sizebits\u7684\u503c,\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u4e3a \nnb \n (6 + (i \n 1))\n. \u5982\u679c,\u6211\u4eec\u518d\u7ed3\u5408\ncompute_tree_index\n \u4e2d\u7684\u7ed3\u679c,\u5f97\u5230\u5982\u4e0b\u8868.idx\u4e3a\u7bb1\u53f7,mem\u4e3a\u8be5\u7bb1\u5b50\u4e2d\u7684\u6700\u5c0f\u5185\u5b58,hex\u4e3a\u8be5\u503c\u768416\u8fdb\u5236,mid\u4e3a\u533a\u5206\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u7279\u5f81\u7801,bitshift\u4e3a\u7279\u5f81\u7801\u7684\u65e0\u6548\u4f4d\u6570. \u6bd4\u5982,\u7bb1\u5b501\u4e2d,dix\u4e3a1,\u5176\u8868\u793a\u7684\u5185\u5b58\u8303\u56f4\u4e3a[384, 512),\u5219\u5176\u5de6\u5b50\u6811\u8868\u793a\u8303\u56f4\u4e3a[384,448),\u53f3\u5b50\u6811\u4e3a[448,512).448\u5373\u4e3a\u8be5\u6811\u7684\u7b2c\u4e00\u5c42\u7684\u7279\u5f81\u7801,\u4e5f\u5c31\u662f111000000.\u5982\u679cnb \n 448, \u5219\u7b2c7\u4f4d\u4e3a0,\u5426\u5219\u7b2c7\u4f4d\u4e3a1.\u6240\u4ee5,\u53ea\u8981\u901a\u8fc7\u5c06size \n bitshift \u4e4b\u540e\u4e0e1 \u505a\u4f4d\u4e0e\u8fd0\u7b97,\u5c31\u53ef\u4ee5\u5224\u65ad\u51fa\u5728\u8be5\u6811\u5bf9\u5e94\u5c42\u8be5\u8fdb\u5165\u5176\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811.\n\n\nidx 0 mem 256 hex: 100  mid: 101000000 bitshift: 6\nidx 1 mem 384 hex: 180 mid: 111000000 bitshift: 6\nidx 2 mem 512 hex: 200 mid: 1110000000 bitshift: 7\nidx 3 mem 768 hex: 300 mid: 1010000000 bitshift: 7\nidx 4 mem 1024 hex: 400 mid: 10100000000 bitshift: 8\nidx 5 mem 1536 hex: 600 mid: 11100000000 bitshift: 8\nidx 6 mem 2048 hex: 800 mid: 101000000000 bitshift: 9\nidx 7 mem 3072 hex: c00 mid: 111000000000 bitshift: 9\nidx 8 mem 4096 hex: 1000 mid: 1010000000000 bitshift: 10\nidx 9 mem 6144 hex: 1800 mid: 1110000000000 bitshift: 10\nidx 10 mem 8192 hex: 2000 mid: 10100000000000 bitshift: 11\nidx 11 mem 12288 hex: 3000 mid: 11100000000000 bitshift: 11\nidx 12 mem 16384 hex: 4000 mid: 101000000000000 bitshift: 12\nidx 13 mem 24576 hex: 6000 mid: 111000000000000 bitshift: 12\nidx 14 mem 32768 hex: 8000 mid: 1010000000000000 bitshift: 13\nidx 15 mem 49152 hex: c000 mid: 1110000000000000 bitshift: 13\nidx 16 mem 65536 hex: 10000 mid 10100000000000000 bitshift: 14\nidx 17 mem 98304 hex: 18000 mid 11100000000000000 bitshift: 14\nidx 18 mem 131072 hex: 20000 mid 101000000000000000 bitshift: 15\nidx 19 mem 196608 hex: 30000 mid 111000000000000000 bitshift: 15\nidx 20 mem 262144 hex: 40000 mid 1010000000000000000 bitshift: 16\nidx 21 mem 393216 hex: 60000 mid 1110000000000000000 bitshift: 16\nidx 22 mem 524288 hex: 80000 mid 10100000000000000000 bitshift: 17\nidx 23 mem 786432 hex: c0000 mid 11100000000000000000 bitshift: 17\nidx 24 mem 1048576 hex: 100000 mid 101000000000000000000 bitshift: 18\nidx 25 mem 1572864 hex: 180000 mid 111000000000000000000 bitshift: 18\nidx 26 mem 2097152 hex: 200000 mid 1010000000000000000000 bitshift: 19\nidx 27 mem 3145728 hex: 300000 mid 1110000000000000000000 bitshift: 19\nidx 28 mem 4194304 hex: 400000 mid 10100000000000000000000 bitshift: 20\nidx 29 mem 6291456 hex: 600000 mid 11100000000000000000000 bitshift: 20\nidx 30 mem 8388608 hex: 800000 mid 101000000000000000000000 bitshift: 21\nidx 31 mem 12582912 hex: c00000 bitshift: 31\n\n\n\n\n\n// \u56fe, dlammloc \u6811\u7684\u56fe.\n\n\n4485  if (t == 0 \n v == 0) { /* set t to root of next non-empty treebin */\n4486    binmap_t leftbits = left_bits(idx2bit(idx)) \n m-\ntreemap;\n4487    if (leftbits != 0) {\n4488      bindex_t i;\n4489      binmap_t leastbit = least_bit(leftbits);\n4490      compute_bit2idx(leastbit, i);\n4491      t = *treebin_at(m, i);\n4492    }\n4493  }\n\n\n\n\n\n\u8fd9\u91cc\u5bf9\u5e94\u4e0a\u6587\u7684\n4462  if ((t = *treebin_at(m, idx)) != 0) {\n , \u4e5f\u5c31\u662f\u8bf4\u5728\u5f53\u524d\u5927\u5c0f\u7684\u7bb1\u5b50\u5185\u4e0d\u5b58\u5728\u7a7a\u95f2\u7684\u5185\u5b58\u5757,\u6240\u4ee5\u6211\u4eec\u8981\u628at\u8bbe\u7f6e\u4e3a\u6700\u8fd1\u7684\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u7bb1\u53f7.\nleft_bits\n \u548c \nleast_bit\n \u8ddf\u4e0a\u6587\u5c0f\u5185\u5b58\u5bfb\u627e\u6700\u8fd1\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u7bb1\u5b50\u7b97\u6cd5\u4e00\u6837.\n\n\n4495  while (t != 0) { /* find smallest of tree or subtree */\n4496    size_t trem = chunksize(t) - nb;\n4497    if (trem \n rsize) {\n4498      rsize = trem;\n4499      v = t;\n4500    }\n4501    t = leftmost_child(t);\n4502  }\n\n\n\n\n\n\u8fd9\u91cc\u8ddf\ntmalloc_small\n\u5bfb\u627e\u6700\u5de6\u5b50\u6811(\u6700\u5c0f\u5185\u5b58)\u7684\u7b97\u6cd5\u4e00\u6837.\u8fd9\u6bb5\u4ee3\u7801\u5bf9\u4e0a\u9762\u7684\u4e24\u79cd\u60c5\u51b5\u90fd\u6709\u6548.\u5373,\u5982\u679c\u5728\u5bf9\u5e94\u7bb1\u53f7\u6709\u7a7a\u95f2\u5185\u5b58,\u5728\u57fa\u4e8e\u6811\u7684\u641c\u7d22\u7b97\u6cd5\u627e\u5230\u7684t\u5c31\u662f\u6700\u5339\u914dnb\u7684\u5927\u5c0f,\u6240\u4ee5\u8fd9\u91cc\u7684while\u5faa\u73af\u7ed3\u679ct\u5c31\u4e0d\u4f1a\u6539\u53d8;\u5982\u679c\u662f,\u5bfb\u627e\u6700\u8fd1\u6709\u7a7a\u95f2\u5757\u7684\u6811,\u90a3\u4e48\u8be5\u6811\u7684\u6700\u5c0f\u5185\u5b58\u90fd\u5927\u4e8e\u8bf7\u6c42\u5927\u5c0fnb,\u6240\u4ee5\u76f4\u63a5\u5bfb\u627e\u6700\u5de6\u5b50\u6811.\n\n\n\n\n4505  if (v != 0 \n rsize \n (size_t)(m-\ndvsize - nb)) {\n4506    if (RTCHECK(ok_address(m, v))) { /* split */\n4507      mchunkptr r = chunk_plus_offset(v, nb);\n4508      assert(chunksize(v) == rsize + nb);\n4509      if (RTCHECK(ok_next(v, r))) {\n4510        unlink_large_chunk(m, v);\n4511        if (rsize \n MIN_CHUNK_SIZE)\n4512          set_inuse_and_pinuse(m, v, (rsize + nb));\n4513        else {\n4514          set_size_and_pinuse_of_inuse_chunk(m, v, nb);\n4515          set_size_and_pinuse_of_free_chunk(r, rsize);\n4516          insert_chunk(m, r, rsize);\n4517        }\n4518        return chunk2mem(v);\n4519      }\n4520    }\n4521    CORRUPTION_ERROR_ACTION(m);\n4522  }\n4523  return 0;\n\n\n\n\n\n\u63a5\u4e0b\u6765,\u53ea\u8981\u6c42\u9876\u627e\u5230\u7684\u5185\u5b58\u5757\u6bd4dv chunk\u66f4\u5408\u9002,\u5219\u6267\u884c\u4e00\u822c\u7684\u5185\u5b58\u5757\u6536\u5c3e\u5904\u7406,\u7136\u540e\u8fd4\u56de.\u5982\u679cdv chunk\u66f4\u5408\u9002,\u6211\u4eec\u8fd4\u56de0, \u53c2\u8003\u4ee3\u7801\n\n4654      if (gm-\ntreemap != 0 \n (mem = tmalloc_large(gm, nb)) != 0) {\n, \u5c31\u4f1a\u7ee7\u7eed\u6309\u7167\u5185\u5b58\u5206\u914d\u89c4\u5219\u5f80\u4e0b\u8d70.\n\n\n\u5927\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e8c\n\n\n\u5982\u679cnb\u7684\u5927\u5c0f \n dv chunk\u7684\u5927\u5c0f,\u5219\u4f7f\u7528dv chunk\u5206\u914d\u5185\u5b58.\u5c3d\u91cf\u4fdd\u8bc1\u8fde\u7eed\u7684\u5185\u5b58\u8bf7\u6c42\u5728\u865a\u62df\u5185\u5b58\u4e0a\u8fde\u7eed.\n\n\n4660    if (nb \n= gm-\ndvsize) {\n4661      size_t rsize = gm-\ndvsize - nb;\n4662      mchunkptr p = gm-\ndv;\n4663      if (rsize \n= MIN_CHUNK_SIZE) { /* split dv */\n4664        mchunkptr r = gm-\ndv = chunk_plus_offset(p, nb);\n4665        gm-\ndvsize = rsize;\n4666        set_size_and_pinuse_of_free_chunk(r, rsize);\n4667        set_size_and_pinuse_of_inuse_chunk(gm, p, nb);\n4668      }\n4669      else { /* exhaust dv */\n4670        size_t dvs = gm-\ndvsize;\n4671        gm-\ndvsize = 0;\n4672        gm-\ndv = 0;\n4673        set_inuse_and_pinuse(gm, p, dvs);\n4674      }\n4675      mem = chunk2mem(p);\n4676      check_malloced_chunk(gm, mem, nb);\n4677      goto postaction;\n4678    }\n\n\n\n\n\n\u5207\u5206dv chunk, \u7136\u540e\u5c31\u662f\u57fa\u672c\u7684\u57df\u8bbe\u7f6e.\u8fd4\u56de\u7ed9\u7528\u6237.\n\n\n\u5927\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u56db\n\n\n4680    else if (nb \n gm-\ntopsize) { /* Split top */\n4681      size_t rsize = gm-\ntopsize -= nb;\n4682      mchunkptr p = gm-\ntop;\n4683      mchunkptr r = gm-\ntop = chunk_plus_offset(p, nb);\n4684      r-\nhead = rsize | PINUSE_BIT;\n4685      set_size_and_pinuse_of_inuse_chunk(gm, p, nb);\n4686      mem = chunk2mem(p);\n4687      check_top_chunk(gm, gm-\ntop);\n4688      check_malloced_chunk(gm, mem, nb);\n4689      goto postaction;\n4690    }\n\n\n\n\n\n\u8ddfdv chunk\u7c7b\u4f3c.\u96be\u70b9\u5176\u5b9e\u662f\u627e\u5230\u7b26\u5408\u7684chunk.\u50cfdv chunk \u548ctop chunk\u90fd\u662f\u627e\u5230\u4e86\u7684,\u5c31\u76f4\u63a5\u5206\u914d.\n\n\n\u5927\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e94\n\n\n\u8c03\u7528\u7cfb\u7edf\u51fd\u6570\u8fdb\u884c\u5185\u5b58\u5206\u914d.\u8fd9\u91cc\u4f7f\u7528\u5230\u4e86segment.\n\n\n4692    mem = sys_alloc(gm, nb);\n4693\n4694  postaction:\n4695    POSTACTION(gm);\n4696    return mem;\n4697  }\n4698\n4699  return 0;\n\n\n\n\n\n\u5148\u8bf4\u4e0b\nsys_alloc\n\u7684\u89c4\u5219:\n\n\n\n\n\u4f18\u5148\u4f7f\u7528MORECORE(sbrk())\u5206\u914d\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\n\n\n\u4f7f\u7528mmap\u5206\u914d\u4e0d\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\n\n\n\u4f7f\u7528sbrk()\u5206\u914d\u4e0d\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4.\n\n\n\n\nsbrk\u5b9e\u9645\u4e0a\u662f\u5bf9\u8fdb\u7a0b\u7684\u6570\u636e\u6bb5\u8fdb\u884c\u6269\u5c55,\u8fd4\u56de\u589e\u957f\u7684\u533a\u57df\u7684\u57fa\u5730\u5740.\n\n\n4059  /* Directly map large chunks, but only if already initialized */\n4060  if (use_mmap(m) \n nb \n= mparams.mmap_threshold \n m-\ntopsize != 0) {\n4061    void* mem = mmap_alloc(m, nb);\n4062    if (mem != 0)\n4063      return mem;\n4064  }\n\n\n\n\n\n\u5982\u679c\u4f7f\u7528mmap\u7684\u6807\u5fd7\u88ab\u7f6e\u4e0a\u5e76\u4e14nb \n= mmap\u7684\u9600\u503c,\u5219\u76f4\u63a5\u4f7f\u7528mmap.\n\n\n4066  asize = granularity_align(nb + SYS_ALLOC_PADDING);\n\n\n\n\n\n\u505a\u5bf9\u9f50\u5904\u7406.\n\n\n4105  if (MORECORE_CONTIGUOUS \n !use_noncontiguous(m)) {\n4106    char* br = CMFAIL;\n4107    size_t ssize = asize; /* sbrk call size */\n4108    msegmentptr ss = (m-\ntop == 0)? 0 : segment_holding(m, (char*)m-\ntop);\n4109    ACQUIRE_MALLOC_GLOBAL_LOCK();\n\n\n\n\n\n\u6211\u4eec\u770b\u4e0b\nsegment_holding\n\u51fd\u6570.\n\n\n2698static msegmentptr segment_holding(mstate m, char* addr) {\n2699  msegmentptr sp = \nm-\nseg;\n2700  for (;;) {\n2701    if (addr \n= sp-\nbase \n addr \n sp-\nbase + sp-\nsize)\n2702      return sp;\n2703    if ((sp = sp-\nnext) == 0)\n2704      return 0;\n2705  }\n2706}\n\n\n\n\n\nsegment\u5b9e\u9645\u4e0a\u662f\u7531\u5355\u5411\u94fe\u8868\u7ba1\u7406\u7684,\u4f46\u7531\u4e8e\u4f7f\u7528\u5230segment\u7684\u60c5\u51b5\u975e\u5e38\u5c11,\u6240\u4ee5,\u4e5f\u6ca1\u6709\u4ec0\u4e48\u6548\u7387\u95ee\u9898.\n\u8fd9\u91cc\u7684\u529f\u80fd\u5c31\u662f\u5bfb\u627eaddr\u6240\u5c5e\u7684segment\u5757\u7684\u5730\u5740,\u5e76\u8fd4\u56de.\u7ed3\u5408\u4e0a\u9762\u7684,ss\u5b9e\u9645\u4e0a\u5c31\u662ftop chunk\u6240\u5728\u7684segment\u7684\u57fa\u5730\u5740.\n\n\n4111    if (ss == 0) {  /* First time through or recovery */\n4112      char* base = (char*)CALL_MORECORE(0);\n4113      if (base != CMFAIL) {\n4114        size_t fp;\n4115        /* Adjust to end on a page boundary */\n4116        if (!is_page_aligned(base))\n4117          ssize += (page_align((size_t)base) - (size_t)base);\n4118        fp = m-\nfootprint + ssize; /* recheck limits */\n4119        if (ssize \n nb \n ssize \n HALF_MAX_SIZE_T \n\n4120            (m-\nfootprint_limit == 0 ||\n4121             (fp \n m-\nfootprint \n fp \n= m-\nfootprint_limit)) \n\n4122            (br = (char*)(CALL_MORECORE(ssize))) == base) {\n4123          tbase = base;\n4124          tsize = ssize;\n4125        }\n4126      }\n4127    }\n\n\n\n\n\n\u8fd9\u91cc\u5c31\u662f\u5904\u7406top chunk\u4e3aNULL \u65f6\u7684\u60c5\u51b5, \u4e5f\u5c31\u662f\u7b2c\u4e00\u6b21\u8bf7\u6c42\u5185\u5b58\u5206\u914d,\u56e0\u4e3atop\u4e3a0.\nCALL_MORECORE\n\u5b8f\u5c55\u5f00\u6765\u5c31\u662f\nsbrk\n.\u8fd9\u91cc\u662f\u83b7\u53d6\u5f53\u524d\u7684program break\u7684\u5730\u5740.\nssize\u5c31\u662f\u8bf7\u6c42\u589e\u52a0\u7684\u5927\u5c0f,\u7136\u540e\u518d\u6b21\u8c03\u7528sbrk.\n\n\n4128    else {\n4129      /* Subtract out existing available top space from MORECORE request. */\n4130      ssize = granularity_align(nb - m-\ntopsize + SYS_ALLOC_PADDING);\n4131      /* Use mem here only if it did continuously extend old space */\n4132      if (ssize \n HALF_MAX_SIZE_T \n\n4133          (br = (char*)(CALL_MORECORE(ssize))) == ss-\nbase+ss-\nsize) {\n4134        tbase = br;\n4135        tsize = ssize;\n4136      }\n4137    }\n\n\n\n\n\n\u5bf9\u5e94top chunk \u5b58\u5728\u7684\u60c5\u51b5.\u76f4\u63a5\u6269\u5c55top chunk\u6240\u5728\u7684segment.\n\u4e0a\u9762\u4e24\u79cd\u60c5\u51b5\u7684tbase\u90fd\u6307\u5411\u589e\u957f\u7684\u5757\u7684\u57fa\u5730\u5740,tsize\u6307\u5411\u589e\u957f\u7684\u5927\u5c0f.\n\n\n4139    if (tbase == CMFAIL) {    /* Cope with partial failure */\n4140      if (br != CMFAIL) {    /* Try to use/extend the space we did get */\n4141        if (ssize \n HALF_MAX_SIZE_T \n\n4142            ssize \n nb + SYS_ALLOC_PADDING) {\n4143          size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - ssize);\n4144          if (esize \n HALF_MAX_SIZE_T) {\n4145            char* end = (char*)CALL_MORECORE(esize);\n4146            if (end != CMFAIL)\n4147              ssize += esize;\n4148            else {            /* Can\nt use; try to release */\n4149              (void) CALL_MORECORE(-ssize);\n4150              br = CMFAIL;\n4151            }\n4152          }\n4153        }\n4154      }\n4155      if (br != CMFAIL) {    /* Use the space we did get */\n4156        tbase = br;\n4157        tsize = ssize;\n4158      }\n4159      else\n4160        disable_contiguous(m); /* Don\nt try contiguous path in the future */\n4161    }\n4162\n4163    RELEASE_MALLOC_GLOBAL_LOCK();\n\n\n\n\n\n\u5982\u679c\u90e8\u5206\u5931\u8d25\u4e86,\u5373\u4e0a\u6587\u7684tbase\u8d4b\u503c\u65f6,if\u6761\u4ef6\u90e8\u5206\u4e0d\u6ee1,\u4e5f\u5c31\u662f,\u8bf7\u6c42\u7684ssize \n HALF_MAX_SIZE_T(ffffffff/2)\u6216\u8005\u5176\u4ed6\u7684\u60c5\u51b5.\u5219\u6211\u4eec\u7ee7\u7eed\u4f7f\u7528br\u7684\u5730\u5740\u8fdb\u884c\u6269\u5c55.\u4e0d\u8fc7\u4e00\u822c\u60c5\u51b5\u4e0btbase == CMFAIL \u65f6, br == CFAIL.\u4ece\u8fd9\u90e8\u5206\u7684\u4ee3\u7801\u903b\u8f91\u770b,\u5e94\u8be5\u662f\u975e\u8fde\u7eed\u7684sbrk\u7684\u903b\u8f91.\n\n\n4166  if (HAVE_MMAP \n tbase == CMFAIL) {  /* Try MMAP */\n4167    char* mp = (char*)(CALL_MMAP(asize));\n4168    if (mp != CMFAIL) {\n4169      tbase = mp;\n4170      tsize = asize;\n4171      mmap_flag = USE_MMAP_BIT;\n4172    }\n4173  }\n\n\n\n\n\n\u5c1d\u8bd5 mmap.\n\n\n4175  if (HAVE_MORECORE \n tbase == CMFAIL) { /* Try noncontiguous MORECORE */\n4176    if (asize \n HALF_MAX_SIZE_T) {\n4177      char* br = CMFAIL;\n4178      char* end = CMFAIL;\n4179      ACQUIRE_MALLOC_GLOBAL_LOCK();\n4180      br = (char*)(CALL_MORECORE(asize));\n4181      end = (char*)(CALL_MORECORE(0));\n4182      RELEASE_MALLOC_GLOBAL_LOCK();\n4183      if (br != CMFAIL \n end != CMFAIL \n br \n end) {\n4184        size_t ssize = end - br;\n4185        if (ssize \n nb + TOP_FOOT_SIZE) {\n4186          tbase = br;\n4187          tsize = ssize;\n4188        }\n4189      }\n4190    }\n4191  }\n\n\n\n\n\n\u5c1d\u8bd5\u975e\u8fde\u7eed\u7684sbrk.\n\n\n4198    if (!is_initialized(m)) { /* first-time initialization */\n4199      if (m-\nleast_addr == 0 || tbase \n m-\nleast_addr)\n4200        m-\nleast_addr = tbase;\n4201      m-\nseg.base = tbase;\n4202      m-\nseg.size = tsize;\n4203      m-\nseg.sflags = mmap_flag;\n4204      m-\nmagic = mparams.magic;\n4205      m-\nrelease_checks = MAX_RELEASE_CHECK_RATE;\n          // \u521d\u59cb\u5316 \u6240\u6709\u7684\u7bb1\u5b50. 32bit\u5168\u7f6e0\n4206      init_bins(m);\n4207#if !ONLY_MSPACES\n4208      if (is_global(m))\n            // \u521d\u59cb\u5316top chunk.\n4209        init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);\n4210      else\n4211#endif\n4212      {\n4213        /* Offset top by embedded malloc_state */\n4214        mchunkptr mn = next_chunk(mem2chunk(m));\n            // \u521d\u59cb\u5316top chunk.\n4215        init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) -TOP_FOOT_SIZE);\n4216      }\n4217    }\n\n\n\n\n\n\u5728\u8fd9\u91cc,\u624d\u662f\u771f\u6b63\u5730\u5bf9\u5185\u5b58\u7ba1\u7406\u7684\u4e00\u4e9b\u7ed3\u6784\u4f53\u8fdb\u884c\u521d\u59cb\u5316.\n\n\n4219    else {\n4220      /* Try to merge with an existing segment */\n4221      msegmentptr sp = \nm-\nseg;\n4222      /* Only consider most recent segment if traversal suppressed */\n4223      while (sp != 0 \n tbase != sp-\nbase + sp-\nsize)\n4224        sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp-\nnext;\n4225      if (sp != 0 \n\n4226          !is_extern_segment(sp) \n\n4227          (sp-\nsflags \n USE_MMAP_BIT) == mmap_flag \n\n4228          segment_holds(sp, m-\ntop)) { /* append */\n4229        sp-\nsize += tsize;\n4230        init_top(m, m-\ntop, m-\ntopsize + tsize);\n4231      }\n4232      else {\n4233        if (tbase \n m-\nleast_addr)\n4234          m-\nleast_addr = tbase;\n4235        sp = \nm-\nseg;\n4236        while (sp != 0 \n sp-\nbase != tbase + tsize)\n4237          sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp-\nnext;\n4238        if (sp != 0 \n\n4239            !is_extern_segment(sp) \n\n4240            (sp-\nsflags \n USE_MMAP_BIT) == mmap_flag) {\n4241          char* oldbase = sp-\nbase;\n4242          sp-\nbase = tbase;\n4243          sp-\nsize += tsize;\n4244          return prepend_alloc(m, tbase, oldbase, nb);\n4245        }\n4246        else\n4247          add_segment(m, tbase, tsize, mmap_flag);\n4248      }\n4249    }\n\n\n\n\n\n\u903b\u8f91\u5f88\u7b80\u5355,\u5c31\u662f\u5982\u679c\u65b0\u5206\u914d\u7684segemnt\u7684\u57fa\u5730\u5740\u662f\u67d0\u4e2asegment\u7684\u5c3e\u5730\u5740,\u5219\u8fd9\u4e24\u4e2a\u5408\u5e76,\u5426\u5219,\u76f4\u63a5\u5c06\u8be5\u65b0\u7684segment\u52a0\u5165\u5230\u5355\u5411\u94fe\u8868\u4e2d.\n\n\n4251    if (nb \n m-\ntopsize) { /* Allocate from new or extended top space */\n4252      size_t rsize = m-\ntopsize -= nb;\n4253      mchunkptr p = m-\ntop;\n4254      mchunkptr r = m-\ntop = chunk_plus_offset(p, nb);\n4255      r-\nhead = rsize | PINUSE_BIT;\n4256      set_size_and_pinuse_of_inuse_chunk(m, p, nb);\n4257      check_top_chunk(m, m-\ntop);\n4258      check_malloced_chunk(m, chunk2mem(p), nb);\n4259      return chunk2mem(p);\n4260    }\n4261  }\n\n\n\n\n\n\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u5185\u5b58\u5206\u914d,\u5219\u903b\u8f91\u5c06\u4f1a\u5230\u8fd9\u91cc,\u5728top chunk\u521d\u59cb\u5316\u540e,\u5c1d\u8bd5\u4ecetop chunk\u5206\u914d\u5185\u5b58.\n\n\ndlfree\u4ee3\u7801\u5206\u6790\n\n\ndlfree\u5c31\u6ca1\u6709dlmalloc\u90a3\u4e48\u591a\u89c4\u5219\u4e86,\u53ea\u8981\u4fdd\u8bc1\u8fb9\u754c\u6807\u8bb0\u6cd5,\u4fdd\u8bc1\u91ca\u653e\u7684\u5185\u5b58\u5757\u5b58\u653e\u5230\u5bf9\u5e94\u7684\u7bb1\u5b50\u4e2d\u5373\u53ef.\n\n\n4704void dlfree(void* mem) { \n4711  if (mem != 0) {\n\n\n\n\n\n\u68c0\u67e5mem\u5408\u6cd5\u6027.\n\n\n4711  if (mem != 0) {\n        //\u5c06mem\u8f6c\u6362\u6210chunk p\n4712    mchunkptr p  = mem2chunk(mem);\n4713#if FOOTERS\n4714    mstate fm = get_mstate_for(p);\n4715    if (!ok_magic(fm)) {\n4716      USAGE_ERROR_ACTION(fm, p);\n4717      return;\n4718    }\n4719#else /* FOOTERS */\n4720#define fm gm\n4721#endif /* FOOTERS */ \n4722    if (!PREACTION(fm)) {\n          // \u68c0\u67e5\u6807\u5fd7\u4f4d\u662f\u5426\u4e3ainuse.\n4723      check_inuse_chunk(fm, p);\n4724      if (RTCHECK(ok_address(fm, p) \n ok_inuse(p))) {\n            // \u83b7\u53d6chunksize\n4725        size_t psize = chunksize(p);\n            // \u83b7\u53d6\u5728\u5185\u5b58\u4e0a\u76f8\u8fde\u7684\u4e0b\u4e00\u4e2a\u5185\u5b58chunk.\n4726        mchunkptr next = chunk_plus_offset(p, psize); \n\n\n\n\n\n\u5c06\u7528\u6237\u6307\u9488\u8f6c\u6362\u4e3achunk\u7ed3\u6784\u4f53\u5e76\u505a\u5e38\u89c4\u68c0\u67e5.\n\n\n            // \u4e0a\u4e00\u4e2a\u5185\u5b58\u5757\u672a\u88ab\u4f7f\u7528\n4727        if (!pinuse(p)) {\n4728          size_t prevsize = p-\nprev_foot;\n4729          if (is_mmapped(p)) {\n                // \u662f\u901a\u8fc7\u7cfb\u7edfmmap\u5206\u914d\u7684\n4730            psize += prevsize + MMAP_FOOT_PAD;\n4731            if (CALL_MUNMAP((char*)p - prevsize, psize) == 0)\n4732              fm-\nfootprint -= psize;\n4733            goto postaction;\n4734          }\n4735          else {\n               // \u4e0e\u4e0a\u4e00\u4e2a\u5185\u5b58\u5757\u5408\u5e76\n4736            mchunkptr prev = chunk_minus_offset(p, prevsize);\n4737            psize += prevsize;\n4738            p = prev;\n4739            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */\n4740              if (p != fm-\ndv) {\n                    // p \u4e0d\u4e3a dv chunk, \u76f4\u63a5\u79fb\u9664.\n4741                unlink_chunk(fm, p, prevsize);\n4742              }\n4743              else if ((next-\nhead \n INUSE_BITS) == INUSE_BITS) {\n                    // \u5426\u5219,\u5408\u5e76\u5230dv chunk\u4e2d.\n4744                fm-\ndvsize = psize;\n4745                set_free_with_pinuse(p, psize, next);\n4746                goto postaction;\n4747              }\n4748            }\n4749            else\n4750              goto erroraction;\n4751          }\n4752        } \n\n\n\n\n\n\u4e0e\u524d\u4e00\u5757\u5185\u5b58\u5408\u5e76\u7684\u903b\u8f91.\n\n\n4754        if (RTCHECK(ok_next(p, next) \n ok_pinuse(next))) {\n\n\n\n\n\nok_pinuse(next)\u5b9e\u9645\u4e0a\u5c31\u662fcinuse(p). \u53ea\u662f\u8fd9\u91cc\u662f\u68c0\u67e5next\u7684\u6807\u5fd7\u4f4d\u662f\u5426\u6b63\u786e.\n\n\n              // next \u672a\u88ab\u4f7f\u7528, \u5219\u9700\u8981\u5408\u5e76.\n4755          if (!cinuse(next)) {  /* consolidate forward */\n4756            if (next == fm-\ntop) {\n                  // \u5982\u679cnext\u4e3atop, \u5219top\u589e\u957f.\u57fa\u5730\u5740\u6539\u4e3ap.\n4757              size_t tsize = fm-\ntopsize += psize;\n4758              fm-\ntop = p;\n4759              p-\nhead = tsize | PINUSE_BIT;\n4760              if (p == fm-\ndv) {\n                    // \u5982\u679cp\u4e3adv, \u5219\u6e05\u7a7adv.\n4761                fm-\ndv = 0;\n4762                fm-\ndvsize = 0;\n4763              }\n                  // \u68c0\u67e5top chunk\u7684\u5927\u5c0f\u662f\u5426\u9700\u8981\u8c03\u6574,\u9ed8\u8ba4\u6700\u5927\u4e3a 2 * 1024 * 1024\n4764              if (should_trim(fm, tsize))\n4765                sys_trim(fm, 0);\n4766              goto postaction;\n4767            }\n4768            else if (next == fm-\ndv) {\n                  // \u5982\u679cnext\u4e3adiv, \u5219dv\u589e\u957f, \u57fa\u5730\u5740\u6539\u4e3ap\n4769              size_t dsize = fm-\ndvsize += psize;\n4770              fm-\ndv = p;\n4771              set_size_and_pinuse_of_free_chunk(p, dsize);\n4772              goto postaction;\n4773            }\n4774            else {\n                  // next\u4e3a\u666e\u901a\u7684\u5185\u5b58\u5757,\u5c06next\u5408\u5e76\u5230p,\u5e76\u5c06next\u51b2\u94fe\u8868\u6216\u8005\u6811\u4e2d\u5220\u9664.\n4775              size_t nsize = chunksize(next);\n4776              psize += nsize;\n4777              unlink_chunk(fm, next, nsize);\n4778              set_size_and_pinuse_of_free_chunk(p, psize);\n4779              if (p == fm-\ndv) {\n4780                fm-\ndvsize = psize;\n4781                goto postaction;\n4782              }\n4783            }\n              // \u4e0e\u540e\u4e00\u5757\u5185\u5b58\u5408\u5e76\u7684\u903b\u8f91.\n4785          else\n4786            set_free_with_pinuse(p, psize, next);\n\n\n\n\n\n\u5f53\u7136,\u5982\u679c\u4e0d\u9700\u8981\u5408\u5e76,\u5219\u76f4\u63a5\u5220\u9664.\n\n\n\u4ee5\u4e0a\u90fd\u53ea\u662f\u5408\u5e76\u5757,\u5e76\u5220\u9664\u88ab\u5408\u5e76\u7684\u7ed3\u70b9,\u63a5\u4e0b\u6765\u5c31\u662f\u5c06\u5408\u5e76\u540e\u7684\u5757\u63d2\u5165\u5230\u6b63\u786e\u7684\u7bb1\u5b50\u7684\u7ed3\u6784\u4e2d.\n\n\n4788          if (is_small(psize)) {\n                // \u5408\u5e76\u5904\u7406\u540e\u7684\u5185\u5b58\u4e3a\u5c0f\u5185\u5b58\n                // \u5df2\u5728\u4e0a\u6587\u4ecb\u7ecd\u8fc7\u8be5\u51fd\u6570.\n4789            insert_small_chunk(fm, p, psize);\n4790            check_free_chunk(fm, p);\n4791          }\n4792          else {\n                // \u5408\u5e76\u540e\u4e3a\u5927\u5185\u5b58\n4793            tchunkptr tp = (tchunkptr)p;\n4794            insert_large_chunk(fm, tp, psize);\n4795            check_free_chunk(fm, p);\n4796            if (--fm-\nrelease_checks == 0)\n4797              release_unused_segments(fm);\n4798          }\n4799          goto postaction;\n4800        }\n4801      }\n4802    erroraction:\n4803      USAGE_ERROR_ACTION(fm, p);\n4804    postaction:\n4805      POSTACTION(fm);\n4806    }\n4807  }  \n\n\n\n\n\ninsert_small_chunk\n \u5df2\u7ecf\u5728\u4e0a\u6587\u4ecb\u7ecd\u8fc7.\u5b9e\u9645\u884c\u4e3a\u5c31\u662f\u6839\u636e\u5185\u5b58\u5927\u5c0f\u627e\u7bb1\u53f7,\u5982\u679c\u8be5\u7bb1\u5b50\u672c\u8eab\u4e3a\u7a7a,\u5219\u4fee\u6539binmap\u72b6\u6001\u5e76\u63d2\u5165\u8be5chunk.\u5982\u679c\u4e0d\u4e3a\u7a7a,\u5219\u6267\u884c\u53cc\u5411\u94fe\u8868\u63d2\u5165.\n\u800c\ninsert_large_chunk\n\u662f\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u7684\nunlink_large_chunk\n\u7684\u9006\u64cd\u4f5c.\u540c\u6837\u662f\u5b9a\u4f4d\u7bb1\u53f7,\u904d\u5386\u6811.\u7136\u540e\u627e\u5230\u5bf9\u5e94\u8be5\u5927\u5c0f\u7684\u7ed3\u70b9.\u5b83\u5b58\u5728\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5:\n\n\n\n\n\u8be5\u7bb1\u5b50\u4e2d\u4e0d\u5b58\u5728\u6811. \u5219\u521b\u5efa\u5e76\u5c06\u8be5\u7ed3\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9.\n\n\n\u5df2\u5b58\u5728\u6811,\u4f46\u4e0d\u5b58\u5728\u5bf9\u5e94\u5927\u5c0f\u7684\u7ed3\u70b9, \u5219\u63d2\u5165\u7ed3\u70b9.\n\n\n\u5df2\u5b58\u5728\u6811,\u4e14\u5b58\u5728\u5bf9\u5e94\u5927\u5c0f\u7684\u7ed3\u70b9,\u5219\u63d2\u5165\u53cc\u5411\u94fe\u8868\n\n\n\n\n3662#define insert_large_chunk(M, X, S) {\\ \n3663  tbinptr* H;\\ \n3664  bindex_t I;\\ \n3665  compute_tree_index(S, I);\\ \n3666  H = treebin_at(M, I);\\ \n3667  X-\nindex = I;\\ \n3668  X-\nchild[0] = X-\nchild[1] = 0;\\ \n3669  if (!treemap_is_marked(M, I)) {\\ \n3670    mark_treemap(M, I);\\ \n3671    *H = X;\\ \n3672    X-\nparent = (tchunkptr)H;\\ \n3673    X-\nfd = X-\nbk = X;\\ \n3674  }\\\n\n//\u4e0a\u9762\u4e3a\u60c5\u51b5\u4e00. \u5c06treemap \u5bf9\u5e94I\u7684\u4f4d\u7f6e\u7f6e1,\u5e76\u5c06\u8be5\u7ed3\u70b9\u4f5c\u4e3a\u6811\u7684\u6839\u7ed3\u70b9.\n\n3675  else {\\ \n3676    tchunkptr T = *H;\\ \n3677    size_t K = S \n leftshift_for_tree_index(I);\\ \n3678    for (;;) {\\ \n3679      if (chunksize(T) != S) {\\ \n3680        tchunkptr* C = \n(T-\nchild[(K \n (SIZE_T_BITSIZE-SIZE_T_ONE)) \n 1]);\\ \n3681        K \n= 1;\\ \n3682        if (*C != 0)\\ \n3683          T = *C;\\ \n3684        else if (RTCHECK(ok_address(M, C))) {\\ \n3685          *C = X;\\ \n3686          X-\nparent = T;\\ \n3687          X-\nfd = X-\nbk = X;\\ \n3688          break;\\ \n3689        }\\ \n3690        else {\\ \n3691          CORRUPTION_ERROR_ACTION(M);\\ \n3692          break;\\ \n3693        }\\ \n3694      }\\\n// \u4e0a\u9762\u4e3a\u60c5\u51b5\u4e8c, \u5728\u5173\u952e\u7801\u8def\u5f84\u4e0a\u5b58\u5728\u7a7a\u7ed3\u70b9,\u5219\u63d2\u5165\u8be5\u7ed3\u70b9.\n3695      else {\\ \n3696        tchunkptr F = T-\nfd;\\ \n3697        if (RTCHECK(ok_address(M, T) \n ok_address(M, F))) {\\\n3698          T-\nfd = F-\nbk = X;\\ \n3699          X-\nfd = F;\\ \n3700          X-\nbk = T;\\ \n3701          X-\nparent = 0;\\ \n3702          break;\\ \n3703        }\\ \n3704        else {\\ \n3705          CORRUPTION_ERROR_ACTION(M);\\ \n3706          break;\\ \n3707        }\\ \n3708      }\\ \n3709    }\\ \n3710  }\\\n\n// \u4e0a\u9762\u4e3a\u60c5\u51b5\u4e09,\u8be5\u5927\u5c0f\u7684\u7ed3\u70b9\u5b58\u5728,\u5219\u63d2\u5165\u53cc\u5411\u94fe\u8868.\n\n\n\n\n\n\u603b\u7ed3\n\n\n\u6570\u636e\u7ed3\u6784\u603b\u7ed3\n\n\n\n\ndlmalloc\u4e2d\u6309\u7167\u5185\u5b58\u7684\u7c92\u5ea6\u5927\u5c0f,\u5206\u4e3achunk\u548csegment\u4e24\u79cd\u6570\u636e\u7ed3\u6784.\n\n\ndlmalloc\u4e2d\u6309\u7167\u5185\u5b58\u7684\u5927\u5c0f,\u67093\u79cd\u5185\u5b58\u7ba1\u7406\u65b9\u5f0f,\u518d\u52a0\u4e0a\u8fb9\u754c\u6807\u8bb0\u6cd5,\u603b\u5171\u56db\u79cd\u7ba1\u7406\u65b9\u5f0f:\n\n\n\u8fb9\u754c\u6807\u8bb0\u6cd5\uff0c\u5e76\u4e14\u4efb\u610f\u76f8\u8fde\u4e24\u5757\u5185\u5b58\u4e0d\u540c\u4e3a\u7a7a\u95f2\u5185\u5b58.\n\n\n\u53cc\u5411\u94fe\u8868\u7ba1\u7406\u5927\u5c0f\u5c0f\u4e8e256byte\u7684\u5185\u5b58.\n\n\ndlmalloc\u6811\u4e0e\u53cc\u5411\u94fe\u8868\u7ed3\u5408\u7ba1\u7406\u5927\u5c0f\u5927\u4e8e256byte\u7684\u5185\u5b58.\n\n\n\u5355\u5411\u94fe\u8868\u7ba1\u7406segment\u7ed3\u6784.\n\n\n\n\n\n\ndlmalloc\u901a\u8fc7\u4e24\u4e2a\u4f4d\u56fe\u5206\u522b\u7ba1\u7406\u53cc\u5411\u94fe\u8868\u548cdlmalloc\u6811.\n\n\n\n\n+---------------------------segment-------------------------------------+\n+  0X10   |  0X12  |  0x109 |  0x110 |                                  +\n+ chunk0  | chunk1 | chunk2 | chunk3 |            top                   +\n+-----------------------------------------------------------------------+\n\n\n\n\n\n\u4e0a\u9762\u7684\u6570\u5b57\u4e3achunk\u7ed3\u6784\u4f53\u4e2d\u7684size.\nchunk0\u548cchunk1 \u90fd\u4e3a\u5c0f\u5185\u5b58,\u5927\u5c0f\u4e3a0x10, 16byte.\u800c chunk1 \u76840x02\u662f\u8868\u793achunk0\u8868\u793a\u81ea\u5df1\u4f7f\u7528.chunk0 \u5f52\u5c5e\u4e0e\u7bb1\u53f7\u4e3a2,\u7531\u53cc\u5411\u94fe\u8868\u7ba1\u7406.\nchunk2\u548cchunk3 \u4e3a\u5927\u5185\u5b58, \u5927\u5c0f\u4e3a0x108, 264byte. chunk2 \u5927\u5c0f | 0x01\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u88ab\u4f7f\u7528. chunk3 | 0x02 \u56e0\u4e3a\u81ea\u5df1\u5728\u88ab\u4f7f\u7528. \u8fd9\u4e24\u4e2a\u5f52\u5c5e\u4e0e\u7bb1\u53f7\u4e3a0\u7684\u6811\u7ba1\u7406.\n\u6700\u540e \u662ftop\u5757.\n\n\nsetgment\u7531\u7cfb\u7edf\u901a\u8fc7sbrk\u5206\u914d.\ntop \u4ecesegment\u800c\u6765.\u5982\u679ctop\u8d85\u8fc7\u4e00\u4e2a\u9600\u503c,\u5c31\u4f1a\u901a\u8fc7sbrk,\u7f29\u5c0f.\u5982\u679c\u592a\u5c0f,\u901a\u8fc7sbrk\u6269\u5927top.\n\u5404\u4e2achunk \u7531 top\u5207\u5206, \u6216\u8005free\u65f6, \u6216\u8005dv chunk\u88ab\u66ff\u6362\u65f6\u4ea7\u751f.\n\n\n\u7b97\u6cd5\u603b\u7ed3:\n\n\n\n\n\n\n\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\n\n\n\n\n\u8ddf\u636e\u8bf7\u6c42\u5927\u5c0f,\u4f18\u5148\u5bfb\u627e\u6700\u5339\u914d\u7684\u7bb1\u5b50,\u4e4b\u540e\u4e34\u8fd1\u7bb1\u5b50.\u5728\u80fd\u4e0d\u5206\u5272\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\u5c3d\u91cf\u4e0d\u5206\u5272\u5185\u5b58.\n\n\n\u5982\u679cdv chunk\u8db3\u591f\u5927,\u5219\u4f7f\u7528dv chunk.\n\n\n\u5982\u679c\u524d\u4e24\u4e2a\u4e0d\u6ee1\u8db3,\u5219\u5728smallbin\u4e2d\u5bfb\u627e\u6700\u63a5\u8fd1\u8bf7\u6c42\u5927\u5c0f\u7684\u7a7a\u95f2\u5757\u7bb1\u53f7.\n\n\n\u5982\u679ctop \u8db3\u591f\u5927,\u4f7f\u7528top.\n\n\n\u5982\u679c\u8bf7\u6c42\u5185\u5b58\u5b9e\u5728\u592a\u5927,\u5219\u4f7f\u7528\u7cfb\u7edf\u5206\u914d.\n\n\n\n\n\n\n\n\n\u5927\u5185\u5b58\u5206\u914d\u89c4\u5219\n\n\n\n\n\u5982\u679ctreebin\u4e2d\u627e\u5230\u6700\u5408\u9002\u7684\u6700\u5c0f\u5185\u5b58,\u5982\u679c\u5b83\u6bd4dv chunk\u66f4\u5408\u9002,\u5c31\u4f7f\u7528\u5b83.\n\n\n\u5982\u679cdv chunk\u6bd4\u5176\u4ed6\u6240\u6709\u5408\u9002,\u5219\u4f7f\u7528dv chunk.\n\n\n\u5982\u679ctop \u8db3\u591f\u5927,\u5219\u4f7f\u7528top.\n\n\n\u5982\u679c\u8bf7\u6c42\u5927\u5c0f \n= mmap\u7684\u9600\u503c,\u5219\u4f7f\u7528mmap.\n\n\n\u76f4\u63a5\u4ece\u7cfb\u7edf\u5206\u914d\u5185\u5b58.\n\n\n\n\n\n\n\n\n\u5185\u5b58\u91ca\u653e\u89c4\u5219\n\n\n\n\n\u5982\u679c\u5728\u865a\u62df\u5185\u5b58\u4e0a\u7684\u5f53\u524d\u91ca\u653e\u5185\u5b58\u7684\u524d/\u540e\u4e00\u4e2a\u5185\u5b58\u4e3a\u7a7a\u95f2,\u5219\u5408\u5e76.\n\n\n\u5982\u679c\u524d/\u540e\u4e00\u4e2a\u5185\u5b58\u4e3adv chunk, \u5219\u5408\u5e76\u5230dv chunk\n\n\n\u5982\u679c\u540e\u4e00\u4e2a\u5185\u5b58\u4e3atop, \u5219\u5408\u5e76\u5230top\n\n\n\u5982\u679c\u524d/\u540e\u4e00\u4e2a\u5185\u5b58\u4e3a\u666e\u901a\u5185\u5b58\u5757,\u5219\u5220\u9664\u540e,\u67e5\u627e\u5e76\u63d2\u5165\u7b26\u5408\u5927\u5c0f\u7684\u7bb1\u5b50\u4e2d.\n\n\n\n\n\n\n\n\nsmallbin \u548c treebin\u7684\u89c4\u5219.\n\n\n\n\nsmallbin \u4e3a32bit\u6570,\u6ca1\u4e00\u4e2abit\u5bf9\u5e94\u4e00\u4e2a\u7bb1\u5b50\u7684\u72b6\u6001.1 \u4e3a\u6709\u7a7a\u95f2\u5185\u5b58, 0 \u4e3a\u65e0. 32\u4e2a\u7bb1\u5b50\u7684\u5927\u5c0f\u4e3a\u4ee58 \u4e3a\u57fa\u6570, \u4ee58 \u4e3a\u589e\u7387, \u957f\u5ea6\u4e3a32\u7684\u7b49\u5dee\u6570\u5217\n\n\ntreebin\u7684\u72b6\u6001\u4e0esmallbin\u4e00\u81f4. treebin\u7684\u5404\u4e2a\u7bb1\u5b50\u7684\u5927\u5c0f\u89c1\u4e0a\u6587.\n\n\n\n\n\n\n\n\ntreebin\u4e2d\u7684\u6811\u7684\u641c\u7d22\u7b97\u6cd5\n\n\n\n\n\u8be5\u6811\u8868\u793a\u4e00\u6bb5\u5185\u5b58\u8303\u56f4.\u6240\u4ee5\u6ca1\u4e00\u68f5\u5b50\u6811\u7528\u4e8c\u5206\u6cd5\u8868\u793a\u5bf9\u5e94\u7684\u533a\u95f4\u8303\u56f4.\n\n\n\u5de6\u5b50\u6811\u4e0a\u7684\u4efb\u610fchunk\u5927\u5c0f \u90fd\u5c0f\u4e8e\u5176\u53f3\u5b50\u6811\u7684\u4efb\u610fchunk\u7684\u5927\u5c0f,\n\n\n\u53c2\u8003 \ntmalloc_large\n,\ninsert_large_chunk\n \u548c\nunlink_large_chunk\n\u7684\u89e3\u6790.", 
            "title": "dlmalloc \u6d45\u6790"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#dlmalloc", 
            "text": "version 1.0 by Werther Zhang @ 2014.03.15 Write done @WizNote  Version 1.1   by Werther Zhang @ 2014.03.20 Export to @Word  Version  1.2  by Werther Zhang @ 2016.07.02 Move to @leanote", 
            "title": "dlmalloc\u6d45\u6790"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#dlmalloc_1", 
            "text": "dlmalloc\u5728\u67d0\u4e9b\u7a0b\u5ea6\u4e0a\u8bf4\uff0c\u662f\u6700\u597d\u7684\u5185\u5b58\u7ba1\u7406\u5de5\u5177\u4e4b\u4e00\u3002\u5b83\u662f\u7531Doug Lea \u57281987\u5e74\u5f00\u59cb\u7f16\u5199\uff0c\u6240\u4ee5\u5927\u90e8\u5206\u4eba\u4f1a\u79f0\u547c\u5b83\u4e3aDoug Lea's Malloc\uff0c \u7b80\u79f0dlmalloc\u3002", 
            "title": "dlmalloc\u4ecb\u7ecd"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#_1", 
            "text": "dlmalloc \u6839\u636e\u5185\u5b58\u7c92\u5ea6\u7684\u5927\u5c0f\u5206\u522b\u4f7f\u7528chunk\u548csegment\u8fdb\u884c\u7ba1\u7406\u3002Segment\u662f\u901a\u8fc7sbrk\u5206\u914d\uff0c\u7c7b\u4f3c\u8fdb\u7a0b\u7684\u6570\u636e\u6bb5\uff0c\u5c5e\u4e8e\u6781\u5c11\u9047\u5230\u7684\u60c5\u51b5\u3002Dlmalloc\u4e2d\u5927\u91cf\u5b58\u5728\u7684\u5185\u5b58\u5757\u662fchunk\u3002Chunk\u7684\u7ed3\u6784\u5982\u4e0b\u3002  \u88ab\u7528\u6237\u4f7f\u7528\u7684chunk\u7ed3\u6784\u770b\u8d77\u6765\u50cf\u4e0b\u9762\u8fd9\u6837\uff08\u975e\u7cbe\u786e\u56fe\uff09\uff1a   \u800c\u672a\u88ab\u4f7f\u7528\u7684chunk\u770b\u8d77\u6765\u5982\u4e0b\uff08\u975e\u7cbe\u786e\u56fe\uff09\uff1a   \n\u5728\u865a\u62df\u5730\u5740\u4e0a\uff0cdlmalloc\u4f1a\u4fdd\u8bc1\u7a7a\u95f2\u7684\u5185\u5b58\u5757\u5b58\u5728\u201c\u5b64\u5c9b\u6548\u5e94\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4efb\u4e00\u5757\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u524d\u540e\u5fc5\u5b9a\u662f\u88ab\u4f7f\u7528\u7684\u5185\u5b58\u5757\u3002\u56e0\u4e3a\u5728free\u6216\u8005\u5176\u4ed6\u4efb\u4f55\u65f6\u5019\uff0cdlmalloc\u603b\u662f\u4f1a\u5408\u5e76\u7a7a\u95f2\u7684\u5185\u5b58\u5757\u3002 \n\u5bf9 \u4e8echunk\uff0c\u6839\u636e\u5176\u5927\u5c0f\uff0c\u5206\u4e3a\u5927\u5185\u5b58\u548c\u5c0f\u5185\u5b58\u3002\u5c0f\u5185\u5b58\u753132\u4e2a\u53cc\u5411\u94fe\u8868\u901a\u8fc7\u5206\u7bb1\uff08\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u5bf9\u5e94\u4e00\u4e2a\u5927\u5c0f\uff0c\u6bcf\u4e2a\u7bb1\u5b50\u4e2d\u5b58\u653e\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff09\u8fdb\u884c\u7ba1\u7406\uff0c\u800c\u5927 \u5185\u5b58\u7edf\u4e00\u7531bitwise tries\u6811\u901a\u8fc7\u5206\u7bb1\uff08\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u5bf9\u5e94\u4e00\u4e2a\u5185\u5b58\u8303\u56f4\uff0c\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u4e2d\u5b58\u653e\u4e00\u68f5\u6811\uff0c\u6bcf\u4e00\u68f5\u6811\u4e2d\u82e5\u6709\u7b49\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u7531\u53cc\u5411\u94fe\u8868\u7ba1\u7406\uff09 \u8fdb\u884c\u7ba1\u7406\u3002 \n\u6bcf\u4e00\u4e2achunk\u7684\u5927\u5c0f\u5fc5\u987b\u4e3a8byte\u7684\u6574\u6570\u500d\u3002\u6240\u4ee5\u5728\u2019size of chunk\u2019 \u57df\u7684\u4f4e\u4e09\u4f4d\u5b58\u653e\u4e86\u8be5chunk\u5c5e\u6027\u7684\u6807\u5fd7\u4f4d\u3002 \nP (PINUSE_BIT) \u4f4d, \u4fdd \u5b58\u5728\u5185\u5b58\u5757\u5927\u5c0f(\u4e00\u822c\u662f\u53cc\u5b57\u8282\u7684\u500d\u6570)\u7684\u672a\u4f7f\u7528\u7684\u4f4e\u4f4d, \u662f\u4e00\u4e2a\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u662f\u5426\u88ab\u4f7f\u7528\u7684bit\u4f4d.\u5982\u679c\u8fd9\u4e2abit\u4f4d\u88ab\u6e05\u7406\u4e86,\u90a3\u4e48\u5728\u5f53\u524d\u5185\u5b58\u5757 \u4e4b \u524d\u7684\u4e00\u4e2a\u5b57 \u5927\u5c0f\u6570\u636e\u4fdd\u5b58\u7740\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u7528\u4e8e\u5bfb\u627e\u524d\u4e00\u4e2a\u5185\u5b58\u5757.\u800c \u7b2c\u4e00\u4e2a\u5185\u5b58\u5757\u8fd9\u4e2abit\u4f4d\u603b\u662f\u88ab\u7f6e\u4e0a\u7684,\u9632\u6b62\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u5185\u5b58\u533a\u57df.\u5982\u679c\u67d0\u4e2a \u5185 \u5b58\u5757\u7684 pinuse\u88ab\u8bbe\u7f6e\u4e86,\u4f60\u5c31\u65e0\u6cd5\u51b3\u5b9a\u4e0a\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u5e76\u4e14\u5982\u679c\u4f60\u771f\u7684\u5c1d \u8bd5\u8fd9 \u4e48\u505a\u4e86,\u6709\u53ef\u80fd\u5185\u5b58\u8bbf\u95ee\u51fa\u9519. \nC (CINUSE_BIT) bit\u4f4d, \u4fdd\u5b58\u5728\u5185\u5b58\u5757\u7684\u7b2c\u4e8c\u4f4e\u7684bit\u4f4d,\u5197\u4f59\u5730\u8bb0\u5f55\u7740\u5f53\u524d\u5757\u662f \u5426\u88ab\u4f7f\u7528\u4e86(\u9664\u975e\u5f53\u524d\u5185\u5b58\u5757\u662f\u88ab\u6620\u5c04\u7684).\u8fd9\u4e2a\u5197\u4f59\u4fe1\u606f\u7528\u4e8e\u5728free\u548crealloc\u64cd \u4f5c\u65f6\u7684\u68c0\u67e5,\u5e76\u4e14\u51cf\u5c11\u5728\u6267\u884cfree\u548c\u5408\u5e76\u5185\u5b58\u5757\u65f6\u7684\u95f4\u63a5\u64cd\u4f5c. \n\u4efb\u4f55\u65b0\u5206\u914d\u7684\u5185\u5b58\u5757\u5fc5\u987b\u90fd\u8bbe\u7f6e\u4e86cinuse\u548cpinuse.\u8fd9\u610f\u5473\u7740,\u4efb\u4f55\u5206\u914d\u4e86\u7684\u5185 \u5b58\u5757\u7684\u8fb9\u754c\u8981\u4e48\u662f\u4e00\u4e2a\u5148\u524d\u5206\u914d\u5e76\u4e14\u4ecd\u7136\u5728\u4f7f\u7528(in-use)\u7684\u5185 \u5b58\u5757,\u8981\u4e48\u662f\u5b83\u81ea \u5df1\u7684\u5927\u5185\u5b58\u533a\u57df(segment)\u7684\u5730\u5740.\u8fd9\u6837\u786e\u4fdd\u6240\u6709\u7684\u5185\u5b58\u7533\u8bf7(allocations)\u90fd\u662f\u4ece\u4efb\u4f55\u80fd\u627e\u5230\u7684\u5185\u5b58\u5757\u7684\u201c\u6700\u4f4e\u201d\u90e8\u5206 \u83b7\u53d6.\u8fdb\u4e00\u6b65\u5730\u8bf4,\u4e0d\u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u7a7a\u95f2\u5185 \u5b58\u5757\u5728\u7269\u7406\u4e0a\u7d27\u90bb\u7740\u53e6 \u4e00\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757,\u6240\u4ee5\u6bcf\u4e00\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757\u88ab\u8bc1\u5b9e\u5728\u4f7f\u7528 (inuse)\u7684\u5185\u5b58\u5757\u6216\u8005\u5185\u5b58\u5c3e \u90e8\u4e4b\u524d\u548c\u4e4b\u540e. \n\u6ce8\u610f: \u5f53\u524d\u5757\u7684 \u2019foot\u2019\u5b9e\u9645\u4e0a\u4ee3\u8868\u7740\u4e0b\u4e00\u4e2a\u5185\u5b58\u5757\u7684prev_foot.\u8fd9\u4f7f\u5bf9\u9f50\u7b49\u64cd \u4f5c\u5904\u7406\u53d8\u5f97\u5bb9\u6613\u4f46\u4f1a\u4f7f\u4eba\u5728\u6269\u5c55\u6216\u7ef4\u62a4\u8fd9\u4efd\u4ee3\u7801\u65f6\u611f\u5230\u56f0\u60d1. \n\u4ee5\u4e0b\u662f\u5bf9\u7279\u6b8a\u7684\u5185\u5b58\u5757\u7684\u8bf4\u660e:   \u7279 \u6b8a\u7684\u5185\u5b58\u5757\u2019top\u2019\u662f\u6700\u9876\u4e0a\u7684\u53ef\u7528\u5185\u5b58\u5757(i.e., \u7d27\u90bb\u7740\u53ef\u7528\u5185\u5b58\u7684\u8fb9\u754c). \u8fd9\u5757\u5185\u5b58\u5757\u4f1a\u88ab\u7279\u6b8a\u5bf9\u5f85. Top \u5185\u5b58\u5757\u4e0d\u4f1a\u88ab\u5305\u542b\u5728\u4efb\u4f55\u7684\u5185\u5b58\u5206 \u7c7b\u7bb1\u91cc, \u53ea\u6709\u5728\u6ca1\u6709\u4efb\u4f55\u5176\u4ed6\u5185\u5b58\u5757\u53ef\u4f7f\u7528\u65f6,\u624d\u88ab\u4f7f\u7528,\u5e76\u4e14\u5728\u5b83\u975e\u5e38\u5927\u65f6(\u67e5\u770b M_TRIM_THRESHOLD) \u4f1a\u88ab\u91ca\u653e\u4e00\u90e8\u5206\u56de\u7cfb\u7edf.\u5728\u5b9e\u9645 \u4e0a,top\u5185\u5b58\u5757\u4e00\u822c\u88ab\u8ba4 \u4e3a\u662f\u6bd4\u5176\u4ed6\u6240\u6709\u7684\u5185\u5b58\u5757\u90fd\u5927.Top\u5185\u5b58\u5757\u4ece\u6765\u4e0d\u4f1a\u66f4\u65b0\u5b83\u7684\u5c3e\u90e8\u6570\u636e\u533a\u57df\u56e0 \u4e3a\u6839\u672c\u6ca1\u6709\u5185\u5b58\u5757\u4f1a\u5728\u7d22\u5f15\u4e0a\u7d27\u8ddf\u5176\u540e.\u4f46\u662f,\u7a7a\u95f4 \u8fd8\u662f\u4f1a\u5206\u914d\u7ed9\u5b83 (TOP_FOOT_SIZE) \u7528\u6237\u505a\u5185\u5b58\u5757\u7684\u62c6\u5206\u548c\u5408\u5e76,\u5f53\u7a7a\u95f4\u9700\u8981\u6269\u5c55\u65f6.  dv chunk \u662f\u4fdd\u5b58\u4e86\u6700\u8fd1\u88ab\u4f7f\u7528\u5e76\u5207\u5272\u8fc7\u7684\u5185\u5b58\u5757\uff0c\u4fdd\u5b58\u5728\u5168\u5c40\u7684gm\u4e2d\u3002\u5b83\u4e0d\u5f52\u5c5e\u5230\u53cc\u5411\u94fe\u8868\u6216\u8005\u6811\u4e2d\u7ba1\u7406\u3002\u4f46\u5f53\u5b83\u88ab\u66ff\u6362\u65f6\uff0c\u4e5f\u4f1a\u52a0\u5165\u5185\u5b58\u7ba1\u7406\u4e2d\u3002 \nBitwise trie \u6811, \u5b9e\u9645\u4e0a\u662f\u7ed3\u5408\u4e86\u4e8c\u53c9\u6811\u548ctrie\u6811(\u53c8\u53eb\u5b57\u5178\u6811, \u524d\u7f00\u6570).\u4e8c\u53c9\u6811\u53ea\u6709\u5de6\u53f3\u5b50\u6811. Trie\u6811\u662f\u4e00\u79cd\u6709\u5e8f\u6811,\u7528\u4e8e\u4fdd\u5b58\u5173\u8054\u6570\u7ec4,\u7c7b\u4f3c hash table, \u6709key \u548c value \u7ed3\u6784. \u5982\u4e0b\u56fe.key \u5b9e\u9645\u4e0a\u5c31\u662f\u5230\u8fbevalue\u7684\u8def\u5f84.\u800cbitwise trie, \u5b83\u662f\u5c06 key\u8bbe\u7f6e\u4e3a0/1, \u6240\u4ee5, \u662f\u4e00\u68f5\u4e8c\u53c9\u6811.\u5728dlmalloc\u7684bitwise trie tree\u4e2d, 0 \u4ee3\u8868\u8fdb\u5165\u5de6\u5b50\u6811, 1 \u4ee3\u8868\u8fdb\u5165\u53f3\u5b50 \u6811. \u800ckey\u7684\u957f\u5ea6\u5bf9\u5e94\u8def\u5f84\u7684\u6df1\u5ea6.\u53c2\u8003 [treebins\u548c\u6811\u7ba1\u7406\u56fe\u89e3] \u7684\u56fe,\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u8981\u67e5\u627e\u7684\u662f512\u5bf9\u5e94\u7684\u7ed3\u70b9, \u5219\u5c06520\u5bf9 \u5e94\u4e8c\u8fdb\u5236\u7801\u662f1000001000, \u5bf9\u5e94\u7684\u7bb1\u5b50\u53f7\u662f2\u53f7,\u5219\u5176\u8868\u793a\u7684\u5185\u5b58\u8303\u56f4\u4e3a256, \u7279\u5f81\u7801\u957f\u5ea6\u4e3a8, \u4e5f\u5c31\u662f00001000.\u8003\u8651\u5230, \u6240\u6709\u8bf7 \u6c42\u5927\u5c0f\u4e3a8byte\u500d\u6570,\u6240\u4ee5, \u5b9e\u9645\u7279\u5f81\u7801\u4e3a00001, \u6811\u6df1\u4e3a5, \u524d4\u5c42\u4e3a\u5de6\u5b50\u6811,\u7b2c\u4e94\u5c42\u4e3a\u53f3\u5b50\u6811.\u4f46\u521a\u624d\u63cf\u8ff0\u7684\u662ftrie\u6811\u548c bitwise trie \u6811, \u4e0d\u662fdlmalloc\u4f7f\u7528\u7684\u6811.", 
            "title": "\u7b97\u6cd5\u6982\u89c8"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#mspace", 
            "text": "struct   malloc_chunk   {  size_t                 prev_foot ;    /* \u5982\u679c\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7a7a\u95f2,\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f */  size_t                 head ;         /* \u5927\u5c0f\u548cinuse bit\u4f4d*/  struct   malloc_chunk *   fd ;           /* \u5982\u679c\u662f\u7a7a\u95f2\u5185\u5b58\u5757,\u6307\u5411\u53cc\u5411\u94fe\u8868*/  struct   malloc_chunk *   bk ;  };  typedef   struct   malloc_chunk    mchunk ;  typedef   struct   malloc_chunk *   mchunkptr ;  typedef   struct   malloc_chunk *   sbinptr ;    /* \u5185\u5b58\u5757\u5206\u7c7b\u7bb1\u7684\u7c7b\u578b */ \ufeff\u200b", 
            "title": "\u975eMSPACE\u4ee3\u7801\u903b\u8f91\u5206\u6790"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#head", 
            "text": "PINUSE_BIT \u5728\u524d\u4e00\u4e2a\u76f8\u90bb\u7684\u5185\u5b58\u5757\u88ab\u4f7f\u7528\u65f6,\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u88ab\u7f6e\u4e0a. CINUSE_BIT \u5728\u5f53\u524d\u5185\u5b58\u5757\u88ab\u4f7f\u7528\u65f6,\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u88ab\u7f6e\u4e0a. FLAG4_BIT \u5728\u5f53\u524d\u7248\u672c\u7684dlmalloc\u4e2d\u672a\u88ab\u4f7f\u7528  \n\u5982 \u4f55\u505a\u5230\u5728head\u4e2d\u65e2\u5b58\u653e\u5757\u5927\u5c0f\u53c8\u5b58\u653e\u6807\u5fd7\u4f4d\u7684\u5462?\u9996\u5148\u63d0\u5230\u4e00\u70b9\u662f,\u6240\u6709\u7684\u5757\u7684 \u5927\u5c0f\u90fd\u662f\u6309\u6700\u5c118bit\u5bf9\u9f50\u7684,\u6362\u53e5\u8bdd\u8bf4,\u8868\u793a\u5927\u5c0f\u7684\u6570\u5b57,\u4f4e3\u4f4d\u5fc5\u5b9a\u4e3a 0,\u6240\u4ee5\u5c31\u6709 \u6548\u5730\u5229\u7528\u4e86\u4f4e3\u4f4d\u5b58\u653e\u6807\u5fd7\u4f4d.\u6240\u4ee5,\u83b7\u53d6chunk\u7684\u5927\u5c0f\u7528\u4e0b\u9762\u7684\u5b8f,\u5c06head\u7684\u4f4e\u4e09 \u4f4d\u6e05\u62100,\u53d6\u51fa.  #define chunksize(p)        ((p)- head   ~(FLAG_BITS))  \n\u4e0b\u9762\u4ecb\u7ecd\u4e0bdlmalloc\u7ef4\u62a4\u7684\u4e00\u4e2a\u5168\u5c40\u6570\u636e\u7ed3\u6784.  2579   struct   malloc_state   {   2580     binmap_t     smallmap ;    // 32bit, \u5c0f\u5185\u5b58\u7bb1\u5b50\u7684\u4f4d\u56fe.  2581     binmap_t     treemap ;      // 32bit, \u5927\u5185\u5b58\u7bb1\u5b50\u7684\u4f4d\u56fe  2582     size_t       dvsize ;             //  dv chunk \u7684\u5927\u5c0f  2583     size_t       topsize ;            //  top chunk\u7684\u5927\u5c0f  2584     char *        least_addr ;      //  dlmalloc\u7ba1\u7406\u7684\u5185\u5b58\u7684\u6700\u5c0f\u5730\u5740,\u4e5f\u5c31\u662f\u6700\u5c0f\u7684segment \u57fa\u5730\u5740.  2585     mchunkptr    dv ;              // dv chunk. \u6700\u8fd1\u88ab\u5206\u5272\u4f7f\u7528\u7684chunk  2586     mchunkptr    top ;             // top chunk. \u9876\u90e8,\u9760\u8fd1\u6709\u6548\u5185\u5b58\u7684chunk,\u8be6\u89c1\u603b\u7ed3\u56fe.  2587     size_t       trim_check ;      // \u68c0\u67e5top chunk\u5927\u5c0f\u662f\u5426\u8d85\u7684\u51fd\u6570.  2588     size_t       release_checks ;    2589     size_t       magic ;   2590     mchunkptr    smallbins [( NSMALLBINS + 1 ) * 2 ];     // 32\u4e2a\u94fe\u8868\u5934  2591     tbinptr      treebins [ NTREEBINS ];             // 32\u68f5\u6811  2592     size_t       footprint ;   2593     size_t       max_footprint ;   2594     size_t       footprint_limit ;   /* zero means no limit */   2595     flag_t       mflags ;   2596   # if   USE_LOCKS   2597     MLOCK_T      mutex ;       /* locate lock among fields that rarely change */   2598   # endif   /* USE_LOCKS */   2599     msegment     seg ;          //  segment\u94fe\u8868.  2600     void *        extp ;        /* Unused but available for extensions */   2601     size_t       exts ;   2602   }; \ufeff\u200b   mchunkptr  smallbins[(NSMALLBINS+1)*2];    \u8fd9\u91cc\u4f1a\u6709\u4e2a\u7591\u95ee,\u7406\u8bba\u4e0a, 32\u4e2a\u94fe\u8868\u5934,\u6211\u4eec\u4f1a\u4f7f\u7528 struct malloc_chunk  smallbins[NSMALLBINS];   \u4f46\u8fd9\u91cc\u4e0d\u4f7f\u7528\u7684\u539f\u56e0\u662f, \u5bf9\u4e8e\u94fe\u8868\u5934\u800c\u8a00,   malloc_chunk \u7684  prev_foot \u548c head \u4e24\u4e2a\u57df\u662f\u6ca1\u6709\u88ab\u4f7f\u7528\u7684,\u5b9e\u9645\u9700\u8981\u7684\u5927\u5c0f\u662f2\u4e2a\u6307\u9488\u5927 \u5c0f.\u6240\u4ee5,dlmalloc\u4f7f\u7528\u4e86\u8986\u76d6\u7684\u65b9\u6cd5. \u524d\u4e00\u4e2a malloc_state \u7684fb/bk \u8e29\u4e86\u540e\u4e00\u4e2a\u7684 malloc_state\u7684 prev_foot/head.\u6240\u4ee5\u5927\u5c0f\u5e94\u8be5\u4e3a 32 * 8 + 8, \u4e5f\u5c31\u662f33 * 2 \u4e2a\u6307\u9488\u5927\u5c0f.", 
            "title": "head \u57df\u4e2d\u53d8\u91cf\u7684\u8bf4\u660e:"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#_2", 
            "text": "\u5f53\u5185\u5b58\u5757\u672a\u88ab\u4f7f\u7528\u65f6,\u4ed6\u4eec\u4f5c\u4e3a\u5217\u8868\u6216\u8005\u6811\u7684\u8282\u70b9. \n\u5c0f\u5185\u5b58(\u201cSmall\u201d) \u5757\u5b58\u50a8\u5728\u73af\u5f62\u53cc\u5411\u94fe\u8868\u4e2d,\u770b\u8d77\u6765\u50cf\u5982\u4e0b\u8fd9\u6837.   \u800c \u5927 \u7684\u5185\u5b58\u5757\u4f7f\u7528\u5185\u5b58\u5757\u5927\u5c0f\u4e3a\u5173\u952e\u5b57\u7684bitwise digital tree (\u53c8\u53ebaka tree).\u56e0\u4e3amalloc_tree_trunks\u53ea\u662f \u7528\u4e8e\u5927\u5c0f\u5927\u4e8e256bytes\u7684\u7a7a\u95f2\u5185\u5b58\u5757,\u4ed6\u4eec \u7684\u5927\u5c0f\u4e0d\u4f1a\u53d7\u5230\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u7684\u9650\u5236.\u6bcf \u4e00\u4e2a\u8282\u70b9\u7684\u7ed3\u6784\u770b\u8d77\u6765\u50cf\u5982\u4e0b\u8fd9 \u6837.   \u6bcf\u4e00\u68f5\u6811\u90fd\u62e5\u6709\u552f\u4e00\u7684\u5185\u5b58\u5757\u5927\u5c0f.\u800c\u5177\u6709\u540c\u6837\u5927\u5c0f\u7684\u5185\u5b58\u5757\u4f1a\u88ab\u5b89\u6392\u5728\u53cc\u5411\u94fe \u8868\u91cc,\u4e0e\u6700\u8001\u7684\u5185\u5b58\u5757\u4e00\u8d77(\u6307,\u4ee5FIFO\u7684\u89c4\u5219,\u4e0b\u4e00\u4e2a\u8981\u88ab\u4f7f\u7528\u7684\u5185\u5b58\u5757).\u5982\u679c\u4e00 \u4e2a\u5177\u6709\u540c\u6837\u5927\u5c0f\u7684\u5185\u5b58\u5757\u88ab\u63d2\u5165,\u5b83\u5c31\u4f1a\u7528\u7c7b\u4f3c\u5c0f\u5185\u5b58\u7684fb/bk\u7684\u6307\u9488\u4e00\u6837\u7684\u65b9\u5f0f,\u4ece \u539f\u6709\u7684\u8282\u70b9\u79fb\u9664.  \u6bcf \u4e00 \u68f5\u6811\u5305\u542b\u5927\u5c0f\u4e3a2\u7684\u4e58\u65b9\u8303\u56f4\u7684\u5185\u5b58\u5757(\u6700\u5c0f\u4e3a0x100  = x   0x180),\u5728\u6811 \u7684\u6bcf\u4e00\u5c42\u90fd\u4f1a\u88ab\u5206\u6210\u4e00\u534a,\u5373\u5c0f\u7684\u4e00\u534a (0x100  = x   0x140)\u4f5c\u4e3a\u5de6\u5b50\u6811,\u5927\u7684\u4e00 \u534a\u4f5c\u4e3a\u53f3\u5b50\u6811(0x140  = x   0x180).  \u901a\u8fc7\u4f7f\u7528\u8fd9\u79cd\u89c4\u5219,\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u5305\u542b\u7684\u5185\u5b58\u5757\u5927\u5c0f\u90fd\u5c0f\u96e8\u5176\u53f3\u5b50\u6811.  Smallbins\u548c\u53cc\u5411\u94fe\u8868\u7ba1\u7406\u5c0f\u5185\u5b58\u56fe\u89e3\u3002   Treebins\u548c\u6811\u7ba1\u7406\u5927\u5185\u5b58\u7684\u56fe\u89e3\uff1a", 
            "title": "\u88ab\u8986\u76d6\u7684\u6570\u636e\u7ed3\u6784"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#dlmalloc_2", 
            "text": "dlmalloc \u5bf9\u5c0f\u5185\u5b58\u5206\u914d\u6709\u5982\u4e0b5\u4e2a\u89c4\u5219(\u6309\u4f18\u5148\u7ea7\u987a\u5e8f)\uff1a    \u5982\u679c\u4e0e\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u5339\u914d\u7684\u7bb1\u5b50\u5b58\u5728\u7a7a\u95f2,\u5219\u4f7f\u7528\u5f53\u524d\u7bb1\u5b50\uff0c\u5426\u5219\u4f7f\u7528\u4e34\u8fd1\u7684 \u7bb1\u5b50\u3002\u5728\u80fd\u4e0d\u5206\u5272\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\u5c3d\u91cf\u4e0d\u5206\u5272\u5185\u5b58\u3002   \u5982\u679cdv chunk\u8db3\u591f\u5927\uff0c\u90a3\u4e48\u4f7f\u7528dv chunk\u3002 dv chunk\u662f\u6307\u6700\u8fd1\u4e00\u6b21\u5c0f\u5185\u5b58 \u7533\u8bf7\u65f6\u4f7f\u7528\u7684\u5185\u5b58\u5757\u3002 \u8fd9\u4e2a\u89c4\u5219\u662f\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u5206\u914d\u7684\u5185\u5b58\u8fde\u7eed\u3002   \u5728smallbin\u548ctreebin\u4e2d\u5bfb\u627e\u53ef\u4ee5\u4f7f\u7528\u7684\u5185\u5b58\u5757\uff0c\u5e76\u5206\u5272\u3002\u5c06\u5269\u4e0b\u7684\u5185\u5b58 \u5757\u4fdd\u5b58\u5230dv chunk\u4e2d\u3002   \u5982\u679ctop chunk \u8db3\u591f\u5927\uff0c\u5219\u4f7f\u7528top chunk  \u5982\u679c\u8bf7\u6c42\u5185\u5b58\u5b9e\u5728\u592a\u5927\uff0c\u5219\u4f7f\u7528\u7cfb\u7edf\u5206\u914d\u5185\u5b58\u3002   \n\u5927\u5185\u5b58\u5206\u914d\u7684\u89c4\u5219\uff1a   \u5728treebin\u4e2d\u627e\u5230\u6700\u9002\u5408\u7684\u6700\u5c0f\u5185\u5b58\uff0c\u5982\u679c\u5b83\u6bd4dv chunk\u7684\u66f4\u5408\u9002\uff0c\u5c31\u4f7f\u7528\u5b83\uff0c \u5982\u679c\u6709\u9700\u8981\u5c31\u5206\u5272\u5b83\u3002   \u5982\u679cdv chunk \u6bd4\u5176\u4ed6\u6240\u6709\u7684\u66f4\u5408\u9002\uff0c\u4f7f\u7528dv chunk\u3002   \u5982\u679ctop \u8db3\u591f\u5927\uff0c\u4f7f\u7528top chunk\u3002   \u5982\u679c\u8bf7\u6c42\u7684\u5927\u5c0f  = mmap threshold, \u5219\u4f7f\u7528\u7cfb\u7edf\u7684mmap\u3002  \u76f4\u63a5\u4ece\u7cfb\u7edf\u5206\u914d\u5185\u5b58\u5e76\u4f7f\u7528\u3002", 
            "title": "dlmalloc\u4ee3\u7801\u5206\u6790"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#_3", 
            "text": "4597       if   ( bytes   =   MAX_SMALL_REQUEST )   {   // MAX_SMALL_REQUEST \u5b9e\u73b0\n2577 #define MAX_SMALL_REQUEST (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)  \u8fd9\u91ccbytes\u4e3a\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f,  MAX_SMALL_REQUEST \u5c31\u662f\u4e4b\u524d\u63d0\u5230\u8fc7\u7684\u6700\u5927\u7684\u5c0f\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u5c31\u662f256byte,\u5373,256byte\u4ee5\u4e0b\u7684\u6240\u6709\u5185\u5b58\u90fd\u662f\u5728\u53cc\u5411\u94fe\u8868\u4e2d\u5339\u914d.  4600         nb   =   ( bytes     MIN_REQUEST ) ?   MIN_CHUNK_SIZE   :   pad_request ( bytes );   2225   # define   MIN_REQUEST           ( MIN_CHUNK_SIZE   -   CHUNK_OVERHEAD   -   SIZE_T_ONE )  2228   # define   pad_request ( req )  \\ 2229      ((( req )   +   CHUNK_OVERHEAD   +   CHUNK_ALIGN_MASK )     ~ CHUNK_ALIGN_MASK )   \u8fd9\u91ccnb\u5c31\u662f\u52a0\u4e0a\u534f\u8bae\u6570\u636e\u540e\u7684\u5b9e\u9645dlmalloc\u4f1a\u5206\u914d\u7684\u5185\u5b58\u5757\u5927\u5c0f.\u524d\u6587\u7b14\u8005\u63d0\u5230\u8fc7,\u5c0f\u5185\u5b58\u5757\u7684\u6700\u5c0f\u503c\u4e3a8byte,\u6240\u4ee5,\u4e0d\u8bba\u7533\u8bf7\u7684\u5185\u5b58\u591a\u5c0f,\u90fd\u4f7f\u7528\u6700\u5c0f\u503c.  4601      idx = small_index(nb);  2572   # define   SMALLBIN_SHIFT      ( 3U )  2825   # define   small_index ( s )        ( bindex_t )(( s )      SMALLBIN_SHIFT )   \u8fd9\u91ccidx\u5f97\u5230\u7684\u662f\u8be5\u5185\u5b58\u5757\u5bf9\u5e94\u7684smallbin\u7bb1\u5b50\u7684\u7bb1\u53f7.\u524d\u6587\u5728\u63d0\u5230head\u65f6,\u63d0\u5230\u8fc7,\u5c0f\u5185\u5b58\u5757\u7684\u5927\u5c0f\u4e3a8byte\u7684\u500d\u6570,\u6240\u4ee5,\u53f3\u79fb3\u4f4d\u6765\u5b9a\u4f4d\u5bf9\u5e94\u7bb1\u5b50\u7684\u7bb1\u53f7.  4602         smallbits   =   gm - smallmap     idx ;   smallmap \u662f\u5404\u4e2a\u7bb1\u5b50\u7684\u4f4d\u56fe,32bit,\u5bf9\u5e9432\u4e2a\u7bb1\u5b50,\u6bcf\u4e00\u4f4d\u4e3a1\u8868\u793a\u8be5\u7bb1\u53f7\u4e2d\u6709\u5bf9\n\u5e94\u5927\u5c0f\u7684\u5185\u5b58\u5757,\u4e3a0\u5219\u8868\u793a\u6ca1\u6709.\u8be5\u884c\u4ee3\u7801\u662f\u628a\u5bf9\u5e94\u7bb1\u53f7\u7684\u6bd4\u7279\u4f4d\u79fb\u5230\u6700\u53f3\u4fa7.  4604         if   (( smallbits     0x3U )   !=   0 )   {  4605           mchunkptr   b ,   p ;  4606           idx   +=   ~ smallbits     1 ;         /* Uses next bin if idx empty */  4607           b   =   smallbin_at ( gm ,   idx );   \u8fd9\u91cc 0x3U \u4f4e8\u4f4d\u5c31\u662f 0000 0011. \u6240\u4ee5,smallbits 0x3U \u4e3a\u771f\u7684\u6761\u4ef6\u5982\u4e0b:(\u4e0a\u6587\u63d0\u5230,smallbits\u7684\u6700\u53f3\u4f4d\u8868\u793aidx\u7bb1\u53f7\u662f\u5426\u6709\u7a7a\u95f2\u5757)   \u4f4e2\u4f4d\u4e3a 11. idx\u6709\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u6709\u7a7a\u95f2\u5757.  \u4f4e2\u4f4d\u4e3a 10. idx\u65e0\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u6709\u7a7a\u95f2\u5757.  \u4f4e2\u4f4d\u4e3a 01. idx\u6709\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u65e0\u7a7a\u95f2\u5757.   4606\u884c\u662f\u5728\u91cd\u65b0\u5b9a\u4f4d\u5230\u771f\u6b63\u6709\u7a7a\u95f2\u5757\u7684\u7bb1\u53f7. ~smallbits   1 \u5728\u5f53\u524d\u7bb1\u5b50\u4e3a0\u7684\n\u60c5\u51b5\u4e0b,\u503c\u4e3a1;\u5f53\u524d\u7bb1\u5b50\u4e3a1\u7684\u60c5\u51b5\u4e0b,\u503c\u4e3a0.\u6240\u4ee5\u662f\u6709\u9650\u662f\u7528\u6b63\u597d\u6ee1\u8db3\u5927\u5c0f\u7684\u7bb1\n\u5b50.  2831 #define smallbin_at(M, i)\n((sbinptr)((void*) ((M)- smallbins[(i) 1])))  i \u5c31\u662f idx, \u800cM\u5219\u662fgm( \u9700\u8981\u5728\u4e0a\u6587\u9884\u5148\u63cf\u8ff0gm\u7ed3\u6784\u4f53\u6210\u5458\u4f5c\u7528 ).smallbins( \u9700\u5728\u4e0a\u6587\u63cf\u8ff0 )\u5c31\u662f\u53cc\u5411\u94fe\u8868\u6570\u7ec4,\u4e5f\u5c31\u662f\u5bf9\u5e94\u7bb1\u53f7\u5185\u90e8\u7684\u7a7a\u95f2\u5757\u94fe\u8868\u7684\u9996\u5730\u5740.  \u503c\u5f97\u9ad8\u5174\u7684\u662f,\u6211\u4eec\u62ff\u5230\u94fe\u8868\u4e86,\u63a5\u4e0b\u6765\u5c31\u662f\u53d6\u51fa\u7a7a\u95f2\u5757,\u548c\u4e00\u4e9b\u6807\u5fd7\u4f4d\u7684\u5904\u7406\u4e86.  4608        p = b- fd;\n4609        assert(chunksize(p) == small_index2size(idx));\n4610        unlink_first_small_chunk(gm, b, p, idx);\n4611        set_inuse_and_pinuse(gm, p, small_index2size(idx));\n4612        mem = chunk2mem(p);\n4613        check_malloced_chunk(gm, mem, nb);\n4614        goto postaction;  fd\u57df\u662f\u524d\u4e00\u4e2a\u94fe\u8868\u8282\u70b9.\u800cB\u662f\u8868\u5934, \u4e5f\u5c31\u662f\u8bf4,\u6211\u4eec\u53d6\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20,\u53d6\u5230\u6211\u4eec\u9700\u8981\u7684\u5185\u5b58\u5757\u5730\u5740.\u8fd9\u4e2aassert\u5176\u5b9e\u5c31\u662f\u786e\u8ba4\u4e0b,\u5f53\u524d\u7684\u7bb1\u53f7\u7684\u5185\u5b58\u5757\u5927\u5c0f\u8ddf\u5f53\u524d\u5185\u5b58\u5757\u7684\u5927\u5c0f\u662f\u5426\u5339\u914d.   3629#define unlink_first_small_chunk(M, B, P, I) {\\\n3630  mchunkptr F = P- fd;\\\n3631  assert(P != B);\\\n3632  assert(P != F);\\\n3633  assert(chunksize(P) == small_index2size(I));\\\n3634  if (B == F) {\\\n3635    clear_smallmap(M, I);\\\n3636  }\\\n3637  else if (RTCHECK(ok_address(M, F)   F- bk == P)) {\\\n3638    F- bk = B;\\\n3639    B- fd = F;\\\n3640  }\\\n3641  else {\\\n3642    CORRUPTION_ERROR_ACTION(M);\\\n3643  }\\\n3644}  2921#define clear_smallmap(M,i)     ((M)- smallmap  = ~idx2bit(i))  \u8fd9\u91cc B P F\u7684\u5173\u7cfb\u662f F -  P -  B , \u6240\u4ee5,\u7406\u8bba\u4e0a, P \u4e0d\u7b49\u4e8eF \u4e5f\u4e0d\u7b49\u4e8eB,\u5982\n\u679c\u76f8\u7b49,\u5c31\u610f\u5473\u7740\u662f\u7a7a\u94fe\u8868(\u53ea\u6709\u8868\u5934).\u800c\u5982\u679cB == F,  \u610f\u5473\u7740\u8be5\u94fe\u8868\u4e2d\u53ea\u6709\u4e00\n\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757.\u53d6\u51fa\u8be5\u5185\u5b58\u5757\u4e4b\u540e,\u54b1\u4eec\u8981\u628a\u8be5\u7bb1\u5b50\u6807\u8bb0\u4e3a\u7a7a(3635, 2921).\u5f53\u7136,\n\u66f4\u591a\u7684\u60c5\u51b5\u662f\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9P.  // 4611 \u884c\u51fd\u6570\u5b9e\u73b0\n\n3058#define set_inuse_and_pinuse(M,p,s)\\\n3059  ((p)- head = (s|PINUSE_BIT|CINUSE_BIT),\\\n3060  ((mchunkptr)(((char*)(p)) + (s)))- head |= PINUSE_BIT)  \u8fd9\u5c31\u662f\u5728P \u7684head\u4e2d\u7f6e\u4e0aCINUSE\u4f4d\u548cP \u7684\u4e0b\u4e00\u5757\u5185\u5b58\u7684head\u4e2d\u8bbe\u7f6e\u4e0aPINUSE\u4f4d.  \u6700\u540emem = chunk2mem(p);  \u5c31\u662f\u53d6\u51fa\u4f20\u9012\u4e2a\u7528\u6237\u7684\u6709\u6548\u5185\u5b58\u5730\u5740,.\ncheck_malloced_chunk(gm, mem, nb); \u662f\u8c03\u8bd5\u7528\u7684,\u68c0\u67e5\u8be5\u5206\u914d\u7684\u5185\u5b58\u5757\u7684\u5404\u4e2a\n\u5c5e\u6027\u662f\u5426\u6b63\u5e38.  \u5230\u6b64,\u5c0f\u5185\u5b58\u7684,\u6b63\u597d\u7b26\u5408\u6216\u6b63\u597d\u4e34\u8fd1\u7bb1\u5b50\u6709\u7a7a\u95f2\u5757\u7684\u903b\u8f91\u5206\u6790\u5b8c\u6210,\u54b1\u4eec\u62ff\u5230\u4e86\n\u9700\u8981\u7684\u5185\u5b58.", 
            "title": "\u5c0f\u5185\u5b58\u89c4\u5219\u4e00"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#_4", 
            "text": "\u4e0b\u9762,\u662f\u4e0a\u8ff0\u60c5\u51b5\u4e0d\u6ee1\u8db3,\u4e5f\u5c31\u662f\u5f53\u524d\u5185\u5b58\u8bf7\u6c42\u5bf9\u5e94\u7684\u7bb1\u53f7idx\u7684smallbits\u4f4e2\u4f4d\u4e3a 00 ,\u4e5f\u5c31\u662f\u8bf4,\u6ca1\u6709\u7a7a\u95f2\u5757.  4617      else if (nb   gm- dvsize) {\n4618        if (smallbits != 0) {  ( dvsize\u9700\u8981\u5728gm\u7684\u5206\u6790\u4e2d\u63cf\u8ff0\u6389 )  smallbits != 0 \u610f\u5473\u7740,\u5728\u6bd4\u8bf7\u6c42\u7684\u5185\u5b58\u5757\u5927\u7684\u7bb1\u5b50\u4e2d,\u603b\u6709\u7a7a\u95f2\u5757\u5b58\u5728.\u6240\u4ee5\u63a5\u4e0b\u6765\u7684\u76ee\u7684\u662f\u627e\u5230\u6700\u5c0f\u7684\u7a7a\u95f2\u5757.  4622          binmap_t leftbits = (smallbits   idx)   left_bits(idx2bit(idx));\n4623          binmap_t leastbit = least_bit(leftbits);\n4624          compute_bit2idx(leastbit, i);  2917#define idx2bit(i)              ((binmap_t)(1)   (i))\n\n2929#define least_bit(x)         ((x)   -(x))\n\n2932#define left_bits(x)         ((x 1) | -(x 1))  4622 \u884c \u4f4d\u4e0e\u7684\u53f3\u64cd\u4f5c\u6570\u662f\u4e00\u4e2a32bit\u7684\u6570\uff0c\u8be5\u6570\u7684\u4f4e\uff08idx+1\uff09\u4f4d\u4e3a0,\u5176\u4f59\u4f4d\u4e3a1;\u5de6\u64cd\u4f5c\u6570\u5c31\u662f\u5bf9\u5e94\u4f4eidx\u4f4d\u4e3a0,\u540c\u65f6\u4ee3\u7801\u903b\u8f91\u8d70\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\uff0c\u4f4e\uff08idx+2\uff09\u4e3a0\u3002\nleast_bit \u7684\u529f\u80fd\u662f\uff0c\u4fdd\u7559leftbits\u4e2d\u4ece\u53f3\u5f80\u5de6\u7684\u7b2c\u4e00\u4e2a\u4e3a1\u7684\u4f4d\uff0c\u5176\u4f59\u4f4d\u4e3a0. \u5219\u8be5leastbit\u5bf9\u5e94\u7684\u5c31\u662f\u7b26\u5408\u8bf7\u6c42\u7684\u6700\u5c0f\u5185\u5b58\u5757\u7684\u4f4d\u56fe\u3002compute_bit2idx \u662f\u5c06leastit\u4f4d\u56fe\u8f6c\u6362\u6210\u7bb1\u53f7\u3002 \u8fd9\u91cc i \u5c31\u662f\u83b7\u53d6\u5230\u7684\u7bb1\u53f7\u3002  4625          b = smallbin_at(gm, i);\n4626          p = b- fd;\n4627          assert(chunksize(p) == small_index2size(i));\n4628          unlink_first_small_chunk(gm, b, p, i);  \u62ff\u5230\u7bb1\u53f7\u4e4b\u540e\uff0c\u8fd9\u5757\u7684\u903b\u8f91\u4e0e\u4e0a\u6587\u89c4\u5219\u4e00\u7684\u903b\u8f91\u4e00\u6837\u3002  4629          rsize = small_index2size(i) - nb;  \u53d6\u51fa\u5f53\u524d\u7bb1\u5b50\u7684\u5185\u5b58\u5757\u5927\u5c0f\uff0c\u51cf\u53bb\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u5269\u4f59\u7684\u5185\u5b58\u5757\uff0c\u8fd9\u4e2a\u5269\u4f59\u5185\u5b58\u5757\u4f1a\u653e\u5230dv chunk\u4e2d\u3002  4631          if (SIZE_T_SIZE != 4   rsize   MIN_CHUNK_SIZE)\n4632            set_inuse_and_pinuse(gm, p, small_index2size(i));\n4633          else {\n4634            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);\n4635            r = chunk_plus_offset(p, nb);\n4636            set_size_and_pinuse_of_free_chunk(r, rsize);\n4637            replace_dv(gm, r, rsize);\n4638          }  2269#define chunk_plus_offset(p, s)  ((mchunkptr)(((char*)(p)) + (s)))\n\n2284#define set_size_and_pinuse_of_free_chunk(p, s)\\\n2285  ((p)- head = (s|PINUSE_BIT), set_foot(p, s))\n\n3063#define set_size_and_pinuse_of_inuse_chunk(M, p, s)\\\n3064  ((p)- head = (s|PINUSE_BIT|CINUSE_BIT))\n\n3584#define insert_small_chunk(M, P, S) {\\\n3585  bindex_t I  = small_index(S);\\\n3586  mchunkptr B = smallbin_at(M, I);\\\n3587  mchunkptr F = B;\\\n3588  assert(S  = MIN_CHUNK_SIZE);\\\n3589  if (!smallmap_is_marked(M, I))\\\n        // \u5982\u679c\u662f\u5bf9\u5e94\u7bb1\u53f7\u539f\u72b6\u6001\u4e3a0,\u5219\u7f6e1.\n3590    mark_smallmap(M, I);\\\n3591  else if (RTCHECK(ok_address(M, B- fd)))\\\n3592    F = B- fd;\\\n3593  else {\\\n3594    CORRUPTION_ERROR_ACTION(M);\\\n3595  }\\\n3596  B- fd = P;\\\n3597  F- bk = P;\\\n3598  P- fd = F;\\\n3599  P- bk = B;\\\n3600}\n\n3648#define replace_dv(M, P, S) {\\\n3649  size_t DVS = M- dvsize;\\\n3650  assert(is_small(DVS));\\\n3651  if (DVS != 0) {\\\n3652    mchunkptr DV = M- dv;\\\n3653    insert_small_chunk(M, DV, DVS);\\\n3654  }\\\n3655  M- dvsize = S;\\\n3656  M- dv = P;\\\n3657}  \u5982\u679c\u5269\u4f59\u5927\u5c0frsize\u5c0f\u4e8eMIN_CHUNK_SIZE\uff0c\u54b1\u4eec\u76f4\u63a5\u5c06\u6240\u6709\u5185\u5b58\u5206\u914d\u7ed9\u7528\u6237\u3002\u5426\u5219\u5219\u5206\u5272\u5185\u5b58\uff0c\u5e76\u5c06\u5269\u4f59\u7684\u5185\u5b58\u5757\u8f6c\u6210mchunkptr\uff0c \u5373 r\u3002\u6211\u4eec\u7136\u540e\uff0cr\u76f8\u5f53\u4e8e\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u5757\uff0c\u6211\u4eec\u8bbe\u7f6e\u5176head\u5c5e\u6027\uff08size\uff0cPINUSE_BIT\uff0cCINUSE_BIT\uff09\u3002\nreplace_dv \u4e2d\uff0c\u6211\u4eec\u5148\u83b7\u5f97dv size\uff0c\u786e\u8ba4\u662f\u5c0f\u5185\u5b58\u5757\u3002\u7136\u540e\uff0c\u5c31\u662f\u628adv\u5185\u5b58\u5757\u63d2\u5165\u5230\u5bf9\u5e94\u7684\u7bb1\u53f7\u91cc\u3002\u5c31\u8ddf\u4e4b\u524d\uff0c\u6839\u636e\u5927\u5c0f\u83b7\u53d6\u5230\u5bf9\u5e94\u7bb1\u53f7\u7684\u94fe\u8868\u5934\u7684\u903b\u8f91\u4e00\u6837\uff0c\n\u53ea\u662f\u8fd9\u91cc\u662f\u5c06\u5185\u5b58\u5757\u63d2\u5165\u53cc\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002\nok\uff0c \u63d2\u5165\u5b8c\u6210\u540e\uff0c\u54b1\u4eec\u628a\u521a\u624d\u5206\u5272\u5269\u4e0b\u7684\u5185\u5b58\u5b58\u653e\u5230dv chunk\u4e2d\u3002  4639          mem = chunk2mem(p);\n4640          check_malloced_chunk(gm, mem, nb);\n4641          goto postaction;  \u8fd9\u91cc\u6211\u4eec\u8fd4\u56de\u5185\u5b58\u7ed9\u7528\u6237\uff0c\u89c4\u5219\u4e09\u7b2c\u4e00\u90e8\u5206\u5185\u5b58\u5206\u914d\u7ed3\u675f\u3002  4644        else if (gm- treemap != 0   (mem = tmalloc_small(gm, nb))\n!= 0) {\n4645          check_malloced_chunk(gm, mem, nb);\n4646          goto postaction;  \u8fd9\u91ccelse \u5bf9\u5e94\u201c4618        if (smallbits != 0) {\u201d \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u5c0f\u5185\u5b58\u7684 =\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u7684\u6240\u6709\u7bb1\u5b50\u4e0d\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5feb\u3002 \u7136\u540e\uff0c\u6211\u4eec\u68c0\u67e5treemap\u4e2d\u662f\u5426\u5b58\u5728\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u8c03\u7528tmalloc_small\u3002  2833#define treebin_at(M,i)     ( ((M)- treebins[i]))\n\n4527-static void* tmalloc_small(mstate m, size_t nb) {\n...\n4531  binmap_t leastbit = least_bit(m- treemap);\n4532  compute_bit2idx(leastbit, i);\n4533  v = t = *treebin_at(m, i);\n4534  rsize = chunksize(t) - nb;  least_bit  \u7684\u4f5c\u7528\u5c31\u662f\u4fdd\u7559\u6700\u53f3\u4fa7\u4e3a1\u7684bit\u4f4d\uff0c\u5176\u4f59\u4f4d\u4e3a0.\u6240\u4ee5\uff0c least_bit \u548c compute_bit2idx \u7684\u5171\u540c\u4f5c\u7528\u5c31\u662f\u5728treemap\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u53ef\u7528\u5185\u5b58\u7bb1\u5b50\u3002v\u548ct\u5373\u4e3a\u627e\u5230\u7684\u5185\u5b58\u5757\u6811\u7684\u6839\u8282\u70b9\u3002  4536  while ((t = leftmost_child(t)) != 0) {\n4537    size_t trem = chunksize(t) - nb;\n4538    if (trem   rsize) {\n4539      rsize = trem;\n4540      v = t;\n4541    }\n4542  }  \u8fd9\u6bb5\u4ee3\u7801\u662f\u5bfb\u627et\u7684\u6700\u5de6\u5b50\u6811\u3002\u5728\u524d\u6587\u6211\u4eec\u4ecb\u7ecd\u8fc7aka\u6811\uff0c\u6bcf\u4e00\u68f5\u6811\u7684\u505a\u5b50\u6811\u603b\u5c0f\u4e8e\u5176\u53f3\u5b50\u6811\u3002\u8be5\u4ee3\u7801\u5c31\u662f\u5728\u5bfb\u627e\u6ee1\u8db3\u7528\u4e8e\u8bf7\u6c42\u5927\u5c0fnb\u7684\u6700\u63a5\u8fd1\u7684\u6811\u7684\u8282\u70b9\u3002\uff08\u8003\u8651\u5230\u8bf7\u6c42\u7684\u5b57\u8282nb =256byte, \u800c\u5728tree\u4e2d\u6700\u5c0f\u7684chunksize   256byte \u6240\u4ee5,\u4e0d\u4f1a\u51fa\u73b0\u8d1f\u6570.\uff09  4545    mchunkptr r = chunk_plus_offset(v, nb);\n4546    assert(chunksize(v) == rsize + nb);\n4547    if (RTCHECK(ok_next(v, r))) {\n4548      unlink_large_chunk(m, v);\n4549      if (rsize   MIN_CHUNK_SIZE)\n4550        set_inuse_and_pinuse(m, v, (rsize + nb));\n4551      else {\n4552        set_size_and_pinuse_of_inuse_chunk(m, v, nb);\n4553        set_size_and_pinuse_of_free_chunk(r, rsize);\n4554        replace_dv(m, r, rsize);\n4555      }\n4556      return chunk2mem(v);\n4557    }\n4558  }  (NOT READY)\n\u8fd9\u6bb5\u4ee3\u7801\u8ddf\u4e0a\u6587\u5c0f\u5185\u5b58\u627e\u5230\u540e\u5904\u7406\u7684\u4ee3\u7801\u76f8\u4f3c\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\uff0cunlink_large_chunk\uff0c\u6240\u4ee5\u6211\u4eec\u770b\u4e0bunlink_large_chunk\u7684\u5b9e\u73b0.\u8fd9\u4e2a\u8fc7\u7a0b\u6709\u4e09\u4e2a\u6b65\u9aa4   \u5982\u679c\u7ed3\u70b9X\u662f\u94fe\u8868\u7684\u7ed3\u70b9,\u5219\u5c06\u5176\u91cd\u94fe\u8868\u4e2d\u5220\u9664.  \u5982\u679cX\u662f\u8be5\u5927\u5c0f\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9,\u4f46\u662f\u4e0d\u662f\u53f6\u5b50\u7ed3\u70b9,\u5b83\u5fc5\u987b\u7528\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u66ff\u6362.\u8fd9\u91cc\u67e5\u627e\u53f6\u5b50\u7ed3\u70b9\u7684\u65b9\u6cd5\u662f\u4ece\u6700\u53f3\u4fa7\u5f00\u59cb.  \u5982\u679cX\u662f\u94fe\u8868\u7684\u5934(\u62e5\u6709parent linker),\u5c31\u9700\u8981\u91cd\u65b0\u5c06\u5176x\u7684\u7236\u7ed3\u70b9\u4e0e\u66ff\u6362x\u7684\u7ed3\u70b9\u91cd\u65b0\u8fde\u63a5.   3730#define unlink_large_chunk(M, X) {\\\n3731  tchunkptr XP = X- parent;\\\n3732  tchunkptr R;\\  3733  if (X- bk != X) {\\\n3734    tchunkptr F = X- fd;\\\n3735    R = X- bk;\\\n3736    if (RTCHECK(ok_address(M, F)   F- bk == X   R- fd == X)) {\\\n3737      F- bk = R;\\\n3738      R- fd = F;\\\n3739    }\\\n3740    else {\\\n3741      CORRUPTION_ERROR_ACTION(M);\\\n3742    }\\\n3743  }\\  \u8fd9\u91cc\u662f\u7b2c\u4e00\u79cd\u60c5\u51b5,\u5373x\u662f\u5c5e\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9.  3744  else {\\\n3745    tchunkptr* RP;\\\n3746    if (((R = *(RP =  (X- child[1]))) != 0) ||\\\n3747        ((R = *(RP =  (X- child[0]))) != 0)) {\\\n3748      tchunkptr* CP;\\\n3749      while ((*(CP =  (R- child[1])) != 0) ||\\\n3750             (*(CP =  (R- child[0])) != 0)) {\\\n3751        R = *(RP = CP);\\\n3752      }\\\n3753      if (RTCHECK(ok_address(M, RP)))\\\n3754        *RP = 0;\\\n3755      else {\\\n3756        CORRUPTION_ERROR_ACTION(M);\\\n3757      }\\\n3758    }\\\n3759  }\\  \u8fd9\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5.  3760  if (XP != 0) {\\ \n3761    tbinptr* H = treebin_at(M, X- index);\\ \n3762    if (X == *H) {\\ \n3763      if ((*H = R) == 0) \\ \n3764        clear_treemap(M, X- index);\\ \n3765    }\\ \n3766    else if (RTCHECK(ok_address(M, XP))) {\\ \n3767      if (XP- child[0] == X) \\ \n3768        XP- child[0] = R;\\ \n3769      else \\ \n3770        XP- child[1] = R;\\ \n3771    }\\ \n3772    else\\ \n3773      CORRUPTION_ERROR_ACTION(M);\\ \n3774    if (R != 0) {\\ \n3775      if (RTCHECK(ok_address(M, R))) {\\ \n3776        tchunkptr C0, C1;\\ \n3777        R- parent = XP;\\ \n3778        if ((C0 = X- child[0]) != 0) {\\ \n3779          if (RTCHECK(ok_address(M, C0))) {\\ \n3780            R- child[0] = C0;\\ \n3781            C0- parent = R;\\ \n3782          }\\ \n3783          else\\ \n3784            CORRUPTION_ERROR_ACTION(M);\\ \n3785        }\\ \n3786        if ((C1 = X- child[1]) != 0) {\\ \n3787          if (RTCHECK(ok_address(M, C1))) {\\ \n3788            R- child[1] = C1;\\ \n3789            C1- parent = R;\\ \n3790          }\\ \n3791          else\\ \n3792            CORRUPTION_ERROR_ACTION(M);\\ \n3793        }\\ \n3794      }\\ \n3795      else\\ \n3796        CORRUPTION_ERROR_ACTION(M);\\ \n3797    }\\ \n3798  }\\   \u8fd9\u662f\u7b2c\u4e09\u79cd\u60c5\u51b5.  \u4ee5\u4e0a,\u72ec\u5c5e\u4e8e\u5c0f\u5185\u5b58\u7684\u5206\u914d\u89c4\u5219\u7ed3\u675f!  4650    else if (bytes  = MAX_REQUEST)\n4651      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in\nsys alloc) */  2224#define MAX_REQUEST         ((-((MCHUNK_SIZE + CHUNK_ALIGN_MASK)   ~CHUNK_ALIGN_MASK))   2)  \u8fd9\u91cc,\u5f53\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f = MAX_REQUEST\u65f6,\u6211\u4eec\u5f3a\u5236\u5206\u914d\u5931\u8d25. CHUNK_ALIGN_MASK  \u4e3a  2 * sizeof(void *) - 1 ,\u572832bit\u4e0a\u4e3a7.\u6240\u4ee5MAX_REQUEST\u662f\u4e00\u4e2a\u6781\u5927\u7684\u6570.\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b,\u6211\u4eec\u5c06nb\u8bbe\u7f6e\u4e3affffffff,\u5f3a\u5236\u5931\u8d25.", 
            "title": "\u5c0f\u5185\u5b58\u89c4\u5219\u4e09"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#_5", 
            "text": "\u7c7b\u4f3c\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e00,\u4ece\u6811\u4e2d\u627e\u5230\u6700\u9002\u5408\u7684\u5185\u5b58\u5757.  4652    else {\n4653      nb = pad_request(bytes);\n4654      if (gm- treemap != 0   (mem = tmalloc_large(gm, nb)) != 0) {\n4655        check_malloced_chunk(gm, mem, nb);\n4656        goto postaction;\n4657      }\n4658    }  \u8fd9\u91cc\u6211\u4eec\u7684\u91cd\u70b9\u662f tmalloc_large ,\u5b83\u4e0e tmalloc_small \u7684\u5dee\u522b\u662f: tmalloc_small \u662f\u7528\u4e8e\u5c0f\u5185\u5b58\u5206\u914d\u7684,\u53ea\u9700\u8981\u5728treemap\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u6709\u6548\u6811,\u53d6\u51fa\u6811\u4e2d\u6700\u5c0f\u5185\u5b58\u5373\u53ef;\u800c tmalloc_large \u662f\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219,\u5728\u6240\u670932\u68f5\u6811\u4e2d\u627e\u5230\u6700\u5339\u914d\u5927\u5c0f\u7684\u5185\u5b58\u5757.  4456static void* tmalloc_large(mstate m, size_t nb) {\n4457  tchunkptr v = 0;\n4458  size_t rsize = -nb; /* Unsigned negation */\n4459  tchunkptr t;\n4460  bindex_t idx;\n4461  compute_tree_index(nb, idx);\n4462  if ((t = *treebin_at(m, idx)) != 0) {  rsize \u4e3a\u6781\u5927\u6570.  compute_tree_index \u901a\u8fc7\u8bf7\u6c42\u7684\u5927\u5c0fnb,\u4ecetreebinmap\u4e2d\u8ba1\u7b97\u51fa\u7bb1\u53f7. treebin_at  \u5219\u662f\u53d6\u51faidx\u7bb1\u53f7\u4e2d\u5bf9\u5e94\u7684\u6811\u6839\u7ed3\u70b9.  2880#define compute_tree_index(S, I)\\\n2881{\\\n2882  size_t X = S   TREEBIN_SHIFT;\\\n2883  if (X == 0)\\\n2884    I = 0;\\\n2885  else if (X   0xFFFF)\\\n2886    I = NTREEBINS-1;\\\n2887  else {\\\n2888    unsigned int Y = (unsigned int)X;\\\n2889    unsigned int N = ((Y - 0x100)   16)   8;\\\n2890    unsigned int K = (((Y  = N) - 0x1000)   16)   4;\\\n2891    N += K;\\\n2892    N += K = (((Y  = K) - 0x4000)   16)   2;\\\n2893    K = 14 - N + ((Y  = K)   15);\\\n2894    I = (K   1) + ((S   (K + (TREEBIN_SHIFT-1))   1));\\\n2895  }\\\n2896}  \u4ee5\u4e0a\u8ba1\u7b97\u7684\u7ed3\u679c\u5982\u4e0b,idx\u4e3a\u5bf9\u5e94\u7bb1\u53f7,mem\u5bf9\u5e94\u8be5\u7bb1\u5b50\u4e2d\u6700\u5c0f\u7684\u5185\u5b58\u5927\u5c0f.  idx 0 mem 256 hex: 100\nidx 1 mem 384 hex: 180\nidx 2 mem 512 hex: 200\nidx 3 mem 768 hex: 300\nidx 4 mem 1024 hex: 400\nidx 5 mem 1536 hex: 600\nidx 6 mem 2048 hex: 800\nidx 7 mem 3072 hex: c00\nidx 8 mem 4096 hex: 1000\nidx 9 mem 6144 hex: 1800\nidx 10 mem 8192 hex: 2000\nidx 11 mem 12288 hex: 3000\nidx 12 mem 16384 hex: 4000\nidx 13 mem 24576 hex: 6000\nidx 14 mem 32768 hex: 8000\nidx 15 mem 49152 hex: c000\nidx 16 mem 65536 hex: 10000\nidx 17 mem 98304 hex: 18000\nidx 18 mem 131072 hex: 20000\nidx 19 mem 196608 hex: 30000\nidx 20 mem 262144 hex: 40000\nidx 21 mem 393216 hex: 60000\nidx 22 mem 524288 hex: 80000\nidx 23 mem 786432 hex: c0000\nidx 24 mem 1048576 hex: 100000\nidx 25 mem 1572864 hex: 180000\nidx 26 mem 2097152 hex: 200000\nidx 27 mem 3145728 hex: 300000\nidx 28 mem 4194304 hex: 400000\nidx 29 mem 6291456 hex: 600000\nidx 30 mem 8388608 hex: 800000\nidx 31 mem 12582912 hex: c00000  4463    /* Traverse tree for this bin looking for node with size == nb */\n4464    size_t sizebits = nb   leftshift_for_tree_index(idx);\n4465    tchunkptr rst = 0;  /* The deepest untaken right subtree */\n4466    for (;;) {\n4467      tchunkptr rt;\n4468      size_t trem = chunksize(t) - nb;\n4469      if (trem   rsize) {\n4470        v = t;\n4471        if ((rsize = trem) == 0)\n4472          break;\n4473      }\n4474      rt = t- child[1];\n4475      t = t- child[(sizebits   (SIZE_T_BITSIZE-SIZE_T_ONE))   1];\n4476      if (rt != 0   rt != t)\n4477        rst = rt;\n4478      if (t == 0) {\n4479        t = rst; /* set t to least subtree holding sizes   nb */\n4480        break;\n4481      }\n4482      sizebits  = 1;\n4483    }  \u8fd9\u662f\u6811\u7684\u641c\u7d22\u7b97\u6cd5,\u6211\u4eec\u6765\u8be6\u7ec6\u770b\u4e0b.\u9996\u5148sizebits\u53d8\u91cf,\u7c7b\u4f3cbinmap,\u6bcf\u4e00\u4f4d\u5bf9\u5e94\u6811\u7684\u5bf9\u5e94\u6df1\u5ea6\u7684\u5de6\u53f3\u5b50\u6811,\u53ef\u4ee5\u8ba4\u4e3a\u662f\u904d\u5386\u6811\u7684key bits.  2904#define leftshift_for_tree_index(i) \\\n2905   ((i == NTREEBINS-1)? 0 : \\\n2906    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i)   1) + TREEBIN_SHIFT - 2)))  1601#define SIZE_T_BITSIZE      (sizeof(size_t)   3)\n1606#define SIZE_T_ONE          ((size_t)1)\n2574#define TREEBIN_SHIFT     (8U)  leftshift_for_tree_index  \u5b8f\u5c06\u5173\u952e\u7801\u79fb\u52a8\u5230\u4e86\u6700\u5de6.\u8ba1\u7b97\u7684\u7ed3\u679c\u4e3a (25 - (i   1)). \u76f8\u5bf9\u4e8e\u7bb1\u5b500, \u5185\u5b58\u8303\u56f4\u4e3a128, \u5173\u952e\u7801\u957f\u5ea6\u4e3a 7,  leftshift_for_tree_index \u8ba1\u7b97\u7684\u7ed3\u679c\u4e3a25. \u6240\u4ee5,\u5c06 nb   25 , \u5c31\u662f\u5c06\u5173\u952e\u7801\u79fb\u52a8\u5230\u6700\u5de6\u7aef.  \u7136\u540e\u6211\u4eec\u770bfor\u5faa\u73af\u5185\u90e8\u7684,\u8fd9\u5c31\u662f\u5728\u904d\u5386\u6811\u4e86.  4467      tchunkptr rt;\n4468      size_t trem = chunksize(t) - nb;\n4469      if (trem   rsize) {\n4470        v = t;\n4471        if ((rsize = trem) == 0)\n4472          break;\n4473      }  \u4e0e \u5bfb\u627e\u6700\u5339\u914dnb\u6700\u8fd1\u7684\u70b9.\u5f53\u7136,\u5982\u679c\u627e\u5230\u5927\u5c0f\u76f8\u7b49\u7684,\u5c31\u76f4\u63a5\u8df3\u51fa, \u8fd9\u4e2a\u8df3\u51fa\u6761\u4ef6\u53ef\u80fd\u662f\u5173\u952e\u7801\u8fd8\u672a\u641c\u7d22\u5b8c.\u8fd9\u91cc\u5c31\u53ef\u4ee5\u770b\u51fa, dlmalloc\u6811\u4e0e bitwise trie\u6811\u7684\u5dee\u5f02,\u503c\u5728\u7279\u5f81\u7801\u7684\u8def\u5f84\u4e0a\u7684\u4efb\u610f\u70b9. \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u4e48\u505a\u5462?\u56e0\u4e3adlmalloc\u7684\u5206\u7bb1\u673a\u5236,\u5bfc\u81f4\u4e86,\u5982\u679c\u641c\u7d22\u5b8c\u5173\u952e\u7801,\u5219 \u8be5\u7ed3\u70b9\u5fc5\u5b9a\u53ea\u5b58\u5728\u53f6\u5b50\u7ed3\u70b9\u4e0a. \u5728\u8fd9\u4e2a\u524d\u63d0\u4e0b,\u4e3a\u4e86\u8282\u7701\u5185\u5b58\u7a7a\u95f4, \u5728\u63d2\u5165\u7ed3\u70b9\u65f6,\u53ea\u8981\u5728\u5173\u952e\u7801\u7684\u8def\u5f84\u4e0a\u4e0d\u5b58\u5728\u88ab\u5360\u7528\u7684\u70b9,\u5c31\u5c06\u8be5\u503c\u63d2\u5165. \u5728\u67e5\u770b\u4e86  insert_large_chunk  \u540e\u4f1a\u6709\u66f4\u6e05\u6670\u7684\u4f53\u4f1a.  4474      rt = t- child[1];\n4475      t = t- child[(sizebits   (SIZE_T_BITSIZE-SIZE_T_ONE))   1];\n4476      if (rt != 0   rt != t)\n4477        rst = rt;\n4478      if (t == 0) {\n4479        t = rst; /* set t to least subtree holding sizes   nb */\n4480        break;\n4481      }\n4482      sizebits  = 1;  (sizebits   (SIZE_T_BITSIZE-SIZE_T_ONE))  \u8fd9\u4e2a\u5c31\u662f\u6bcf\u4e00\u5c42\u6811\u7684\u7279\u5f81\u7801\u4e86.\u7ed3\u5408\u4e0a\u9762sizebits\u7684\u503c,\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u4e3a  nb   (6 + (i   1)) . \u5982\u679c,\u6211\u4eec\u518d\u7ed3\u5408 compute_tree_index  \u4e2d\u7684\u7ed3\u679c,\u5f97\u5230\u5982\u4e0b\u8868.idx\u4e3a\u7bb1\u53f7,mem\u4e3a\u8be5\u7bb1\u5b50\u4e2d\u7684\u6700\u5c0f\u5185\u5b58,hex\u4e3a\u8be5\u503c\u768416\u8fdb\u5236,mid\u4e3a\u533a\u5206\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u7279\u5f81\u7801,bitshift\u4e3a\u7279\u5f81\u7801\u7684\u65e0\u6548\u4f4d\u6570. \u6bd4\u5982,\u7bb1\u5b501\u4e2d,dix\u4e3a1,\u5176\u8868\u793a\u7684\u5185\u5b58\u8303\u56f4\u4e3a[384, 512),\u5219\u5176\u5de6\u5b50\u6811\u8868\u793a\u8303\u56f4\u4e3a[384,448),\u53f3\u5b50\u6811\u4e3a[448,512).448\u5373\u4e3a\u8be5\u6811\u7684\u7b2c\u4e00\u5c42\u7684\u7279\u5f81\u7801,\u4e5f\u5c31\u662f111000000.\u5982\u679cnb   448, \u5219\u7b2c7\u4f4d\u4e3a0,\u5426\u5219\u7b2c7\u4f4d\u4e3a1.\u6240\u4ee5,\u53ea\u8981\u901a\u8fc7\u5c06size   bitshift \u4e4b\u540e\u4e0e1 \u505a\u4f4d\u4e0e\u8fd0\u7b97,\u5c31\u53ef\u4ee5\u5224\u65ad\u51fa\u5728\u8be5\u6811\u5bf9\u5e94\u5c42\u8be5\u8fdb\u5165\u5176\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811.  idx 0 mem 256 hex: 100  mid: 101000000 bitshift: 6\nidx 1 mem 384 hex: 180 mid: 111000000 bitshift: 6\nidx 2 mem 512 hex: 200 mid: 1110000000 bitshift: 7\nidx 3 mem 768 hex: 300 mid: 1010000000 bitshift: 7\nidx 4 mem 1024 hex: 400 mid: 10100000000 bitshift: 8\nidx 5 mem 1536 hex: 600 mid: 11100000000 bitshift: 8\nidx 6 mem 2048 hex: 800 mid: 101000000000 bitshift: 9\nidx 7 mem 3072 hex: c00 mid: 111000000000 bitshift: 9\nidx 8 mem 4096 hex: 1000 mid: 1010000000000 bitshift: 10\nidx 9 mem 6144 hex: 1800 mid: 1110000000000 bitshift: 10\nidx 10 mem 8192 hex: 2000 mid: 10100000000000 bitshift: 11\nidx 11 mem 12288 hex: 3000 mid: 11100000000000 bitshift: 11\nidx 12 mem 16384 hex: 4000 mid: 101000000000000 bitshift: 12\nidx 13 mem 24576 hex: 6000 mid: 111000000000000 bitshift: 12\nidx 14 mem 32768 hex: 8000 mid: 1010000000000000 bitshift: 13\nidx 15 mem 49152 hex: c000 mid: 1110000000000000 bitshift: 13\nidx 16 mem 65536 hex: 10000 mid 10100000000000000 bitshift: 14\nidx 17 mem 98304 hex: 18000 mid 11100000000000000 bitshift: 14\nidx 18 mem 131072 hex: 20000 mid 101000000000000000 bitshift: 15\nidx 19 mem 196608 hex: 30000 mid 111000000000000000 bitshift: 15\nidx 20 mem 262144 hex: 40000 mid 1010000000000000000 bitshift: 16\nidx 21 mem 393216 hex: 60000 mid 1110000000000000000 bitshift: 16\nidx 22 mem 524288 hex: 80000 mid 10100000000000000000 bitshift: 17\nidx 23 mem 786432 hex: c0000 mid 11100000000000000000 bitshift: 17\nidx 24 mem 1048576 hex: 100000 mid 101000000000000000000 bitshift: 18\nidx 25 mem 1572864 hex: 180000 mid 111000000000000000000 bitshift: 18\nidx 26 mem 2097152 hex: 200000 mid 1010000000000000000000 bitshift: 19\nidx 27 mem 3145728 hex: 300000 mid 1110000000000000000000 bitshift: 19\nidx 28 mem 4194304 hex: 400000 mid 10100000000000000000000 bitshift: 20\nidx 29 mem 6291456 hex: 600000 mid 11100000000000000000000 bitshift: 20\nidx 30 mem 8388608 hex: 800000 mid 101000000000000000000000 bitshift: 21\nidx 31 mem 12582912 hex: c00000 bitshift: 31  // \u56fe, dlammloc \u6811\u7684\u56fe.  4485  if (t == 0   v == 0) { /* set t to root of next non-empty treebin */\n4486    binmap_t leftbits = left_bits(idx2bit(idx))   m- treemap;\n4487    if (leftbits != 0) {\n4488      bindex_t i;\n4489      binmap_t leastbit = least_bit(leftbits);\n4490      compute_bit2idx(leastbit, i);\n4491      t = *treebin_at(m, i);\n4492    }\n4493  }  \u8fd9\u91cc\u5bf9\u5e94\u4e0a\u6587\u7684 4462  if ((t = *treebin_at(m, idx)) != 0) {  , \u4e5f\u5c31\u662f\u8bf4\u5728\u5f53\u524d\u5927\u5c0f\u7684\u7bb1\u5b50\u5185\u4e0d\u5b58\u5728\u7a7a\u95f2\u7684\u5185\u5b58\u5757,\u6240\u4ee5\u6211\u4eec\u8981\u628at\u8bbe\u7f6e\u4e3a\u6700\u8fd1\u7684\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u7bb1\u53f7. left_bits  \u548c  least_bit  \u8ddf\u4e0a\u6587\u5c0f\u5185\u5b58\u5bfb\u627e\u6700\u8fd1\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u7bb1\u5b50\u7b97\u6cd5\u4e00\u6837.  4495  while (t != 0) { /* find smallest of tree or subtree */\n4496    size_t trem = chunksize(t) - nb;\n4497    if (trem   rsize) {\n4498      rsize = trem;\n4499      v = t;\n4500    }\n4501    t = leftmost_child(t);\n4502  }  \u8fd9\u91cc\u8ddf tmalloc_small \u5bfb\u627e\u6700\u5de6\u5b50\u6811(\u6700\u5c0f\u5185\u5b58)\u7684\u7b97\u6cd5\u4e00\u6837.\u8fd9\u6bb5\u4ee3\u7801\u5bf9\u4e0a\u9762\u7684\u4e24\u79cd\u60c5\u51b5\u90fd\u6709\u6548.\u5373,\u5982\u679c\u5728\u5bf9\u5e94\u7bb1\u53f7\u6709\u7a7a\u95f2\u5185\u5b58,\u5728\u57fa\u4e8e\u6811\u7684\u641c\u7d22\u7b97\u6cd5\u627e\u5230\u7684t\u5c31\u662f\u6700\u5339\u914dnb\u7684\u5927\u5c0f,\u6240\u4ee5\u8fd9\u91cc\u7684while\u5faa\u73af\u7ed3\u679ct\u5c31\u4e0d\u4f1a\u6539\u53d8;\u5982\u679c\u662f,\u5bfb\u627e\u6700\u8fd1\u6709\u7a7a\u95f2\u5757\u7684\u6811,\u90a3\u4e48\u8be5\u6811\u7684\u6700\u5c0f\u5185\u5b58\u90fd\u5927\u4e8e\u8bf7\u6c42\u5927\u5c0fnb,\u6240\u4ee5\u76f4\u63a5\u5bfb\u627e\u6700\u5de6\u5b50\u6811.", 
            "title": "\u5927\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e00"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#dlmalloc_3", 
            "text": "version 1.0 by Werther Zhang @ 2014.03.15 Write done @WizNote  Version 1.1   by Werther Zhang @ 2014.03.20 Export to @Word  Version  1.2  by Werther Zhang @ 2016.07.02 Move to @leanote", 
            "title": "dlmalloc\u6d45\u6790"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#dlmalloc_4", 
            "text": "dlmalloc\u5728\u67d0\u4e9b\u7a0b\u5ea6\u4e0a\u8bf4\uff0c\u662f\u6700\u597d\u7684\u5185\u5b58\u7ba1\u7406\u5de5\u5177\u4e4b\u4e00\u3002\u5b83\u662f\u7531Doug Lea \u57281987\u5e74\u5f00\u59cb\u7f16\u5199\uff0c\u6240\u4ee5\u5927\u90e8\u5206\u4eba\u4f1a\u79f0\u547c\u5b83\u4e3aDoug Lea's Malloc\uff0c \u7b80\u79f0dlmalloc\u3002", 
            "title": "dlmalloc\u4ecb\u7ecd"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#_6", 
            "text": "dlmalloc \u6839\u636e\u5185\u5b58\u7c92\u5ea6\u7684\u5927\u5c0f\u5206\u522b\u4f7f\u7528chunk\u548csegment\u8fdb\u884c\u7ba1\u7406\u3002Segment\u662f\u901a\u8fc7sbrk\u5206\u914d\uff0c\u7c7b\u4f3c\u8fdb\u7a0b\u7684\u6570\u636e\u6bb5\uff0c\u5c5e\u4e8e\u6781\u5c11\u9047\u5230\u7684\u60c5\u51b5\u3002Dlmalloc\u4e2d\u5927\u91cf\u5b58\u5728\u7684\u5185\u5b58\u5757\u662fchunk\u3002Chunk\u7684\u7ed3\u6784\u5982\u4e0b\u3002  \u88ab\u7528\u6237\u4f7f\u7528\u7684chunk\u7ed3\u6784\u770b\u8d77\u6765\u50cf\u4e0b\u9762\u8fd9\u6837\uff08\u975e\u7cbe\u786e\u56fe\uff09\uff1a   \u800c\u672a\u88ab\u4f7f\u7528\u7684chunk\u770b\u8d77\u6765\u5982\u4e0b\uff08\u975e\u7cbe\u786e\u56fe\uff09\uff1a   \n\u5728\u865a\u62df\u5730\u5740\u4e0a\uff0cdlmalloc\u4f1a\u4fdd\u8bc1\u7a7a\u95f2\u7684\u5185\u5b58\u5757\u5b58\u5728\u201c\u5b64\u5c9b\u6548\u5e94\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4efb\u4e00\u5757\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u524d\u540e\u5fc5\u5b9a\u662f\u88ab\u4f7f\u7528\u7684\u5185\u5b58\u5757\u3002\u56e0\u4e3a\u5728free\u6216\u8005\u5176\u4ed6\u4efb\u4f55\u65f6\u5019\uff0cdlmalloc\u603b\u662f\u4f1a\u5408\u5e76\u7a7a\u95f2\u7684\u5185\u5b58\u5757\u3002 \n\u5bf9 \u4e8echunk\uff0c\u6839\u636e\u5176\u5927\u5c0f\uff0c\u5206\u4e3a\u5927\u5185\u5b58\u548c\u5c0f\u5185\u5b58\u3002\u5c0f\u5185\u5b58\u753132\u4e2a\u53cc\u5411\u94fe\u8868\u901a\u8fc7\u5206\u7bb1\uff08\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u5bf9\u5e94\u4e00\u4e2a\u5927\u5c0f\uff0c\u6bcf\u4e2a\u7bb1\u5b50\u4e2d\u5b58\u653e\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff09\u8fdb\u884c\u7ba1\u7406\uff0c\u800c\u5927 \u5185\u5b58\u7edf\u4e00\u7531bitwise tries\u6811\u901a\u8fc7\u5206\u7bb1\uff08\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u5bf9\u5e94\u4e00\u4e2a\u5185\u5b58\u8303\u56f4\uff0c\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u4e2d\u5b58\u653e\u4e00\u68f5\u6811\uff0c\u6bcf\u4e00\u68f5\u6811\u4e2d\u82e5\u6709\u7b49\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u7531\u53cc\u5411\u94fe\u8868\u7ba1\u7406\uff09 \u8fdb\u884c\u7ba1\u7406\u3002 \n\u6bcf\u4e00\u4e2achunk\u7684\u5927\u5c0f\u5fc5\u987b\u4e3a8byte\u7684\u6574\u6570\u500d\u3002\u6240\u4ee5\u5728\u2019size of chunk\u2019 \u57df\u7684\u4f4e\u4e09\u4f4d\u5b58\u653e\u4e86\u8be5chunk\u5c5e\u6027\u7684\u6807\u5fd7\u4f4d\u3002 \nP (PINUSE_BIT) \u4f4d, \u4fdd \u5b58\u5728\u5185\u5b58\u5757\u5927\u5c0f(\u4e00\u822c\u662f\u53cc\u5b57\u8282\u7684\u500d\u6570)\u7684\u672a\u4f7f\u7528\u7684\u4f4e\u4f4d, \u662f\u4e00\u4e2a\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u662f\u5426\u88ab\u4f7f\u7528\u7684bit\u4f4d.\u5982\u679c\u8fd9\u4e2abit\u4f4d\u88ab\u6e05\u7406\u4e86,\u90a3\u4e48\u5728\u5f53\u524d\u5185\u5b58\u5757 \u4e4b \u524d\u7684\u4e00\u4e2a\u5b57 \u5927\u5c0f\u6570\u636e\u4fdd\u5b58\u7740\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u7528\u4e8e\u5bfb\u627e\u524d\u4e00\u4e2a\u5185\u5b58\u5757.\u800c \u7b2c\u4e00\u4e2a\u5185\u5b58\u5757\u8fd9\u4e2abit\u4f4d\u603b\u662f\u88ab\u7f6e\u4e0a\u7684,\u9632\u6b62\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u5185\u5b58\u533a\u57df.\u5982\u679c\u67d0\u4e2a \u5185 \u5b58\u5757\u7684 pinuse\u88ab\u8bbe\u7f6e\u4e86,\u4f60\u5c31\u65e0\u6cd5\u51b3\u5b9a\u4e0a\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u5e76\u4e14\u5982\u679c\u4f60\u771f\u7684\u5c1d \u8bd5\u8fd9 \u4e48\u505a\u4e86,\u6709\u53ef\u80fd\u5185\u5b58\u8bbf\u95ee\u51fa\u9519. \nC (CINUSE_BIT) bit\u4f4d, \u4fdd\u5b58\u5728\u5185\u5b58\u5757\u7684\u7b2c\u4e8c\u4f4e\u7684bit\u4f4d,\u5197\u4f59\u5730\u8bb0\u5f55\u7740\u5f53\u524d\u5757\u662f \u5426\u88ab\u4f7f\u7528\u4e86(\u9664\u975e\u5f53\u524d\u5185\u5b58\u5757\u662f\u88ab\u6620\u5c04\u7684).\u8fd9\u4e2a\u5197\u4f59\u4fe1\u606f\u7528\u4e8e\u5728free\u548crealloc\u64cd \u4f5c\u65f6\u7684\u68c0\u67e5,\u5e76\u4e14\u51cf\u5c11\u5728\u6267\u884cfree\u548c\u5408\u5e76\u5185\u5b58\u5757\u65f6\u7684\u95f4\u63a5\u64cd\u4f5c. \n\u4efb\u4f55\u65b0\u5206\u914d\u7684\u5185\u5b58\u5757\u5fc5\u987b\u90fd\u8bbe\u7f6e\u4e86cinuse\u548cpinuse.\u8fd9\u610f\u5473\u7740,\u4efb\u4f55\u5206\u914d\u4e86\u7684\u5185 \u5b58\u5757\u7684\u8fb9\u754c\u8981\u4e48\u662f\u4e00\u4e2a\u5148\u524d\u5206\u914d\u5e76\u4e14\u4ecd\u7136\u5728\u4f7f\u7528(in-use)\u7684\u5185 \u5b58\u5757,\u8981\u4e48\u662f\u5b83\u81ea \u5df1\u7684\u5927\u5185\u5b58\u533a\u57df(segment)\u7684\u5730\u5740.\u8fd9\u6837\u786e\u4fdd\u6240\u6709\u7684\u5185\u5b58\u7533\u8bf7(allocations)\u90fd\u662f\u4ece\u4efb\u4f55\u80fd\u627e\u5230\u7684\u5185\u5b58\u5757\u7684\u201c\u6700\u4f4e\u201d\u90e8\u5206 \u83b7\u53d6.\u8fdb\u4e00\u6b65\u5730\u8bf4,\u4e0d\u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u7a7a\u95f2\u5185 \u5b58\u5757\u5728\u7269\u7406\u4e0a\u7d27\u90bb\u7740\u53e6 \u4e00\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757,\u6240\u4ee5\u6bcf\u4e00\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757\u88ab\u8bc1\u5b9e\u5728\u4f7f\u7528 (inuse)\u7684\u5185\u5b58\u5757\u6216\u8005\u5185\u5b58\u5c3e \u90e8\u4e4b\u524d\u548c\u4e4b\u540e. \n\u6ce8\u610f: \u5f53\u524d\u5757\u7684 \u2019foot\u2019\u5b9e\u9645\u4e0a\u4ee3\u8868\u7740\u4e0b\u4e00\u4e2a\u5185\u5b58\u5757\u7684prev_foot.\u8fd9\u4f7f\u5bf9\u9f50\u7b49\u64cd \u4f5c\u5904\u7406\u53d8\u5f97\u5bb9\u6613\u4f46\u4f1a\u4f7f\u4eba\u5728\u6269\u5c55\u6216\u7ef4\u62a4\u8fd9\u4efd\u4ee3\u7801\u65f6\u611f\u5230\u56f0\u60d1. \n\u4ee5\u4e0b\u662f\u5bf9\u7279\u6b8a\u7684\u5185\u5b58\u5757\u7684\u8bf4\u660e:   \u7279 \u6b8a\u7684\u5185\u5b58\u5757\u2019top\u2019\u662f\u6700\u9876\u4e0a\u7684\u53ef\u7528\u5185\u5b58\u5757(i.e., \u7d27\u90bb\u7740\u53ef\u7528\u5185\u5b58\u7684\u8fb9\u754c). \u8fd9\u5757\u5185\u5b58\u5757\u4f1a\u88ab\u7279\u6b8a\u5bf9\u5f85. Top \u5185\u5b58\u5757\u4e0d\u4f1a\u88ab\u5305\u542b\u5728\u4efb\u4f55\u7684\u5185\u5b58\u5206 \u7c7b\u7bb1\u91cc, \u53ea\u6709\u5728\u6ca1\u6709\u4efb\u4f55\u5176\u4ed6\u5185\u5b58\u5757\u53ef\u4f7f\u7528\u65f6,\u624d\u88ab\u4f7f\u7528,\u5e76\u4e14\u5728\u5b83\u975e\u5e38\u5927\u65f6(\u67e5\u770b M_TRIM_THRESHOLD) \u4f1a\u88ab\u91ca\u653e\u4e00\u90e8\u5206\u56de\u7cfb\u7edf.\u5728\u5b9e\u9645 \u4e0a,top\u5185\u5b58\u5757\u4e00\u822c\u88ab\u8ba4 \u4e3a\u662f\u6bd4\u5176\u4ed6\u6240\u6709\u7684\u5185\u5b58\u5757\u90fd\u5927.Top\u5185\u5b58\u5757\u4ece\u6765\u4e0d\u4f1a\u66f4\u65b0\u5b83\u7684\u5c3e\u90e8\u6570\u636e\u533a\u57df\u56e0 \u4e3a\u6839\u672c\u6ca1\u6709\u5185\u5b58\u5757\u4f1a\u5728\u7d22\u5f15\u4e0a\u7d27\u8ddf\u5176\u540e.\u4f46\u662f,\u7a7a\u95f4 \u8fd8\u662f\u4f1a\u5206\u914d\u7ed9\u5b83 (TOP_FOOT_SIZE) \u7528\u6237\u505a\u5185\u5b58\u5757\u7684\u62c6\u5206\u548c\u5408\u5e76,\u5f53\u7a7a\u95f4\u9700\u8981\u6269\u5c55\u65f6.  dv chunk \u662f\u4fdd\u5b58\u4e86\u6700\u8fd1\u88ab\u4f7f\u7528\u5e76\u5207\u5272\u8fc7\u7684\u5185\u5b58\u5757\uff0c\u4fdd\u5b58\u5728\u5168\u5c40\u7684gm\u4e2d\u3002\u5b83\u4e0d\u5f52\u5c5e\u5230\u53cc\u5411\u94fe\u8868\u6216\u8005\u6811\u4e2d\u7ba1\u7406\u3002\u4f46\u5f53\u5b83\u88ab\u66ff\u6362\u65f6\uff0c\u4e5f\u4f1a\u52a0\u5165\u5185\u5b58\u7ba1\u7406\u4e2d\u3002 \nBitwise trie \u6811, \u5b9e\u9645\u4e0a\u662f\u7ed3\u5408\u4e86\u4e8c\u53c9\u6811\u548ctrie\u6811(\u53c8\u53eb\u5b57\u5178\u6811, \u524d\u7f00\u6570).\u4e8c\u53c9\u6811\u53ea\u6709\u5de6\u53f3\u5b50\u6811. Trie\u6811\u662f\u4e00\u79cd\u6709\u5e8f\u6811,\u7528\u4e8e\u4fdd\u5b58\u5173\u8054\u6570\u7ec4,\u7c7b\u4f3c hash table, \u6709key \u548c value \u7ed3\u6784. \u5982\u4e0b\u56fe.key \u5b9e\u9645\u4e0a\u5c31\u662f\u5230\u8fbevalue\u7684\u8def\u5f84.\u800cbitwise trie, \u5b83\u662f\u5c06 key\u8bbe\u7f6e\u4e3a0/1, \u6240\u4ee5, \u662f\u4e00\u68f5\u4e8c\u53c9\u6811.\u5728dlmalloc\u7684bitwise trie tree\u4e2d, 0 \u4ee3\u8868\u8fdb\u5165\u5de6\u5b50\u6811, 1 \u4ee3\u8868\u8fdb\u5165\u53f3\u5b50 \u6811. \u800ckey\u7684\u957f\u5ea6\u5bf9\u5e94\u8def\u5f84\u7684\u6df1\u5ea6.\u53c2\u8003 [treebins\u548c\u6811\u7ba1\u7406\u56fe\u89e3] \u7684\u56fe,\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u8981\u67e5\u627e\u7684\u662f512\u5bf9\u5e94\u7684\u7ed3\u70b9, \u5219\u5c06520\u5bf9 \u5e94\u4e8c\u8fdb\u5236\u7801\u662f1000001000, \u5bf9\u5e94\u7684\u7bb1\u5b50\u53f7\u662f2\u53f7,\u5219\u5176\u8868\u793a\u7684\u5185\u5b58\u8303\u56f4\u4e3a256, \u7279\u5f81\u7801\u957f\u5ea6\u4e3a8, \u4e5f\u5c31\u662f00001000.\u8003\u8651\u5230, \u6240\u6709\u8bf7 \u6c42\u5927\u5c0f\u4e3a8byte\u500d\u6570,\u6240\u4ee5, \u5b9e\u9645\u7279\u5f81\u7801\u4e3a00001, \u6811\u6df1\u4e3a5, \u524d4\u5c42\u4e3a\u5de6\u5b50\u6811,\u7b2c\u4e94\u5c42\u4e3a\u53f3\u5b50\u6811.\u4f46\u521a\u624d\u63cf\u8ff0\u7684\u662ftrie\u6811\u548c bitwise trie \u6811, \u4e0d\u662fdlmalloc\u4f7f\u7528\u7684\u6811.", 
            "title": "\u7b97\u6cd5\u6982\u89c8"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#mspace_1", 
            "text": "struct   malloc_chunk   {  size_t                 prev_foot ;    /* \u5982\u679c\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7a7a\u95f2,\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f */  size_t                 head ;         /* \u5927\u5c0f\u548cinuse bit\u4f4d*/  struct   malloc_chunk *   fd ;           /* \u5982\u679c\u662f\u7a7a\u95f2\u5185\u5b58\u5757,\u6307\u5411\u53cc\u5411\u94fe\u8868*/  struct   malloc_chunk *   bk ;  };  typedef   struct   malloc_chunk    mchunk ;  typedef   struct   malloc_chunk *   mchunkptr ;  typedef   struct   malloc_chunk *   sbinptr ;    /* \u5185\u5b58\u5757\u5206\u7c7b\u7bb1\u7684\u7c7b\u578b */ \ufeff\u200b", 
            "title": "\u975eMSPACE\u4ee3\u7801\u903b\u8f91\u5206\u6790"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#head_1", 
            "text": "PINUSE_BIT \u5728\u524d\u4e00\u4e2a\u76f8\u90bb\u7684\u5185\u5b58\u5757\u88ab\u4f7f\u7528\u65f6,\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u88ab\u7f6e\u4e0a. CINUSE_BIT \u5728\u5f53\u524d\u5185\u5b58\u5757\u88ab\u4f7f\u7528\u65f6,\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u88ab\u7f6e\u4e0a. FLAG4_BIT \u5728\u5f53\u524d\u7248\u672c\u7684dlmalloc\u4e2d\u672a\u88ab\u4f7f\u7528  \n\u5982 \u4f55\u505a\u5230\u5728head\u4e2d\u65e2\u5b58\u653e\u5757\u5927\u5c0f\u53c8\u5b58\u653e\u6807\u5fd7\u4f4d\u7684\u5462?\u9996\u5148\u63d0\u5230\u4e00\u70b9\u662f,\u6240\u6709\u7684\u5757\u7684 \u5927\u5c0f\u90fd\u662f\u6309\u6700\u5c118bit\u5bf9\u9f50\u7684,\u6362\u53e5\u8bdd\u8bf4,\u8868\u793a\u5927\u5c0f\u7684\u6570\u5b57,\u4f4e3\u4f4d\u5fc5\u5b9a\u4e3a 0,\u6240\u4ee5\u5c31\u6709 \u6548\u5730\u5229\u7528\u4e86\u4f4e3\u4f4d\u5b58\u653e\u6807\u5fd7\u4f4d.\u6240\u4ee5,\u83b7\u53d6chunk\u7684\u5927\u5c0f\u7528\u4e0b\u9762\u7684\u5b8f,\u5c06head\u7684\u4f4e\u4e09 \u4f4d\u6e05\u62100,\u53d6\u51fa.  #define chunksize(p)        ((p)- head   ~(FLAG_BITS))  \n\u4e0b\u9762\u4ecb\u7ecd\u4e0bdlmalloc\u7ef4\u62a4\u7684\u4e00\u4e2a\u5168\u5c40\u6570\u636e\u7ed3\u6784.  2579   struct   malloc_state   {   2580     binmap_t     smallmap ;    // 32bit, \u5c0f\u5185\u5b58\u7bb1\u5b50\u7684\u4f4d\u56fe.  2581     binmap_t     treemap ;      // 32bit, \u5927\u5185\u5b58\u7bb1\u5b50\u7684\u4f4d\u56fe  2582     size_t       dvsize ;             //  dv chunk \u7684\u5927\u5c0f  2583     size_t       topsize ;            //  top chunk\u7684\u5927\u5c0f  2584     char *        least_addr ;      //  dlmalloc\u7ba1\u7406\u7684\u5185\u5b58\u7684\u6700\u5c0f\u5730\u5740,\u4e5f\u5c31\u662f\u6700\u5c0f\u7684segment \u57fa\u5730\u5740.  2585     mchunkptr    dv ;              // dv chunk. \u6700\u8fd1\u88ab\u5206\u5272\u4f7f\u7528\u7684chunk  2586     mchunkptr    top ;             // top chunk. \u9876\u90e8,\u9760\u8fd1\u6709\u6548\u5185\u5b58\u7684chunk,\u8be6\u89c1\u603b\u7ed3\u56fe.  2587     size_t       trim_check ;      // \u68c0\u67e5top chunk\u5927\u5c0f\u662f\u5426\u8d85\u7684\u51fd\u6570.  2588     size_t       release_checks ;    2589     size_t       magic ;   2590     mchunkptr    smallbins [( NSMALLBINS + 1 ) * 2 ];     // 32\u4e2a\u94fe\u8868\u5934  2591     tbinptr      treebins [ NTREEBINS ];             // 32\u68f5\u6811  2592     size_t       footprint ;   2593     size_t       max_footprint ;   2594     size_t       footprint_limit ;   /* zero means no limit */   2595     flag_t       mflags ;   2596   # if   USE_LOCKS   2597     MLOCK_T      mutex ;       /* locate lock among fields that rarely change */   2598   # endif   /* USE_LOCKS */   2599     msegment     seg ;          //  segment\u94fe\u8868.  2600     void *        extp ;        /* Unused but available for extensions */   2601     size_t       exts ;   2602   }; \ufeff\u200b   mchunkptr  smallbins[(NSMALLBINS+1)*2];    \u8fd9\u91cc\u4f1a\u6709\u4e2a\u7591\u95ee,\u7406\u8bba\u4e0a, 32\u4e2a\u94fe\u8868\u5934,\u6211\u4eec\u4f1a\u4f7f\u7528 struct malloc_chunk  smallbins[NSMALLBINS];   \u4f46\u8fd9\u91cc\u4e0d\u4f7f\u7528\u7684\u539f\u56e0\u662f, \u5bf9\u4e8e\u94fe\u8868\u5934\u800c\u8a00,   malloc_chunk \u7684  prev_foot \u548c head \u4e24\u4e2a\u57df\u662f\u6ca1\u6709\u88ab\u4f7f\u7528\u7684,\u5b9e\u9645\u9700\u8981\u7684\u5927\u5c0f\u662f2\u4e2a\u6307\u9488\u5927 \u5c0f.\u6240\u4ee5,dlmalloc\u4f7f\u7528\u4e86\u8986\u76d6\u7684\u65b9\u6cd5. \u524d\u4e00\u4e2a malloc_state \u7684fb/bk \u8e29\u4e86\u540e\u4e00\u4e2a\u7684 malloc_state\u7684 prev_foot/head.\u6240\u4ee5\u5927\u5c0f\u5e94\u8be5\u4e3a 32 * 8 + 8, \u4e5f\u5c31\u662f33 * 2 \u4e2a\u6307\u9488\u5927\u5c0f.", 
            "title": "head \u57df\u4e2d\u53d8\u91cf\u7684\u8bf4\u660e:"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#_7", 
            "text": "\u5f53\u5185\u5b58\u5757\u672a\u88ab\u4f7f\u7528\u65f6,\u4ed6\u4eec\u4f5c\u4e3a\u5217\u8868\u6216\u8005\u6811\u7684\u8282\u70b9. \n\u5c0f\u5185\u5b58(\u201cSmall\u201d) \u5757\u5b58\u50a8\u5728\u73af\u5f62\u53cc\u5411\u94fe\u8868\u4e2d,\u770b\u8d77\u6765\u50cf\u5982\u4e0b\u8fd9\u6837.   \u800c \u5927 \u7684\u5185\u5b58\u5757\u4f7f\u7528\u5185\u5b58\u5757\u5927\u5c0f\u4e3a\u5173\u952e\u5b57\u7684bitwise digital tree (\u53c8\u53ebaka tree).\u56e0\u4e3amalloc_tree_trunks\u53ea\u662f \u7528\u4e8e\u5927\u5c0f\u5927\u4e8e256bytes\u7684\u7a7a\u95f2\u5185\u5b58\u5757,\u4ed6\u4eec \u7684\u5927\u5c0f\u4e0d\u4f1a\u53d7\u5230\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u7684\u9650\u5236.\u6bcf \u4e00\u4e2a\u8282\u70b9\u7684\u7ed3\u6784\u770b\u8d77\u6765\u50cf\u5982\u4e0b\u8fd9 \u6837.   \u6bcf\u4e00\u68f5\u6811\u90fd\u62e5\u6709\u552f\u4e00\u7684\u5185\u5b58\u5757\u5927\u5c0f.\u800c\u5177\u6709\u540c\u6837\u5927\u5c0f\u7684\u5185\u5b58\u5757\u4f1a\u88ab\u5b89\u6392\u5728\u53cc\u5411\u94fe \u8868\u91cc,\u4e0e\u6700\u8001\u7684\u5185\u5b58\u5757\u4e00\u8d77(\u6307,\u4ee5FIFO\u7684\u89c4\u5219,\u4e0b\u4e00\u4e2a\u8981\u88ab\u4f7f\u7528\u7684\u5185\u5b58\u5757).\u5982\u679c\u4e00 \u4e2a\u5177\u6709\u540c\u6837\u5927\u5c0f\u7684\u5185\u5b58\u5757\u88ab\u63d2\u5165,\u5b83\u5c31\u4f1a\u7528\u7c7b\u4f3c\u5c0f\u5185\u5b58\u7684fb/bk\u7684\u6307\u9488\u4e00\u6837\u7684\u65b9\u5f0f,\u4ece \u539f\u6709\u7684\u8282\u70b9\u79fb\u9664.  \u6bcf \u4e00 \u68f5\u6811\u5305\u542b\u5927\u5c0f\u4e3a2\u7684\u4e58\u65b9\u8303\u56f4\u7684\u5185\u5b58\u5757(\u6700\u5c0f\u4e3a0x100  = x   0x180),\u5728\u6811 \u7684\u6bcf\u4e00\u5c42\u90fd\u4f1a\u88ab\u5206\u6210\u4e00\u534a,\u5373\u5c0f\u7684\u4e00\u534a (0x100  = x   0x140)\u4f5c\u4e3a\u5de6\u5b50\u6811,\u5927\u7684\u4e00 \u534a\u4f5c\u4e3a\u53f3\u5b50\u6811(0x140  = x   0x180).  \u901a\u8fc7\u4f7f\u7528\u8fd9\u79cd\u89c4\u5219,\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u5305\u542b\u7684\u5185\u5b58\u5757\u5927\u5c0f\u90fd\u5c0f\u96e8\u5176\u53f3\u5b50\u6811.  Smallbins\u548c\u53cc\u5411\u94fe\u8868\u7ba1\u7406\u5c0f\u5185\u5b58\u56fe\u89e3\u3002   Treebins\u548c\u6811\u7ba1\u7406\u5927\u5185\u5b58\u7684\u56fe\u89e3\uff1a", 
            "title": "\u88ab\u8986\u76d6\u7684\u6570\u636e\u7ed3\u6784"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#dlmalloc_5", 
            "text": "dlmalloc \u5bf9\u5c0f\u5185\u5b58\u5206\u914d\u6709\u5982\u4e0b5\u4e2a\u89c4\u5219(\u6309\u4f18\u5148\u7ea7\u987a\u5e8f)\uff1a    \u5982\u679c\u4e0e\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u5339\u914d\u7684\u7bb1\u5b50\u5b58\u5728\u7a7a\u95f2,\u5219\u4f7f\u7528\u5f53\u524d\u7bb1\u5b50\uff0c\u5426\u5219\u4f7f\u7528\u4e34\u8fd1\u7684 \u7bb1\u5b50\u3002\u5728\u80fd\u4e0d\u5206\u5272\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\u5c3d\u91cf\u4e0d\u5206\u5272\u5185\u5b58\u3002   \u5982\u679cdv chunk\u8db3\u591f\u5927\uff0c\u90a3\u4e48\u4f7f\u7528dv chunk\u3002 dv chunk\u662f\u6307\u6700\u8fd1\u4e00\u6b21\u5c0f\u5185\u5b58 \u7533\u8bf7\u65f6\u4f7f\u7528\u7684\u5185\u5b58\u5757\u3002 \u8fd9\u4e2a\u89c4\u5219\u662f\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u5206\u914d\u7684\u5185\u5b58\u8fde\u7eed\u3002   \u5728smallbin\u548ctreebin\u4e2d\u5bfb\u627e\u53ef\u4ee5\u4f7f\u7528\u7684\u5185\u5b58\u5757\uff0c\u5e76\u5206\u5272\u3002\u5c06\u5269\u4e0b\u7684\u5185\u5b58 \u5757\u4fdd\u5b58\u5230dv chunk\u4e2d\u3002   \u5982\u679ctop chunk \u8db3\u591f\u5927\uff0c\u5219\u4f7f\u7528top chunk  \u5982\u679c\u8bf7\u6c42\u5185\u5b58\u5b9e\u5728\u592a\u5927\uff0c\u5219\u4f7f\u7528\u7cfb\u7edf\u5206\u914d\u5185\u5b58\u3002   \n\u5927\u5185\u5b58\u5206\u914d\u7684\u89c4\u5219\uff1a   \u5728treebin\u4e2d\u627e\u5230\u6700\u9002\u5408\u7684\u6700\u5c0f\u5185\u5b58\uff0c\u5982\u679c\u5b83\u6bd4dv chunk\u7684\u66f4\u5408\u9002\uff0c\u5c31\u4f7f\u7528\u5b83\uff0c \u5982\u679c\u6709\u9700\u8981\u5c31\u5206\u5272\u5b83\u3002   \u5982\u679cdv chunk \u6bd4\u5176\u4ed6\u6240\u6709\u7684\u66f4\u5408\u9002\uff0c\u4f7f\u7528dv chunk\u3002   \u5982\u679ctop \u8db3\u591f\u5927\uff0c\u4f7f\u7528top chunk\u3002   \u5982\u679c\u8bf7\u6c42\u7684\u5927\u5c0f  = mmap threshold, \u5219\u4f7f\u7528\u7cfb\u7edf\u7684mmap\u3002  \u76f4\u63a5\u4ece\u7cfb\u7edf\u5206\u914d\u5185\u5b58\u5e76\u4f7f\u7528\u3002", 
            "title": "dlmalloc\u4ee3\u7801\u5206\u6790"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#_8", 
            "text": "4597       if   ( bytes   =   MAX_SMALL_REQUEST )   {   // MAX_SMALL_REQUEST \u5b9e\u73b0\n2577 #define MAX_SMALL_REQUEST (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)  \u8fd9\u91ccbytes\u4e3a\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f,  MAX_SMALL_REQUEST \u5c31\u662f\u4e4b\u524d\u63d0\u5230\u8fc7\u7684\u6700\u5927\u7684\u5c0f\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u5c31\u662f256byte,\u5373,256byte\u4ee5\u4e0b\u7684\u6240\u6709\u5185\u5b58\u90fd\u662f\u5728\u53cc\u5411\u94fe\u8868\u4e2d\u5339\u914d.  4600         nb   =   ( bytes     MIN_REQUEST ) ?   MIN_CHUNK_SIZE   :   pad_request ( bytes );   2225   # define   MIN_REQUEST           ( MIN_CHUNK_SIZE   -   CHUNK_OVERHEAD   -   SIZE_T_ONE )  2228   # define   pad_request ( req )  \\ 2229      ((( req )   +   CHUNK_OVERHEAD   +   CHUNK_ALIGN_MASK )     ~ CHUNK_ALIGN_MASK )   \u8fd9\u91ccnb\u5c31\u662f\u52a0\u4e0a\u534f\u8bae\u6570\u636e\u540e\u7684\u5b9e\u9645dlmalloc\u4f1a\u5206\u914d\u7684\u5185\u5b58\u5757\u5927\u5c0f.\u524d\u6587\u7b14\u8005\u63d0\u5230\u8fc7,\u5c0f\u5185\u5b58\u5757\u7684\u6700\u5c0f\u503c\u4e3a8byte,\u6240\u4ee5,\u4e0d\u8bba\u7533\u8bf7\u7684\u5185\u5b58\u591a\u5c0f,\u90fd\u4f7f\u7528\u6700\u5c0f\u503c.  4601      idx = small_index(nb);  2572   # define   SMALLBIN_SHIFT      ( 3U )  2825   # define   small_index ( s )        ( bindex_t )(( s )      SMALLBIN_SHIFT )   \u8fd9\u91ccidx\u5f97\u5230\u7684\u662f\u8be5\u5185\u5b58\u5757\u5bf9\u5e94\u7684smallbin\u7bb1\u5b50\u7684\u7bb1\u53f7.\u524d\u6587\u5728\u63d0\u5230head\u65f6,\u63d0\u5230\u8fc7,\u5c0f\u5185\u5b58\u5757\u7684\u5927\u5c0f\u4e3a8byte\u7684\u500d\u6570,\u6240\u4ee5,\u53f3\u79fb3\u4f4d\u6765\u5b9a\u4f4d\u5bf9\u5e94\u7bb1\u5b50\u7684\u7bb1\u53f7.  4602         smallbits   =   gm - smallmap     idx ;   smallmap \u662f\u5404\u4e2a\u7bb1\u5b50\u7684\u4f4d\u56fe,32bit,\u5bf9\u5e9432\u4e2a\u7bb1\u5b50,\u6bcf\u4e00\u4f4d\u4e3a1\u8868\u793a\u8be5\u7bb1\u53f7\u4e2d\u6709\u5bf9\n\u5e94\u5927\u5c0f\u7684\u5185\u5b58\u5757,\u4e3a0\u5219\u8868\u793a\u6ca1\u6709.\u8be5\u884c\u4ee3\u7801\u662f\u628a\u5bf9\u5e94\u7bb1\u53f7\u7684\u6bd4\u7279\u4f4d\u79fb\u5230\u6700\u53f3\u4fa7.  4604         if   (( smallbits     0x3U )   !=   0 )   {  4605           mchunkptr   b ,   p ;  4606           idx   +=   ~ smallbits     1 ;         /* Uses next bin if idx empty */  4607           b   =   smallbin_at ( gm ,   idx );   \u8fd9\u91cc 0x3U \u4f4e8\u4f4d\u5c31\u662f 0000 0011. \u6240\u4ee5,smallbits 0x3U \u4e3a\u771f\u7684\u6761\u4ef6\u5982\u4e0b:(\u4e0a\u6587\u63d0\u5230,smallbits\u7684\u6700\u53f3\u4f4d\u8868\u793aidx\u7bb1\u53f7\u662f\u5426\u6709\u7a7a\u95f2\u5757)   \u4f4e2\u4f4d\u4e3a 11. idx\u6709\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u6709\u7a7a\u95f2\u5757.  \u4f4e2\u4f4d\u4e3a 10. idx\u65e0\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u6709\u7a7a\u95f2\u5757.  \u4f4e2\u4f4d\u4e3a 01. idx\u6709\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u65e0\u7a7a\u95f2\u5757.   4606\u884c\u662f\u5728\u91cd\u65b0\u5b9a\u4f4d\u5230\u771f\u6b63\u6709\u7a7a\u95f2\u5757\u7684\u7bb1\u53f7. ~smallbits   1 \u5728\u5f53\u524d\u7bb1\u5b50\u4e3a0\u7684\n\u60c5\u51b5\u4e0b,\u503c\u4e3a1;\u5f53\u524d\u7bb1\u5b50\u4e3a1\u7684\u60c5\u51b5\u4e0b,\u503c\u4e3a0.\u6240\u4ee5\u662f\u6709\u9650\u662f\u7528\u6b63\u597d\u6ee1\u8db3\u5927\u5c0f\u7684\u7bb1\n\u5b50.  2831 #define smallbin_at(M, i)\n((sbinptr)((void*) ((M)- smallbins[(i) 1])))  i \u5c31\u662f idx, \u800cM\u5219\u662fgm( \u9700\u8981\u5728\u4e0a\u6587\u9884\u5148\u63cf\u8ff0gm\u7ed3\u6784\u4f53\u6210\u5458\u4f5c\u7528 ).smallbins( \u9700\u5728\u4e0a\u6587\u63cf\u8ff0 )\u5c31\u662f\u53cc\u5411\u94fe\u8868\u6570\u7ec4,\u4e5f\u5c31\u662f\u5bf9\u5e94\u7bb1\u53f7\u5185\u90e8\u7684\u7a7a\u95f2\u5757\u94fe\u8868\u7684\u9996\u5730\u5740.  \u503c\u5f97\u9ad8\u5174\u7684\u662f,\u6211\u4eec\u62ff\u5230\u94fe\u8868\u4e86,\u63a5\u4e0b\u6765\u5c31\u662f\u53d6\u51fa\u7a7a\u95f2\u5757,\u548c\u4e00\u4e9b\u6807\u5fd7\u4f4d\u7684\u5904\u7406\u4e86.  4608        p = b- fd;\n4609        assert(chunksize(p) == small_index2size(idx));\n4610        unlink_first_small_chunk(gm, b, p, idx);\n4611        set_inuse_and_pinuse(gm, p, small_index2size(idx));\n4612        mem = chunk2mem(p);\n4613        check_malloced_chunk(gm, mem, nb);\n4614        goto postaction;  fd\u57df\u662f\u524d\u4e00\u4e2a\u94fe\u8868\u8282\u70b9.\u800cB\u662f\u8868\u5934, \u4e5f\u5c31\u662f\u8bf4,\u6211\u4eec\u53d6\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20,\u53d6\u5230\u6211\u4eec\u9700\u8981\u7684\u5185\u5b58\u5757\u5730\u5740.\u8fd9\u4e2aassert\u5176\u5b9e\u5c31\u662f\u786e\u8ba4\u4e0b,\u5f53\u524d\u7684\u7bb1\u53f7\u7684\u5185\u5b58\u5757\u5927\u5c0f\u8ddf\u5f53\u524d\u5185\u5b58\u5757\u7684\u5927\u5c0f\u662f\u5426\u5339\u914d.   3629#define unlink_first_small_chunk(M, B, P, I) {\\\n3630  mchunkptr F = P- fd;\\\n3631  assert(P != B);\\\n3632  assert(P != F);\\\n3633  assert(chunksize(P) == small_index2size(I));\\\n3634  if (B == F) {\\\n3635    clear_smallmap(M, I);\\\n3636  }\\\n3637  else if (RTCHECK(ok_address(M, F)   F- bk == P)) {\\\n3638    F- bk = B;\\\n3639    B- fd = F;\\\n3640  }\\\n3641  else {\\\n3642    CORRUPTION_ERROR_ACTION(M);\\\n3643  }\\\n3644}  2921#define clear_smallmap(M,i)     ((M)- smallmap  = ~idx2bit(i))  \u8fd9\u91cc B P F\u7684\u5173\u7cfb\u662f F -  P -  B , \u6240\u4ee5,\u7406\u8bba\u4e0a, P \u4e0d\u7b49\u4e8eF \u4e5f\u4e0d\u7b49\u4e8eB,\u5982\n\u679c\u76f8\u7b49,\u5c31\u610f\u5473\u7740\u662f\u7a7a\u94fe\u8868(\u53ea\u6709\u8868\u5934).\u800c\u5982\u679cB == F,  \u610f\u5473\u7740\u8be5\u94fe\u8868\u4e2d\u53ea\u6709\u4e00\n\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757.\u53d6\u51fa\u8be5\u5185\u5b58\u5757\u4e4b\u540e,\u54b1\u4eec\u8981\u628a\u8be5\u7bb1\u5b50\u6807\u8bb0\u4e3a\u7a7a(3635, 2921).\u5f53\u7136,\n\u66f4\u591a\u7684\u60c5\u51b5\u662f\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9P.  // 4611 \u884c\u51fd\u6570\u5b9e\u73b0\n\n3058#define set_inuse_and_pinuse(M,p,s)\\\n3059  ((p)- head = (s|PINUSE_BIT|CINUSE_BIT),\\\n3060  ((mchunkptr)(((char*)(p)) + (s)))- head |= PINUSE_BIT)  \u8fd9\u5c31\u662f\u5728P \u7684head\u4e2d\u7f6e\u4e0aCINUSE\u4f4d\u548cP \u7684\u4e0b\u4e00\u5757\u5185\u5b58\u7684head\u4e2d\u8bbe\u7f6e\u4e0aPINUSE\u4f4d.  \u6700\u540emem = chunk2mem(p);  \u5c31\u662f\u53d6\u51fa\u4f20\u9012\u4e2a\u7528\u6237\u7684\u6709\u6548\u5185\u5b58\u5730\u5740,.\ncheck_malloced_chunk(gm, mem, nb); \u662f\u8c03\u8bd5\u7528\u7684,\u68c0\u67e5\u8be5\u5206\u914d\u7684\u5185\u5b58\u5757\u7684\u5404\u4e2a\n\u5c5e\u6027\u662f\u5426\u6b63\u5e38.  \u5230\u6b64,\u5c0f\u5185\u5b58\u7684,\u6b63\u597d\u7b26\u5408\u6216\u6b63\u597d\u4e34\u8fd1\u7bb1\u5b50\u6709\u7a7a\u95f2\u5757\u7684\u903b\u8f91\u5206\u6790\u5b8c\u6210,\u54b1\u4eec\u62ff\u5230\u4e86\n\u9700\u8981\u7684\u5185\u5b58.", 
            "title": "\u5c0f\u5185\u5b58\u89c4\u5219\u4e00"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#_9", 
            "text": "\u4e0b\u9762,\u662f\u4e0a\u8ff0\u60c5\u51b5\u4e0d\u6ee1\u8db3,\u4e5f\u5c31\u662f\u5f53\u524d\u5185\u5b58\u8bf7\u6c42\u5bf9\u5e94\u7684\u7bb1\u53f7idx\u7684smallbits\u4f4e2\u4f4d\u4e3a 00 ,\u4e5f\u5c31\u662f\u8bf4,\u6ca1\u6709\u7a7a\u95f2\u5757.  4617      else if (nb   gm- dvsize) {\n4618        if (smallbits != 0) {  ( dvsize\u9700\u8981\u5728gm\u7684\u5206\u6790\u4e2d\u63cf\u8ff0\u6389 )  smallbits != 0 \u610f\u5473\u7740,\u5728\u6bd4\u8bf7\u6c42\u7684\u5185\u5b58\u5757\u5927\u7684\u7bb1\u5b50\u4e2d,\u603b\u6709\u7a7a\u95f2\u5757\u5b58\u5728.\u6240\u4ee5\u63a5\u4e0b\u6765\u7684\u76ee\u7684\u662f\u627e\u5230\u6700\u5c0f\u7684\u7a7a\u95f2\u5757.  4622          binmap_t leftbits = (smallbits   idx)   left_bits(idx2bit(idx));\n4623          binmap_t leastbit = least_bit(leftbits);\n4624          compute_bit2idx(leastbit, i);  2917#define idx2bit(i)              ((binmap_t)(1)   (i))\n\n2929#define least_bit(x)         ((x)   -(x))\n\n2932#define left_bits(x)         ((x 1) | -(x 1))  4622 \u884c \u4f4d\u4e0e\u7684\u53f3\u64cd\u4f5c\u6570\u662f\u4e00\u4e2a32bit\u7684\u6570\uff0c\u8be5\u6570\u7684\u4f4e\uff08idx+1\uff09\u4f4d\u4e3a0,\u5176\u4f59\u4f4d\u4e3a1;\u5de6\u64cd\u4f5c\u6570\u5c31\u662f\u5bf9\u5e94\u4f4eidx\u4f4d\u4e3a0,\u540c\u65f6\u4ee3\u7801\u903b\u8f91\u8d70\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\uff0c\u4f4e\uff08idx+2\uff09\u4e3a0\u3002\nleast_bit \u7684\u529f\u80fd\u662f\uff0c\u4fdd\u7559leftbits\u4e2d\u4ece\u53f3\u5f80\u5de6\u7684\u7b2c\u4e00\u4e2a\u4e3a1\u7684\u4f4d\uff0c\u5176\u4f59\u4f4d\u4e3a0. \u5219\u8be5leastbit\u5bf9\u5e94\u7684\u5c31\u662f\u7b26\u5408\u8bf7\u6c42\u7684\u6700\u5c0f\u5185\u5b58\u5757\u7684\u4f4d\u56fe\u3002compute_bit2idx \u662f\u5c06leastit\u4f4d\u56fe\u8f6c\u6362\u6210\u7bb1\u53f7\u3002 \u8fd9\u91cc i \u5c31\u662f\u83b7\u53d6\u5230\u7684\u7bb1\u53f7\u3002  4625          b = smallbin_at(gm, i);\n4626          p = b- fd;\n4627          assert(chunksize(p) == small_index2size(i));\n4628          unlink_first_small_chunk(gm, b, p, i);  \u62ff\u5230\u7bb1\u53f7\u4e4b\u540e\uff0c\u8fd9\u5757\u7684\u903b\u8f91\u4e0e\u4e0a\u6587\u89c4\u5219\u4e00\u7684\u903b\u8f91\u4e00\u6837\u3002  4629          rsize = small_index2size(i) - nb;  \u53d6\u51fa\u5f53\u524d\u7bb1\u5b50\u7684\u5185\u5b58\u5757\u5927\u5c0f\uff0c\u51cf\u53bb\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u5269\u4f59\u7684\u5185\u5b58\u5757\uff0c\u8fd9\u4e2a\u5269\u4f59\u5185\u5b58\u5757\u4f1a\u653e\u5230dv chunk\u4e2d\u3002  4631          if (SIZE_T_SIZE != 4   rsize   MIN_CHUNK_SIZE)\n4632            set_inuse_and_pinuse(gm, p, small_index2size(i));\n4633          else {\n4634            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);\n4635            r = chunk_plus_offset(p, nb);\n4636            set_size_and_pinuse_of_free_chunk(r, rsize);\n4637            replace_dv(gm, r, rsize);\n4638          }  2269#define chunk_plus_offset(p, s)  ((mchunkptr)(((char*)(p)) + (s)))\n\n2284#define set_size_and_pinuse_of_free_chunk(p, s)\\\n2285  ((p)- head = (s|PINUSE_BIT), set_foot(p, s))\n\n3063#define set_size_and_pinuse_of_inuse_chunk(M, p, s)\\\n3064  ((p)- head = (s|PINUSE_BIT|CINUSE_BIT))\n\n3584#define insert_small_chunk(M, P, S) {\\\n3585  bindex_t I  = small_index(S);\\\n3586  mchunkptr B = smallbin_at(M, I);\\\n3587  mchunkptr F = B;\\\n3588  assert(S  = MIN_CHUNK_SIZE);\\\n3589  if (!smallmap_is_marked(M, I))\\\n        // \u5982\u679c\u662f\u5bf9\u5e94\u7bb1\u53f7\u539f\u72b6\u6001\u4e3a0,\u5219\u7f6e1.\n3590    mark_smallmap(M, I);\\\n3591  else if (RTCHECK(ok_address(M, B- fd)))\\\n3592    F = B- fd;\\\n3593  else {\\\n3594    CORRUPTION_ERROR_ACTION(M);\\\n3595  }\\\n3596  B- fd = P;\\\n3597  F- bk = P;\\\n3598  P- fd = F;\\\n3599  P- bk = B;\\\n3600}\n\n3648#define replace_dv(M, P, S) {\\\n3649  size_t DVS = M- dvsize;\\\n3650  assert(is_small(DVS));\\\n3651  if (DVS != 0) {\\\n3652    mchunkptr DV = M- dv;\\\n3653    insert_small_chunk(M, DV, DVS);\\\n3654  }\\\n3655  M- dvsize = S;\\\n3656  M- dv = P;\\\n3657}  \u5982\u679c\u5269\u4f59\u5927\u5c0frsize\u5c0f\u4e8eMIN_CHUNK_SIZE\uff0c\u54b1\u4eec\u76f4\u63a5\u5c06\u6240\u6709\u5185\u5b58\u5206\u914d\u7ed9\u7528\u6237\u3002\u5426\u5219\u5219\u5206\u5272\u5185\u5b58\uff0c\u5e76\u5c06\u5269\u4f59\u7684\u5185\u5b58\u5757\u8f6c\u6210mchunkptr\uff0c \u5373 r\u3002\u6211\u4eec\u7136\u540e\uff0cr\u76f8\u5f53\u4e8e\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u5757\uff0c\u6211\u4eec\u8bbe\u7f6e\u5176head\u5c5e\u6027\uff08size\uff0cPINUSE_BIT\uff0cCINUSE_BIT\uff09\u3002\nreplace_dv \u4e2d\uff0c\u6211\u4eec\u5148\u83b7\u5f97dv size\uff0c\u786e\u8ba4\u662f\u5c0f\u5185\u5b58\u5757\u3002\u7136\u540e\uff0c\u5c31\u662f\u628adv\u5185\u5b58\u5757\u63d2\u5165\u5230\u5bf9\u5e94\u7684\u7bb1\u53f7\u91cc\u3002\u5c31\u8ddf\u4e4b\u524d\uff0c\u6839\u636e\u5927\u5c0f\u83b7\u53d6\u5230\u5bf9\u5e94\u7bb1\u53f7\u7684\u94fe\u8868\u5934\u7684\u903b\u8f91\u4e00\u6837\uff0c\n\u53ea\u662f\u8fd9\u91cc\u662f\u5c06\u5185\u5b58\u5757\u63d2\u5165\u53cc\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002\nok\uff0c \u63d2\u5165\u5b8c\u6210\u540e\uff0c\u54b1\u4eec\u628a\u521a\u624d\u5206\u5272\u5269\u4e0b\u7684\u5185\u5b58\u5b58\u653e\u5230dv chunk\u4e2d\u3002  4639          mem = chunk2mem(p);\n4640          check_malloced_chunk(gm, mem, nb);\n4641          goto postaction;  \u8fd9\u91cc\u6211\u4eec\u8fd4\u56de\u5185\u5b58\u7ed9\u7528\u6237\uff0c\u89c4\u5219\u4e09\u7b2c\u4e00\u90e8\u5206\u5185\u5b58\u5206\u914d\u7ed3\u675f\u3002  4644        else if (gm- treemap != 0   (mem = tmalloc_small(gm, nb))\n!= 0) {\n4645          check_malloced_chunk(gm, mem, nb);\n4646          goto postaction;  \u8fd9\u91ccelse \u5bf9\u5e94\u201c4618        if (smallbits != 0) {\u201d \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u5c0f\u5185\u5b58\u7684 =\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u7684\u6240\u6709\u7bb1\u5b50\u4e0d\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5feb\u3002 \u7136\u540e\uff0c\u6211\u4eec\u68c0\u67e5treemap\u4e2d\u662f\u5426\u5b58\u5728\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u8c03\u7528tmalloc_small\u3002  2833#define treebin_at(M,i)     ( ((M)- treebins[i]))\n\n4527-static void* tmalloc_small(mstate m, size_t nb) {\n...\n4531  binmap_t leastbit = least_bit(m- treemap);\n4532  compute_bit2idx(leastbit, i);\n4533  v = t = *treebin_at(m, i);\n4534  rsize = chunksize(t) - nb;  least_bit  \u7684\u4f5c\u7528\u5c31\u662f\u4fdd\u7559\u6700\u53f3\u4fa7\u4e3a1\u7684bit\u4f4d\uff0c\u5176\u4f59\u4f4d\u4e3a0.\u6240\u4ee5\uff0c least_bit \u548c compute_bit2idx \u7684\u5171\u540c\u4f5c\u7528\u5c31\u662f\u5728treemap\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u53ef\u7528\u5185\u5b58\u7bb1\u5b50\u3002v\u548ct\u5373\u4e3a\u627e\u5230\u7684\u5185\u5b58\u5757\u6811\u7684\u6839\u8282\u70b9\u3002  4536  while ((t = leftmost_child(t)) != 0) {\n4537    size_t trem = chunksize(t) - nb;\n4538    if (trem   rsize) {\n4539      rsize = trem;\n4540      v = t;\n4541    }\n4542  }  \u8fd9\u6bb5\u4ee3\u7801\u662f\u5bfb\u627et\u7684\u6700\u5de6\u5b50\u6811\u3002\u5728\u524d\u6587\u6211\u4eec\u4ecb\u7ecd\u8fc7aka\u6811\uff0c\u6bcf\u4e00\u68f5\u6811\u7684\u505a\u5b50\u6811\u603b\u5c0f\u4e8e\u5176\u53f3\u5b50\u6811\u3002\u8be5\u4ee3\u7801\u5c31\u662f\u5728\u5bfb\u627e\u6ee1\u8db3\u7528\u4e8e\u8bf7\u6c42\u5927\u5c0fnb\u7684\u6700\u63a5\u8fd1\u7684\u6811\u7684\u8282\u70b9\u3002\uff08\u8003\u8651\u5230\u8bf7\u6c42\u7684\u5b57\u8282nb =256byte, \u800c\u5728tree\u4e2d\u6700\u5c0f\u7684chunksize   256byte \u6240\u4ee5,\u4e0d\u4f1a\u51fa\u73b0\u8d1f\u6570.\uff09  4545    mchunkptr r = chunk_plus_offset(v, nb);\n4546    assert(chunksize(v) == rsize + nb);\n4547    if (RTCHECK(ok_next(v, r))) {\n4548      unlink_large_chunk(m, v);\n4549      if (rsize   MIN_CHUNK_SIZE)\n4550        set_inuse_and_pinuse(m, v, (rsize + nb));\n4551      else {\n4552        set_size_and_pinuse_of_inuse_chunk(m, v, nb);\n4553        set_size_and_pinuse_of_free_chunk(r, rsize);\n4554        replace_dv(m, r, rsize);\n4555      }\n4556      return chunk2mem(v);\n4557    }\n4558  }  (NOT READY)\n\u8fd9\u6bb5\u4ee3\u7801\u8ddf\u4e0a\u6587\u5c0f\u5185\u5b58\u627e\u5230\u540e\u5904\u7406\u7684\u4ee3\u7801\u76f8\u4f3c\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\uff0cunlink_large_chunk\uff0c\u6240\u4ee5\u6211\u4eec\u770b\u4e0bunlink_large_chunk\u7684\u5b9e\u73b0.\u8fd9\u4e2a\u8fc7\u7a0b\u6709\u4e09\u4e2a\u6b65\u9aa4   \u5982\u679c\u7ed3\u70b9X\u662f\u94fe\u8868\u7684\u7ed3\u70b9,\u5219\u5c06\u5176\u91cd\u94fe\u8868\u4e2d\u5220\u9664.  \u5982\u679cX\u662f\u8be5\u5927\u5c0f\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9,\u4f46\u662f\u4e0d\u662f\u53f6\u5b50\u7ed3\u70b9,\u5b83\u5fc5\u987b\u7528\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u66ff\u6362.\u8fd9\u91cc\u67e5\u627e\u53f6\u5b50\u7ed3\u70b9\u7684\u65b9\u6cd5\u662f\u4ece\u6700\u53f3\u4fa7\u5f00\u59cb.  \u5982\u679cX\u662f\u94fe\u8868\u7684\u5934(\u62e5\u6709parent linker),\u5c31\u9700\u8981\u91cd\u65b0\u5c06\u5176x\u7684\u7236\u7ed3\u70b9\u4e0e\u66ff\u6362x\u7684\u7ed3\u70b9\u91cd\u65b0\u8fde\u63a5.   3730#define unlink_large_chunk(M, X) {\\\n3731  tchunkptr XP = X- parent;\\\n3732  tchunkptr R;\\  3733  if (X- bk != X) {\\\n3734    tchunkptr F = X- fd;\\\n3735    R = X- bk;\\\n3736    if (RTCHECK(ok_address(M, F)   F- bk == X   R- fd == X)) {\\\n3737      F- bk = R;\\\n3738      R- fd = F;\\\n3739    }\\\n3740    else {\\\n3741      CORRUPTION_ERROR_ACTION(M);\\\n3742    }\\\n3743  }\\  \u8fd9\u91cc\u662f\u7b2c\u4e00\u79cd\u60c5\u51b5,\u5373x\u662f\u5c5e\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9.  3744  else {\\\n3745    tchunkptr* RP;\\\n3746    if (((R = *(RP =  (X- child[1]))) != 0) ||\\\n3747        ((R = *(RP =  (X- child[0]))) != 0)) {\\\n3748      tchunkptr* CP;\\\n3749      while ((*(CP =  (R- child[1])) != 0) ||\\\n3750             (*(CP =  (R- child[0])) != 0)) {\\\n3751        R = *(RP = CP);\\\n3752      }\\\n3753      if (RTCHECK(ok_address(M, RP)))\\\n3754        *RP = 0;\\\n3755      else {\\\n3756        CORRUPTION_ERROR_ACTION(M);\\\n3757      }\\\n3758    }\\\n3759  }\\  \u8fd9\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5.  3760  if (XP != 0) {\\ \n3761    tbinptr* H = treebin_at(M, X- index);\\ \n3762    if (X == *H) {\\ \n3763      if ((*H = R) == 0) \\ \n3764        clear_treemap(M, X- index);\\ \n3765    }\\ \n3766    else if (RTCHECK(ok_address(M, XP))) {\\ \n3767      if (XP- child[0] == X) \\ \n3768        XP- child[0] = R;\\ \n3769      else \\ \n3770        XP- child[1] = R;\\ \n3771    }\\ \n3772    else\\ \n3773      CORRUPTION_ERROR_ACTION(M);\\ \n3774    if (R != 0) {\\ \n3775      if (RTCHECK(ok_address(M, R))) {\\ \n3776        tchunkptr C0, C1;\\ \n3777        R- parent = XP;\\ \n3778        if ((C0 = X- child[0]) != 0) {\\ \n3779          if (RTCHECK(ok_address(M, C0))) {\\ \n3780            R- child[0] = C0;\\ \n3781            C0- parent = R;\\ \n3782          }\\ \n3783          else\\ \n3784            CORRUPTION_ERROR_ACTION(M);\\ \n3785        }\\ \n3786        if ((C1 = X- child[1]) != 0) {\\ \n3787          if (RTCHECK(ok_address(M, C1))) {\\ \n3788            R- child[1] = C1;\\ \n3789            C1- parent = R;\\ \n3790          }\\ \n3791          else\\ \n3792            CORRUPTION_ERROR_ACTION(M);\\ \n3793        }\\ \n3794      }\\ \n3795      else\\ \n3796        CORRUPTION_ERROR_ACTION(M);\\ \n3797    }\\ \n3798  }\\   \u8fd9\u662f\u7b2c\u4e09\u79cd\u60c5\u51b5.  \u4ee5\u4e0a,\u72ec\u5c5e\u4e8e\u5c0f\u5185\u5b58\u7684\u5206\u914d\u89c4\u5219\u7ed3\u675f!  4650    else if (bytes  = MAX_REQUEST)\n4651      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in\nsys alloc) */  2224#define MAX_REQUEST         ((-((MCHUNK_SIZE + CHUNK_ALIGN_MASK)   ~CHUNK_ALIGN_MASK))   2)  \u8fd9\u91cc,\u5f53\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f = MAX_REQUEST\u65f6,\u6211\u4eec\u5f3a\u5236\u5206\u914d\u5931\u8d25. CHUNK_ALIGN_MASK  \u4e3a  2 * sizeof(void *) - 1 ,\u572832bit\u4e0a\u4e3a7.\u6240\u4ee5MAX_REQUEST\u662f\u4e00\u4e2a\u6781\u5927\u7684\u6570.\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b,\u6211\u4eec\u5c06nb\u8bbe\u7f6e\u4e3affffffff,\u5f3a\u5236\u5931\u8d25.", 
            "title": "\u5c0f\u5185\u5b58\u89c4\u5219\u4e09"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#_10", 
            "text": "\u7c7b\u4f3c\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e00,\u4ece\u6811\u4e2d\u627e\u5230\u6700\u9002\u5408\u7684\u5185\u5b58\u5757.  4652    else {\n4653      nb = pad_request(bytes);\n4654      if (gm- treemap != 0   (mem = tmalloc_large(gm, nb)) != 0) {\n4655        check_malloced_chunk(gm, mem, nb);\n4656        goto postaction;\n4657      }\n4658    }  \u8fd9\u91cc\u6211\u4eec\u7684\u91cd\u70b9\u662f tmalloc_large ,\u5b83\u4e0e tmalloc_small \u7684\u5dee\u522b\u662f: tmalloc_small \u662f\u7528\u4e8e\u5c0f\u5185\u5b58\u5206\u914d\u7684,\u53ea\u9700\u8981\u5728treemap\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u6709\u6548\u6811,\u53d6\u51fa\u6811\u4e2d\u6700\u5c0f\u5185\u5b58\u5373\u53ef;\u800c tmalloc_large \u662f\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219,\u5728\u6240\u670932\u68f5\u6811\u4e2d\u627e\u5230\u6700\u5339\u914d\u5927\u5c0f\u7684\u5185\u5b58\u5757.  4456static void* tmalloc_large(mstate m, size_t nb) {\n4457  tchunkptr v = 0;\n4458  size_t rsize = -nb; /* Unsigned negation */\n4459  tchunkptr t;\n4460  bindex_t idx;\n4461  compute_tree_index(nb, idx);\n4462  if ((t = *treebin_at(m, idx)) != 0) {  rsize \u4e3a\u6781\u5927\u6570.  compute_tree_index \u901a\u8fc7\u8bf7\u6c42\u7684\u5927\u5c0fnb,\u4ecetreebinmap\u4e2d\u8ba1\u7b97\u51fa\u7bb1\u53f7. treebin_at  \u5219\u662f\u53d6\u51faidx\u7bb1\u53f7\u4e2d\u5bf9\u5e94\u7684\u6811\u6839\u7ed3\u70b9.  2880#define compute_tree_index(S, I)\\\n2881{\\\n2882  size_t X = S   TREEBIN_SHIFT;\\\n2883  if (X == 0)\\\n2884    I = 0;\\\n2885  else if (X   0xFFFF)\\\n2886    I = NTREEBINS-1;\\\n2887  else {\\\n2888    unsigned int Y = (unsigned int)X;\\\n2889    unsigned int N = ((Y - 0x100)   16)   8;\\\n2890    unsigned int K = (((Y  = N) - 0x1000)   16)   4;\\\n2891    N += K;\\\n2892    N += K = (((Y  = K) - 0x4000)   16)   2;\\\n2893    K = 14 - N + ((Y  = K)   15);\\\n2894    I = (K   1) + ((S   (K + (TREEBIN_SHIFT-1))   1));\\\n2895  }\\\n2896}  \u4ee5\u4e0a\u8ba1\u7b97\u7684\u7ed3\u679c\u5982\u4e0b,idx\u4e3a\u5bf9\u5e94\u7bb1\u53f7,mem\u5bf9\u5e94\u8be5\u7bb1\u5b50\u4e2d\u6700\u5c0f\u7684\u5185\u5b58\u5927\u5c0f.  idx 0 mem 256 hex: 100\nidx 1 mem 384 hex: 180\nidx 2 mem 512 hex: 200\nidx 3 mem 768 hex: 300\nidx 4 mem 1024 hex: 400\nidx 5 mem 1536 hex: 600\nidx 6 mem 2048 hex: 800\nidx 7 mem 3072 hex: c00\nidx 8 mem 4096 hex: 1000\nidx 9 mem 6144 hex: 1800\nidx 10 mem 8192 hex: 2000\nidx 11 mem 12288 hex: 3000\nidx 12 mem 16384 hex: 4000\nidx 13 mem 24576 hex: 6000\nidx 14 mem 32768 hex: 8000\nidx 15 mem 49152 hex: c000\nidx 16 mem 65536 hex: 10000\nidx 17 mem 98304 hex: 18000\nidx 18 mem 131072 hex: 20000\nidx 19 mem 196608 hex: 30000\nidx 20 mem 262144 hex: 40000\nidx 21 mem 393216 hex: 60000\nidx 22 mem 524288 hex: 80000\nidx 23 mem 786432 hex: c0000\nidx 24 mem 1048576 hex: 100000\nidx 25 mem 1572864 hex: 180000\nidx 26 mem 2097152 hex: 200000\nidx 27 mem 3145728 hex: 300000\nidx 28 mem 4194304 hex: 400000\nidx 29 mem 6291456 hex: 600000\nidx 30 mem 8388608 hex: 800000\nidx 31 mem 12582912 hex: c00000  4463    /* Traverse tree for this bin looking for node with size == nb */\n4464    size_t sizebits = nb   leftshift_for_tree_index(idx);\n4465    tchunkptr rst = 0;  /* The deepest untaken right subtree */\n4466    for (;;) {\n4467      tchunkptr rt;\n4468      size_t trem = chunksize(t) - nb;\n4469      if (trem   rsize) {\n4470        v = t;\n4471        if ((rsize = trem) == 0)\n4472          break;\n4473      }\n4474      rt = t- child[1];\n4475      t = t- child[(sizebits   (SIZE_T_BITSIZE-SIZE_T_ONE))   1];\n4476      if (rt != 0   rt != t)\n4477        rst = rt;\n4478      if (t == 0) {\n4479        t = rst; /* set t to least subtree holding sizes   nb */\n4480        break;\n4481      }\n4482      sizebits  = 1;\n4483    }  \u8fd9\u662f\u6811\u7684\u641c\u7d22\u7b97\u6cd5,\u6211\u4eec\u6765\u8be6\u7ec6\u770b\u4e0b.\u9996\u5148sizebits\u53d8\u91cf,\u7c7b\u4f3cbinmap,\u6bcf\u4e00\u4f4d\u5bf9\u5e94\u6811\u7684\u5bf9\u5e94\u6df1\u5ea6\u7684\u5de6\u53f3\u5b50\u6811,\u53ef\u4ee5\u8ba4\u4e3a\u662f\u904d\u5386\u6811\u7684key bits.  2904#define leftshift_for_tree_index(i) \\\n2905   ((i == NTREEBINS-1)? 0 : \\\n2906    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i)   1) + TREEBIN_SHIFT - 2)))  1601#define SIZE_T_BITSIZE      (sizeof(size_t)   3)\n1606#define SIZE_T_ONE          ((size_t)1)\n2574#define TREEBIN_SHIFT     (8U)  leftshift_for_tree_index  \u5b8f\u5c06\u5173\u952e\u7801\u79fb\u52a8\u5230\u4e86\u6700\u5de6.\u8ba1\u7b97\u7684\u7ed3\u679c\u4e3a (25 - (i   1)). \u76f8\u5bf9\u4e8e\u7bb1\u5b500, \u5185\u5b58\u8303\u56f4\u4e3a128, \u5173\u952e\u7801\u957f\u5ea6\u4e3a 7,  leftshift_for_tree_index \u8ba1\u7b97\u7684\u7ed3\u679c\u4e3a25. \u6240\u4ee5,\u5c06 nb   25 , \u5c31\u662f\u5c06\u5173\u952e\u7801\u79fb\u52a8\u5230\u6700\u5de6\u7aef.  \u7136\u540e\u6211\u4eec\u770bfor\u5faa\u73af\u5185\u90e8\u7684,\u8fd9\u5c31\u662f\u5728\u904d\u5386\u6811\u4e86.  4467      tchunkptr rt;\n4468      size_t trem = chunksize(t) - nb;\n4469      if (trem   rsize) {\n4470        v = t;\n4471        if ((rsize = trem) == 0)\n4472          break;\n4473      }  \u4e0e \u5bfb\u627e\u6700\u5339\u914dnb\u6700\u8fd1\u7684\u70b9.\u5f53\u7136,\u5982\u679c\u627e\u5230\u5927\u5c0f\u76f8\u7b49\u7684,\u5c31\u76f4\u63a5\u8df3\u51fa, \u8fd9\u4e2a\u8df3\u51fa\u6761\u4ef6\u53ef\u80fd\u662f\u5173\u952e\u7801\u8fd8\u672a\u641c\u7d22\u5b8c.\u8fd9\u91cc\u5c31\u53ef\u4ee5\u770b\u51fa, dlmalloc\u6811\u4e0e bitwise trie\u6811\u7684\u5dee\u5f02,\u503c\u5728\u7279\u5f81\u7801\u7684\u8def\u5f84\u4e0a\u7684\u4efb\u610f\u70b9. \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u4e48\u505a\u5462?\u56e0\u4e3adlmalloc\u7684\u5206\u7bb1\u673a\u5236,\u5bfc\u81f4\u4e86,\u5982\u679c\u641c\u7d22\u5b8c\u5173\u952e\u7801,\u5219 \u8be5\u7ed3\u70b9\u5fc5\u5b9a\u53ea\u5b58\u5728\u53f6\u5b50\u7ed3\u70b9\u4e0a. \u5728\u8fd9\u4e2a\u524d\u63d0\u4e0b,\u4e3a\u4e86\u8282\u7701\u5185\u5b58\u7a7a\u95f4, \u5728\u63d2\u5165\u7ed3\u70b9\u65f6,\u53ea\u8981\u5728\u5173\u952e\u7801\u7684\u8def\u5f84\u4e0a\u4e0d\u5b58\u5728\u88ab\u5360\u7528\u7684\u70b9,\u5c31\u5c06\u8be5\u503c\u63d2\u5165. \u5728\u67e5\u770b\u4e86  insert_large_chunk  \u540e\u4f1a\u6709\u66f4\u6e05\u6670\u7684\u4f53\u4f1a.  4474      rt = t- child[1];\n4475      t = t- child[(sizebits   (SIZE_T_BITSIZE-SIZE_T_ONE))   1];\n4476      if (rt != 0   rt != t)\n4477        rst = rt;\n4478      if (t == 0) {\n4479        t = rst; /* set t to least subtree holding sizes   nb */\n4480        break;\n4481      }\n4482      sizebits  = 1;  (sizebits   (SIZE_T_BITSIZE-SIZE_T_ONE))  \u8fd9\u4e2a\u5c31\u662f\u6bcf\u4e00\u5c42\u6811\u7684\u7279\u5f81\u7801\u4e86.\u7ed3\u5408\u4e0a\u9762sizebits\u7684\u503c,\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u4e3a  nb   (6 + (i   1)) . \u5982\u679c,\u6211\u4eec\u518d\u7ed3\u5408 compute_tree_index  \u4e2d\u7684\u7ed3\u679c,\u5f97\u5230\u5982\u4e0b\u8868.idx\u4e3a\u7bb1\u53f7,mem\u4e3a\u8be5\u7bb1\u5b50\u4e2d\u7684\u6700\u5c0f\u5185\u5b58,hex\u4e3a\u8be5\u503c\u768416\u8fdb\u5236,mid\u4e3a\u533a\u5206\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u7279\u5f81\u7801,bitshift\u4e3a\u7279\u5f81\u7801\u7684\u65e0\u6548\u4f4d\u6570. \u6bd4\u5982,\u7bb1\u5b501\u4e2d,dix\u4e3a1,\u5176\u8868\u793a\u7684\u5185\u5b58\u8303\u56f4\u4e3a[384, 512),\u5219\u5176\u5de6\u5b50\u6811\u8868\u793a\u8303\u56f4\u4e3a[384,448),\u53f3\u5b50\u6811\u4e3a[448,512).448\u5373\u4e3a\u8be5\u6811\u7684\u7b2c\u4e00\u5c42\u7684\u7279\u5f81\u7801,\u4e5f\u5c31\u662f111000000.\u5982\u679cnb   448, \u5219\u7b2c7\u4f4d\u4e3a0,\u5426\u5219\u7b2c7\u4f4d\u4e3a1.\u6240\u4ee5,\u53ea\u8981\u901a\u8fc7\u5c06size   bitshift \u4e4b\u540e\u4e0e1 \u505a\u4f4d\u4e0e\u8fd0\u7b97,\u5c31\u53ef\u4ee5\u5224\u65ad\u51fa\u5728\u8be5\u6811\u5bf9\u5e94\u5c42\u8be5\u8fdb\u5165\u5176\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811.  idx 0 mem 256 hex: 100  mid: 101000000 bitshift: 6\nidx 1 mem 384 hex: 180 mid: 111000000 bitshift: 6\nidx 2 mem 512 hex: 200 mid: 1110000000 bitshift: 7\nidx 3 mem 768 hex: 300 mid: 1010000000 bitshift: 7\nidx 4 mem 1024 hex: 400 mid: 10100000000 bitshift: 8\nidx 5 mem 1536 hex: 600 mid: 11100000000 bitshift: 8\nidx 6 mem 2048 hex: 800 mid: 101000000000 bitshift: 9\nidx 7 mem 3072 hex: c00 mid: 111000000000 bitshift: 9\nidx 8 mem 4096 hex: 1000 mid: 1010000000000 bitshift: 10\nidx 9 mem 6144 hex: 1800 mid: 1110000000000 bitshift: 10\nidx 10 mem 8192 hex: 2000 mid: 10100000000000 bitshift: 11\nidx 11 mem 12288 hex: 3000 mid: 11100000000000 bitshift: 11\nidx 12 mem 16384 hex: 4000 mid: 101000000000000 bitshift: 12\nidx 13 mem 24576 hex: 6000 mid: 111000000000000 bitshift: 12\nidx 14 mem 32768 hex: 8000 mid: 1010000000000000 bitshift: 13\nidx 15 mem 49152 hex: c000 mid: 1110000000000000 bitshift: 13\nidx 16 mem 65536 hex: 10000 mid 10100000000000000 bitshift: 14\nidx 17 mem 98304 hex: 18000 mid 11100000000000000 bitshift: 14\nidx 18 mem 131072 hex: 20000 mid 101000000000000000 bitshift: 15\nidx 19 mem 196608 hex: 30000 mid 111000000000000000 bitshift: 15\nidx 20 mem 262144 hex: 40000 mid 1010000000000000000 bitshift: 16\nidx 21 mem 393216 hex: 60000 mid 1110000000000000000 bitshift: 16\nidx 22 mem 524288 hex: 80000 mid 10100000000000000000 bitshift: 17\nidx 23 mem 786432 hex: c0000 mid 11100000000000000000 bitshift: 17\nidx 24 mem 1048576 hex: 100000 mid 101000000000000000000 bitshift: 18\nidx 25 mem 1572864 hex: 180000 mid 111000000000000000000 bitshift: 18\nidx 26 mem 2097152 hex: 200000 mid 1010000000000000000000 bitshift: 19\nidx 27 mem 3145728 hex: 300000 mid 1110000000000000000000 bitshift: 19\nidx 28 mem 4194304 hex: 400000 mid 10100000000000000000000 bitshift: 20\nidx 29 mem 6291456 hex: 600000 mid 11100000000000000000000 bitshift: 20\nidx 30 mem 8388608 hex: 800000 mid 101000000000000000000000 bitshift: 21\nidx 31 mem 12582912 hex: c00000 bitshift: 31  // \u56fe, dlammloc \u6811\u7684\u56fe.  4485  if (t == 0   v == 0) { /* set t to root of next non-empty treebin */\n4486    binmap_t leftbits = left_bits(idx2bit(idx))   m- treemap;\n4487    if (leftbits != 0) {\n4488      bindex_t i;\n4489      binmap_t leastbit = least_bit(leftbits);\n4490      compute_bit2idx(leastbit, i);\n4491      t = *treebin_at(m, i);\n4492    }\n4493  }  \u8fd9\u91cc\u5bf9\u5e94\u4e0a\u6587\u7684 4462  if ((t = *treebin_at(m, idx)) != 0) {  , \u4e5f\u5c31\u662f\u8bf4\u5728\u5f53\u524d\u5927\u5c0f\u7684\u7bb1\u5b50\u5185\u4e0d\u5b58\u5728\u7a7a\u95f2\u7684\u5185\u5b58\u5757,\u6240\u4ee5\u6211\u4eec\u8981\u628at\u8bbe\u7f6e\u4e3a\u6700\u8fd1\u7684\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u7bb1\u53f7. left_bits  \u548c  least_bit  \u8ddf\u4e0a\u6587\u5c0f\u5185\u5b58\u5bfb\u627e\u6700\u8fd1\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u7bb1\u5b50\u7b97\u6cd5\u4e00\u6837.  4495  while (t != 0) { /* find smallest of tree or subtree */\n4496    size_t trem = chunksize(t) - nb;\n4497    if (trem   rsize) {\n4498      rsize = trem;\n4499      v = t;\n4500    }\n4501    t = leftmost_child(t);\n4502  }  \u8fd9\u91cc\u8ddf tmalloc_small \u5bfb\u627e\u6700\u5de6\u5b50\u6811(\u6700\u5c0f\u5185\u5b58)\u7684\u7b97\u6cd5\u4e00\u6837.\u8fd9\u6bb5\u4ee3\u7801\u5bf9\u4e0a\u9762\u7684\u4e24\u79cd\u60c5\u51b5\u90fd\u6709\u6548.\u5373,\u5982\u679c\u5728\u5bf9\u5e94\u7bb1\u53f7\u6709\u7a7a\u95f2\u5185\u5b58,\u5728\u57fa\u4e8e\u6811\u7684\u641c\u7d22\u7b97\u6cd5\u627e\u5230\u7684t\u5c31\u662f\u6700\u5339\u914dnb\u7684\u5927\u5c0f,\u6240\u4ee5\u8fd9\u91cc\u7684while\u5faa\u73af\u7ed3\u679ct\u5c31\u4e0d\u4f1a\u6539\u53d8;\u5982\u679c\u662f,\u5bfb\u627e\u6700\u8fd1\u6709\u7a7a\u95f2\u5757\u7684\u6811,\u90a3\u4e48\u8be5\u6811\u7684\u6700\u5c0f\u5185\u5b58\u90fd\u5927\u4e8e\u8bf7\u6c42\u5927\u5c0fnb,\u6240\u4ee5\u76f4\u63a5\u5bfb\u627e\u6700\u5de6\u5b50\u6811.   4505  if (v != 0   rsize   (size_t)(m- dvsize - nb)) {\n4506    if (RTCHECK(ok_address(m, v))) { /* split */\n4507      mchunkptr r = chunk_plus_offset(v, nb);\n4508      assert(chunksize(v) == rsize + nb);\n4509      if (RTCHECK(ok_next(v, r))) {\n4510        unlink_large_chunk(m, v);\n4511        if (rsize   MIN_CHUNK_SIZE)\n4512          set_inuse_and_pinuse(m, v, (rsize + nb));\n4513        else {\n4514          set_size_and_pinuse_of_inuse_chunk(m, v, nb);\n4515          set_size_and_pinuse_of_free_chunk(r, rsize);\n4516          insert_chunk(m, r, rsize);\n4517        }\n4518        return chunk2mem(v);\n4519      }\n4520    }\n4521    CORRUPTION_ERROR_ACTION(m);\n4522  }\n4523  return 0;  \u63a5\u4e0b\u6765,\u53ea\u8981\u6c42\u9876\u627e\u5230\u7684\u5185\u5b58\u5757\u6bd4dv chunk\u66f4\u5408\u9002,\u5219\u6267\u884c\u4e00\u822c\u7684\u5185\u5b58\u5757\u6536\u5c3e\u5904\u7406,\u7136\u540e\u8fd4\u56de.\u5982\u679cdv chunk\u66f4\u5408\u9002,\u6211\u4eec\u8fd4\u56de0, \u53c2\u8003\u4ee3\u7801 4654      if (gm- treemap != 0   (mem = tmalloc_large(gm, nb)) != 0) { , \u5c31\u4f1a\u7ee7\u7eed\u6309\u7167\u5185\u5b58\u5206\u914d\u89c4\u5219\u5f80\u4e0b\u8d70.", 
            "title": "\u5927\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e00"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#_11", 
            "text": "\u5982\u679cnb\u7684\u5927\u5c0f   dv chunk\u7684\u5927\u5c0f,\u5219\u4f7f\u7528dv chunk\u5206\u914d\u5185\u5b58.\u5c3d\u91cf\u4fdd\u8bc1\u8fde\u7eed\u7684\u5185\u5b58\u8bf7\u6c42\u5728\u865a\u62df\u5185\u5b58\u4e0a\u8fde\u7eed.  4660    if (nb  = gm- dvsize) {\n4661      size_t rsize = gm- dvsize - nb;\n4662      mchunkptr p = gm- dv;\n4663      if (rsize  = MIN_CHUNK_SIZE) { /* split dv */\n4664        mchunkptr r = gm- dv = chunk_plus_offset(p, nb);\n4665        gm- dvsize = rsize;\n4666        set_size_and_pinuse_of_free_chunk(r, rsize);\n4667        set_size_and_pinuse_of_inuse_chunk(gm, p, nb);\n4668      }\n4669      else { /* exhaust dv */\n4670        size_t dvs = gm- dvsize;\n4671        gm- dvsize = 0;\n4672        gm- dv = 0;\n4673        set_inuse_and_pinuse(gm, p, dvs);\n4674      }\n4675      mem = chunk2mem(p);\n4676      check_malloced_chunk(gm, mem, nb);\n4677      goto postaction;\n4678    }  \u5207\u5206dv chunk, \u7136\u540e\u5c31\u662f\u57fa\u672c\u7684\u57df\u8bbe\u7f6e.\u8fd4\u56de\u7ed9\u7528\u6237.", 
            "title": "\u5927\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e8c"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#_12", 
            "text": "4680    else if (nb   gm- topsize) { /* Split top */\n4681      size_t rsize = gm- topsize -= nb;\n4682      mchunkptr p = gm- top;\n4683      mchunkptr r = gm- top = chunk_plus_offset(p, nb);\n4684      r- head = rsize | PINUSE_BIT;\n4685      set_size_and_pinuse_of_inuse_chunk(gm, p, nb);\n4686      mem = chunk2mem(p);\n4687      check_top_chunk(gm, gm- top);\n4688      check_malloced_chunk(gm, mem, nb);\n4689      goto postaction;\n4690    }  \u8ddfdv chunk\u7c7b\u4f3c.\u96be\u70b9\u5176\u5b9e\u662f\u627e\u5230\u7b26\u5408\u7684chunk.\u50cfdv chunk \u548ctop chunk\u90fd\u662f\u627e\u5230\u4e86\u7684,\u5c31\u76f4\u63a5\u5206\u914d.", 
            "title": "\u5927\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u56db"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#_13", 
            "text": "\u8c03\u7528\u7cfb\u7edf\u51fd\u6570\u8fdb\u884c\u5185\u5b58\u5206\u914d.\u8fd9\u91cc\u4f7f\u7528\u5230\u4e86segment.  4692    mem = sys_alloc(gm, nb);\n4693\n4694  postaction:\n4695    POSTACTION(gm);\n4696    return mem;\n4697  }\n4698\n4699  return 0;  \u5148\u8bf4\u4e0b sys_alloc \u7684\u89c4\u5219:   \u4f18\u5148\u4f7f\u7528MORECORE(sbrk())\u5206\u914d\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4  \u4f7f\u7528mmap\u5206\u914d\u4e0d\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4  \u4f7f\u7528sbrk()\u5206\u914d\u4e0d\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4.   sbrk\u5b9e\u9645\u4e0a\u662f\u5bf9\u8fdb\u7a0b\u7684\u6570\u636e\u6bb5\u8fdb\u884c\u6269\u5c55,\u8fd4\u56de\u589e\u957f\u7684\u533a\u57df\u7684\u57fa\u5730\u5740.  4059  /* Directly map large chunks, but only if already initialized */\n4060  if (use_mmap(m)   nb  = mparams.mmap_threshold   m- topsize != 0) {\n4061    void* mem = mmap_alloc(m, nb);\n4062    if (mem != 0)\n4063      return mem;\n4064  }  \u5982\u679c\u4f7f\u7528mmap\u7684\u6807\u5fd7\u88ab\u7f6e\u4e0a\u5e76\u4e14nb  = mmap\u7684\u9600\u503c,\u5219\u76f4\u63a5\u4f7f\u7528mmap.  4066  asize = granularity_align(nb + SYS_ALLOC_PADDING);  \u505a\u5bf9\u9f50\u5904\u7406.  4105  if (MORECORE_CONTIGUOUS   !use_noncontiguous(m)) {\n4106    char* br = CMFAIL;\n4107    size_t ssize = asize; /* sbrk call size */\n4108    msegmentptr ss = (m- top == 0)? 0 : segment_holding(m, (char*)m- top);\n4109    ACQUIRE_MALLOC_GLOBAL_LOCK();  \u6211\u4eec\u770b\u4e0b segment_holding \u51fd\u6570.  2698static msegmentptr segment_holding(mstate m, char* addr) {\n2699  msegmentptr sp =  m- seg;\n2700  for (;;) {\n2701    if (addr  = sp- base   addr   sp- base + sp- size)\n2702      return sp;\n2703    if ((sp = sp- next) == 0)\n2704      return 0;\n2705  }\n2706}  segment\u5b9e\u9645\u4e0a\u662f\u7531\u5355\u5411\u94fe\u8868\u7ba1\u7406\u7684,\u4f46\u7531\u4e8e\u4f7f\u7528\u5230segment\u7684\u60c5\u51b5\u975e\u5e38\u5c11,\u6240\u4ee5,\u4e5f\u6ca1\u6709\u4ec0\u4e48\u6548\u7387\u95ee\u9898.\n\u8fd9\u91cc\u7684\u529f\u80fd\u5c31\u662f\u5bfb\u627eaddr\u6240\u5c5e\u7684segment\u5757\u7684\u5730\u5740,\u5e76\u8fd4\u56de.\u7ed3\u5408\u4e0a\u9762\u7684,ss\u5b9e\u9645\u4e0a\u5c31\u662ftop chunk\u6240\u5728\u7684segment\u7684\u57fa\u5730\u5740.  4111    if (ss == 0) {  /* First time through or recovery */\n4112      char* base = (char*)CALL_MORECORE(0);\n4113      if (base != CMFAIL) {\n4114        size_t fp;\n4115        /* Adjust to end on a page boundary */\n4116        if (!is_page_aligned(base))\n4117          ssize += (page_align((size_t)base) - (size_t)base);\n4118        fp = m- footprint + ssize; /* recheck limits */\n4119        if (ssize   nb   ssize   HALF_MAX_SIZE_T  \n4120            (m- footprint_limit == 0 ||\n4121             (fp   m- footprint   fp  = m- footprint_limit))  \n4122            (br = (char*)(CALL_MORECORE(ssize))) == base) {\n4123          tbase = base;\n4124          tsize = ssize;\n4125        }\n4126      }\n4127    }  \u8fd9\u91cc\u5c31\u662f\u5904\u7406top chunk\u4e3aNULL \u65f6\u7684\u60c5\u51b5, \u4e5f\u5c31\u662f\u7b2c\u4e00\u6b21\u8bf7\u6c42\u5185\u5b58\u5206\u914d,\u56e0\u4e3atop\u4e3a0. CALL_MORECORE \u5b8f\u5c55\u5f00\u6765\u5c31\u662f sbrk .\u8fd9\u91cc\u662f\u83b7\u53d6\u5f53\u524d\u7684program break\u7684\u5730\u5740.\nssize\u5c31\u662f\u8bf7\u6c42\u589e\u52a0\u7684\u5927\u5c0f,\u7136\u540e\u518d\u6b21\u8c03\u7528sbrk.  4128    else {\n4129      /* Subtract out existing available top space from MORECORE request. */\n4130      ssize = granularity_align(nb - m- topsize + SYS_ALLOC_PADDING);\n4131      /* Use mem here only if it did continuously extend old space */\n4132      if (ssize   HALF_MAX_SIZE_T  \n4133          (br = (char*)(CALL_MORECORE(ssize))) == ss- base+ss- size) {\n4134        tbase = br;\n4135        tsize = ssize;\n4136      }\n4137    }  \u5bf9\u5e94top chunk \u5b58\u5728\u7684\u60c5\u51b5.\u76f4\u63a5\u6269\u5c55top chunk\u6240\u5728\u7684segment.\n\u4e0a\u9762\u4e24\u79cd\u60c5\u51b5\u7684tbase\u90fd\u6307\u5411\u589e\u957f\u7684\u5757\u7684\u57fa\u5730\u5740,tsize\u6307\u5411\u589e\u957f\u7684\u5927\u5c0f.  4139    if (tbase == CMFAIL) {    /* Cope with partial failure */\n4140      if (br != CMFAIL) {    /* Try to use/extend the space we did get */\n4141        if (ssize   HALF_MAX_SIZE_T  \n4142            ssize   nb + SYS_ALLOC_PADDING) {\n4143          size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - ssize);\n4144          if (esize   HALF_MAX_SIZE_T) {\n4145            char* end = (char*)CALL_MORECORE(esize);\n4146            if (end != CMFAIL)\n4147              ssize += esize;\n4148            else {            /* Can t use; try to release */\n4149              (void) CALL_MORECORE(-ssize);\n4150              br = CMFAIL;\n4151            }\n4152          }\n4153        }\n4154      }\n4155      if (br != CMFAIL) {    /* Use the space we did get */\n4156        tbase = br;\n4157        tsize = ssize;\n4158      }\n4159      else\n4160        disable_contiguous(m); /* Don t try contiguous path in the future */\n4161    }\n4162\n4163    RELEASE_MALLOC_GLOBAL_LOCK();  \u5982\u679c\u90e8\u5206\u5931\u8d25\u4e86,\u5373\u4e0a\u6587\u7684tbase\u8d4b\u503c\u65f6,if\u6761\u4ef6\u90e8\u5206\u4e0d\u6ee1,\u4e5f\u5c31\u662f,\u8bf7\u6c42\u7684ssize   HALF_MAX_SIZE_T(ffffffff/2)\u6216\u8005\u5176\u4ed6\u7684\u60c5\u51b5.\u5219\u6211\u4eec\u7ee7\u7eed\u4f7f\u7528br\u7684\u5730\u5740\u8fdb\u884c\u6269\u5c55.\u4e0d\u8fc7\u4e00\u822c\u60c5\u51b5\u4e0btbase == CMFAIL \u65f6, br == CFAIL.\u4ece\u8fd9\u90e8\u5206\u7684\u4ee3\u7801\u903b\u8f91\u770b,\u5e94\u8be5\u662f\u975e\u8fde\u7eed\u7684sbrk\u7684\u903b\u8f91.  4166  if (HAVE_MMAP   tbase == CMFAIL) {  /* Try MMAP */\n4167    char* mp = (char*)(CALL_MMAP(asize));\n4168    if (mp != CMFAIL) {\n4169      tbase = mp;\n4170      tsize = asize;\n4171      mmap_flag = USE_MMAP_BIT;\n4172    }\n4173  }  \u5c1d\u8bd5 mmap.  4175  if (HAVE_MORECORE   tbase == CMFAIL) { /* Try noncontiguous MORECORE */\n4176    if (asize   HALF_MAX_SIZE_T) {\n4177      char* br = CMFAIL;\n4178      char* end = CMFAIL;\n4179      ACQUIRE_MALLOC_GLOBAL_LOCK();\n4180      br = (char*)(CALL_MORECORE(asize));\n4181      end = (char*)(CALL_MORECORE(0));\n4182      RELEASE_MALLOC_GLOBAL_LOCK();\n4183      if (br != CMFAIL   end != CMFAIL   br   end) {\n4184        size_t ssize = end - br;\n4185        if (ssize   nb + TOP_FOOT_SIZE) {\n4186          tbase = br;\n4187          tsize = ssize;\n4188        }\n4189      }\n4190    }\n4191  }  \u5c1d\u8bd5\u975e\u8fde\u7eed\u7684sbrk.  4198    if (!is_initialized(m)) { /* first-time initialization */\n4199      if (m- least_addr == 0 || tbase   m- least_addr)\n4200        m- least_addr = tbase;\n4201      m- seg.base = tbase;\n4202      m- seg.size = tsize;\n4203      m- seg.sflags = mmap_flag;\n4204      m- magic = mparams.magic;\n4205      m- release_checks = MAX_RELEASE_CHECK_RATE;\n          // \u521d\u59cb\u5316 \u6240\u6709\u7684\u7bb1\u5b50. 32bit\u5168\u7f6e0\n4206      init_bins(m);\n4207#if !ONLY_MSPACES\n4208      if (is_global(m))\n            // \u521d\u59cb\u5316top chunk.\n4209        init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);\n4210      else\n4211#endif\n4212      {\n4213        /* Offset top by embedded malloc_state */\n4214        mchunkptr mn = next_chunk(mem2chunk(m));\n            // \u521d\u59cb\u5316top chunk.\n4215        init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) -TOP_FOOT_SIZE);\n4216      }\n4217    }  \u5728\u8fd9\u91cc,\u624d\u662f\u771f\u6b63\u5730\u5bf9\u5185\u5b58\u7ba1\u7406\u7684\u4e00\u4e9b\u7ed3\u6784\u4f53\u8fdb\u884c\u521d\u59cb\u5316.  4219    else {\n4220      /* Try to merge with an existing segment */\n4221      msegmentptr sp =  m- seg;\n4222      /* Only consider most recent segment if traversal suppressed */\n4223      while (sp != 0   tbase != sp- base + sp- size)\n4224        sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp- next;\n4225      if (sp != 0  \n4226          !is_extern_segment(sp)  \n4227          (sp- sflags   USE_MMAP_BIT) == mmap_flag  \n4228          segment_holds(sp, m- top)) { /* append */\n4229        sp- size += tsize;\n4230        init_top(m, m- top, m- topsize + tsize);\n4231      }\n4232      else {\n4233        if (tbase   m- least_addr)\n4234          m- least_addr = tbase;\n4235        sp =  m- seg;\n4236        while (sp != 0   sp- base != tbase + tsize)\n4237          sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp- next;\n4238        if (sp != 0  \n4239            !is_extern_segment(sp)  \n4240            (sp- sflags   USE_MMAP_BIT) == mmap_flag) {\n4241          char* oldbase = sp- base;\n4242          sp- base = tbase;\n4243          sp- size += tsize;\n4244          return prepend_alloc(m, tbase, oldbase, nb);\n4245        }\n4246        else\n4247          add_segment(m, tbase, tsize, mmap_flag);\n4248      }\n4249    }  \u903b\u8f91\u5f88\u7b80\u5355,\u5c31\u662f\u5982\u679c\u65b0\u5206\u914d\u7684segemnt\u7684\u57fa\u5730\u5740\u662f\u67d0\u4e2asegment\u7684\u5c3e\u5730\u5740,\u5219\u8fd9\u4e24\u4e2a\u5408\u5e76,\u5426\u5219,\u76f4\u63a5\u5c06\u8be5\u65b0\u7684segment\u52a0\u5165\u5230\u5355\u5411\u94fe\u8868\u4e2d.  4251    if (nb   m- topsize) { /* Allocate from new or extended top space */\n4252      size_t rsize = m- topsize -= nb;\n4253      mchunkptr p = m- top;\n4254      mchunkptr r = m- top = chunk_plus_offset(p, nb);\n4255      r- head = rsize | PINUSE_BIT;\n4256      set_size_and_pinuse_of_inuse_chunk(m, p, nb);\n4257      check_top_chunk(m, m- top);\n4258      check_malloced_chunk(m, chunk2mem(p), nb);\n4259      return chunk2mem(p);\n4260    }\n4261  }  \u5982\u679c\u662f\u7b2c\u4e00\u6b21\u5185\u5b58\u5206\u914d,\u5219\u903b\u8f91\u5c06\u4f1a\u5230\u8fd9\u91cc,\u5728top chunk\u521d\u59cb\u5316\u540e,\u5c1d\u8bd5\u4ecetop chunk\u5206\u914d\u5185\u5b58.", 
            "title": "\u5927\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e94"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#dlfree", 
            "text": "dlfree\u5c31\u6ca1\u6709dlmalloc\u90a3\u4e48\u591a\u89c4\u5219\u4e86,\u53ea\u8981\u4fdd\u8bc1\u8fb9\u754c\u6807\u8bb0\u6cd5,\u4fdd\u8bc1\u91ca\u653e\u7684\u5185\u5b58\u5757\u5b58\u653e\u5230\u5bf9\u5e94\u7684\u7bb1\u5b50\u4e2d\u5373\u53ef.  4704void dlfree(void* mem) { \n4711  if (mem != 0) {  \u68c0\u67e5mem\u5408\u6cd5\u6027.  4711  if (mem != 0) {\n        //\u5c06mem\u8f6c\u6362\u6210chunk p\n4712    mchunkptr p  = mem2chunk(mem);\n4713#if FOOTERS\n4714    mstate fm = get_mstate_for(p);\n4715    if (!ok_magic(fm)) {\n4716      USAGE_ERROR_ACTION(fm, p);\n4717      return;\n4718    }\n4719#else /* FOOTERS */\n4720#define fm gm\n4721#endif /* FOOTERS */ \n4722    if (!PREACTION(fm)) {\n          // \u68c0\u67e5\u6807\u5fd7\u4f4d\u662f\u5426\u4e3ainuse.\n4723      check_inuse_chunk(fm, p);\n4724      if (RTCHECK(ok_address(fm, p)   ok_inuse(p))) {\n            // \u83b7\u53d6chunksize\n4725        size_t psize = chunksize(p);\n            // \u83b7\u53d6\u5728\u5185\u5b58\u4e0a\u76f8\u8fde\u7684\u4e0b\u4e00\u4e2a\u5185\u5b58chunk.\n4726        mchunkptr next = chunk_plus_offset(p, psize);   \u5c06\u7528\u6237\u6307\u9488\u8f6c\u6362\u4e3achunk\u7ed3\u6784\u4f53\u5e76\u505a\u5e38\u89c4\u68c0\u67e5.              // \u4e0a\u4e00\u4e2a\u5185\u5b58\u5757\u672a\u88ab\u4f7f\u7528\n4727        if (!pinuse(p)) {\n4728          size_t prevsize = p- prev_foot;\n4729          if (is_mmapped(p)) {\n                // \u662f\u901a\u8fc7\u7cfb\u7edfmmap\u5206\u914d\u7684\n4730            psize += prevsize + MMAP_FOOT_PAD;\n4731            if (CALL_MUNMAP((char*)p - prevsize, psize) == 0)\n4732              fm- footprint -= psize;\n4733            goto postaction;\n4734          }\n4735          else {\n               // \u4e0e\u4e0a\u4e00\u4e2a\u5185\u5b58\u5757\u5408\u5e76\n4736            mchunkptr prev = chunk_minus_offset(p, prevsize);\n4737            psize += prevsize;\n4738            p = prev;\n4739            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */\n4740              if (p != fm- dv) {\n                    // p \u4e0d\u4e3a dv chunk, \u76f4\u63a5\u79fb\u9664.\n4741                unlink_chunk(fm, p, prevsize);\n4742              }\n4743              else if ((next- head   INUSE_BITS) == INUSE_BITS) {\n                    // \u5426\u5219,\u5408\u5e76\u5230dv chunk\u4e2d.\n4744                fm- dvsize = psize;\n4745                set_free_with_pinuse(p, psize, next);\n4746                goto postaction;\n4747              }\n4748            }\n4749            else\n4750              goto erroraction;\n4751          }\n4752        }   \u4e0e\u524d\u4e00\u5757\u5185\u5b58\u5408\u5e76\u7684\u903b\u8f91.  4754        if (RTCHECK(ok_next(p, next)   ok_pinuse(next))) {  ok_pinuse(next)\u5b9e\u9645\u4e0a\u5c31\u662fcinuse(p). \u53ea\u662f\u8fd9\u91cc\u662f\u68c0\u67e5next\u7684\u6807\u5fd7\u4f4d\u662f\u5426\u6b63\u786e.                // next \u672a\u88ab\u4f7f\u7528, \u5219\u9700\u8981\u5408\u5e76.\n4755          if (!cinuse(next)) {  /* consolidate forward */\n4756            if (next == fm- top) {\n                  // \u5982\u679cnext\u4e3atop, \u5219top\u589e\u957f.\u57fa\u5730\u5740\u6539\u4e3ap.\n4757              size_t tsize = fm- topsize += psize;\n4758              fm- top = p;\n4759              p- head = tsize | PINUSE_BIT;\n4760              if (p == fm- dv) {\n                    // \u5982\u679cp\u4e3adv, \u5219\u6e05\u7a7adv.\n4761                fm- dv = 0;\n4762                fm- dvsize = 0;\n4763              }\n                  // \u68c0\u67e5top chunk\u7684\u5927\u5c0f\u662f\u5426\u9700\u8981\u8c03\u6574,\u9ed8\u8ba4\u6700\u5927\u4e3a 2 * 1024 * 1024\n4764              if (should_trim(fm, tsize))\n4765                sys_trim(fm, 0);\n4766              goto postaction;\n4767            }\n4768            else if (next == fm- dv) {\n                  // \u5982\u679cnext\u4e3adiv, \u5219dv\u589e\u957f, \u57fa\u5730\u5740\u6539\u4e3ap\n4769              size_t dsize = fm- dvsize += psize;\n4770              fm- dv = p;\n4771              set_size_and_pinuse_of_free_chunk(p, dsize);\n4772              goto postaction;\n4773            }\n4774            else {\n                  // next\u4e3a\u666e\u901a\u7684\u5185\u5b58\u5757,\u5c06next\u5408\u5e76\u5230p,\u5e76\u5c06next\u51b2\u94fe\u8868\u6216\u8005\u6811\u4e2d\u5220\u9664.\n4775              size_t nsize = chunksize(next);\n4776              psize += nsize;\n4777              unlink_chunk(fm, next, nsize);\n4778              set_size_and_pinuse_of_free_chunk(p, psize);\n4779              if (p == fm- dv) {\n4780                fm- dvsize = psize;\n4781                goto postaction;\n4782              }\n4783            }\n              // \u4e0e\u540e\u4e00\u5757\u5185\u5b58\u5408\u5e76\u7684\u903b\u8f91.\n4785          else\n4786            set_free_with_pinuse(p, psize, next);  \u5f53\u7136,\u5982\u679c\u4e0d\u9700\u8981\u5408\u5e76,\u5219\u76f4\u63a5\u5220\u9664.  \u4ee5\u4e0a\u90fd\u53ea\u662f\u5408\u5e76\u5757,\u5e76\u5220\u9664\u88ab\u5408\u5e76\u7684\u7ed3\u70b9,\u63a5\u4e0b\u6765\u5c31\u662f\u5c06\u5408\u5e76\u540e\u7684\u5757\u63d2\u5165\u5230\u6b63\u786e\u7684\u7bb1\u5b50\u7684\u7ed3\u6784\u4e2d.  4788          if (is_small(psize)) {\n                // \u5408\u5e76\u5904\u7406\u540e\u7684\u5185\u5b58\u4e3a\u5c0f\u5185\u5b58\n                // \u5df2\u5728\u4e0a\u6587\u4ecb\u7ecd\u8fc7\u8be5\u51fd\u6570.\n4789            insert_small_chunk(fm, p, psize);\n4790            check_free_chunk(fm, p);\n4791          }\n4792          else {\n                // \u5408\u5e76\u540e\u4e3a\u5927\u5185\u5b58\n4793            tchunkptr tp = (tchunkptr)p;\n4794            insert_large_chunk(fm, tp, psize);\n4795            check_free_chunk(fm, p);\n4796            if (--fm- release_checks == 0)\n4797              release_unused_segments(fm);\n4798          }\n4799          goto postaction;\n4800        }\n4801      }\n4802    erroraction:\n4803      USAGE_ERROR_ACTION(fm, p);\n4804    postaction:\n4805      POSTACTION(fm);\n4806    }\n4807  }    insert_small_chunk  \u5df2\u7ecf\u5728\u4e0a\u6587\u4ecb\u7ecd\u8fc7.\u5b9e\u9645\u884c\u4e3a\u5c31\u662f\u6839\u636e\u5185\u5b58\u5927\u5c0f\u627e\u7bb1\u53f7,\u5982\u679c\u8be5\u7bb1\u5b50\u672c\u8eab\u4e3a\u7a7a,\u5219\u4fee\u6539binmap\u72b6\u6001\u5e76\u63d2\u5165\u8be5chunk.\u5982\u679c\u4e0d\u4e3a\u7a7a,\u5219\u6267\u884c\u53cc\u5411\u94fe\u8868\u63d2\u5165.\n\u800c insert_large_chunk \u662f\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u7684 unlink_large_chunk \u7684\u9006\u64cd\u4f5c.\u540c\u6837\u662f\u5b9a\u4f4d\u7bb1\u53f7,\u904d\u5386\u6811.\u7136\u540e\u627e\u5230\u5bf9\u5e94\u8be5\u5927\u5c0f\u7684\u7ed3\u70b9.\u5b83\u5b58\u5728\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5:   \u8be5\u7bb1\u5b50\u4e2d\u4e0d\u5b58\u5728\u6811. \u5219\u521b\u5efa\u5e76\u5c06\u8be5\u7ed3\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9.  \u5df2\u5b58\u5728\u6811,\u4f46\u4e0d\u5b58\u5728\u5bf9\u5e94\u5927\u5c0f\u7684\u7ed3\u70b9, \u5219\u63d2\u5165\u7ed3\u70b9.  \u5df2\u5b58\u5728\u6811,\u4e14\u5b58\u5728\u5bf9\u5e94\u5927\u5c0f\u7684\u7ed3\u70b9,\u5219\u63d2\u5165\u53cc\u5411\u94fe\u8868   3662#define insert_large_chunk(M, X, S) {\\ \n3663  tbinptr* H;\\ \n3664  bindex_t I;\\ \n3665  compute_tree_index(S, I);\\ \n3666  H = treebin_at(M, I);\\ \n3667  X- index = I;\\ \n3668  X- child[0] = X- child[1] = 0;\\ \n3669  if (!treemap_is_marked(M, I)) {\\ \n3670    mark_treemap(M, I);\\ \n3671    *H = X;\\ \n3672    X- parent = (tchunkptr)H;\\ \n3673    X- fd = X- bk = X;\\ \n3674  }\\\n\n//\u4e0a\u9762\u4e3a\u60c5\u51b5\u4e00. \u5c06treemap \u5bf9\u5e94I\u7684\u4f4d\u7f6e\u7f6e1,\u5e76\u5c06\u8be5\u7ed3\u70b9\u4f5c\u4e3a\u6811\u7684\u6839\u7ed3\u70b9.\n\n3675  else {\\ \n3676    tchunkptr T = *H;\\ \n3677    size_t K = S   leftshift_for_tree_index(I);\\ \n3678    for (;;) {\\ \n3679      if (chunksize(T) != S) {\\ \n3680        tchunkptr* C =  (T- child[(K   (SIZE_T_BITSIZE-SIZE_T_ONE))   1]);\\ \n3681        K  = 1;\\ \n3682        if (*C != 0)\\ \n3683          T = *C;\\ \n3684        else if (RTCHECK(ok_address(M, C))) {\\ \n3685          *C = X;\\ \n3686          X- parent = T;\\ \n3687          X- fd = X- bk = X;\\ \n3688          break;\\ \n3689        }\\ \n3690        else {\\ \n3691          CORRUPTION_ERROR_ACTION(M);\\ \n3692          break;\\ \n3693        }\\ \n3694      }\\\n// \u4e0a\u9762\u4e3a\u60c5\u51b5\u4e8c, \u5728\u5173\u952e\u7801\u8def\u5f84\u4e0a\u5b58\u5728\u7a7a\u7ed3\u70b9,\u5219\u63d2\u5165\u8be5\u7ed3\u70b9.\n3695      else {\\ \n3696        tchunkptr F = T- fd;\\ \n3697        if (RTCHECK(ok_address(M, T)   ok_address(M, F))) {\\\n3698          T- fd = F- bk = X;\\ \n3699          X- fd = F;\\ \n3700          X- bk = T;\\ \n3701          X- parent = 0;\\ \n3702          break;\\ \n3703        }\\ \n3704        else {\\ \n3705          CORRUPTION_ERROR_ACTION(M);\\ \n3706          break;\\ \n3707        }\\ \n3708      }\\ \n3709    }\\ \n3710  }\\\n\n// \u4e0a\u9762\u4e3a\u60c5\u51b5\u4e09,\u8be5\u5927\u5c0f\u7684\u7ed3\u70b9\u5b58\u5728,\u5219\u63d2\u5165\u53cc\u5411\u94fe\u8868.", 
            "title": "dlfree\u4ee3\u7801\u5206\u6790"
        }, 
        {
            "location": "/dlmalloc\u6d45\u6790/#_14", 
            "text": "\u6570\u636e\u7ed3\u6784\u603b\u7ed3   dlmalloc\u4e2d\u6309\u7167\u5185\u5b58\u7684\u7c92\u5ea6\u5927\u5c0f,\u5206\u4e3achunk\u548csegment\u4e24\u79cd\u6570\u636e\u7ed3\u6784.  dlmalloc\u4e2d\u6309\u7167\u5185\u5b58\u7684\u5927\u5c0f,\u67093\u79cd\u5185\u5b58\u7ba1\u7406\u65b9\u5f0f,\u518d\u52a0\u4e0a\u8fb9\u754c\u6807\u8bb0\u6cd5,\u603b\u5171\u56db\u79cd\u7ba1\u7406\u65b9\u5f0f:  \u8fb9\u754c\u6807\u8bb0\u6cd5\uff0c\u5e76\u4e14\u4efb\u610f\u76f8\u8fde\u4e24\u5757\u5185\u5b58\u4e0d\u540c\u4e3a\u7a7a\u95f2\u5185\u5b58.  \u53cc\u5411\u94fe\u8868\u7ba1\u7406\u5927\u5c0f\u5c0f\u4e8e256byte\u7684\u5185\u5b58.  dlmalloc\u6811\u4e0e\u53cc\u5411\u94fe\u8868\u7ed3\u5408\u7ba1\u7406\u5927\u5c0f\u5927\u4e8e256byte\u7684\u5185\u5b58.  \u5355\u5411\u94fe\u8868\u7ba1\u7406segment\u7ed3\u6784.    dlmalloc\u901a\u8fc7\u4e24\u4e2a\u4f4d\u56fe\u5206\u522b\u7ba1\u7406\u53cc\u5411\u94fe\u8868\u548cdlmalloc\u6811.   +---------------------------segment-------------------------------------+\n+  0X10   |  0X12  |  0x109 |  0x110 |                                  +\n+ chunk0  | chunk1 | chunk2 | chunk3 |            top                   +\n+-----------------------------------------------------------------------+  \u4e0a\u9762\u7684\u6570\u5b57\u4e3achunk\u7ed3\u6784\u4f53\u4e2d\u7684size.\nchunk0\u548cchunk1 \u90fd\u4e3a\u5c0f\u5185\u5b58,\u5927\u5c0f\u4e3a0x10, 16byte.\u800c chunk1 \u76840x02\u662f\u8868\u793achunk0\u8868\u793a\u81ea\u5df1\u4f7f\u7528.chunk0 \u5f52\u5c5e\u4e0e\u7bb1\u53f7\u4e3a2,\u7531\u53cc\u5411\u94fe\u8868\u7ba1\u7406.\nchunk2\u548cchunk3 \u4e3a\u5927\u5185\u5b58, \u5927\u5c0f\u4e3a0x108, 264byte. chunk2 \u5927\u5c0f | 0x01\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u88ab\u4f7f\u7528. chunk3 | 0x02 \u56e0\u4e3a\u81ea\u5df1\u5728\u88ab\u4f7f\u7528. \u8fd9\u4e24\u4e2a\u5f52\u5c5e\u4e0e\u7bb1\u53f7\u4e3a0\u7684\u6811\u7ba1\u7406.\n\u6700\u540e \u662ftop\u5757.  setgment\u7531\u7cfb\u7edf\u901a\u8fc7sbrk\u5206\u914d.\ntop \u4ecesegment\u800c\u6765.\u5982\u679ctop\u8d85\u8fc7\u4e00\u4e2a\u9600\u503c,\u5c31\u4f1a\u901a\u8fc7sbrk,\u7f29\u5c0f.\u5982\u679c\u592a\u5c0f,\u901a\u8fc7sbrk\u6269\u5927top.\n\u5404\u4e2achunk \u7531 top\u5207\u5206, \u6216\u8005free\u65f6, \u6216\u8005dv chunk\u88ab\u66ff\u6362\u65f6\u4ea7\u751f.  \u7b97\u6cd5\u603b\u7ed3:    \u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219   \u8ddf\u636e\u8bf7\u6c42\u5927\u5c0f,\u4f18\u5148\u5bfb\u627e\u6700\u5339\u914d\u7684\u7bb1\u5b50,\u4e4b\u540e\u4e34\u8fd1\u7bb1\u5b50.\u5728\u80fd\u4e0d\u5206\u5272\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\u5c3d\u91cf\u4e0d\u5206\u5272\u5185\u5b58.  \u5982\u679cdv chunk\u8db3\u591f\u5927,\u5219\u4f7f\u7528dv chunk.  \u5982\u679c\u524d\u4e24\u4e2a\u4e0d\u6ee1\u8db3,\u5219\u5728smallbin\u4e2d\u5bfb\u627e\u6700\u63a5\u8fd1\u8bf7\u6c42\u5927\u5c0f\u7684\u7a7a\u95f2\u5757\u7bb1\u53f7.  \u5982\u679ctop \u8db3\u591f\u5927,\u4f7f\u7528top.  \u5982\u679c\u8bf7\u6c42\u5185\u5b58\u5b9e\u5728\u592a\u5927,\u5219\u4f7f\u7528\u7cfb\u7edf\u5206\u914d.     \u5927\u5185\u5b58\u5206\u914d\u89c4\u5219   \u5982\u679ctreebin\u4e2d\u627e\u5230\u6700\u5408\u9002\u7684\u6700\u5c0f\u5185\u5b58,\u5982\u679c\u5b83\u6bd4dv chunk\u66f4\u5408\u9002,\u5c31\u4f7f\u7528\u5b83.  \u5982\u679cdv chunk\u6bd4\u5176\u4ed6\u6240\u6709\u5408\u9002,\u5219\u4f7f\u7528dv chunk.  \u5982\u679ctop \u8db3\u591f\u5927,\u5219\u4f7f\u7528top.  \u5982\u679c\u8bf7\u6c42\u5927\u5c0f  = mmap\u7684\u9600\u503c,\u5219\u4f7f\u7528mmap.  \u76f4\u63a5\u4ece\u7cfb\u7edf\u5206\u914d\u5185\u5b58.     \u5185\u5b58\u91ca\u653e\u89c4\u5219   \u5982\u679c\u5728\u865a\u62df\u5185\u5b58\u4e0a\u7684\u5f53\u524d\u91ca\u653e\u5185\u5b58\u7684\u524d/\u540e\u4e00\u4e2a\u5185\u5b58\u4e3a\u7a7a\u95f2,\u5219\u5408\u5e76.  \u5982\u679c\u524d/\u540e\u4e00\u4e2a\u5185\u5b58\u4e3adv chunk, \u5219\u5408\u5e76\u5230dv chunk  \u5982\u679c\u540e\u4e00\u4e2a\u5185\u5b58\u4e3atop, \u5219\u5408\u5e76\u5230top  \u5982\u679c\u524d/\u540e\u4e00\u4e2a\u5185\u5b58\u4e3a\u666e\u901a\u5185\u5b58\u5757,\u5219\u5220\u9664\u540e,\u67e5\u627e\u5e76\u63d2\u5165\u7b26\u5408\u5927\u5c0f\u7684\u7bb1\u5b50\u4e2d.     smallbin \u548c treebin\u7684\u89c4\u5219.   smallbin \u4e3a32bit\u6570,\u6ca1\u4e00\u4e2abit\u5bf9\u5e94\u4e00\u4e2a\u7bb1\u5b50\u7684\u72b6\u6001.1 \u4e3a\u6709\u7a7a\u95f2\u5185\u5b58, 0 \u4e3a\u65e0. 32\u4e2a\u7bb1\u5b50\u7684\u5927\u5c0f\u4e3a\u4ee58 \u4e3a\u57fa\u6570, \u4ee58 \u4e3a\u589e\u7387, \u957f\u5ea6\u4e3a32\u7684\u7b49\u5dee\u6570\u5217  treebin\u7684\u72b6\u6001\u4e0esmallbin\u4e00\u81f4. treebin\u7684\u5404\u4e2a\u7bb1\u5b50\u7684\u5927\u5c0f\u89c1\u4e0a\u6587.     treebin\u4e2d\u7684\u6811\u7684\u641c\u7d22\u7b97\u6cd5   \u8be5\u6811\u8868\u793a\u4e00\u6bb5\u5185\u5b58\u8303\u56f4.\u6240\u4ee5\u6ca1\u4e00\u68f5\u5b50\u6811\u7528\u4e8c\u5206\u6cd5\u8868\u793a\u5bf9\u5e94\u7684\u533a\u95f4\u8303\u56f4.  \u5de6\u5b50\u6811\u4e0a\u7684\u4efb\u610fchunk\u5927\u5c0f \u90fd\u5c0f\u4e8e\u5176\u53f3\u5b50\u6811\u7684\u4efb\u610fchunk\u7684\u5927\u5c0f,  \u53c2\u8003  tmalloc_large , insert_large_chunk  \u548c unlink_large_chunk \u7684\u89e3\u6790.", 
            "title": "\u603b\u7ed3"
        }, 
        {
            "location": "/slackbot/", 
            "text": "slackbot \u6846\u67b6\n\n\n\u6765\u6e90: https://pengzhangdev.github.io/slackbot/\n\n\nslackbot, \u987e\u540d\u601d\u4e49, \u662f\u57fa\u4e8eslack\u7684bot\u7a0b\u5e8f, \u4f7f\u7528python\u5b9e\u73b0. \u4e2a\u4eba\u5728\nlins05/slackbot\n\u7684\u57fa\u7840\u4e0a, \u8fdb\u884c\u4e86\u4e8c\u6b21\u5f00\u53d1,\u7528\u4e8e\u6811\u8393\u6d3e\u7684\u63a7\u5236\u4e2d\u5fc3\u548c\u667a\u80fd\u5bb6\u5c45\u7684\u63a7\u5236\u4e2d\u5fc3. \u6700\u521d\u9009\u4e2d\u5b83\u7684\u539f\u56e0\u662f, \u5728\u7f51\u4e0a\u770b\u5230\u5927\u91cf\u7684\u4f8b\u5b50\u57fa\u4e8eslack\u505a\u8fdc\u7a0b\u8fd0\u7ef4\u7684\u4f8b\u5b50.\n\n\n\u4e0b\u6587\u4ecb\u7ecd\u7684slackbot\u6846\u67b6, \u662f\u5305\u542b\nlins05/slackbot\n\u548c\u4e2a\u4eba\u4e8c\u6b21\u5f00\u53d1\u4e4b\u540e\u7684\u5185\u5bb9.\u4e8c\u6b21\u5f00\u53d1\u7684\u6838\u5fc3\u5728\u4e8e\u63d2\u4ef6\u548c\u7ec4\u4ef6\u6269\u5145.\n\n\n\u7531\u4e8e\u7528\u4e86\u63d2\u4ef6\u548c\u7ec4\u4ef6\u7684\u6a21\u5f0f, \u5bfc\u81f4\u53ef\u4ee5\u6dfb\u52a0\u4efb\u610f\u591a\u529f\u80fd\u7684\u63d2\u4ef6\u548c\u7ec4\u4ef6. \u6240\u4ee5, \u529f\u80fd\u8fd8\u5728\u6301\u7eed\u5f00\u53d1\u4e2d.\n\n\n\u8ba1\u5212: \u63d2\u4ef6\u548c\u7ec4\u4ef6\u8ddfpython-fire\u7ed3\u5408, \u671f\u671b\u5b9e\u73b0\u81ea\u52a8\u89e3\u6790\u7ec4\u4ef6\u7684\u63a5\u53e3, \u800c\u4e0d\u9700\u8981\u4e13\u95e8\u5c01\u88c5\u63d2\u4ef6.\n\n\n\u6846\u67b6\u56fe\n\n\n\n\n\u8be5\u6a21\u5f0f\u662f\u5178\u578b\u7684\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b, \u751f\u4ea7\u8005\u67092\u4e2a, \u4e00\u4e2a\u662f\u4eceslack\u5b98\u7f51\u63a5\u6536\u6d88\u606f\u5e76\u653e\u5165\u961f\u5217, \u53e6\u4e00\u4e2a\u662f\u5b9a\u65f6\u4efb\u52a1,\u9694\u4e00\u5b9a\u65f6\u95f4\u5f80\u961f\u5217\u4e2d\u5b58\u5165\u6307\u4ee4. \u6d88\u8d39\u8005\u670910\u4e2a(10\u7ebf\u7a0b\u7b49\u5f85\u5728\u961f\u5217\u4e0a), \u5176\u529f\u80fd\u5c31\u662f\u5206\u522b\u5904\u7406\u5b9a\u65f6\u4efb\u52a1, \u5404\u79cd\u6d88\u606f.\n\n\n\u63d2\u4ef6\u7c7b\u662f\u7531PluginManager\u7ba1\u7406\u548c\u52a0\u8f7d, \u4ece\u63d2\u4ef6\u76ee\u5f55\u4e2d\u6839\u636e\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u89c4\u5219\u52a0\u8f7d\u6307\u5b9a\u7684\u63d2\u4ef6\u7c7b, \u5e76\u6839\u636e\u63d2\u4ef6\u7c7b\u7684\u4fee\u9970\u51fd\u6570\u83b7\u53d6\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570(\u5b9a\u65f6\u5904\u7406\u51fd\u6570, \u6d88\u606f\u5904\u7406\u51fd\u6570).\n\n\n\u63d2\u4ef6\u548c\u7ec4\u4ef6\u7684\u5b9e\u73b0\n\n\n\u7531\u4e8e\u4f7f\u7528\u4e86\u4fee\u9970\u51fd\u6570, \u5219\u88ab\u8c03\u7528\u51fd\u6570\u65e0\u6cd5\u662f\u7c7b\u6210\u5458\u51fd\u6570. \u867d\u7136\u5728\u5199\u63d2\u4ef6\u4e0a\u66f4\u65b9\u4fbf, \u4f46\u662f\u5bf9\u4e8e\u63d2\u4ef6\u529f\u80fd\u5f3a\u5927\u7684\u5b9e\u73b0, \u5219\u9700\u8981\u989d\u5916\u5c01\u88c5.\n\n\n\u5728\u6b64\u57fa\u7840\u4e0a, \u65b0\u6dfb\u52a0\u4e86\u7ec4\u4ef6\u6982\u5ff5, \u7ec4\u4ef6\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u7b2c\u4e09\u65b9\u5e93\u6216\u5b9e\u73b0(\u7eaf\u9762\u5411\u5bf9\u8c61\u5b9e\u73b0), \u7136\u540e\u5728\u63d2\u4ef6\u76ee\u5f55\u4e0b\u5b9e\u73b0\u5bf9\u5e94\u7684\u63d2\u4ef6\u8c03\u7528\u8be5\u7ec4\u4ef6\u7ec4\u6210\u529f\u80fd. \u8fd9\u5c31\u662fpi\u4e0a\u667a\u80fd\u5bb6\u5c45\u63a7\u5236\u4e2d\u7684\u57fa\u7840. \u540e\u7eed\u7684\u63a7\u5236\u5b9e\u73b0\u90fd\u5728\u8be5\u57fa\u7840\u4e0a\u6269\u5c55, \u7279\u522b\u662f\u5b9a\u65f6\u4efb\u52a1.\n\n\n\u7ec4\u4ef6\u4e2d\u4f1a\u51fa\u73b0\u591a\u4e2a\u6a21\u5757\u88ab\u4e0d\u540c\u63d2\u4ef6\u8c03\u7528\u7684\u573a\u666f, \u8fd9\u5c31\u9700\u8981\u7ec4\u4ef6\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f(\u7ec4\u4ef6\u521d\u59cb\u5316\u53c2\u6570\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u6307\u5b9a). \u5355\u4f8b\u6a21\u5f0f\u7684\u5b9e\u73b0,\u5728python2\u548cpython3\u4e0a\u4e0d\u540c, \u7531\u4e8e\u76ee\u524d\u5168\u4f53\u5207\u6362\u5230python3\u4e0a, \u5b9e\u73b0\u4e0a\u4f7f\u7528\u4e86metaclass, \u4f46\u662f\u5b9e\u9645\u4e0a\u91cd\u5199new\u65b9\u6cd5\u7684\u5b9e\u73b0\u4e5f\u662f\u53ef\u4ee5\u7684. \u7279\u522b\u6ce8\u610f, \u5355\u4f8b\u5b9e\u9645\u4e0a\u662f\u76f4\u63a5\u8fd4\u56de\u4e86\u5185\u5b58\u5bf9\u8c61, \u4f46\u4f9d\u7136\u4f1a\u7ee7\u7eed\u540e\u7eed\u7684\n__init__\n, \u6240\u4ee5\u5fc5\u987b\u6dfb\u52a0\u6807\u8bb0\u6765\u8868\u793a\u5df2\u7ecf\u521d\u59cb\u5316\u53d8\u91cf.\n\n\n\u63d2\u4ef6\u5217\u8868\n\n\n\u667a\u80fd\u5bb6\u5c45\u7684\u4e3b\u63a7\u4e3ahomeassistant, \u8fd9\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u6846\u67b6, \u5e76\u4e14\u652f\u6301\u5f00\u6e90\u534f\u8bae, \u5c0f\u7c73\u7cfb\u5217\u548cyeelight\u7cfb\u5217\u5927\u90e8\u5206\u90fd\u80fd\u76f4\u63a5\u6dfb\u52a0, \u5c11\u91cf\u9700\u8981hack\u4e0b.\n\n\n\u6240\u6709\u667a\u80fd\u5bb6\u5c45\u6a21\u5757\u5b58\u653e\u5728 \ncomponent/ha/\n, slackbot\u4e0ehomeassistant\u901a\u8fc7rest API \u901a\u4fe1. \u6240\u6709\u7684\u8bf7\u6c42\u90fd\u662fslackbot\u8bf7\u6c42\u53d1\u8d77. \n\n\n\u6240\u6709\u7684\u667a\u80fd\u5bb6\u5c45\u8bbe\u5907\u90fd\u53ef\u4ee5\u901a\u8fc7slackbot\u8fdc\u7a0b\u63a7\u5236\u5f00\u5173.\n\n\n\u540e\u9762\u5217\u51fa\u7684\u662f\u7ec4\u4ef6\u5217\u8868, \u5217\u8868\u4e2d\u7ec4\u4ef6\u7ec4\u5408\u4e0d\u540c\u53ef\u4ee5\u4ea7\u751f\u4e0d\u540c\u7684\u63d2\u4ef6, \u6bd4\u5982:\n\n\n\n\n\u65e5\u7167\u72b6\u6001 + \u5bb6\u5ead\u4eba\u5458\u5728\u5ba2\u5385\u72b6\u6001 + \u706f\u5177\u63a7\u5236 = \u592a\u9633\u4e0b\u5c71\u5ba2\u5385\u6709\u4eba\u81ea\u52a8\u5f00\u706f, \u5ba2\u5385\u6ca1\u4eba\u81ea\u52a8\u5173\u706f\n\n\n\u5c0f\u7c73\u626b\u5730\u673a\u5668\u4eba + \u5bb6\u5ead\u4eba\u5458\u5728\u5ba2\u5385\u72b6\u6001 = \u5bb6\u91cc\u6ca1\u4eba, \u4e14\u5b9a\u65f6\u4efb\u52a1\u5230, \u81ea\u52a8\u5f00\u59cb\u626b\u5730\n\n\n\u5f55\u5236\u6a21\u5757 + \u64ad\u653e\u6a21\u5757 + \u8bed\u97f3\u8f6c\u6587\u5b57\u6a21\u5757 + \u6587\u5b57\u8f6c\u8bed\u97f3\u6a21\u5757 = \u8ddf\u795e\u7ecf\u51b0\u804a\u5929\u5e76\u53d1\u5e03\u4efb\u52a1\u7684\u529f\u80fd\n\n\n\n\nhomeassistant\u63d0\u4f9b\u7684\u529f\u80fd\u5217\u8868\n\n\n\u5bb6\u5ead\u4eba\u5458\u5728\u5bb6\u72b6\u6001\n\n\n\u83b7\u53d6\u5bb6\u5ead\u4eba\u5458\u662f\u5426\u5728\u5bb6, \u8be5\u5b9e\u73b0\u5176\u5b9e\u662f\u68c0\u6d4b\u5bb6\u5ead\u6210\u5458\u624b\u673a\u7684mac\u5730\u5740\u5224\u65ad\u662f\u5426\u8fde\u63a5\u4e0a\u8def\u7531\u5668.\n\n\n\u706f\u5177\u63a7\u5236\n\n\n\u8fdc\u7a0b\u63a7\u5236\u6307\u5b9a\u706f\u5177\u7684\u5f00\u5173\n\n\n\u5c0f\u7c73\u626b\u5730\u673a\u5668\u4eba\n\n\n\u63a5\u5165\u5c0f\u7c73\u626b\u5730\u673a\u5668\u4eba, \u9ed8\u8ba4\u6bcf\u5468\u4e00\u4e09\u4e94\u542f\u52a8\u6e05\u626b, \u4f4624\u5c0f\u65f6\u5185\u4e0d\u91cd\u542f\u542f\u52a8\u6e05\u626b.\n\n\n\u65e5\u7167\u72b6\u6001\n\n\n\u4e5f\u5c31\u662f\u592a\u9633\u4e0b\u5c71\u4e0e\u5426\u7684\u72b6\u6001.\n\n\n\u5bb6\u5ead\u4eba\u5458\u5728\u5ba2\u5385\u72b6\u6001\n\n\n\u8be5\u72b6\u6001\u7684\u5b58\u5728\u610f\u4e49\u662f, \u4e2a\u4eba\u671f\u671b\u5bb6\u5ead\u6210\u5458\u5728\u5ba2\u5385\u65f6, \u81ea\u52a8\u6253\u5f00\u5ba2\u5385\u706f, \u79bb\u5f00\u5ba2\u5385\u65f6, \u81ea\u52a8\u5173\u95ed\u5ba2\u5385\u7684.\n\n\n\u5728\u521d\u671f\u5b66\u4e60\u9636\u6bb5, \u89e3\u9664\u5230\u7684\u4e3b\u8981\u6709\u84dd\u7259\u5e7f\u64ad\u548cRFID, \u90fd\u662f\u901a\u8fc7\u4e09\u70b9\u6cd5\u6765\u5b9a\u4f4d(\u76f8\u5173\u4fe1\u606f\u53ef\u4ee5\u767e\u5ea6\u5ba4\u5185\u5b9a\u4f4d). \u9996\u5148, \u57fa\u4e8e\u82af\u7247\u7684\u5b9a\u4f4d(\u4ed3\u5e93\u5b9a\u4f4d)\u4e0d\u9002\u5408\u5bb6\u5ead\u4f7f\u7528, \u56e0\u4e3a\u5bb6\u5ead\u4e0d\u53ef\u80fd\u4f1a\u5e26\u7740\u5c04\u9891\u82af\u7247.\u800c\u84dd\u7259\u5e7f\u64ad\u53ea\u6709\u63a5\u6536\u7aef\u624d\u80fd\u77e5\u9053\u81ea\u5df1\u4e0e\u53d1\u9001\u7aef\u7684\u8ddd\u79bb(\u4fe1\u53f7\u8870\u51cf), \u4e14\u9700\u8981\u4e09\u4e2a\u84dd\u7259\u5b9a\u4f4d. \u8003\u8651\u5230\u4e0e\u84dd\u7259\u7c7b\u4f3c, \u4f46\u6536\u5230\u73af\u5883\u5f71\u54cd\u66f4\u5927\u7684wifi, \u6d4b\u8bd5\u5c0f\u7c73\u8def\u7531\u5668\u4e0a\u53ef\u4ee5\u83b7\u53d6\u5230\u76ee\u6807\u624b\u673a\u7684\u4fe1\u53f7\u5f3a\u5ea6, \u5219\u51b3\u5b9a\u6539\u7528wifi\u5212\u5b9a\u4e24\u4e2a\u5706\u5f27\u533a\u57df. \u5c0f\u5706\u5f27\u533a\u57df\u5185\u5f00\u706f, \u5927\u5706\u5f27\u533a\u57df\u5916\u5173\u706f, \u800c\u4e24\u4e2a\u5706\u5f27\u533a\u57df\u4e2d\u95f4\u4fdd\u6301\u539f\u72b6\u6001\u4e0d\u53d8. \n\n\n\n\n\u804a\u5929\u673a\u5668\u4eba\n\n\n\u5206\u522b\u6709 ibot, tuling, xiaoi, emotibot. \u4f46\u4e0d\u662f\u6240\u6709\u7684\u90fd\u542f\u7528, \u5728\u804a\u5929\u63d2\u4ef6\u4e2d, \u9009\u62e9\u5176\u4e2d\u7684\u4e00\u4e2a\u542f\u52a8\u5e76\u4ea4\u4e92.\n\n\n\u6587\u4ef6\u7ba1\u7406\u5668\n\n\n\u6240\u8c13\u7684\u6587\u4ef6\u7ba1\u7406\u5668, \u53ea\u662f\u4e00\u4e2a\u6587\u4ef6\u7d22\u5f15\u52a0\u4e0a\u6587\u4ef6\u67e5\u627e\u7684\u5de5\u5177, \u989d\u5916\u589e\u52a0\u4e86\u4e00\u4e2a\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd. \u6587\u4ef6\u7d22\u5f15\u4f7f\u7528\u7684\u662fjieba\u548cwhoos. \u53ef\u4ee5\u901a\u8fc7slackbot\u5feb\u901f\u67e5\u627e\u67d0\u4e2a\u6587\u4ef6\u6216\u8005\u67d0\u672c\u4e66(\u7535\u5b50\u4e66\u591a\u5230\u81ea\u5df1\u4e5f\u4e0d\u77e5\u9053\u6709\u591a\u5c11\u672c).\n\n\n\u8ffd\u5267\u6a21\u5757\n\n\n\u4e0d\u53ea\u662f\u8ffd\u5267, \u4e5f\u662f\u8ffd\u7535\u5f71. \u7535\u5f71\u8c46\u74e37.0\u4ee5\u4e0a\u624d\u63a8\u9001, \u800c\u5267\u662f\u5bb6\u91cc\u653f\u59d4\u559c\u6b22\u7684\u65e5\u5267, \u5168\u63a8((\u2299\ufe4f\u2299)b),\u540e\u6765\u56e0\u4e3a\u67d0\u4e9b\u6bd4\u8f83\u65e0\u5948\u7684\u539f\u56e0,  \u8fd9\u8d27\u5f00\u59cb\u63a8\u4e00\u4e9b\u8001\u5bb6\u91cc\u653f\u59d4\u559c\u6b22\u7684\u5267, \u5c31\u6309\u9700\u52a0\u4e86\u4e2a\u529f\u80fd, \u9ed1\u767d\u540d\u5355. \u679c\u7136\u8001\u5a46\u662f\u7b2c\u4e00\u751f\u4ea7\u529b.\n\n\n\u5c0f\u8bf4\u6a21\u5757\n\n\n\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u722c\u866b, \u4e0d\u505c\u5730\u722c\u53d6\u6307\u5b9a\u5c0f\u8bf4\u5224\u65ad\u662f\u5426\u5b58\u5728\u66f4\u65b0. \u5728\u4e2a\u4eba\u7684\u4e3b\u9875\u4ecb\u7ecd\u4e2d\u4ecb\u7ecd\u4e86\u559c\u6b22\u5386\u53f2\u5c0f\u8bf4, \u6240\u4ee5\u5927\u90e8\u5206\u90fd\u662f\u5386\u53f2\u7c7b\u5c0f\u8bf4\n\n\n\u64ad\u653e\u6a21\u5757\n\n\n\u8c03\u7528mplayer\u64ad\u653e\n\n\n\u5f55\u5236\u6a21\u5757\n\n\n\u8c03\u7528arecord\u5f55\u97f3\n\n\n\u8bed\u97f3\u8f6c\u6587\u5b57\n\n\n\u7528\u4e86\u767e\u5ea6\u7684api\n\n\n\u6587\u5b57\u8f6c\u8bed\n\n\n\u7528\u4e86iflytek\u7684API, \u4e0d\u5f97\u4e0d\u8bf4\u5b83\u4eec\u5bb6\u8bed\u97f3\u505a\u5f97\u597d, \u5404\u79cd\u4eba\u7269\u53ef\u9009.\n\n\n\u5de5\u5177\n\n\n\u5305\u542b\u4e86\u6a21\u4eff\u6d4f\u89c8\u5668\u6253\u5f00\u7684\u4ee3\u7801(cookie\u7b49), \u5b9e\u73b0\u4e86\u4ee3\u7406\u6c60, \u5e76\u53ef\u4ee3\u7406\u8bbf\u95ee.", 
            "title": "slackbot\u8be6\u7ec6\u8bf4\u660e"
        }, 
        {
            "location": "/slackbot/#slackbot", 
            "text": "\u6765\u6e90: https://pengzhangdev.github.io/slackbot/  slackbot, \u987e\u540d\u601d\u4e49, \u662f\u57fa\u4e8eslack\u7684bot\u7a0b\u5e8f, \u4f7f\u7528python\u5b9e\u73b0. \u4e2a\u4eba\u5728 lins05/slackbot \u7684\u57fa\u7840\u4e0a, \u8fdb\u884c\u4e86\u4e8c\u6b21\u5f00\u53d1,\u7528\u4e8e\u6811\u8393\u6d3e\u7684\u63a7\u5236\u4e2d\u5fc3\u548c\u667a\u80fd\u5bb6\u5c45\u7684\u63a7\u5236\u4e2d\u5fc3. \u6700\u521d\u9009\u4e2d\u5b83\u7684\u539f\u56e0\u662f, \u5728\u7f51\u4e0a\u770b\u5230\u5927\u91cf\u7684\u4f8b\u5b50\u57fa\u4e8eslack\u505a\u8fdc\u7a0b\u8fd0\u7ef4\u7684\u4f8b\u5b50.  \u4e0b\u6587\u4ecb\u7ecd\u7684slackbot\u6846\u67b6, \u662f\u5305\u542b lins05/slackbot \u548c\u4e2a\u4eba\u4e8c\u6b21\u5f00\u53d1\u4e4b\u540e\u7684\u5185\u5bb9.\u4e8c\u6b21\u5f00\u53d1\u7684\u6838\u5fc3\u5728\u4e8e\u63d2\u4ef6\u548c\u7ec4\u4ef6\u6269\u5145.  \u7531\u4e8e\u7528\u4e86\u63d2\u4ef6\u548c\u7ec4\u4ef6\u7684\u6a21\u5f0f, \u5bfc\u81f4\u53ef\u4ee5\u6dfb\u52a0\u4efb\u610f\u591a\u529f\u80fd\u7684\u63d2\u4ef6\u548c\u7ec4\u4ef6. \u6240\u4ee5, \u529f\u80fd\u8fd8\u5728\u6301\u7eed\u5f00\u53d1\u4e2d.  \u8ba1\u5212: \u63d2\u4ef6\u548c\u7ec4\u4ef6\u8ddfpython-fire\u7ed3\u5408, \u671f\u671b\u5b9e\u73b0\u81ea\u52a8\u89e3\u6790\u7ec4\u4ef6\u7684\u63a5\u53e3, \u800c\u4e0d\u9700\u8981\u4e13\u95e8\u5c01\u88c5\u63d2\u4ef6.", 
            "title": "slackbot \u6846\u67b6"
        }, 
        {
            "location": "/slackbot/#_1", 
            "text": "\u8be5\u6a21\u5f0f\u662f\u5178\u578b\u7684\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b, \u751f\u4ea7\u8005\u67092\u4e2a, \u4e00\u4e2a\u662f\u4eceslack\u5b98\u7f51\u63a5\u6536\u6d88\u606f\u5e76\u653e\u5165\u961f\u5217, \u53e6\u4e00\u4e2a\u662f\u5b9a\u65f6\u4efb\u52a1,\u9694\u4e00\u5b9a\u65f6\u95f4\u5f80\u961f\u5217\u4e2d\u5b58\u5165\u6307\u4ee4. \u6d88\u8d39\u8005\u670910\u4e2a(10\u7ebf\u7a0b\u7b49\u5f85\u5728\u961f\u5217\u4e0a), \u5176\u529f\u80fd\u5c31\u662f\u5206\u522b\u5904\u7406\u5b9a\u65f6\u4efb\u52a1, \u5404\u79cd\u6d88\u606f.  \u63d2\u4ef6\u7c7b\u662f\u7531PluginManager\u7ba1\u7406\u548c\u52a0\u8f7d, \u4ece\u63d2\u4ef6\u76ee\u5f55\u4e2d\u6839\u636e\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u89c4\u5219\u52a0\u8f7d\u6307\u5b9a\u7684\u63d2\u4ef6\u7c7b, \u5e76\u6839\u636e\u63d2\u4ef6\u7c7b\u7684\u4fee\u9970\u51fd\u6570\u83b7\u53d6\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570(\u5b9a\u65f6\u5904\u7406\u51fd\u6570, \u6d88\u606f\u5904\u7406\u51fd\u6570).", 
            "title": "\u6846\u67b6\u56fe"
        }, 
        {
            "location": "/slackbot/#_2", 
            "text": "\u7531\u4e8e\u4f7f\u7528\u4e86\u4fee\u9970\u51fd\u6570, \u5219\u88ab\u8c03\u7528\u51fd\u6570\u65e0\u6cd5\u662f\u7c7b\u6210\u5458\u51fd\u6570. \u867d\u7136\u5728\u5199\u63d2\u4ef6\u4e0a\u66f4\u65b9\u4fbf, \u4f46\u662f\u5bf9\u4e8e\u63d2\u4ef6\u529f\u80fd\u5f3a\u5927\u7684\u5b9e\u73b0, \u5219\u9700\u8981\u989d\u5916\u5c01\u88c5.  \u5728\u6b64\u57fa\u7840\u4e0a, \u65b0\u6dfb\u52a0\u4e86\u7ec4\u4ef6\u6982\u5ff5, \u7ec4\u4ef6\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u7b2c\u4e09\u65b9\u5e93\u6216\u5b9e\u73b0(\u7eaf\u9762\u5411\u5bf9\u8c61\u5b9e\u73b0), \u7136\u540e\u5728\u63d2\u4ef6\u76ee\u5f55\u4e0b\u5b9e\u73b0\u5bf9\u5e94\u7684\u63d2\u4ef6\u8c03\u7528\u8be5\u7ec4\u4ef6\u7ec4\u6210\u529f\u80fd. \u8fd9\u5c31\u662fpi\u4e0a\u667a\u80fd\u5bb6\u5c45\u63a7\u5236\u4e2d\u7684\u57fa\u7840. \u540e\u7eed\u7684\u63a7\u5236\u5b9e\u73b0\u90fd\u5728\u8be5\u57fa\u7840\u4e0a\u6269\u5c55, \u7279\u522b\u662f\u5b9a\u65f6\u4efb\u52a1.  \u7ec4\u4ef6\u4e2d\u4f1a\u51fa\u73b0\u591a\u4e2a\u6a21\u5757\u88ab\u4e0d\u540c\u63d2\u4ef6\u8c03\u7528\u7684\u573a\u666f, \u8fd9\u5c31\u9700\u8981\u7ec4\u4ef6\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f(\u7ec4\u4ef6\u521d\u59cb\u5316\u53c2\u6570\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u6307\u5b9a). \u5355\u4f8b\u6a21\u5f0f\u7684\u5b9e\u73b0,\u5728python2\u548cpython3\u4e0a\u4e0d\u540c, \u7531\u4e8e\u76ee\u524d\u5168\u4f53\u5207\u6362\u5230python3\u4e0a, \u5b9e\u73b0\u4e0a\u4f7f\u7528\u4e86metaclass, \u4f46\u662f\u5b9e\u9645\u4e0a\u91cd\u5199new\u65b9\u6cd5\u7684\u5b9e\u73b0\u4e5f\u662f\u53ef\u4ee5\u7684. \u7279\u522b\u6ce8\u610f, \u5355\u4f8b\u5b9e\u9645\u4e0a\u662f\u76f4\u63a5\u8fd4\u56de\u4e86\u5185\u5b58\u5bf9\u8c61, \u4f46\u4f9d\u7136\u4f1a\u7ee7\u7eed\u540e\u7eed\u7684 __init__ , \u6240\u4ee5\u5fc5\u987b\u6dfb\u52a0\u6807\u8bb0\u6765\u8868\u793a\u5df2\u7ecf\u521d\u59cb\u5316\u53d8\u91cf.", 
            "title": "\u63d2\u4ef6\u548c\u7ec4\u4ef6\u7684\u5b9e\u73b0"
        }, 
        {
            "location": "/slackbot/#_3", 
            "text": "\u667a\u80fd\u5bb6\u5c45\u7684\u4e3b\u63a7\u4e3ahomeassistant, \u8fd9\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u6846\u67b6, \u5e76\u4e14\u652f\u6301\u5f00\u6e90\u534f\u8bae, \u5c0f\u7c73\u7cfb\u5217\u548cyeelight\u7cfb\u5217\u5927\u90e8\u5206\u90fd\u80fd\u76f4\u63a5\u6dfb\u52a0, \u5c11\u91cf\u9700\u8981hack\u4e0b.  \u6240\u6709\u667a\u80fd\u5bb6\u5c45\u6a21\u5757\u5b58\u653e\u5728  component/ha/ , slackbot\u4e0ehomeassistant\u901a\u8fc7rest API \u901a\u4fe1. \u6240\u6709\u7684\u8bf7\u6c42\u90fd\u662fslackbot\u8bf7\u6c42\u53d1\u8d77.   \u6240\u6709\u7684\u667a\u80fd\u5bb6\u5c45\u8bbe\u5907\u90fd\u53ef\u4ee5\u901a\u8fc7slackbot\u8fdc\u7a0b\u63a7\u5236\u5f00\u5173.  \u540e\u9762\u5217\u51fa\u7684\u662f\u7ec4\u4ef6\u5217\u8868, \u5217\u8868\u4e2d\u7ec4\u4ef6\u7ec4\u5408\u4e0d\u540c\u53ef\u4ee5\u4ea7\u751f\u4e0d\u540c\u7684\u63d2\u4ef6, \u6bd4\u5982:   \u65e5\u7167\u72b6\u6001 + \u5bb6\u5ead\u4eba\u5458\u5728\u5ba2\u5385\u72b6\u6001 + \u706f\u5177\u63a7\u5236 = \u592a\u9633\u4e0b\u5c71\u5ba2\u5385\u6709\u4eba\u81ea\u52a8\u5f00\u706f, \u5ba2\u5385\u6ca1\u4eba\u81ea\u52a8\u5173\u706f  \u5c0f\u7c73\u626b\u5730\u673a\u5668\u4eba + \u5bb6\u5ead\u4eba\u5458\u5728\u5ba2\u5385\u72b6\u6001 = \u5bb6\u91cc\u6ca1\u4eba, \u4e14\u5b9a\u65f6\u4efb\u52a1\u5230, \u81ea\u52a8\u5f00\u59cb\u626b\u5730  \u5f55\u5236\u6a21\u5757 + \u64ad\u653e\u6a21\u5757 + \u8bed\u97f3\u8f6c\u6587\u5b57\u6a21\u5757 + \u6587\u5b57\u8f6c\u8bed\u97f3\u6a21\u5757 = \u8ddf\u795e\u7ecf\u51b0\u804a\u5929\u5e76\u53d1\u5e03\u4efb\u52a1\u7684\u529f\u80fd", 
            "title": "\u63d2\u4ef6\u5217\u8868"
        }, 
        {
            "location": "/slackbot/#homeassistant", 
            "text": "", 
            "title": "homeassistant\u63d0\u4f9b\u7684\u529f\u80fd\u5217\u8868"
        }, 
        {
            "location": "/slackbot/#_4", 
            "text": "\u83b7\u53d6\u5bb6\u5ead\u4eba\u5458\u662f\u5426\u5728\u5bb6, \u8be5\u5b9e\u73b0\u5176\u5b9e\u662f\u68c0\u6d4b\u5bb6\u5ead\u6210\u5458\u624b\u673a\u7684mac\u5730\u5740\u5224\u65ad\u662f\u5426\u8fde\u63a5\u4e0a\u8def\u7531\u5668.", 
            "title": "\u5bb6\u5ead\u4eba\u5458\u5728\u5bb6\u72b6\u6001"
        }, 
        {
            "location": "/slackbot/#_5", 
            "text": "\u8fdc\u7a0b\u63a7\u5236\u6307\u5b9a\u706f\u5177\u7684\u5f00\u5173", 
            "title": "\u706f\u5177\u63a7\u5236"
        }, 
        {
            "location": "/slackbot/#_6", 
            "text": "\u63a5\u5165\u5c0f\u7c73\u626b\u5730\u673a\u5668\u4eba, \u9ed8\u8ba4\u6bcf\u5468\u4e00\u4e09\u4e94\u542f\u52a8\u6e05\u626b, \u4f4624\u5c0f\u65f6\u5185\u4e0d\u91cd\u542f\u542f\u52a8\u6e05\u626b.", 
            "title": "\u5c0f\u7c73\u626b\u5730\u673a\u5668\u4eba"
        }, 
        {
            "location": "/slackbot/#_7", 
            "text": "\u4e5f\u5c31\u662f\u592a\u9633\u4e0b\u5c71\u4e0e\u5426\u7684\u72b6\u6001.", 
            "title": "\u65e5\u7167\u72b6\u6001"
        }, 
        {
            "location": "/slackbot/#_8", 
            "text": "\u8be5\u72b6\u6001\u7684\u5b58\u5728\u610f\u4e49\u662f, \u4e2a\u4eba\u671f\u671b\u5bb6\u5ead\u6210\u5458\u5728\u5ba2\u5385\u65f6, \u81ea\u52a8\u6253\u5f00\u5ba2\u5385\u706f, \u79bb\u5f00\u5ba2\u5385\u65f6, \u81ea\u52a8\u5173\u95ed\u5ba2\u5385\u7684.  \u5728\u521d\u671f\u5b66\u4e60\u9636\u6bb5, \u89e3\u9664\u5230\u7684\u4e3b\u8981\u6709\u84dd\u7259\u5e7f\u64ad\u548cRFID, \u90fd\u662f\u901a\u8fc7\u4e09\u70b9\u6cd5\u6765\u5b9a\u4f4d(\u76f8\u5173\u4fe1\u606f\u53ef\u4ee5\u767e\u5ea6\u5ba4\u5185\u5b9a\u4f4d). \u9996\u5148, \u57fa\u4e8e\u82af\u7247\u7684\u5b9a\u4f4d(\u4ed3\u5e93\u5b9a\u4f4d)\u4e0d\u9002\u5408\u5bb6\u5ead\u4f7f\u7528, \u56e0\u4e3a\u5bb6\u5ead\u4e0d\u53ef\u80fd\u4f1a\u5e26\u7740\u5c04\u9891\u82af\u7247.\u800c\u84dd\u7259\u5e7f\u64ad\u53ea\u6709\u63a5\u6536\u7aef\u624d\u80fd\u77e5\u9053\u81ea\u5df1\u4e0e\u53d1\u9001\u7aef\u7684\u8ddd\u79bb(\u4fe1\u53f7\u8870\u51cf), \u4e14\u9700\u8981\u4e09\u4e2a\u84dd\u7259\u5b9a\u4f4d. \u8003\u8651\u5230\u4e0e\u84dd\u7259\u7c7b\u4f3c, \u4f46\u6536\u5230\u73af\u5883\u5f71\u54cd\u66f4\u5927\u7684wifi, \u6d4b\u8bd5\u5c0f\u7c73\u8def\u7531\u5668\u4e0a\u53ef\u4ee5\u83b7\u53d6\u5230\u76ee\u6807\u624b\u673a\u7684\u4fe1\u53f7\u5f3a\u5ea6, \u5219\u51b3\u5b9a\u6539\u7528wifi\u5212\u5b9a\u4e24\u4e2a\u5706\u5f27\u533a\u57df. \u5c0f\u5706\u5f27\u533a\u57df\u5185\u5f00\u706f, \u5927\u5706\u5f27\u533a\u57df\u5916\u5173\u706f, \u800c\u4e24\u4e2a\u5706\u5f27\u533a\u57df\u4e2d\u95f4\u4fdd\u6301\u539f\u72b6\u6001\u4e0d\u53d8.", 
            "title": "\u5bb6\u5ead\u4eba\u5458\u5728\u5ba2\u5385\u72b6\u6001"
        }, 
        {
            "location": "/slackbot/#_9", 
            "text": "\u5206\u522b\u6709 ibot, tuling, xiaoi, emotibot. \u4f46\u4e0d\u662f\u6240\u6709\u7684\u90fd\u542f\u7528, \u5728\u804a\u5929\u63d2\u4ef6\u4e2d, \u9009\u62e9\u5176\u4e2d\u7684\u4e00\u4e2a\u542f\u52a8\u5e76\u4ea4\u4e92.", 
            "title": "\u804a\u5929\u673a\u5668\u4eba"
        }, 
        {
            "location": "/slackbot/#_10", 
            "text": "\u6240\u8c13\u7684\u6587\u4ef6\u7ba1\u7406\u5668, \u53ea\u662f\u4e00\u4e2a\u6587\u4ef6\u7d22\u5f15\u52a0\u4e0a\u6587\u4ef6\u67e5\u627e\u7684\u5de5\u5177, \u989d\u5916\u589e\u52a0\u4e86\u4e00\u4e2a\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd. \u6587\u4ef6\u7d22\u5f15\u4f7f\u7528\u7684\u662fjieba\u548cwhoos. \u53ef\u4ee5\u901a\u8fc7slackbot\u5feb\u901f\u67e5\u627e\u67d0\u4e2a\u6587\u4ef6\u6216\u8005\u67d0\u672c\u4e66(\u7535\u5b50\u4e66\u591a\u5230\u81ea\u5df1\u4e5f\u4e0d\u77e5\u9053\u6709\u591a\u5c11\u672c).", 
            "title": "\u6587\u4ef6\u7ba1\u7406\u5668"
        }, 
        {
            "location": "/slackbot/#_11", 
            "text": "\u4e0d\u53ea\u662f\u8ffd\u5267, \u4e5f\u662f\u8ffd\u7535\u5f71. \u7535\u5f71\u8c46\u74e37.0\u4ee5\u4e0a\u624d\u63a8\u9001, \u800c\u5267\u662f\u5bb6\u91cc\u653f\u59d4\u559c\u6b22\u7684\u65e5\u5267, \u5168\u63a8((\u2299\ufe4f\u2299)b),\u540e\u6765\u56e0\u4e3a\u67d0\u4e9b\u6bd4\u8f83\u65e0\u5948\u7684\u539f\u56e0,  \u8fd9\u8d27\u5f00\u59cb\u63a8\u4e00\u4e9b\u8001\u5bb6\u91cc\u653f\u59d4\u559c\u6b22\u7684\u5267, \u5c31\u6309\u9700\u52a0\u4e86\u4e2a\u529f\u80fd, \u9ed1\u767d\u540d\u5355. \u679c\u7136\u8001\u5a46\u662f\u7b2c\u4e00\u751f\u4ea7\u529b.", 
            "title": "\u8ffd\u5267\u6a21\u5757"
        }, 
        {
            "location": "/slackbot/#_12", 
            "text": "\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u722c\u866b, \u4e0d\u505c\u5730\u722c\u53d6\u6307\u5b9a\u5c0f\u8bf4\u5224\u65ad\u662f\u5426\u5b58\u5728\u66f4\u65b0. \u5728\u4e2a\u4eba\u7684\u4e3b\u9875\u4ecb\u7ecd\u4e2d\u4ecb\u7ecd\u4e86\u559c\u6b22\u5386\u53f2\u5c0f\u8bf4, \u6240\u4ee5\u5927\u90e8\u5206\u90fd\u662f\u5386\u53f2\u7c7b\u5c0f\u8bf4", 
            "title": "\u5c0f\u8bf4\u6a21\u5757"
        }, 
        {
            "location": "/slackbot/#_13", 
            "text": "\u8c03\u7528mplayer\u64ad\u653e", 
            "title": "\u64ad\u653e\u6a21\u5757"
        }, 
        {
            "location": "/slackbot/#_14", 
            "text": "\u8c03\u7528arecord\u5f55\u97f3", 
            "title": "\u5f55\u5236\u6a21\u5757"
        }, 
        {
            "location": "/slackbot/#_15", 
            "text": "\u7528\u4e86\u767e\u5ea6\u7684api", 
            "title": "\u8bed\u97f3\u8f6c\u6587\u5b57"
        }, 
        {
            "location": "/slackbot/#_16", 
            "text": "\u7528\u4e86iflytek\u7684API, \u4e0d\u5f97\u4e0d\u8bf4\u5b83\u4eec\u5bb6\u8bed\u97f3\u505a\u5f97\u597d, \u5404\u79cd\u4eba\u7269\u53ef\u9009.", 
            "title": "\u6587\u5b57\u8f6c\u8bed"
        }, 
        {
            "location": "/slackbot/#_17", 
            "text": "\u5305\u542b\u4e86\u6a21\u4eff\u6d4f\u89c8\u5668\u6253\u5f00\u7684\u4ee3\u7801(cookie\u7b49), \u5b9e\u73b0\u4e86\u4ee3\u7406\u6c60, \u5e76\u53ef\u4ee3\u7406\u8bbf\u95ee.", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/", 
            "text": "Android\u5185\u5b58\u8c03\u8bd5\u5de5\u5177\u603b\u7ed3\n\n\n\u6765\u6e90: https://pengzhangdev.github.io/Android-memory-debug/\n\n\n\u7d22\u5f15\n\n\n\n\n\u7cfb\u7edf\u5185\u5b58\u5206\u6790, \u6240\u6709\u8fdb\u7a0b\u5185\u5b58\u5206\u6790\n\n\n\u57fa\u672c\u7684\nlogcat\n\u8f93\u51fa\u4e2d\u53ef\u80fd\u5305\u542b\u7684GC\u76f8\u5173\u4fe1\u606f, \u53ef\u4ee5\u4f5c\u4e3a\u7cfb\u7edf\u6216\u67d0\u4e9b\u5e94\u7528\u5185\u5b58\u72b6\u51b5\u7684\u53c2\u8003\u4f9d\u636e.\n\n\n\u5728SystemServer\u542f\u52a8\u7684\u60c5\u51b5\u4e0b, \u8fd8\u53ef\u4ee5\u901a\u8fc7 \ndumpsys meminfo\n \u4eceframework\u5c42\u89d2\u5ea6\u67e5\u770b\u7cfb\u7edf\u5185\u5b58\u7684\u72b6\u51b5, \u8be5\u90e8\u5206\u4fe1\u606f\u4e0e\u4ece\u7cfb\u7edf\u89d2\u5ea6\u83b7\u53d6\u7684\u4fe1\u606f\u5b58\u5728\u5dee\u5f02.\n\n\n\u5bf9\u4e8e\u9700\u8981\u6392\u5e8f\u5e76\u67e5\u627e\u5185\u5b58\u5360\u7528\u6700\u591a\u7684\u8fdb\u7a0b, \u63a8\u8350\u4f7f\u7528\u547d\u4ee4 \nprocrank\n\n\n\u5728\u5b9e\u5728\u7f3a\u5c11\u5de5\u5177, \u6216\u8005RD\u77e5\u9053\u9700\u8981\u4ec0\u4e48\u4fe1\u606f\u7684\u60c5\u51b5\u4e0b, \u53ef\u4ee5\u67e5\u770b\n/proc/meminfo\n\n\n\u5982\u679c\u9700\u8981\u8fde\u7eed\u76d1\u63a7\u7cfb\u7edf\u7684\u72b6\u6001(\u5185\u5b58/CPU\u7b49), \u53ef\u4ee5\u8003\u8651\u5de5\u5177\nvmstat\n\n\n\u5982\u679c\u9700\u8981\u4ece\u5171\u4eab\u5e93\u6216\u8005\u5171\u4eab\u5185\u5b58\u7684\u89d2\u5ea6\u5206\u6790\u5176\u5185\u5b58\u5360\u7528\u7684\u60c5\u51b5, \u53ef\u4ee5\u8003\u8651\u7528 \nlibrank\n, \u5f53\u7136, \u5982\u679c\u5b58\u5728host\u7aef\u7684\u5206\u6790\u5de5\u5177, \u5219\u8be5\u5de5\u5177\u7684\u8f93\u51fa\u53ef\u4ee5\u9876\u66ff\nprocrank\n\u548c\nprocmem\n.\n\n\n\u5982\u679c\u9700\u8981\u67e5\u770b\u7cfb\u7edf\u4e2d\u54ea\u4e9b\u5171\u4eab\u6587\u4ef6\u522b\u901a\u8fc7\u7f3a\u9875\u9519\u8bef\u7684\u65b9\u5f0f\u8bfb\u5230\u5185\u5b58, \u53ef\u4ee5\u4f7f\u7528\u5de5\u5177\ndumpcache\n\n\n\u5982\u679c\u5b9e\u5728\u4e0d\u77e5\u9053bug\u539f\u56e0\u6216\u8005\u95ee\u9898\u53ef\u80fd\u8ddf\u81ea\u5df1\u65e0\u5173, \u5efa\u8bae\u4f7f\u7528 \nbugreport\n, \u4f9b\u5176\u4ed6RD\u534f\u52a9\u5206\u6790\u95ee\u9898.\n\n\n\n\n\n\n\u6307\u5b9a\u5e94\u7528(dalvik\u8fdb\u7a0b)\u5185\u5b58\u5206\u6790\n\n\ndumpsys meminfo \u5e94\u7528\u5185\u5b58\n \u8f93\u51fa\u5f53\u524d\u8fdb\u7a0b/\u5e94\u7528\u7684\u6240\u6709\u5185\u5b58\u5360\u7528\u60c5\u51b5. \u5efa\u8bae\u53ea\u9488\u5bf9dalvik\u5c42\u7684\u8fdb\u7a0b.\n\n\n\n\n\n\n\u6307\u5b9anative\u8fdb\u7a0b\u5185\u5b58\u5206\u6790\n\n\nnative\u7684\u5355\u4e2a\u8fdb\u7a0b\u5185\u5b58\u5206\u6790\u5efa\u8bae\u4f7f\u7528 \nprocmem\n\u548c \nshowmap\n. \nshowmap\n \u989d\u5916\u8f93\u51fa\u4e86\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4, \u53ef\u4ee5\u8f85\u52a9\u67e5\u770b\u7531\u4e8e\u865a\u62df\u5730\u5740\u7a7a\u95f4\u5f15\u8d77\u7684\u5185\u5b58\u95ee\u9898.\n\n\n\n\n\n\n\u5e94\u7528\u5185\u5b58\u6cc4\u9732\n\n\n\u5c11\u90e8\u5206\u7684\u6cc4\u9732, \u6bd4\u5982\u6570\u636e\u5e93/activity\u7b49, \u901a\u8fc7\ndumpsys meminfo \u5e94\u7528\u5185\u5b58\n, \u4f46\u53ea\u80fd\u77e5\u9053\u5b58\u5728\u6cc4\u9732.\n\n\n\u5e94\u7528\u5728\u5f00\u542f \nstrictmode\n \u7684\u60c5\u51b5\u4e0b, \u53ef\u4ee5\u53d1\u73b0\u66f4\u591a\u7684\u8d44\u6e90\u6cc4\u9732\u60c5\u51b5. \u4f46\u4ec5\u9650\u4e8e\u53d1\u73b0.\n\n\n\u4e00\u4e2a\u6bd4\u8f83\u63a8\u8350\u7684\u7528\u4e8e\u5b9a\u4e49\u5e94\u7528\u5185\u5b58\u6cc4\u9732\u7684\u5de5\u5177\u662f \nLeakCanary\n\n\n\n\n\n\nnative\u8fdb\u7a0b\u5185\u5b58\u6cc4\u9732\n\n\n\u57fa\u4e8ebionic\u7684\u5185\u5b58\u6cc4\u9732\u5206\u6790\u5de5\u5177\n, \u8be5\u5de5\u5177\u5bf9\u4e8eRD\u4f7f\u7528\u8981\u6c42\u504f\u9ad8.\n\n\n\n\n\n\nbugreport \u4fe1\u606f\u5206\u6790\n\n\n\u89c1\u5916\u90e8\u6587\u6863.\n\n\n\n\n\n\n\n\n\u57fa\u7840\u6982\u5ff5\n\n\nVSS - Virtual Set Size \u865a\u62df\u8017\u7528\u5185\u5b58\uff08\u5305\u542b\u5171\u4eab\u5e93\u5360\u7528\u7684\u5185\u5b58\uff09\nRSS - Resident Set Size \u5b9e\u9645\u4f7f\u7528\u7269\u7406\u5185\u5b58\uff08\u5305\u542b\u5171\u4eab\u5e93\u5360\u7528\u7684\u5185\u5b58\uff09\nPSS - Proportional Set Size \u5b9e\u9645\u4f7f\u7528\u7684\u7269\u7406\u5185\u5b58, USS + \u6bd4\u4f8b\u5206\u914d\u5171\u4eab\u5e93\u5360\u7528\u7684\u5185\u5b58\uff08[\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u5171\u4eab\u7684\u5185\u5b58(RSS - USS)] / [\u5206\u4eab\u5171\u4eab\u5185\u5b58\u7684\u8fdb\u7a0b\u6570\u91cf]\uff09.\nUSS - Unique Set Size \u8fdb\u7a0b\u72ec\u81ea\u5360\u7528\u7684\u7269\u7406\u5185\u5b58\uff08\u4e0d\u5305\u542b\u5171\u4eab\u5e93\u5360\u7528\u7684\u5185\u5b58\uff09\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u5982\u679c\u770b\u8fdb\u7a0b\u72ec\u5360\u5185\u5b58\uff0c\u3000\u5219\u4f7f\u7528USS. \u4f46\u662f\u4e00\u822c\u8003\u8651\u5230\u5171\u4eab\u5185\u5b58\u7684\u60c5\u51b5, \u5927\u90e8\u5206\u90fd\u662f\u4f9d\u636ePSS\u67e5\u770b\u5bf9\u5e94\u8fdb\u7a0b\u7684\u5185\u5b58\u5360\u7528.\n\n\n\nshared clean: \u5e72\u51c0\u7684\u5171\u4eab\u6570\u636e, \u4e5f\u5c31\u662f\u8bf4, \u5f53\u524d\u6709\u591a\u4e2a\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u6307\u5411\u8be5\u7269\u7406\u7a7a\u95f4, \u4e14\u5f53\u524d\u8fdb\u7a0b\u7a7a\u95f4\u8be5\u6570\u636e\u4e0edisk\u4e0a\u4e00\u81f4.\nshared dirty: \u810f\u5171\u4eab\u6570\u636e, \u4e0e\u4e0a\u9762\u5bf9\u5e94, \u8be5\u8fdb\u7a0b\u7a7a\u95f4\u7684\u5171\u4eab\u6570\u636e\u4e0edisk\u4e0a\u6570\u636e\u4e0d\u4e00\u81f4.\nprivate clean: \u8fdb\u7a0b\u79c1\u6709\u5e72\u51c0\u6570\u636e, \u4e0edisk\u6570\u636e\u4e00\u81f4.\nprivate dirty: \u8fdb\u7a0b\u79c1\u6709\u810f\u6570\u636e, \u4e0edisk\u6570\u636e\u4e0d\u4e00\u81f4.\n\n\n\n\n\n\u7cfb\u7edf\u5185\u5b58\u4fe1\u606f\u5206\u6790\n\n\nlogcat \u8f93\u51fa \n\n\ndalvik\u65e5\u5fd7\u6253\u5370\n\n\n\u573a\u666f: \u5728\u5e94\u7528\u968f\u673a\u51fa\u73b0\u6162\u65f6, \u53ef\u4ee5\u770b\u770b\u90a3\u6bb5\u65f6\u95f4logcat\u7684\u8f93\u51fa, \u662f\u5426\u5305\u542bGC\u7684\u4e00\u4e9b\u4fe1\u606f. GC\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5e94\u7528\u6162, \u800c\u7cfb\u7edf\u53d1\u8d77\u7684GC\u5219\u610f\u5473\u7740\u5185\u5b58\u4e0d\u591f, \u53ef\u80fd\u51fa\u73b0\u4ece\u78c1\u76d8\u52a0\u8f7d\u7684\u60c5\u51b5.\n\n\n\u5728logcat\u4e2d\u4f1a\u6253\u5370dalvik\u7684\u5783\u573e\u56de\u6536\u4fe1\u606f.\n\n\nD/dalvikvm: \nGC_Reason\n \nAmount_freed\n, \nHeap_stats\n, \nExternal_memory_stats\n, \nPause_time\n\nD/dalvikvm( 9050): GC_CONCURRENT freed 2049K, 65% free 3571K/9991K, external 4703K/5261K, paused 2ms+2ms\n\n\n\n\n\n\n\nGC_Reason\n:\n\n\n\nGC_CONCURRENT\n\n    \u5728\u60a8\u7684\u5806\u5f00\u59cb\u5360\u7528\u5185\u5b58\u65f6\u53ef\u4ee5\u91ca\u653e\u5185\u5b58\u7684\u5e76\u53d1\u5783\u573e\u56de\u6536\u3002\n\nGC_FOR_MALLOC\n\n    \u5806\u5df2\u6ee1\u800c\u7cfb\u7edf\u4e0d\u5f97\u4e0d\u505c\u6b62\u60a8\u7684\u5e94\u7528\u5e76\u56de\u6536\u5185\u5b58\u65f6\uff0c\u60a8\u7684\u5e94\u7528\u5c1d\u8bd5\u5206\u914d\u5185\u5b58\u800c\u5f15\u8d77\u7684\u5783\u573e\u56de\u6536\u3002\n\nGC_HPROF_DUMP_HEAP\n\n    \u5f53\u60a8\u8bf7\u6c42\u521b\u5efa HPROF \u6587\u4ef6\u6765\u5206\u6790\u5806\u65f6\u51fa\u73b0\u7684\u5783\u573e\u56de\u6536\u3002\n\nGC_EXPLICIT\n\n    \u663e\u5f0f\u5783\u573e\u56de\u6536\uff0c\u4f8b\u5982\u5f53\u60a8\u8c03\u7528 gc() \u65f6\uff08\u60a8\u5e94\u907f\u514d\u8c03\u7528\uff0c\u800c\u5e94\u4fe1\u4efb\u5783\u573e\u56de\u6536\u4f1a\u6839\u636e\u9700\u8981\u8fd0\u884c\uff09\u3002\n\nGC_EXTERNAL_ALLOC\n\n    \u8fd9\u4ec5\u9002\u7528\u4e8e API \u7ea7\u522b 10 \u53ca\u66f4\u4f4e\u7ea7\u522b\uff08\u66f4\u65b0\u7248\u672c\u4f1a\u5728 Dalvik \u5806\u4e2d\u5206\u914d\u4efb\u4f55\u5185\u5b58\uff09\u3002\u5916\u90e8\u5206\u914d\u5185\u5b58\u7684\u5783\u573e\u56de\u6536\uff08\u4f8b\u5982\u5b58\u50a8\u5728\u539f\u751f\u5185\u5b58\u6216 NIO \u5b57\u8282\u7f13\u51b2\u533a\u4e2d\u7684\u50cf\u7d20\u6570\u636e\uff09\u3002 \n\n\n\nAmount_freed\n:\n\n\n\u4ece\u6b64\u6b21\u5783\u573e\u56de\u6536\u4e2d\u56de\u6536\u7684\u5185\u5b58\u91cf\u3002\n\n\n\nHeap_stats\n:\n\n\n\n\u5806\u7684\u53ef\u7528\u7a7a\u95f4\u767e\u5206\u6bd4\u4e0e\uff08\u6d3b\u52a8\u5bf9\u8c61\u6570\u91cf\uff09/\uff08\u5806\u603b\u5927\u5c0f\uff09\u3002\n\n\n\n\nExternal_memory_stats\n:\n\n\n\nAPI \u7ea7\u522b 10 (Android3.0 \u4ee5\u4e0b)\u53ca\u66f4\u4f4e\u7ea7\u522b\u7684\u5916\u90e8\u5206\u914d\u5185\u5b58\uff08\u5df2\u5206\u914d\u5185\u5b58\u91cf\uff09/\uff08\u53d1\u751f\u56de\u6536\u7684\u9650\u503c\uff09. \u800c\u65b0API\u4e2d, \u7edf\u4e00\u7531dalvik\u7ba1\u7406.\n\n\n\n\nPause_time\n\n\n\n\n\u5806\u8d8a\u5927\uff0c\u6682\u505c\u65f6\u95f4\u8d8a\u957f\u3002\u5e76\u53d1\u6682\u505c\u65f6\u95f4\u663e\u793a\u4e86\u4e24\u4e2a\u6682\u505c\uff1a\u4e00\u4e2a\u51fa\u73b0\u5728\u56de\u6536\u5f00\u59cb\u65f6\uff0c\u53e6\u4e00\u4e2a\u51fa\u73b0\u5728\u56de\u6536\u5feb\u8981\u5b8c\u6210\u65f6\u3002\n\n\n\nart\u65e5\u5fd7\u6253\u5370\n\n\n\u4e0e Dalvik \u4e0d\u540c\uff0cART \u4e0d\u4f1a\u4e3a\u672a\u660e\u786e\u8bf7\u6c42\u7684\u5783\u573e\u56de\u6536\u8bb0\u5f55\u6d88\u606f\u3002\u53ea\u6709\u5728\u8ba4\u4e3a\u5783\u573e\u56de\u6536\u901f\u5ea6\u8f83\u6162\u65f6\u624d\u4f1a\u6253\u5370\u5783\u573e\u56de\u6536\u3002\u66f4\u786e\u5207\u5730\u8bf4\uff0c\u4ec5\u5728\u5783\u573e\u56de\u6536\u6682\u505c\u65f6\u95f4\u8d85\u8fc7 5ms \u6216\u5783\u573e\u56de\u6536\u6301\u7eed\u65f6\u95f4\u8d85\u8fc7 100ms \u65f6\u3002\u5982\u679c\u5e94\u7528\u672a\u5904\u4e8e\u53ef\u5bdf\u89c9\u7684\u6682\u505c\u8fdb\u7a0b\u72b6\u6001\uff0c\u90a3\u4e48\u5176\u5783\u573e\u56de\u6536\u4e0d\u4f1a\u88ab\u89c6\u4e3a\u8f83\u6162\u3002\u59cb\u7ec8\u4f1a\u8bb0\u5f55\u663e\u5f0f\u5783\u573e\u56de\u6536\u3002\n\n\nI/art: \nGC_Reason\n \nGC_Name\n \nObjects_freed\n(\nSize_freed\n) AllocSpace Objects, \nLarge_objects_freed\n(\nLarge_object_size_freed\n) \nHeap_stats\n LOS objects, \nPause_time(s)\n\n\nI/art : Explicit concurrent mark sweep GC freed 104710(7MB) AllocSpace objects, 21(416KB) LOS objects, 33% free, 25MB/38MB, paused 1.230ms total 67.216ms\n\n\n\n\n\nGC_Reason\n:\n\n\n\nConcurrent\n\n    \u4e0d\u4f1a\u6682\u505c\u5e94\u7528\u7ebf\u7a0b\u7684\u5e76\u53d1\u5783\u573e\u56de\u6536\u3002\u6b64\u5783\u573e\u56de\u6536\u5728\u540e\u53f0\u7ebf\u7a0b\u4e2d\u8fd0\u884c\uff0c\u800c\u4e14\u4e0d\u4f1a\u963b\u6b62\u5206\u914d\u3002\n\nAlloc\n\n    \u60a8\u7684\u5e94\u7528\u5728\u5806\u5df2\u6ee1\u65f6\u5c1d\u8bd5\u5206\u914d\u5185\u5b58\u5f15\u8d77\u7684\u5783\u573e\u56de\u6536\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5206\u914d\u7ebf\u7a0b\u4e2d\u53d1\u751f\u4e86\u5783\u573e\u56de\u6536\u3002\n\nExplicit\n\n    \u7531\u5e94\u7528\u660e\u786e\u8bf7\u6c42\u7684\u5783\u573e\u56de\u6536\uff0c\u4f8b\u5982\uff0c\u901a\u8fc7\u8c03\u7528 gc() \u6216 gc()\u3002\u4e0e Dalvik \u76f8\u540c\uff0c\u5728 ART \u4e2d\uff0c\u6700\u4f73\u505a\u6cd5\u662f\u60a8\u5e94\u4fe1\u4efb\u5783\u573e\u56de\u6536\u5e76\u907f\u514d\u8bf7\u6c42\u663e\u5f0f\u5783\u573e\u56de\u6536\uff08\u5982\u679c\u53ef\u80fd\uff09\u3002\u4e0d\u5efa\u8bae\u4f7f\u7528\u663e\u5f0f\u5783\u573e\u56de\u6536\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f1a\u963b\u6b62\u5206\u914d\u7ebf\u7a0b\u5e76\u4e0d\u5fc5\u8981\u5730\u6d6a\u8d39 CPU \u5468\u671f\u3002\u5982\u679c\u663e\u5f0f\u5783\u573e\u56de\u6536\u5bfc\u81f4\u5176\u4ed6\u7ebf\u7a0b\u88ab\u62a2\u5360\uff0c\u90a3\u4e48\u5b83\u4eec\u4e5f\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5361\u987f\uff08\u5e94\u7528\u4e2d\u51fa\u73b0\u95f4\u65ad\u3001\u6296\u52a8\u6216\u6682\u505c\uff09\u3002\n\nNativeAlloc\n\n    \u539f\u751f\u5206\u914d\uff08\u5982\u4f4d\u56fe\u6216 RenderScript \u5206\u914d\u5bf9\u8c61\uff09\u5bfc\u81f4\u51fa\u73b0\u539f\u751f\u5185\u5b58\u538b\u529b\uff0c\u8fdb\u800c\u5f15\u8d77\u7684\u56de\u6536\u3002\n\nCollectorTransition\n\n    \u7531\u5806\u8f6c\u6362\u5f15\u8d77\u7684\u56de\u6536\uff1b\u6b64\u56de\u6536\u7531\u8fd0\u884c\u65f6\u5207\u6362\u5783\u573e\u56de\u6536\u5f15\u8d77\u3002\u56de\u6536\u5668\u8f6c\u6362\u5305\u62ec\u5c06\u6240\u6709\u5bf9\u8c61\u4ece\u7a7a\u95f2\u5217\u8868\u7a7a\u95f4\u590d\u5236\u5230\u78b0\u649e\u6307\u9488\u7a7a\u95f4\uff08\u53cd\u4e4b\u4ea6\u7136\uff09\u3002\u5f53\u524d\uff0c\u56de\u6536\u5668\u8f6c\u6362\u4ec5\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\u51fa\u73b0\uff1a\u5728 RAM \u8f83\u5c0f\u7684\u8bbe\u5907\u4e0a\uff0c\u5e94\u7528\u5c06\u8fdb\u7a0b\u72b6\u6001\u4ece\u53ef\u5bdf\u89c9\u7684\u6682\u505c\u72b6\u6001\u53d8\u66f4\u4e3a\u53ef\u5bdf\u89c9\u7684\u975e\u6682\u505c\u72b6\u6001\uff08\u53cd\u4e4b\u4ea6\u7136\uff09\u3002 \n\nHomogeneousSpaceCompact\n\n    \u9f50\u6027\u7a7a\u95f4\u538b\u7f29\u662f\u7a7a\u95f2\u5217\u8868\u7a7a\u95f4\u5230\u7a7a\u95f2\u5217\u8868\u7a7a\u95f4\u538b\u7f29\uff0c\u901a\u5e38\u5728\u5e94\u7528\u8fdb\u5165\u5230\u53ef\u5bdf\u89c9\u7684\u6682\u505c\u8fdb\u7a0b\u72b6\u6001\u65f6\u53d1\u751f\u3002\u8fd9\u6837\u505a\u7684\u4e3b\u8981\u539f\u56e0\u662f\u51cf\u5c11 RAM \u4f7f\u7528\u91cf\u5e76\u5bf9\u5806\u8fdb\u884c\u788e\u7247\u6574\u7406\u3002 \n\nDisableMovingGc\n\n    \u8fd9\u4e0d\u662f\u771f\u6b63\u7684\u5783\u573e\u56de\u6536\u539f\u56e0\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u53d1\u751f\u5e76\u53d1\u5806\u538b\u7f29\u65f6\uff0c\u7531\u4e8e\u4f7f\u7528\u4e86 GetPrimitiveArrayCritical\uff0c\u56de\u6536\u906d\u5230\u963b\u6b62\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5f3a\u70c8\u5efa\u8bae\u4e0d\u8981\u4f7f\u7528 GetPrimitiveArrayCritical\uff0c\u56e0\u4e3a\u5b83\u5728\u79fb\u52a8\u56de\u6536\u5668\u65b9\u9762\u5177\u6709\u9650\u5236\u3002 \n\nHeapTrim\n\n    \u8fd9\u4e0d\u662f\u5783\u573e\u56de\u6536\u539f\u56e0\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u5806\u4fee\u526a\u5b8c\u6210\u4e4b\u524d\u56de\u6536\u4f1a\u4e00\u76f4\u53d7\u5230\u963b\u6b62\u3002 \n\n\nGC_Name\n:\n\n\n\nART \u5177\u6709\u53ef\u4ee5\u8fd0\u884c\u7684\u591a\u79cd\u4e0d\u540c\u7684\u5783\u573e\u56de\u6536\u3002 \n\n\nConcurrent mark sweep (CMS)\n\n    \u6574\u4e2a\u5806\u56de\u6536\u5668\uff0c\u4f1a\u91ca\u653e\u548c\u56de\u6536\u6620\u50cf\u7a7a\u95f4\u4ee5\u5916\u7684\u6240\u6709\u5176\u4ed6\u7a7a\u95f4\u3002\n\nConcurrent partial mark sweep\n\n    \u51e0\u4e4e\u6574\u4e2a\u5806\u56de\u6536\u5668\uff0c\u4f1a\u56de\u6536\u9664\u4e86\u6620\u50cf\u7a7a\u95f4\u548c zygote \u7a7a\u95f4\u4ee5\u5916\u7684\u6240\u6709\u5176\u4ed6\u7a7a\u95f4\u3002 \n\nConcurrent sticky mark sweep\n\n    \u751f\u6210\u56de\u6536\u5668\uff0c\u53ea\u80fd\u91ca\u653e\u81ea\u4e0a\u6b21\u5783\u573e\u56de\u6536\u4ee5\u6765\u5206\u914d\u7684\u5bf9\u8c61\u3002\u6b64\u5783\u573e\u56de\u6536\u6bd4\u5b8c\u6574\u6216\u90e8\u5206\u6807\u8bb0\u6e05\u9664\u8fd0\u884c\u5f97\u66f4\u9891\u7e41\uff0c\u56e0\u4e3a\u5b83\u66f4\u5feb\u901f\u4e14\u6682\u505c\u65f6\u95f4\u66f4\u77ed\u3002 \n\nMarksweep + semispace\n\n    \u975e\u5e76\u53d1\u3001\u590d\u5236\u5783\u573e\u56de\u6536\uff0c\u7528\u4e8e\u5806\u8f6c\u6362\u4ee5\u53ca\u9f50\u6027\u7a7a\u95f4\u538b\u7f29\uff08\u5bf9\u5806\u8fdb\u884c\u788e\u7247\u6574\u7406\uff09\u3002 \n\n\nObjects_freed\n:\n\n\n\u6b64\u6b21\u5783\u573e\u56de\u6536\u4ece\u975e\u5927\u578b\u5bf9\u8c61\u7a7a\u95f4\u56de\u6536\u7684\u5bf9\u8c61\u6570\u91cf\u3002\n\n\nSize_freed\n:\n\n\n\u6b64\u6b21\u5783\u573e\u56de\u6536\u4ece\u975e\u5927\u578b\u5bf9\u8c61\u7a7a\u95f4\u56de\u6536\u7684\u5b57\u8282\u6570\u91cf\u3002\n\n\nLarge_objects_freed\n:\n\n\n\u6b64\u6b21\u5783\u573e\u56de\u6536\u4ece\u5927\u578b\u5bf9\u8c61\u7a7a\u95f4\u56de\u6536\u7684\u5bf9\u8c61\u6570\u91cf\u3002\n\n\nLarge_object_size_freed\n:\n\n\n\u6b64\u6b21\u5783\u573e\u56de\u6536\u4ece\u5927\u578b\u5bf9\u8c61\u7a7a\u95f4\u56de\u6536\u7684\u5b57\u8282\u6570\u91cf\u3002\n\n\nHeap_stats\n\n\n\u7a7a\u95f2\u767e\u5206\u6bd4\u4e0e\uff08\u6d3b\u52a8\u5bf9\u8c61\u6570\u91cf\uff09/\uff08\u5806\u603b\u5927\u5c0f\uff09\u3002\n\n\nPause_time(s)\n\n\n\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6682\u505c\u65f6\u95f4\u4e0e\u5783\u573e\u56de\u6536\u8fd0\u884c\u65f6\u4fee\u6539\u7684\u5bf9\u8c61\u5f15\u7528\u6570\u91cf\u6210\u6b63\u6bd4\u3002\u5f53\u524d\uff0cART CMS \u5783\u573e\u56de\u6536\u4ec5\u5728\u5783\u573e\u56de\u6536\u5373\u5c06\u5b8c\u6210\u65f6\u6682\u505c\u4e00\u6b21\u3002\u79fb\u52a8\u7684\u5783\u573e\u56de\u6536\u6682\u505c\u65f6\u95f4\u8f83\u957f\uff0c\u4f1a\u5728\u5927\u90e8\u5206\u5783\u573e\u56de\u6536\u671f\u95f4\u6301\u7eed\u51fa\u73b0\u3002\n\n\nandroid\u81ea\u5e26\u5de5\u5177\n\n\ndumpsys meminfo \n\n\nhttps://developer.android.com/studio/profile/investigate-ram.html\nhttp://gityuan.com/2016/01/02/memory-analysis-command/\n\n\n\u573a\u666f: \u67e5\u770bdalvik\u7b49\u533a\u57df\u5185\u5b58\u60c5\u51b5.\n\n\nroot@zx1800:/data # dumpsys meminfo\nApplications Memory Usage (kB):                                           --- \u4ee5\u4e0b\u5185\u5b58\u5355\u4f4d\nUptime: 618252294 Realtime: 618252294                                     --- Realtime: \u7cfb\u7edf\u542f\u52a8\u5f00\u59cb\u8ba1\u65f6, \u5305\u542b\u4f11\u7720, \u51c6\u786e\u6027\u4f9d\u8d56\u9a71\u52a8\u5b9e\u73b0. \u5728\u9a71\u52a8\u65e0\u5b9e\u73b0\u65f6, \u4f7f\u7528Uptime.\n                                                                          --- Uptime: \u7cfb\u7edf\u542f\u52a8\u5f00\u59cb\u8ba1\u65f6, \u4e0d\u5305\u542b\u4f11\u7720.\n\nTotal PSS by process:                                                     --- \u6240\u6709\u8fdb\u7a0b PSS \u5360\u7528\u6392\u5e8f\n    24712 kB: system (pid 445)\n    19600 kB: com.china_liantong.upgrade (pid 2660)\n    17500 kB: com.china_liantong.video (pid 3002 / activities)\n    11100 kB: com.china_liantong.oam (pid 999)\n    10627 kB: com.china_liantong.channelmanagerservice (pid 961)\n     8733 kB: com.china_liantong.live.service.LiveService (pid 2086)\n     8394 kB: com.china_liantong.ocnadservice (pid 942)\n     7622 kB: com.android.systemui (pid 677)\n     6708 kB: dhcpcd (pid 639)\n     6541 kB: com.china_liantong.epg (pid 1235)\n     6286 kB: android.process.media (pid 2041)\n     5691 kB: com.china_liantong.airsharingservice (pid 2063)\n     4466 kB: dvbserver (pid 211)\n     4041 kB: mediaserver (pid 196)\n     3890 kB: com.china_liantong.xmppservice (pid 887)\n     3354 kB: com.china_liantong.tvmediaplayerservice (pid 905)\n     3239 kB: com.china_liantong.launcher:SettingContentProvider (pid 1165)\n     2466 kB: surfaceflinger (pid 183)\n     2214 kB: com.china_liantong.inputmethod.pinyin (pid 773)\n     2122 kB: com.china_liantong.dtvsyskeyservice (pid 980)\n     1955 kB: logd (pid 178)\n     1943 kB: com.china_liantong.tvframe (pid 1066)\n     1847 kB: com.china_liantong.playback (pid 923)\n     1640 kB: zygote (pid 220)\n      615 kB: sdcard (pid 1698)\n      473 kB: netd (pid 191)\n      415 kB: sysinfod (pid 184)\n      392 kB: vold (pid 182)\n      364 kB: developed (pid 222)\n      356 kB: adbd (pid 224)\n      350 kB: sh (pid 12684)\n      285 kB: /init (pid 1)\n      279 kB: dvbresourceserver (pid 210)\n      261 kB: sdcard (pid 223)\n      258 kB: avsettingd (pid 215)\n      240 kB: sh (pid 1325)\n      164 kB: ueventd (pid 159)\n      135 kB: keystore (pid 201)\n       82 kB: servicemanager (pid 181)\n       81 kB: installd (pid 199)\n       76 kB: healthd (pid 179)\n       62 kB: lmkd (pid 180)\n       26 kB: drmserver (pid 195)\n       26 kB: systemtaskd (pid 202)\n       22 kB: frontpaneld (pid 207)\n       15 kB: common_time (pid 189)\n       15 kB: frontpadserver (pid 216)\n       15 kB: dcaseventsvr (pid 219)\n        9 kB: sh (pid 190)\n        9 kB: debuggerd (pid 192)\n\nTotal PSS by OOM adjustment:                                              --- \u4ee5OOM\u7c7b\u522b\u5212\u5206(TODO: \u6bcf\u4e2a\u7c7b\u522b\u4f9d\u636e\u548c\u542b\u4e49)\n    26301 kB: Native\n                6708 kB: dhcpcd (pid 639)\n                4466 kB: dvbserver (pid 211)\n                4041 kB: mediaserver (pid 196)\n                2466 kB: surfaceflinger (pid 183)\n                1955 kB: logd (pid 178)\n                1640 kB: zygote (pid 220)\n                 615 kB: sdcard (pid 1698)\n                 473 kB: netd (pid 191)\n                 415 kB: sysinfod (pid 184)\n                 392 kB: vold (pid 182)\n                 364 kB: developed (pid 222)\n                 356 kB: adbd (pid 224)\n                 350 kB: sh (pid 12684)\n                 285 kB: /init (pid 1)\n                 279 kB: dvbresourceserver (pid 210)\n                 261 kB: sdcard (pid 223)\n                 258 kB: avsettingd (pid 215)\n                 240 kB: sh (pid 1325)\n                 164 kB: ueventd (pid 159)\n                 135 kB: keystore (pid 201)\n                  82 kB: servicemanager (pid 181)\n                  81 kB: installd (pid 199)\n                  76 kB: healthd (pid 179)\n                  62 kB: lmkd (pid 180)\n                  26 kB: drmserver (pid 195)\n                  26 kB: systemtaskd (pid 202)\n                  22 kB: frontpaneld (pid 207)\n                  15 kB: common_time (pid 189)\n                  15 kB: frontpadserver (pid 216)\n                  15 kB: dcaseventsvr (pid 219)\n                   9 kB: sh (pid 190)\n                   9 kB: debuggerd (pid 192)\n    24712 kB: System\n               24712 kB: system (pid 445)\n    48956 kB: Persistent\n               11100 kB: com.china_liantong.oam (pid 999)\n               10627 kB: com.china_liantong.channelmanagerservice (pid 961)\n                8394 kB: com.china_liantong.ocnadservice (pid 942)\n                7622 kB: com.android.systemui (pid 677)\n                3890 kB: com.china_liantong.xmppservice (pid 887)\n                3354 kB: com.china_liantong.tvmediaplayerservice (pid 905)\n                2122 kB: com.china_liantong.dtvsyskeyservice (pid 980)\n                1847 kB: com.china_liantong.playback (pid 923)\n    27280 kB: Foreground\n               17500 kB: com.china_liantong.video (pid 3002 / activities)\n                6541 kB: com.china_liantong.epg (pid 1235)\n                3239 kB: com.china_liantong.launcher:SettingContentProvider (pid 1165)\n     1943 kB: Visible\n                1943 kB: com.china_liantong.tvframe (pid 1066)\n     2214 kB: Perceptible\n                2214 kB: com.china_liantong.inputmethod.pinyin (pid 773)\n     6286 kB: Home\n                6286 kB: android.process.media (pid 2041)\n    34024 kB: B Services  (\u6ce8\u91ca: \u8001\u65e7\u7684, \u4e0d\u592a\u53ef\u80fd\u88ab\u4f7f\u7528\u5230\u7684\u670d\u52a1\u8fdb\u7a0b)\n               19600 kB: com.china_liantong.upgrade (pid 2660)\n                8733 kB: com.china_liantong.live.service.LiveService (pid 2086)\n                5691 kB: com.china_liantong.airsharingservice (pid 2063)\n\nTotal PSS by category:                                               --- \u4ee5 category \u5212\u5206\n    49530 kB: Native\n    35318 kB: Dalvik\n    26569 kB: .so mmap\n    17158 kB: .oat mmap\n    16357 kB: .art mmap\n     8144 kB: .dex mmap\n     6671 kB: Stack\n     2822 kB: Dalvik Other\n     2635 kB: Other mmap\n     2160 kB: .ttf mmap\n     1892 kB: Other dev\n     1581 kB: Unknown\n      843 kB: .apk mmap\n       36 kB: EGL mtrack\n        0 kB: Cursor\n        0 kB: Ashmem\n        0 kB: Gfx dev\n        0 kB: .jar mmap\n        0 kB: GL mtrack\n        0 kB: Other mtrack\n\nTotal RAM: 443652 kB (status critical)\n Free RAM: 137634 kB (40310 cached pss + 9492 cached kernel + 87832 free)\n Used RAM: 168782 kB (131406 used pss + 37376 kernel)\n Lost RAM: 137236 kB\n     ZRAM: 10684 kB physical used for 32252 kB in swap (196604 kB total swap)\n           \u538b\u7f29\u540e\u5185\u5b58\u5360\u7528             \u88ab\u538b\u7f29\u5185\u5b58\n      KSM: 39500 kB saved from shared 5844 kB\n           85420 kB unshared; 99276 kB volatile\n   Tuning: 96 (large 96), oom 10240 kB, restore limit 3413 kB (low-ram)\n\n\n\n\n\nprocrank \n\n\n\u573a\u666f: \u67e5\u770b\u5404\u4e2a\u8fdb\u7a0b\u7684PSS/USS \u5e76\u6bd4\u8f83\n\n\nshell@zx1800:/ # procrank\n  PID       Vss      Rss      Pss      Uss  cmdline\n  884   589628K   89320K   30444K   23128K  com.china_liantong.launcher\n  447   617060K   74620K   25695K   20904K  system_server\n 1139   572780K   61160K   14848K   10160K  com.china_liantong.browserreceiver\n  209   125160K   25312K   13834K   12696K  /system/bin/dvbserver\n 1180   549556K   65992K   12433K    6192K  com.china_liantong.upgrade\n  807   554556K   48092K    9636K    7160K  com.china_liantong.ocnadservice\n  222   516596K   54256K    8960K    3152K  zygote\n  864   547692K   47220K    8431K    6024K  com.china_liantong.oam\n  827   552092K   46208K    8180K    5840K  com.china_liantong.channelmanagerservice\n  223    71580K   18580K    7156K    3928K  /system/bin/developed\n  955   529948K   44620K    6591K    4000K  com.china_liantong.epg\n  534   525112K   41324K    6233K    3816K  com.android.systemui\n  516   523764K   39424K    5949K    3884K  android.process.media\n  183    55092K   17936K    5935K    4284K  /system/bin/surfaceflinger\n 1066   525392K   41296K    5140K    2712K  com.china_liantong.live.service.LiveService\n  771   529900K   40224K    4864K    2888K  com.china_liantong.tvmediaplayerservice\n  753   525476K   37228K    4681K    2804K  com.china_liantong.xmppservice\n  201    53500K   12232K    4421K    3460K  /system/bin/mediaserver\n 1206   521008K   36324K    4288K    2580K  com.china_liantong.mytv\n  979   527892K   36256K    4201K    2080K  com.china_liantong.launcher:SettingContentProvider\n 1095   526240K   36480K    4145K    2368K  com.china_liantong.airsharingservice\n  601   518952K   37128K    3898K    1984K  com.china_liantong.inputmethod.pinyin\n  789   526912K   32468K    3309K    1832K  com.china_liantong.playback\n 1048   520468K   32616K    2799K     968K  com.china_liantong.live\n  846   525972K   32620K    2787K    1336K  com.china_liantong.dtvsyskeyservice\n 1252   519376K   31716K    2687K    1260K  com.china_liantong.video\n  907   524920K   32120K    2676K    1236K  com.china_liantong.tvframe\n  511    19896K    5168K    2350K    1208K  /system/bin/dhcpcd\n  210    25496K    6480K    1662K    1316K  /system/bin/avsettingd\n  178    18252K    2596K    1509K    1476K  /system/bin/logd\n  199    23564K    4880K    1273K    1004K  /system/bin/drmserver\n  217    18936K    2864K     826K     740K  /system/bin/frontpadserver\n  182    19568K    3176K     816K     636K  /system/bin/vold\n  205    12508K    2804K     718K     572K  /system/bin/keystore\n  184    16580K    2580K     681K     536K  /system/bin/sysinfod\n  197    21796K    1672K     538K     480K  /system/bin/netd\n 2135     9192K    1100K     532K     520K  procrank\n  189    17484K    1748K     481K     420K  /system/bin/common_time\n  208    17492K    1792K     479K     436K  /system/bin/dvbresourceserver\n  220    16400K    1672K     434K     388K  /system/bin/dcaseventsvr\n  225    16980K     508K     416K     416K  /sbin/adbd\n  224    15412K    1048K     356K     336K  /system/bin/sdcard\n 1434     9324K    1020K     338K     244K  sh\n  186    14820K     428K     336K     332K  /sbin/watchdog\n    1     8860K     396K     327K     316K  /init\n 1428     9324K    1008K     326K     232K  /system/bin/sh\n  206    14460K    1036K     310K     288K  /system/bin/systemtaskd\n  203     9412K    1012K     272K     248K  /system/bin/installd\n  207    14456K     992K     266K     244K  /system/bin/frontpaneld\n  179     9828K     316K     260K     256K  /sbin/healthd\n  180    10624K    1664K     184K     116K  /system/bin/lmkd\n  181     9460K     792K      98K      76K  /system/bin/servicemanager\n  198    10056K    1108K      64K      28K  /system/bin/debuggerd\n  160     8852K      56K      11K       4K  /sbin/ueventd\n                           ------   ------  ------\n                          230106K  155544K  TOTAL\n\nRAM: 443652K total, 38684K free, 0K buffers, 98768K cached, 1384K shmem, 21560K slab\n\n\n\n\n\ncat /proc/meminfo \n\n\n\u573a\u666f: \u7cfb\u7edf\u5185\u5b58\u8be6\u7ec6\u4fe1\u606f\n\n\nshell@zx1800:/ # cat /proc/meminfo                                             \nMemTotal:         443652 kB                      --- \u7cfb\u7edf\u53ef\u89c1\u7684\u603b\u7269\u7406\u5185\u5b58\nMemFree:           38584 kB                      --- \u7cfb\u7edf\u4e2d\u672a\u4f7f\u7528\u7684\u7269\u7406\u5185\u5b58\nMemAvailable:     125556 kB                      --- \u53ef\u7528\u5185\u5b58 = MemFree + Cached + Buffers\nBuffers:               0 kB                      --- \u7528\u4e8e\u6587\u4ef6\u7f13\u51b2\u7684\u5185\u5b58\u5927\u5c0f\nCached:            98768 kB                      --- \u7528\u4e8e\u9ad8\u901f\u7f13\u5b58\u5668\u5360\u7528\u7684\u5185\u5b58\u5927\u5c0f\nSwapCached:          128 kB                      --- \u7528\u4e8e\u9ad8\u901f\u7f13\u5b58\u5668\u5360\u7528\u7684swap\u5927\u5c0f\nActive:           143160 kB                      --- \u6d3b\u8dc3\u4f7f\u7528\u4e2d\u7684\u5185\u5b58, \u4e00\u822c\u4e0d\u4f1a\u56de\u6536. = anon + file\nInactive:          87104 kB                      --- \u6700\u8fd1\u672a\u88ab\u4f7f\u7528\u7684\u5185\u5b58, \u53ef\u4ee5\u88ab\u56de\u6536. = anon + file\nActive(anon):      94348 kB\nInactive(anon):    38532 kB\nActive(file):      48812 kB\nInactive(file):    48572 kB\nUnevictable:           0 kB                      \nMlocked:               0 kB\nHighTotal:             0 kB                      \nHighFree:              0 kB\nLowTotal:         443652 kB\nLowFree:           38584 kB\nSwapTotal:        196604 kB                      --- swap\u5206\u533a\u5927\u5c0f\nSwapFree:         193784 kB                      --- swap\u5206\u533a\u5269\u4f59\u7a7a\u95f4\nDirty:                 0 kB                      \nWriteback:             0 kB\nAnonPages:        131492 kB                      --- \u533f\u540d\u9875\nMapped:            90688 kB                      --- map\u7684\u5185\u5b58\nShmem:              1384 kB                      --- \u5171\u4eab\u5185\u5b58, \u8ddf\u6587\u4ef6\u65e0\u5173\u7684\nSlab:              21604 kB                      --- kernel slab\u5206\u914d\u5668\nSReclaimable:       5464 kB\nSUnreclaim:        16140 kB\nKernelStack:        5424 kB                      --- \u5185\u6838\u6808\nPageTables:         7932 kB                      --- \u7ba1\u7406\u9875\u7684\u6570\u636e\u7ed3\u6784\u5927\u5c0f\nNFS_Unstable:          0 kB\nBounce:                0 kB\nWritebackTmp:          0 kB\nCommitLimit:      418428 kB\nCommitted_AS:    8764944 kB\nVmallocTotal:     565248 kB\nVmallocUsed:       55952 kB\nVmallocChunk:     472068 kB\n\n\n\n\n\nvmstat \n\n\n\u573a\u666f: \u76d1\u63a7\u7cfb\u7edf\u72b6\u6001.\n\n\n\u8be5\u5de5\u5177\u53ef\u4ee5\u67e5\u770b\u7cfb\u7edf\u5185\u5b58\u4fe1\u606f, \u8fdb\u7a0b\u961f\u5217, \u7cfb\u7edf\u5207\u6362, CPU\u65f6\u95f4\u5360\u6bd4\u7b49\u4fe1\u606f, \u5468\u671f\u6027\u52a8\u6001\u8f93\u51fa.\n\n\nprocs  memory                       system          cpu              \n r  b    free mapped   anon   slab    in   cs  flt  us ni sy id wa ir\n \n0\n  \n0\n   \n38628\n  \n90844\n \n131992\n  \n21688\n  \n5268\n \n10257\n    \n0\n   \n5\n  \n0\n  \n6\n \n99\n  \n0\n  \n0\n\n \n0\n  \n0\n   \n38628\n  \n90844\n \n132008\n  \n21688\n  \n5271\n \n10367\n    \n0\n   \n8\n  \n0\n  \n9\n \n99\n  \n0\n  \n0\n\n \n0\n  \n0\n   \n38628\n  \n90844\n \n132048\n  \n21688\n  \n5150\n \n10497\n    \n0\n  \n10\n  \n1\n  \n8\n \n99\n  \n0\n  \n0\n\n \n0\n  \n0\n   \n38628\n  \n90844\n \n132100\n  \n21688\n  \n5112\n \n10180\n    \n0\n   \n8\n  \n0\n  \n3\n \n99\n  \n0\n  \n0\n\n \n0\n  \n0\n   \n38628\n  \n90844\n \n132120\n  \n21688\n  \n5221\n \n10289\n    \n0\n   \n8\n  \n0\n  \n4\n \n99\n  \n0\n  \n0\n\n\n\n\n\n\n\u603b\u517115\u5217\u53c2\u6570, \u4e2a\u53c2\u6570\u542b\u4e49\u5982\u4e0b:\n\n\n\n\nprocs(\u8fdb\u7a0b)\n\n\nr: Running\u961f\u5217\u4e2d\u8fdb\u7a0b\u6570, \u8fd9\u4e2a\u503c\u8d85\u8fc7cpu\u4e2a\u6570\u5c31\u4f1a\u51fa\u73b0cpu\u74f6\u9888.\n\n\nb: IO wait \u7684\u8fdb\u7a0b\u6570, \u8be5\u503c\u8fc7\u5927, \u53ef\u80fd\u662f\u7b49\u5f85\u6587\u4ef6\u64cd\u4f5c\u7684\u8fdb\u7a0b\u591a\u6216\u8005\u6587\u4ef6\u8bfb\u5199\u6162.\n\n\n\n\n\n\nmemory(\u5185\u5b58)\n\n\nfree: \u53ef\u7528\u5185\u5b58\u5927\u5c0f\n\n\nmapped: mmap\u6620\u5c04\u7684\u5185\u5b58\u5927\u5c0f\n\n\nanon: \u533f\u540d\u5185\u5b58\u5927\u5c0f, \u4e00\u822c\u7531malloc\u5f15\u8d77, \u6216\u8005\u533f\u540dmmap.\n\n\nslab: slab\u7684\u5185\u5b58\u5927\u5c0f.\n\n\n\n\n\n\nsystem(\u7cfb\u7edf)\n\n\nin: \u6bcf\u4e2a\u95f4\u9694\u65f6\u95f4\u7684\u4e2d\u65ad\u6b21\u6570(\u5305\u62ec\u65f6\u949f\u4e2d\u65ad), \u8fd9\u4e2a\u503c\u8d8a\u5927, \u5185\u6838\u6d88\u8017\u7684cpu\u65f6\u95f4\u8d8a\u591a.\u9700\u8981\u67e5\u770b\n/proc/interrupts\n\u4e0b\u4e2d\u65ad\u589e\u957f\u60c5\u51b5.\n\n\ncs: \u6bcf\u4e2a\u95f4\u9694\u65f6\u95f4\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u6b21\u6570\n\n\nflt: major page faults. \u9700\u8981\u4ecedisk\u8bfb\u53d6\u6570\u636e\u7684\u7f3a\u9875\u9519\u8bef.\n\n\n\n\n\n\nCPU (\u5904\u7406\u5668)\n\n\nus: user time, \u6bd4\u8f83\u9ad8\u65f6\uff0c\u8bf4\u660e\u7528\u6237\u8fdb\u7a0b\u6d88\u8017\u7684cpu\u65f6\u95f4\u591a.\n\n\nni: nice time, \u88ab\u964d\u4f4e\u4f18\u5148\u7ea7\u7684\u8fdb\u7a0b\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u7684\u6267\u884cCPU\u65f6\u95f4\u767e\u5206\u6bd4.\n\n\nsy: system time, \u7cfb\u7edf\u5185\u6838\u6d88\u8017\u7684CPU\u767e\u5206\u6bd4\n\n\nid: idle time, \u7cfb\u7edf\u7a7a\u95f2\u65f6\u95f4\u767e\u5206\u6bd4\n\n\nwa: iowait time, CPU\u5728\u7b49\u5f85IO\u5b8c\u6210\u65f6\u95f4\u5360\u6bd4\n\n\nir: interrupt time, \u7cfb\u7edf\u4e2d\u65ad\u8017\u65f6\u5360CPU\u767e\u5206\u6bd4\n\n\n\n\n\n\n\n\n\u66f4\u591a\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f, \u8bf7\u76f4\u63a5\u67e5\u770b \n/proc/vmstat\n\nhttp://blog.csdn.net/macky0668/article/details/6839498\n\n\nlibrank \n\n\n\u573a\u666f: \u4e0eprocrank\u4e92\u8865\u4f7f\u7528, \u662fprocmem\u7684\u6269\u5c55. \u663e\u793a\u6240\u6709\u8fdb\u7a0b\u7684\u4fe1\u606f, \u9700\u8981\u5de5\u5177\u7edf\u8ba1\u5206\u7c7b. \u4e5f\u53ef\u4ee5\u7528\u6765\u67e5\u770b\u6bcf\u4e2a\u5e93\u6216\u5171\u4eab\u6587\u4ef6\u771f\u5b9e\u5360\u7528\u7684\u5185\u5b58\u5927\u5c0f.\n\n\n\u6570\u636e\u6765\u6e90\u4e0eprocmem\u4e00\u6837, \u4f46\u662fprocmem\u9488\u5bf9\u7684\u662f\u5355\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\u5360\u7528\u60c5\u51b5. \u800clibrank\u662f\u663e\u793a\u67d0\u4e2a\u5e93\u6216\u8005\u6587\u4ef6\u88ab\u54ea\u4e9b\u8fdb\u7a0b\u5171\u4eab, \u5e76\u663e\u793a\u5360\u7528\u5927\u5c0f. \u5982\u4e0b\u56fe\u6240\u793a.\n\n\n\n\n\n\n\n\ndumpcache \n\n\n\u8be5\u5de5\u5177\u662fandroid7.0\u4e4b\u540e\u624d\u6709\u7684\u5de5\u5177,\u7528\u4e8e\u67e5\u770b\u6587\u4ef6\u7cfb\u7edf\u4e2d\u6709\u6bcf\u4e2a\u6587\u4ef6\u88abcache\u5230\u5185\u5b58\u7684\u5927\u5c0f. \u8be5\u6587\u4ef6\u53ef\u4ee5\u7528\u6765\u5224\u65ad\u7f3a\u9875\u9519\u8bef\u65f6\u52a0\u8f7d\u7684\u6587\u4ef6.\n\n\n\u5728Launcher\u754c\u9762\u65f6\u7684\u8f93\u51fa\u5982\u4e0b:\n\n\n\n\n\u7a33\u5b9a\u64ad\u653e1080P\u89c6\u9891\u65f6:\n\n\n\n\n\u6309\u4e0b\u9065\u63a7\u5668\u786e\u5b9a\u952e\u663e\u793aUI\u65f6:\n\n\n\n\n\u5bf9\u6bd4, \u53ef\u4ee5\u77e5\u9053\u5728\u64ad\u653e\u8fc7\u7a0b\u4e2d, \u663e\u793aUI\u65f6\u4e3b\u8981\u52a0\u8f7d\u7684\u6587\u4ef6\u662f:\n\n\n\n\nbugreport \u4fe1\u606f\u5206\u6790 \n\n\nAndroid\u7cfb\u7edf\u60f3\u8981\u6210\u4e3a\u4e00\u4e2a\u529f\u80fd\u5b8c\u5907\uff0c\u751f\u6001\u7e41\u8363\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u90a3\u5c31\u5fc5\u987b\u63d0\u4f9b\u5b8c\u6574\u7684\u5e94\u7528\u5f00\u53d1\u73af\u5883\u3002\u800c\u5728\u5e94\u7528\u5f00\u53d1\u4e2d\uff0capp\u7a0b\u5e8f\u7684\u8c03\u8bd5\u5206\u6790\u662f\u65e5\u5e38\u751f\u4ea7\u4e2d\u8fdb\u7a0b\u4f1a\u8fdb\u884c\u7684\u5de5\u4f5c\u3002Android\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u4eba\u5458\u5206\u6790\u6574\u4e2a\u7cfb\u7edf\u5e73\u53f0\u548c\u67d0\u4e2aapp\u5728\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u4e4b\u5185\u7684\u6240\u6709\u4fe1\u606f\uff0c\u4e13\u95e8\u5f00\u53d1\u4e86bugreport\u5de5\u5177\u3002\n\n\n\n\u8be5\u5de5\u5177\u7684\u7f3a\u70b9\u662f: \n1. \u8017\u65f6\u8fc7\u957f, \u53ea\u80fd\u6293\u53d6\u5f53\u524d\u72b6\u6001.\n2. \u6293\u53d6\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u5bfc\u81f4\u7cfb\u7edf\u5f02\u5e38, \u56e0\u4e3a\u5176oom\u4f1a\u88ab\u8c03\u9ad8, \u5728\u5185\u5b58\u4e0d\u8db3\u65f6\u5bfc\u81f4\u7cfb\u7edf\u5176\u4ed6\u5e94\u7528\u88abkill.\n3. \u7531\u4e8ebugreport\u7684\u6743\u9650\u4f1a\u964d\u4f4e\u5230shell, \u800c\u5f88\u591a\u670d\u52a1\u5728\u4f1a\u62d2\u7edddumpsys\u7684\u64cd\u4f5c, \u5bfc\u81f4\u90e8\u5206\u4fe1\u606f\u65e0\u6cd5\u6293\u53d6. \n\n\n\n\n\u4f7f\u7528\u65b9\u6cd5:\n\n\n\n\n\n\n\u901a\u8fc7bugreport\u547d\u4ee4\u6293\u53d6\u4e00\u4efdbugreport\u539f\u59cb\u7684\u6587\u672clog\uff1a\n    \nshell# bugreport\ngt;/data/local/tmp/bugreport.txt\n\n\n\n\n\n\n\u5c06\u4e0a\u9762\u547d\u4ee4\u6293\u53d6\u7684bugreport.txt\u6587\u672c\u6587\u4ef6\u62f7\u8d1d\u51fa\u6765\uff0c\u4e0a\u4f20\u5230bugreport\u5206\u6790\u670d\u52a1\u5668\u4e0a\u9762\uff0c\u670d\u52a1\u5668\u4f1a\u81ea\u52a8\u751f\u6210\u7cfb\u7edf\u5f53\u524d\u72b6\u6001\u5feb\u7167\uff0c\u4e0a\u4f20\u65b9\u6cd5\u5982\u4e0b\uff1a\n  a. \u901a\u8fc7\u6d4f\u89c8\u5668\u8fdb\u5165\u670d\u52a1\u5668\u5730\u5740\uff1ahttp://10.27.254.108:8080/,\u5982\u4e0b\u56fe\uff1a\n\n\n\n\n\n\n\n\nb. \u70b9\u51fbbroswer\u6d4f\u89c8report.txt\u6587\u672c\u6587\u4ef6\uff0c\u7136\u540e\u70b9\u51fbupload\u6309\u94ae\u4e0a\u4f20\u6587\u4ef6\uff0c\u4e0a\u4f20\u540e\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u751f\u6210\u7cfb\u7edf\u72b6\u6001\u5feb\u7167\uff0c\u5feb\u7167\u540d\u79f0\u5bf9\u5e94\u5230\u4e0a\u4f20\u65f6\u95f4\uff0c\u70b9\u51fb\u5feb\u7167\u540d\u79f0\u8fdb\u5165\u7cfb\u7edf\u5206\u6790\u9875\u9762\uff0c\u5982\u4e0b\uff1a\n\n\n\n\n\u8be5\u7f51\u9875\u670d\u52a1\u5668\u7684dockerfile\u5982\u4e0b:\n\n\nFROM ubuntu:14.04\n MAINTAINER wertherzhang \nwerther0331@gmail.com\n\n\n RUN apt-get update\n\n RUN apt-get -y install openjdk-7-jdk openjdk-7-jre\n RUN apt-get -y install python\n\n RUN mkdir -p /root/chkbugreport\n RUN apt-get -y install wget\n RUN wget http://10.27.8.54/chkbugreport.tgz -O /root/chkbugreport.tgz\n RUN tar xvf /root/chkbugreport.tgz -C /tmp/\n RUN mkdir -p /root/bin\n\n ADD server.py /root/chkbugreport/\n ADD chkbugreport.jar /root/bin/\n ADD chkbugreport /usr/local/bin/\n ADD ddmlib.jar /root/bin/\n\n RUN apt-get clean\n\n ENV JAVA_HOME /usr/lib/jvm/java-7-openjdk-amd64\n ENV PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n WORKDIR /root/chkbugreport/\n\n CMD [\npython\n, \nserver.py\n]\n\n\n\n\n\n\u9644\u4ef6: \nchkbugreport-server.zip\n\n\n\u5e94\u7528\u5185\u5b58\u5206\u6790\n\n\nandroid\u81ea\u5e26\u5de5\u5177\n\n\ndumpsys meminfo \u5e94\u7528\u5185\u5b58 \n\n\n\u573a\u666f: \u67e5\u770bjava\u8fdb\u7a0b\u7684\u4e0d\u540c\u7c7b\u522b\u5185\u5b58\u5360\u7528\u60c5\u51b5, \u7279\u522b\u662f\u786e\u5b9aactivity\u662f\u5426\u6cc4\u9732\u7b49\u4fe1\u606f.\n\n\n\u547d\u4ee4 \ndumpsys meminfo com.china_liantong.launcher -d\n\n\n\u8f93\u51fa:\n\n\nshell@zx1800:/ \n# dumpsys meminfo com.china_liantong.launcher -d                \n\nApplications Memory Usage \n(\nkB\n)\n:\nUptime: \n2612261\n Realtime: \n2612261\n\n\n** MEMINFO in pid \n884\n \n[\ncom.china_liantong.launcher\n]\n **\n                   Pss  Private  Private  Swapped     Heap     Heap     Heap\n                 Total    Dirty    Clean    Dirty     Size    Alloc     Free\n                ------   ------   ------   ------   ------   ------   ------\n  Native Heap     \n5915\n     \n5440\n        \n0\n        \n0\n    \n24576\n    \n16208\n     \n8367\n\n  Dalvik Heap    \n13764\n    \n13364\n        \n0\n        \n0\n    \n26989\n    \n20896\n     \n6093\n\n Dalvik Other      \n248\n      \n248\n        \n0\n        \n0\n                           \n        Stack      \n513\n      \n512\n        \n0\n        \n0\n                           \n    Other dev        \n4\n        \n0\n        \n4\n        \n0\n                           \n     .so mmap     \n3392\n      \n424\n      \n472\n        \n0\n                           \n    .apk mmap       \n94\n        \n0\n        \n4\n        \n0\n                           \n    .ttf mmap     \n1573\n        \n0\n      \n568\n        \n0\n                           \n    .dex mmap     \n1188\n        \n0\n      \n752\n        \n0\n                           \n    .oat mmap     \n1419\n        \n0\n      \n260\n        \n0\n                           \n    .art mmap      \n979\n      \n616\n        \n0\n        \n0\n                           \n   Other mmap       \n80\n        \n4\n        \n0\n        \n0\n                           \n   EGL mtrack       \n17\n       \n17\n        \n0\n        \n0\n                           \n      Unknown      \n134\n      \n128\n        \n0\n        \n0\n                           \n        TOTAL    \n29320\n    \n20753\n     \n2060\n        \n0\n    \n51565\n    \n37104\n    \n14460\n\n\n Objects\n               Views:     \n1192\n         ViewRootImpl:        \n1\n\n         AppContexts:        \n3\n           Activities:        \n1\n\n              Assets:        \n2\n        AssetManagers:        \n2\n\n       Local Binders:       \n41\n        Proxy Binders:      \n220\n\n       Parcel memory:        \n7\n         Parcel count:       \n14\n\n    Death Recipients:       \n10\n      OpenSSL Sockets:        \n0\n\n\n SQL\n         MEMORY_USED:        \n0\n\n  PAGECACHE_OVERFLOW:        \n0\n          MALLOC_SIZE:        \n0\n\n\n\n\n\n\nNative Heap\n: native\u5206\u914d\u5360\u7528\u7684RAM, \u901a\u8fc7malloc\u7533\u8bf7\u7684\u5185\u5b58. \nHeap Size\n \u662f\u5185\u5b58\u6c60\u603b\u5927\u5c0f(\u5411\u7cfb\u7edf\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f). \nHeap Alloc\n \u5df2\u7ecf\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f(\u5e94\u7528\u5411dlmalloc\u7533\u8bf7\u7684\u5185\u5b58). \nHeap Free\n \u5185\u5b58\u6c60\u5269\u4f59\u53ef\u5206\u914d\u5185\u5b58\u5927\u5c0f.\n\n\nDalvik Heap\n: \u5e94\u7528\u4e2dDalvi\u5206\u914d\u5360\u7528\u7684RAM. \nPss Total\n: \u5305\u542b\u6240\u6709Zygote\u5206\u914d(\u901a\u8fc7\u8fdb\u7a0b\u95f4\u5171\u4eab\u5360\u7528). \nPrivate Dirty\n: \u4ec5\u5206\u914d\u5230\u5e94\u7528\u7684\u5b9e\u9645RAM, \u7531\u5e94\u7528\u5206\u914d\u6216\u8005zygote\u5206\u914d\u9875, \u8fd9\u4e9b\u9875\u81ea\u4ecezygote fork\u5e94\u7528\u8fdb\u7a0b\u540e\u88ab\u4fee\u6539\u8fc7.\n\n\n.so map\n \u548c \n.dex map\n: mmap\u7684.so\u548c.dex(Dalvik\u6216ART)\u4ee3\u7801\u5360\u7528\u7684RAM. \nPss Total\n \u6570\u503c\u5305\u62ec\u5e94\u7528\u4e4b\u95f4\u5171\u4eab\u7684\u5e73\u53f0\u4ee3\u7801\uff1b\nPrivate Clean\n \u662f\u60a8\u7684\u5e94\u7528\u81ea\u5df1\u7684\u4ee3\u7801\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5b9e\u9645\u6620\u5c04\u7684\u5185\u5b58\u66f4\u5927 - \u6b64\u5904\u7684 RAM \u4ec5\u4e3a\u5e94\u7528\u6267\u884c\u7684\u4ee3\u7801\u5f53\u524d\u6240\u9700\u7684 RAM\u3002\u4e0d\u8fc7\uff0c.so mmap \u5177\u6709\u8f83\u5927\u7684\u79c1\u6709\u810f RAM\uff0c\u56e0\u4e3a\u5728\u52a0\u8f7d\u5230\u5176\u6700\u7ec8\u5730\u5740\u65f6\u5bf9\u539f\u751f\u4ee3\u7801\u8fdb\u884c\u4e86\u4fee\u6539(GOT?!)\u3002 \n\n\n.oat mmap\n: \u4ee3\u7801\u6620\u50cf\u5360\u7528\u7684 RAM \u91cf\uff0c\u6839\u636e\u591a\u4e2a\u5e94\u7528\u901a\u5e38\u4f7f\u7528\u7684\u9884\u52a0\u8f7d\u7c7b\u8ba1\u7b97\u3002\u6b64\u6587\u4ef6\u5728\u6240\u6709\u5e94\u7528\u4e4b\u95f4\u5171\u4eab\uff0c\u4e0d\u53d7\u7279\u5b9a\u5e94\u7528\u5f71\u54cd\u3002 \n\n\n.art mmap\n: \u5806\u5360\u7528\u7684 RAM \u91cf\uff0c\u6839\u636e\u591a\u4e2a\u5e94\u7528\u901a\u5e38\u4f7f\u7528\u7684\u9884\u52a0\u8f7d\u7c7b\u8ba1\u7b97\u3002\u6b64\u6620\u50cf\u5728\u6240\u6709\u5e94\u7528\u4e4b\u95f4\u5171\u4eab\uff0c\u4e0d\u53d7\u7279\u5b9a\u5e94\u7528\u5f71\u54cd\u3002\u5c3d\u7ba1 ART \u6620\u50cf\u5305\u542b Object \u5b9e\u4f8b\uff0c\u5b83\u4ecd\u7136\u4e0d\u4f1a\u8ba1\u5165\u60a8\u7684\u5806\u5927\u5c0f\u3002 \n\n\nUnknown\n: \u7cfb\u7edf\u65e0\u6cd5\u5c06\u5176\u5206\u7c7b\u5230\u5176\u4ed6\u66f4\u5177\u4f53\u7684\u4e00\u4e2a\u9879\u4e2d\u7684\u4efb\u4f55 RAM \u9875\u3002 \u5176 \nPss Total\n \u4e0e Zygote\u5171\u4eab.\n\n\nTOTAL\n: \u4e0a\u65b9\u6240\u6709 PSS \u5b57\u6bb5\u7684\u603b\u548c\u3002\u8868\u793a\u60a8\u7684\u8fdb\u7a0b\u5360\u7528\u7684\u5185\u5b58\u91cf\u5360\u6574\u4f53\u5185\u5b58\u7684\u6bd4. \nPrivate Dirty\n \u548c \nPrivate Clean\n \u662f\u60a8\u7684\u8fdb\u7a0b\u4e2d\u7684\u603b\u5206\u914d\uff0c\u672a\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u5171\u4eab\u3002\u5b83\u4eec\uff08\u5c24\u5176\u662f Private Dirty\uff09\u7b49\u4e8e\u60a8\u7684\u8fdb\u7a0b\u88ab\u7834\u574f\u540e\u5c06\u91ca\u653e\u56de\u7cfb\u7edf\u4e2d\u7684 RAM \u91cf\u3002\nDirty\n\u56e0\u4e3a\u5df2\u88ab\u4fee\u6539\u800c\u5fc5\u987b\u4fdd\u6301\u5728 RAM \u4e2d\u7684 RAM \u9875\uff08\u56e0\u4e3a\u6ca1\u6709\u4ea4\u6362\uff09\uff1b\nClean\n \u662f\u5df2\u4ece\u67d0\u4e2a\u6301\u4e45\u6027\u6587\u4ef6\uff08\u4f8b\u5982\u6b63\u5728\u6267\u884c\u7684\u4ee3\u7801\uff09\u6620\u5c04\u7684 RAM \u9875\uff0c\u5982\u679c\u4e00\u6bb5\u65f6\u95f4\u4e0d\u7528\uff0c\u53ef\u4ee5\u79fb\u51fa\u5206\u9875\u3002\n\n\nViewRootImpl\n: \u8fdb\u7a0b\u4e2d\u5f53\u524d\u6d3b\u52a8\u7684\u6839\u89c6\u56fe\u6570\u91cf\u3002\u6bcf\u4e2a\u6839\u89c6\u56fe\u90fd\u4e0e\u4e00\u4e2a\u7a97\u53e3\u5173\u8054\uff0c\u56e0\u6b64\u6709\u52a9\u4e8e\u786e\u5b9a\u6d89\u53ca\u5bf9\u8bdd\u6846\u6216\u5176\u4ed6\u7a97\u53e3\u7684\u5185\u5b58\u6cc4\u6f0f\u3002 \n\n\nAppContexts\n \u548c \nActivities\n: \u5f53\u524d\u6d3b\u52a8\u7684\u5e94\u7528 Context \u548c Activity \u5bf9\u8c61\u6570\u91cf\u3002\u5feb\u901f\u786e\u5b9a\u7531\u4e8e\u5b58\u5728\u9759\u6001\u5f15\u7528\uff08\u6bd4\u8f83\u5e38\u89c1\uff09\u800c\u65e0\u6cd5\u8fdb\u884c\u5783\u573e\u56de\u6536\u7684\u5df2\u6cc4\u6f0f Activity \u5bf9\u8c61\u3002\u8fd9\u4e9b\u5bf9\u8c61\u7ecf\u5e38\u62e5\u6709\u5f88\u591a\u5173\u8054\u7684\u5176\u4ed6\u5206\u914d\uff0c\u56e0\u6b64\u6210\u4e3a\u8ddf\u8e2a\u5927\u578b\u5185\u5b58\u6cc4\u6f0f\u7684\u4e00\u79cd\u4e0d\u9519\u7684\u65b9\u5f0f\u3002\n\n\n\u4f8b\u5b50\u89c1\u5185\u5b58\u6cc4\u9732\u90e8\u5206.\n\n\nprocmem  \n\n\n\u573a\u666f: \u67e5\u770b\u6307\u5b9a\u8fdb\u7a0b\u7684\u5404\u90e8\u5206\u5185\u5b58\u5360\u7528\u60c5\u51b5.\n\u547d\u4ee4: \nprocmem \npid\n\n\u4f8b\u5b50: \nprocmem 2509\n\n\u6570\u636e\u6765\u6e90: \n/proc/\npid\n/maps\n \u548c \n/proc/\npid\n/pagemap\n\n\nVss      Rss      Pss      Uss     ShCl     ShDi     PrCl     PrDi  Name\n\n\n\n\n\u5404\u5b57\u6bb5\u542b\u4e49:\n\n\nShCl  --  shared clean\nShDi  --  shared dirty\nPrCl  --  private clean\nPrDi  --  private dirty\n\n\n\n\n\nshowmap \n\n\n\u573a\u666f: \u8fdb\u7a0b\u865a\u62df\u8fdb\u7a0b\u7a7a\u95f4\u7684\u5185\u5b58\u5206\u914d\u60c5\u51b5 \u548c \u8be6\u7ec6\u7684\u5e72\u51c0\u810f\u6570\u636e\u4fe1\u606f.\n\n\n\u4ece \n/proc/[pid]/smaps\n \u83b7\u53d6\u6570\u636e\u5e76\u7edf\u8ba1\u7684\u5de5\u5177.\n\n\n\u547d\u4ee4: \nshowmap [-a] [-t] [-v] \npid\n\n\u4f8b\u5b50: \nshowmap -a 884\n\n\u8f93\u51fa\u5355\u4f4d: KB\n\n\n\n\n\u7531\u4e8e\u73b0\u5728\u5185\u6838\u90fd\u4f7f\u7528\u4e86\u52a8\u6001\u5185\u5b58\u5206\u914d\u7684\u673a\u5236, \u5728\u5927\u91cf\u7533\u8bf7\u5c0f\u5185\u5b58\u7684\u60c5\u51b5\u4e0b, \u4ece\u7cfb\u7edf\u770b\u5185\u5b58\u6709\u5269\u4f59, \u4f46\u662f\u8fdb\u7a0b\u5374\u65e0\u6cd5\u5206\u914d\u51fa\u9700\u8981\u7684\u5185\u5b58, \u8fd9\u5c31\u6709\u53ef\u80fd\u662f\u7531\u4e8e\u865a\u62df\u5730\u5740\u7684\u5185\u5b58\u788e\u7247\u5f15\u8d77, \u65e0\u6cd5\u627e\u5230\u4e00\u6bb5\u5927\u4e8e\u6240\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u7684\u5730\u5740\u7a7a\u95f4. \n\n\n\u4f8b\u5b50:\n\n\nAndroid \u5e94\u7528 OOM\n\n\n\u89e6\u53d1OOM\u7684\u539f\u56e0\u662f, java\u5c42\u5185\u5b58\u5206\u914d\u5931\u8d25\u4e86.\n\n\n\u9020\u6210\u5185\u5b58\u5206\u914d\u5931\u8d25\u7684\u53ef\u80fd\u539f\u56e0\u5982\u4e0b:\n\n\n\n\n\u5185\u5b58\u6ea2\u51fa. \u7533\u8bf7\u7684\u5185\u5b58\u8d85\u51fa\u4e86\u865a\u62df\u673a\u6700\u5927\u5185\u5b58.\n\n\n\u788e\u7247, \u5bfc\u81f4\u65e0\u6cd5\u627e\u5230\u8fde\u7eed\u7a7a\u95f4\u6ee1\u8db3\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f.\n\n\n\u8d44\u6e90\u95ee\u9898, \u6bd4\u5982\u6587\u4ef6\u8282\u70b9\u8d85\u8fc7\u9650\u5236, \u5bfc\u81f4\u533f\u540d\u5185\u5b58\u7533\u8bf7\u51fa\u9519, \u9519\u8bef\u4fe1\u606f\u4e3a \"Too many open files\"\n\n\n\u865a\u62df\u7a7a\u95f4\u5730\u5740\u7a7a\u95f4\u88ab\u5360\u6ee1, \u5bfc\u81f4OOM.\n\n\n\n\n\u4ee5\u4e0a\u4e3a\u7f51\u4e0a\u7684\u7ed3\u8bba, \u5728android5.1.1\u4e0a\u6d4b\u8bd5\u53d1\u73b0:\n\n\nfd\u95ee\u9898\u5e76\u4e0d\u4f1a\u5bfc\u81f4OOM\n\n\n\u4ee3\u7801\u590d\u7528\u4e0b\u9762\u5185\u5b58\u6cc4\u9732\u7684\u4ee3\u7801,\u5728asynctask\u4e2d\u6267\u884c\u6587\u4ef6\u6253\u5f00\u64cd\u4f5c.\n\n\n\n\nlogcat\u4e2d\u8f93\u51fa\u5982\u4e0b, \u5e76\u6ca1\u6709OOM\u8f93\u51fa:\n\n\n\n\n\u4f46\u662f\u8fd9\u6bb5\u4ee3\u7801\u7684\u786e\u8bc1\u660e\u4e86\u6253\u5f00\u6587\u4ef6\u592a\u591a\u4f1a\u5bfc\u81f4shmem\u521b\u5efa\u5931\u8d25.\n\n\n\u5185\u5b58\u6cc4\u9732\u5206\u6790\n\n\nactivity \u6cc4\u9732 \n\n\nactivity \u7684\u6cc4\u9732\u57fa\u4e8eandroid\u81ea\u5e26\u5de5\u5177, \u53ef\u4ee5\u5feb\u901f\u786e\u5b9a, \u4f46\u662f\u5177\u4f53\u6cc4\u9732\u7684activity, \u9700\u8981\u4f9d\u8d56\u5de5\u5177 LeakCanary.\n\n\n\u4ee3\u7801:\n\n\n\n\n\u754c\u9762:\n\n\n\n\n\u5728\u7b2c\u4e00\u6b21\u8fdb\u5165\u8be5\u5e94\u7528\u65f6:\n\n\n\n\n\u6309\u4e0bBUTTON, \u7136\u540e\u9000\u51fa\u5e94\u7528:\n\n\n\n\n\u7b2c\u4e8c\u6b21\u8fdb\u5165\u8be5\u5e94\u7528:\n\n\n\n\n\u7b2c\u4e8c\u6b21\u6309\u4e0bBUTTON:\n\n\n\n\n\u7b2c\u4e8c\u6b21\u9000\u51fa\u5e94\u7528:\n\n\n\n\n\u57fa\u4e8e \ndumpsys meminfo\n \u786e\u8ba4\u5e94\u7528\u6709activity\u6cc4\u9732\u540e, \u5355\u7eaf\u901a\u8fc7UI\u64cd\u4f5c\u57fa\u672c\u4e5f\u53ef\u4ee5\u5224\u65ad\u51fa\u6765\u54ea\u4e2aactivity\u6cc4\u9732, \u66f4\u51c6\u786e\u7684\u6cc4\u9732\u68c0\u6d4b\u5de5\u5177\u662f LeakCanary, \u8be5\u5de5\u5177\u4e3a\u7b2c\u4e09\u65b9\u5de5\u5177. \n\n\u5177\u4f53\u7528\u6cd5: https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/\n\n\n\u8fd8\u662f\u4ee5\u4e0a\u7684\u4f8b\u5b50, \u989d\u5916\u589e\u52a0\u5982\u4e0b\u4ee3\u7801. \n\n\n\u5728MainActivity\u589e\u52a0\u5982\u4e0b\u4ee3\u7801, \u8be5\u4ee3\u7801\u7684\u542b\u4e49\u662f, \u5728activity\u89e6\u53d1onDestroy\u65f6, \u76d1\u63a7\u8be5activity\u5bf9\u8c61.\n\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        LeakApplication.getRefWatcher().watch(this);\n\n    }\n\n\n\n\n\n\u589e\u52a0application, \u5982\u4e0b:\n\n\n\n\n\u7f16\u8bd1\u8fd0\u884c, \u6267\u884c\u4e0a\u9762\u540c\u6837\u7684\u64cd\u4f5c. \u5728\u901a\u77e5\u4e2d\u5fc3\u6709\u5982\u4e0b\u663e\u793a:\n\n\n\n\n\u70b9\u51fb\u540e\u53ef\u4ee5\u67e5\u770b\u8be6\u7ec6\u7684\u5806\u6808:\n\n\n\n\n\u540c\u6837\u5728logcat\u4e2d\u6709\u5982\u4e0b\u8f93\u51fa:\n\n\n\n\nStrictMode\u68c0\u6d4b\u5e94\u7528\u5185\u5b58\u6cc4\u9732 \n\n\n\u540c\u6837\u662f\u4e0a\u9762\u7684\u4f8b\u5b50, \u4fee\u6539\u4ee3\u7801\u5982\u4e0b, \u589e\u52a0strickmode\u7684\u8c03\u7528:\n\n\n\n\n\u540c\u6837\u7684\u4e0a\u9762\u64cd\u4f5c\u65b9\u6cd5, logcat\u4e2d\u6709\u5982\u4e0b\u8f93\u51fa:\n\n\n\n\n\u57fa\u4e8elibc\u8c03\u8bd5\u5185\u5b58\u6cc4\u9732 \n\n\n\u5185\u5b58\u6cc4\u9732\u7684\u68c0\u6d4b\u4f9d\u636e\u662f, \u8fdb\u7a0b\u9000\u51fa\u65f6, \u8fd8\u6709\u672a\u91ca\u653e\u7684\u5185\u5b58. \u6240\u4ee5, valgrind\u5305\u62ecbionic libc\u4e2d, \u80fd\u7cbe\u786e\u68c0\u6d4b\u5230\u6cc4\u9732\u7684\u524d\u63d0\u6761\u4ef6\u5c31\u662f\u8fdb\u7a0b\u9000\u51fa. \u4f46\u662f\u8fd9\u4e2a\u5bf9\u4e8e\u7cfb\u7edf\u7ea7\u522b\u7684\u8fdb\u7a0b\u662f\u65e0\u7528\u7684, \u56e0\u4e3a\u7cfb\u7edf\u7ea7\u8fdb\u7a0b\u5e76\u4e0d\u4f1a\u9000\u51fa. \u4eceRD\u89d2\u5ea6, \u5224\u65ad\u7cfb\u7edf\u7ea7\u8fdb\u7a0b\u662f\u5426\u6cc4\u9732\u7684\u4f9d\u636e\u662f\u5185\u5b58\u662f\u5426\u6301\u7eed\u589e\u957f, \u7279\u522b\u662f\u5728\u538b\u529b\u6d4b\u8bd5\u7684\u60c5\u51b5\u4e0b. \u6240\u4ee5, \u8fd9\u4e2a\u90e8\u5206\u4ecb\u7ecd\u7684\u5de5\u5177, \u5b9e\u9645\u4e0a\u662f\u6293\u53d6\u4e86\u6301\u7eed\u589e\u957f\u7684\u5185\u5b58\u4fe1\u606f, \u8fd9\u4e9b\u4fe1\u606f, \u53ef\u80fd\u662f\u5185\u5b58\u6cc4\u9732, \u4e5f\u53ef\u80fd\u662f\u8fdb\u7a0b\u6b63\u5e38\u7533\u8bf7\u7684\u5185\u5b58, \u9700\u8981RD\u4ecb\u5165\u5224\u65ad.\n\n\n\u9644\u4ef6: \nMemleak_tools_android.zip\n\n\n\u4f9d\u8d56\u5de5\u5177:\n\n\n\n\nlibc_malloc_debug_leak.so\n , bionic\u6e90\u7801\u4e0b, \u9700\u8981\u7f16\u8bd1\u5e76push\u5230\u7cfb\u7edf\u4e2d\n\n\nlibmemleakutils.so\n, \u4eceandroid\u63d0\u53d6\u5e76\u66f4\u6539. \u4ece\u9644\u4ef6\u6e90\u7801\u4e0b\u8f7d\u7f16\u8bd1, \u9700\u8981push\u5230\u7cfb\u7edf\u4e2d.\n\n\naddr2func.py, \u8be5\u811a\u672c\u80fd\u81ea\u52a8\u5c06\u5730\u5740\u8f6c\u6362\u6210\u5e93\u548c\u5806\u6808. \u5728\u9644\u4ef6\u4e2d.\n\n\nmemincrease.py, \u8be5\u811a\u672c\u80fd\u5c06\u4e0a\u4e00\u811a\u672c\u7684\u8f93\u51fa, \u8fdb\u884c\u7edf\u8ba1\u6392\u5e8f,  \u6309\u5185\u5b58\u589e\u52a0\u4ece\u5927\u5230\u5c0f\u6392\u5e8f. \u57fa\u672c\u6700\u9876\u4e0a\u7684\u662f\u5b58\u5728\u95ee\u9898\u7684. \u5728\u9644\u4ef6\u4e2d.\n\n\n\n\n\u5c40\u9650:\n\n\n\n\n\u53ea\u80fd\u8c03\u8bd5native\u8fdb\u7a0b.\n\n\n\u8fdb\u7a0b\u4e0d\u80fd\u91cd\u542f.\n\n\n\u9700\u8981\u538b\u529b\u6d4b\u8bd5, \u957f\u65f6\u95f4\u8fd0\u884c\n\n\n\u9700\u8981RD\u4ecb\u5165\u5224\u65ad\u662f\u5426\u5b58\u5728\u6cc4\u9732.\n\n\n\n\n\u7528\u6cd5:\n\n\n\n\n\u5c06libmemleakutils.so\u5e93\u94fe\u63a5\u5230\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u4e2d, \u8c03\u7528\u51fd\u6570\nstart_memleak_watcher(memstep)\n, \u5176\u4e2dmemstep\u8868\u793a, pss\u6bcf\u589e\u52a0memstep, \u5219\u6293\u53d6\u4e00\u6b21\u5f53\u524d\u5185\u5b58\u5206\u914d\u4fe1\u606f.\n\n\n\u5c06libmemleakutils.so \u548c \nlibc_malloc_debug_leak.so\n push\u5230/system/lib/\u4e0b.\n\n\n\u5c06\u88ab\u8c03\u8bd5\u7a0b\u5e8fpush\u5230 /system/bin/ \u4e0b.\n\n\n\u8bbe\u7f6e property \nlibc.debug.malloc.program\n \u4e3a \u4f60\u7684\u8c03\u8bd5\u8fdb\u7a0b\u540d\u5b57.\n\n\n\u8bbe\u7f6e property \nlibc.debug.malloc\n \u4e3a 1\n\n\nstop \u6216\u8005 kill \u88ab\u8c03\u8bd5\u8fdb\u7a0b.\n\n\nstart \u6216\u8005 \u542f\u52a8 \u88ab\u8c03\u8bd5\u8fdb\u7a0b.\n\n\n\u538b\u529b\u6d4b\u8bd5\u540e, \u68c0\u67e5 /data/local/tmp/ \u5e95\u4e0b\u5b58\u5728\u6587\u4ef6 \nmem_snapshot_$pid_$memsize.log\n, \u4e14\u4e2a\u6570\u5927\u4e8e2\u4e2a(\u8d8a\u591a\u8d8a\u597d).\n\n\ncp /proc/${pid}/maps /data/local/tmp/\n\n\n\u5c06 /data/local/tmp/ \u5e95\u4e0b\u6240\u6709\u6587\u4ef6\u590d\u5236\u5230host\u673a\u5668.\n\n\n\u7528 diff \u547d\u4ee4\u6bd4\u8f83 \u4e24\u4e2a \nmem_snapshot_$pid_$memsize.log\n, \u5e76\u4fdd\u5b58\u8f93\u51fa\u4e3a \ndiff_$pid_$memsize1_$memsize2.log\n\n\n\u6267\u884c \n./addr2func.py --root-dir=/remote/ANDROID/hdtv/ --maps-file=./maps --product=zx2000 diff_$pid_$memsize1_$memsize2.log \n mem_stack_$pid_$memsize1_$memsize2.log\n, \u8be5\u8fc7\u7a0b\u662f\u5c06diff\u751f\u6210\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5730\u5740\u8f6c\u6362\u6210\u5e93\u548c\u5806\u6808\u4fe1\u606f.\n\n\n\u6267\u884c \n./memincrease.py mem_stack_$pi_$memsize1_$memsize2.log incr_$pid_$memsize1_$memsize2.log\n, \u8be5\u8fc7\u7a0b\u662f\u5bf912\u751f\u6210\u7684\u6587\u4ef6\u8fdb\u884c\u7edf\u8ba1\u6392\u5e8f, \u4ece\u5927\u5230\u5c0f\u6392\u5e8f.\n\n\n\n\n\u4f8b\u5b50:\n\n\n\n\n\u8fd0\u884c\u4e00\u4f1a\u513f\u540e, \u5728 /data/local/tmp/\u76ee\u5f55\u4e0b\u5b58\u5728\u6587\u4ef6:\n\n\nmem_snapshot_2158_1.log\nmem_snapshot_2158_2.log\nmem_snapshot_2158_3.log\nmem_snapshot_2158_4.log\n\n\n\n\n\n\u5176\u5185\u5bb9\u5982\u4e0b:\n\n\n Allocation count \n5\n\n Total memory \n6293072\n\nsize  \n5242880\n, dup    \n1\n, 0xb6ed36b2, 0xb6f4cd4e, 0xb6f1da44, 0xb6f1de38, 0xb6f1dea0, 0xb6f5104a, 0xb6f4ef92\nsize  \n1048576\n, dup    \n1\n, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc8492, 0xb6fc8390, 0xb6f4ce68, 0xb6fc8400\nsize     \n1024\n, dup    \n1\n, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc84aa, 0xb6fc8394, 0xb6f4ce68, 0xb6fc8400\nsize      \n580\n, dup    \n1\n, 0xb6ed36b2, 0xb6ed391c, 0xb6f4cd0e, 0xb6f510c8, 0xb6f1decc, 0xb6fc838c, 0xb6f4ce68, 0xb6fc8400\nsize       \n12\n, dup    \n1\n, 0xb6ed36b2, 0xb6ed391c, 0xb6f4cd0e, 0xb6f14c46, 0xb6f1dd98, 0xb6f1dea0, 0xb6f5104a, 0xb6f4ef92\n\n\n\n\n\n\u6267\u884cdiff\u547d\u4ee4:\n\n\n# diff ./mem_snapshot_2158_1.log ./mem_snapshot_2158_2.log \n diff_2158_1_2.log\n\n\n# \n\n\n# diff ./mem_snapshot_2158_3.log ./mem_snapshot_2158_4.log \n diff_2158_3_4.log\n\n\n#\n\n\n\n\n\n\n\u5f97\u5230\u4e00\u4e2aPSS\u4ece1M\u589e\u957f\u52302M\u548c3M\u589e\u957f\u52304M\u7684\u4e24\u4e2adiff\u6587\u4ef6. \u5185\u5bb9\u5982\u4e0b:\n\n\n2c2\n\n  Total memory 6293072\n---\n\n  Total memory 7342672\n4,5c4,5\n\n size  1048576, dup    1, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc8492, 0xb6fc8390, 0xb6f4ce68, 0xb6fc8400\n\n size     1024, dup    1, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc84aa, 0xb6fc8394, 0xb6f4ce68, 0xb6fc8400\n---\n\n size  1048576, dup    2, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc8492, 0xb6fc8390, 0xb6f4ce68, 0xb6fc8400\n\n size     1024, dup    2, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc84aa, 0xb6fc8394, 0xb6f4ce68, 0xb6fc8400\n\n\n\n\n\n\n\u6267\u884c addr2func.py :\n\n\n# ./addr2func.py --root-dir=/remote/ANDROID/hdtv/ --maps-file=./maps --product=zx2000 diff_2158_3_4.log \n mem_stack_2158_3_4.log\n\n\n\n\n\n\n\u751f\u6210\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b:\n\n\n2c2                                                                                                                                                                              \n[\n0\n/59466\n]\n\n\n\n  Total memory \n8392272\n\n\n---\n\n\n  Total memory \n9441872\n\n\n\n4\n,5c4,5\n\n\n size  \n1048576\n, dup    \n3\n,\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315 \n(\ndiscriminator \n1\n)\n\n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test\n()\n, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:11\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:25 \n(\ndiscriminator \n1\n)\n\n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n\n size     \n1024\n, dup    \n3\n,\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315 \n(\ndiscriminator \n1\n)\n\n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test1\n()\n, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:17\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:26 \n(\ndiscriminator \n1\n)\n\n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n---\n\n\n size  \n1048576\n, dup    \n4\n,\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315 \n(\ndiscriminator \n1\n)\n\n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test\n()\n, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:11\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:25 \n(\ndiscriminator \n1\n)\n\n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n\n size     \n1024\n, dup    \n4\n,\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315 \n(\ndiscriminator \n1\n)\n\n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test1\n()\n, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:17\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:26 \n(\ndiscriminator \n1\n)\n\n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n\n\n\n\n\n\u6240\u6709\u7684\u5730\u5740\u88ab\u8f6c\u6362\u6210\u4e86\u961f\u957f.\n\n\n\u6700\u540e\u6267\u884c memincrease.py :\n\n\n./memincrease.py mem_stack_2158_3_4.log incr_2158_3_4.log\n\n\n\n\n\n\u751f\u6210\u7684\u6587\u4ef6 incr_2158_3_4.log \u5185\u5bb9\u5982\u4e0b:\n\n\nMemory increase \n1048576\n bytes                   \n### \u5185\u5b58\u589e\u52a0\u4e86 1048576 bytes\n\n98990365afa0d71d62949620cc7e3753f386e4e3\nold size \n1048576\n count \n3\n, total memory \n3145728\n       \n### \u4ece 3145728\n\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315 \n(\ndiscriminator \n1\n)\n\n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test\n()\n, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:11\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:25 \n(\ndiscriminator \n1\n)\n\n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n98990365afa0d71d62949620cc7e3753f386e4e3\nnew size \n1048576\n count \n4\n, total memory \n4194304\n      \n### \u589e\u52a0\u5230 4194304\n\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315 \n(\ndiscriminator \n1\n)\n\n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test\n()\n, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:11\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:25 \n(\ndiscriminator \n1\n)\n\n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n\nMemory increase \n1024\n bytes\n833f23c991cc75facaa41fb74f7466b91c27917b\nold size \n1024\n count \n3\n, total memory \n3072\n\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315 \n(\ndiscriminator \n1\n)\n\n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test1\n()\n, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:17\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:26 \n(\ndiscriminator \n1\n)\n\n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n833f23c991cc75facaa41fb74f7466b91c27917b\nnew size \n1024\n count \n4\n, total memory \n4096\n\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315 \n(\ndiscriminator \n1\n)\n\n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test1\n()\n, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:17\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:26 \n(\ndiscriminator \n1\n)\n\n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n\n\n\n\n\n\u57fa\u672c\u4e0a, \u5c06\u6700\u9876\u4e0a\u7684\u51e0\u4e2a\u5806\u6808\u786e\u8ba4\u4e0b\u662f\u5426\u5185\u5b58\u6cc4\u9732\u5373\u53ef.\n\n\n\u7279\u522b\u6ce8\u610f:\n\n\n\n\n\u7c7b\u6cc4\u9732\u65f6, \u5728\u5806\u6808\u4e0a\u7684\u8868\u73b0\u662f\u5176\u6210\u5458\u5185\u5b58\u6cc4\u9732. \u9700\u8981\u67e5\u770b\u5806\u6808\u662f\u5426\u6709\u8be5\u7c7b\u5bf9\u8c61\u7684new\u65b9\u6cd5, \u5e76\u4e14\u8be5\u65b9\u6cd5\u662f\u5426\u5728\u591a\u5904\u5b58\u5728.\n\n\n\n\nvalgrind \u8c03\u8bd5\u5185\u5b58\u6cc4\u9732\n\n\n\u573a\u666f: \u5bf9\u4e8e\u53ef\u9000\u51fa\u7684\u8fdb\u7a0b\u8fdb\u884c\u8c03\u8bd5\u6bd4\u8f83\u5408\u9002, \u53ef\u4ee5\u5bf9\u5e94\u7528\u7684native\u4ee3\u7801\u8fdb\u884c\u8c03\u8bd5.\n\n\n\u76ee\u524dhdtv\u4ee3\u7801\u4e0a\u7684 valgrind \u65e0\u6cd5\u83b7\u53d6\u88ab\u8c03\u8bd5\u8fdb\u7a0b\u7684\u5806\u6808, \u53ea\u80fd\u83b7\u53d6\u5b83\u81ea\u5df1\u5e93\u7684\u5806\u6808, \u5b58\u5728\u95ee\u9898. \u6682\u65f6\u65e0\u6cd5\u4f7f\u7528.", 
            "title": "Android\u5185\u5b58\u8c03\u8bd5\u603b\u7ed3"
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#android", 
            "text": "\u6765\u6e90: https://pengzhangdev.github.io/Android-memory-debug/", 
            "title": "Android\u5185\u5b58\u8c03\u8bd5\u5de5\u5177\u603b\u7ed3"
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#_1", 
            "text": "\u7cfb\u7edf\u5185\u5b58\u5206\u6790, \u6240\u6709\u8fdb\u7a0b\u5185\u5b58\u5206\u6790  \u57fa\u672c\u7684 logcat \u8f93\u51fa\u4e2d\u53ef\u80fd\u5305\u542b\u7684GC\u76f8\u5173\u4fe1\u606f, \u53ef\u4ee5\u4f5c\u4e3a\u7cfb\u7edf\u6216\u67d0\u4e9b\u5e94\u7528\u5185\u5b58\u72b6\u51b5\u7684\u53c2\u8003\u4f9d\u636e.  \u5728SystemServer\u542f\u52a8\u7684\u60c5\u51b5\u4e0b, \u8fd8\u53ef\u4ee5\u901a\u8fc7  dumpsys meminfo  \u4eceframework\u5c42\u89d2\u5ea6\u67e5\u770b\u7cfb\u7edf\u5185\u5b58\u7684\u72b6\u51b5, \u8be5\u90e8\u5206\u4fe1\u606f\u4e0e\u4ece\u7cfb\u7edf\u89d2\u5ea6\u83b7\u53d6\u7684\u4fe1\u606f\u5b58\u5728\u5dee\u5f02.  \u5bf9\u4e8e\u9700\u8981\u6392\u5e8f\u5e76\u67e5\u627e\u5185\u5b58\u5360\u7528\u6700\u591a\u7684\u8fdb\u7a0b, \u63a8\u8350\u4f7f\u7528\u547d\u4ee4  procrank  \u5728\u5b9e\u5728\u7f3a\u5c11\u5de5\u5177, \u6216\u8005RD\u77e5\u9053\u9700\u8981\u4ec0\u4e48\u4fe1\u606f\u7684\u60c5\u51b5\u4e0b, \u53ef\u4ee5\u67e5\u770b /proc/meminfo  \u5982\u679c\u9700\u8981\u8fde\u7eed\u76d1\u63a7\u7cfb\u7edf\u7684\u72b6\u6001(\u5185\u5b58/CPU\u7b49), \u53ef\u4ee5\u8003\u8651\u5de5\u5177 vmstat  \u5982\u679c\u9700\u8981\u4ece\u5171\u4eab\u5e93\u6216\u8005\u5171\u4eab\u5185\u5b58\u7684\u89d2\u5ea6\u5206\u6790\u5176\u5185\u5b58\u5360\u7528\u7684\u60c5\u51b5, \u53ef\u4ee5\u8003\u8651\u7528  librank , \u5f53\u7136, \u5982\u679c\u5b58\u5728host\u7aef\u7684\u5206\u6790\u5de5\u5177, \u5219\u8be5\u5de5\u5177\u7684\u8f93\u51fa\u53ef\u4ee5\u9876\u66ff procrank \u548c procmem .  \u5982\u679c\u9700\u8981\u67e5\u770b\u7cfb\u7edf\u4e2d\u54ea\u4e9b\u5171\u4eab\u6587\u4ef6\u522b\u901a\u8fc7\u7f3a\u9875\u9519\u8bef\u7684\u65b9\u5f0f\u8bfb\u5230\u5185\u5b58, \u53ef\u4ee5\u4f7f\u7528\u5de5\u5177 dumpcache  \u5982\u679c\u5b9e\u5728\u4e0d\u77e5\u9053bug\u539f\u56e0\u6216\u8005\u95ee\u9898\u53ef\u80fd\u8ddf\u81ea\u5df1\u65e0\u5173, \u5efa\u8bae\u4f7f\u7528  bugreport , \u4f9b\u5176\u4ed6RD\u534f\u52a9\u5206\u6790\u95ee\u9898.    \u6307\u5b9a\u5e94\u7528(dalvik\u8fdb\u7a0b)\u5185\u5b58\u5206\u6790  dumpsys meminfo \u5e94\u7528\u5185\u5b58  \u8f93\u51fa\u5f53\u524d\u8fdb\u7a0b/\u5e94\u7528\u7684\u6240\u6709\u5185\u5b58\u5360\u7528\u60c5\u51b5. \u5efa\u8bae\u53ea\u9488\u5bf9dalvik\u5c42\u7684\u8fdb\u7a0b.    \u6307\u5b9anative\u8fdb\u7a0b\u5185\u5b58\u5206\u6790  native\u7684\u5355\u4e2a\u8fdb\u7a0b\u5185\u5b58\u5206\u6790\u5efa\u8bae\u4f7f\u7528  procmem \u548c  showmap .  showmap  \u989d\u5916\u8f93\u51fa\u4e86\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4, \u53ef\u4ee5\u8f85\u52a9\u67e5\u770b\u7531\u4e8e\u865a\u62df\u5730\u5740\u7a7a\u95f4\u5f15\u8d77\u7684\u5185\u5b58\u95ee\u9898.    \u5e94\u7528\u5185\u5b58\u6cc4\u9732  \u5c11\u90e8\u5206\u7684\u6cc4\u9732, \u6bd4\u5982\u6570\u636e\u5e93/activity\u7b49, \u901a\u8fc7 dumpsys meminfo \u5e94\u7528\u5185\u5b58 , \u4f46\u53ea\u80fd\u77e5\u9053\u5b58\u5728\u6cc4\u9732.  \u5e94\u7528\u5728\u5f00\u542f  strictmode  \u7684\u60c5\u51b5\u4e0b, \u53ef\u4ee5\u53d1\u73b0\u66f4\u591a\u7684\u8d44\u6e90\u6cc4\u9732\u60c5\u51b5. \u4f46\u4ec5\u9650\u4e8e\u53d1\u73b0.  \u4e00\u4e2a\u6bd4\u8f83\u63a8\u8350\u7684\u7528\u4e8e\u5b9a\u4e49\u5e94\u7528\u5185\u5b58\u6cc4\u9732\u7684\u5de5\u5177\u662f  LeakCanary    native\u8fdb\u7a0b\u5185\u5b58\u6cc4\u9732  \u57fa\u4e8ebionic\u7684\u5185\u5b58\u6cc4\u9732\u5206\u6790\u5de5\u5177 , \u8be5\u5de5\u5177\u5bf9\u4e8eRD\u4f7f\u7528\u8981\u6c42\u504f\u9ad8.    bugreport \u4fe1\u606f\u5206\u6790  \u89c1\u5916\u90e8\u6587\u6863.", 
            "title": "\u7d22\u5f15"
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#_2", 
            "text": "VSS - Virtual Set Size \u865a\u62df\u8017\u7528\u5185\u5b58\uff08\u5305\u542b\u5171\u4eab\u5e93\u5360\u7528\u7684\u5185\u5b58\uff09\nRSS - Resident Set Size \u5b9e\u9645\u4f7f\u7528\u7269\u7406\u5185\u5b58\uff08\u5305\u542b\u5171\u4eab\u5e93\u5360\u7528\u7684\u5185\u5b58\uff09\nPSS - Proportional Set Size \u5b9e\u9645\u4f7f\u7528\u7684\u7269\u7406\u5185\u5b58, USS + \u6bd4\u4f8b\u5206\u914d\u5171\u4eab\u5e93\u5360\u7528\u7684\u5185\u5b58\uff08[\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u5171\u4eab\u7684\u5185\u5b58(RSS - USS)] / [\u5206\u4eab\u5171\u4eab\u5185\u5b58\u7684\u8fdb\u7a0b\u6570\u91cf]\uff09.\nUSS - Unique Set Size \u8fdb\u7a0b\u72ec\u81ea\u5360\u7528\u7684\u7269\u7406\u5185\u5b58\uff08\u4e0d\u5305\u542b\u5171\u4eab\u5e93\u5360\u7528\u7684\u5185\u5b58\uff09      \n\u5982\u679c\u770b\u8fdb\u7a0b\u72ec\u5360\u5185\u5b58\uff0c\u3000\u5219\u4f7f\u7528USS. \u4f46\u662f\u4e00\u822c\u8003\u8651\u5230\u5171\u4eab\u5185\u5b58\u7684\u60c5\u51b5, \u5927\u90e8\u5206\u90fd\u662f\u4f9d\u636ePSS\u67e5\u770b\u5bf9\u5e94\u8fdb\u7a0b\u7684\u5185\u5b58\u5360\u7528.  shared clean: \u5e72\u51c0\u7684\u5171\u4eab\u6570\u636e, \u4e5f\u5c31\u662f\u8bf4, \u5f53\u524d\u6709\u591a\u4e2a\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u6307\u5411\u8be5\u7269\u7406\u7a7a\u95f4, \u4e14\u5f53\u524d\u8fdb\u7a0b\u7a7a\u95f4\u8be5\u6570\u636e\u4e0edisk\u4e0a\u4e00\u81f4.\nshared dirty: \u810f\u5171\u4eab\u6570\u636e, \u4e0e\u4e0a\u9762\u5bf9\u5e94, \u8be5\u8fdb\u7a0b\u7a7a\u95f4\u7684\u5171\u4eab\u6570\u636e\u4e0edisk\u4e0a\u6570\u636e\u4e0d\u4e00\u81f4.\nprivate clean: \u8fdb\u7a0b\u79c1\u6709\u5e72\u51c0\u6570\u636e, \u4e0edisk\u6570\u636e\u4e00\u81f4.\nprivate dirty: \u8fdb\u7a0b\u79c1\u6709\u810f\u6570\u636e, \u4e0edisk\u6570\u636e\u4e0d\u4e00\u81f4.", 
            "title": "\u57fa\u7840\u6982\u5ff5"
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#_3", 
            "text": "", 
            "title": "\u7cfb\u7edf\u5185\u5b58\u4fe1\u606f\u5206\u6790"
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#logcat", 
            "text": "", 
            "title": "logcat \u8f93\u51fa "
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#dalvik", 
            "text": "\u573a\u666f: \u5728\u5e94\u7528\u968f\u673a\u51fa\u73b0\u6162\u65f6, \u53ef\u4ee5\u770b\u770b\u90a3\u6bb5\u65f6\u95f4logcat\u7684\u8f93\u51fa, \u662f\u5426\u5305\u542bGC\u7684\u4e00\u4e9b\u4fe1\u606f. GC\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5e94\u7528\u6162, \u800c\u7cfb\u7edf\u53d1\u8d77\u7684GC\u5219\u610f\u5473\u7740\u5185\u5b58\u4e0d\u591f, \u53ef\u80fd\u51fa\u73b0\u4ece\u78c1\u76d8\u52a0\u8f7d\u7684\u60c5\u51b5.  \u5728logcat\u4e2d\u4f1a\u6253\u5370dalvik\u7684\u5783\u573e\u56de\u6536\u4fe1\u606f.  D/dalvikvm:  GC_Reason   Amount_freed ,  Heap_stats ,  External_memory_stats ,  Pause_time \nD/dalvikvm( 9050): GC_CONCURRENT freed 2049K, 65% free 3571K/9991K, external 4703K/5261K, paused 2ms+2ms   GC_Reason :  GC_CONCURRENT \n    \u5728\u60a8\u7684\u5806\u5f00\u59cb\u5360\u7528\u5185\u5b58\u65f6\u53ef\u4ee5\u91ca\u653e\u5185\u5b58\u7684\u5e76\u53d1\u5783\u573e\u56de\u6536\u3002 GC_FOR_MALLOC \n    \u5806\u5df2\u6ee1\u800c\u7cfb\u7edf\u4e0d\u5f97\u4e0d\u505c\u6b62\u60a8\u7684\u5e94\u7528\u5e76\u56de\u6536\u5185\u5b58\u65f6\uff0c\u60a8\u7684\u5e94\u7528\u5c1d\u8bd5\u5206\u914d\u5185\u5b58\u800c\u5f15\u8d77\u7684\u5783\u573e\u56de\u6536\u3002 GC_HPROF_DUMP_HEAP \n    \u5f53\u60a8\u8bf7\u6c42\u521b\u5efa HPROF \u6587\u4ef6\u6765\u5206\u6790\u5806\u65f6\u51fa\u73b0\u7684\u5783\u573e\u56de\u6536\u3002 GC_EXPLICIT \n    \u663e\u5f0f\u5783\u573e\u56de\u6536\uff0c\u4f8b\u5982\u5f53\u60a8\u8c03\u7528 gc() \u65f6\uff08\u60a8\u5e94\u907f\u514d\u8c03\u7528\uff0c\u800c\u5e94\u4fe1\u4efb\u5783\u573e\u56de\u6536\u4f1a\u6839\u636e\u9700\u8981\u8fd0\u884c\uff09\u3002 GC_EXTERNAL_ALLOC \n    \u8fd9\u4ec5\u9002\u7528\u4e8e API \u7ea7\u522b 10 \u53ca\u66f4\u4f4e\u7ea7\u522b\uff08\u66f4\u65b0\u7248\u672c\u4f1a\u5728 Dalvik \u5806\u4e2d\u5206\u914d\u4efb\u4f55\u5185\u5b58\uff09\u3002\u5916\u90e8\u5206\u914d\u5185\u5b58\u7684\u5783\u573e\u56de\u6536\uff08\u4f8b\u5982\u5b58\u50a8\u5728\u539f\u751f\u5185\u5b58\u6216 NIO \u5b57\u8282\u7f13\u51b2\u533a\u4e2d\u7684\u50cf\u7d20\u6570\u636e\uff09\u3002   Amount_freed : \n\u4ece\u6b64\u6b21\u5783\u573e\u56de\u6536\u4e2d\u56de\u6536\u7684\u5185\u5b58\u91cf\u3002  Heap_stats :  \u5806\u7684\u53ef\u7528\u7a7a\u95f4\u767e\u5206\u6bd4\u4e0e\uff08\u6d3b\u52a8\u5bf9\u8c61\u6570\u91cf\uff09/\uff08\u5806\u603b\u5927\u5c0f\uff09\u3002   External_memory_stats :  API \u7ea7\u522b 10 (Android3.0 \u4ee5\u4e0b)\u53ca\u66f4\u4f4e\u7ea7\u522b\u7684\u5916\u90e8\u5206\u914d\u5185\u5b58\uff08\u5df2\u5206\u914d\u5185\u5b58\u91cf\uff09/\uff08\u53d1\u751f\u56de\u6536\u7684\u9650\u503c\uff09. \u800c\u65b0API\u4e2d, \u7edf\u4e00\u7531dalvik\u7ba1\u7406.   Pause_time   \u5806\u8d8a\u5927\uff0c\u6682\u505c\u65f6\u95f4\u8d8a\u957f\u3002\u5e76\u53d1\u6682\u505c\u65f6\u95f4\u663e\u793a\u4e86\u4e24\u4e2a\u6682\u505c\uff1a\u4e00\u4e2a\u51fa\u73b0\u5728\u56de\u6536\u5f00\u59cb\u65f6\uff0c\u53e6\u4e00\u4e2a\u51fa\u73b0\u5728\u56de\u6536\u5feb\u8981\u5b8c\u6210\u65f6\u3002", 
            "title": "dalvik\u65e5\u5fd7\u6253\u5370"
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#art", 
            "text": "\u4e0e Dalvik \u4e0d\u540c\uff0cART \u4e0d\u4f1a\u4e3a\u672a\u660e\u786e\u8bf7\u6c42\u7684\u5783\u573e\u56de\u6536\u8bb0\u5f55\u6d88\u606f\u3002\u53ea\u6709\u5728\u8ba4\u4e3a\u5783\u573e\u56de\u6536\u901f\u5ea6\u8f83\u6162\u65f6\u624d\u4f1a\u6253\u5370\u5783\u573e\u56de\u6536\u3002\u66f4\u786e\u5207\u5730\u8bf4\uff0c\u4ec5\u5728\u5783\u573e\u56de\u6536\u6682\u505c\u65f6\u95f4\u8d85\u8fc7 5ms \u6216\u5783\u573e\u56de\u6536\u6301\u7eed\u65f6\u95f4\u8d85\u8fc7 100ms \u65f6\u3002\u5982\u679c\u5e94\u7528\u672a\u5904\u4e8e\u53ef\u5bdf\u89c9\u7684\u6682\u505c\u8fdb\u7a0b\u72b6\u6001\uff0c\u90a3\u4e48\u5176\u5783\u573e\u56de\u6536\u4e0d\u4f1a\u88ab\u89c6\u4e3a\u8f83\u6162\u3002\u59cb\u7ec8\u4f1a\u8bb0\u5f55\u663e\u5f0f\u5783\u573e\u56de\u6536\u3002  I/art:  GC_Reason   GC_Name   Objects_freed ( Size_freed ) AllocSpace Objects,  Large_objects_freed ( Large_object_size_freed )  Heap_stats  LOS objects,  Pause_time(s) \n\nI/art : Explicit concurrent mark sweep GC freed 104710(7MB) AllocSpace objects, 21(416KB) LOS objects, 33% free, 25MB/38MB, paused 1.230ms total 67.216ms  GC_Reason :  Concurrent \n    \u4e0d\u4f1a\u6682\u505c\u5e94\u7528\u7ebf\u7a0b\u7684\u5e76\u53d1\u5783\u573e\u56de\u6536\u3002\u6b64\u5783\u573e\u56de\u6536\u5728\u540e\u53f0\u7ebf\u7a0b\u4e2d\u8fd0\u884c\uff0c\u800c\u4e14\u4e0d\u4f1a\u963b\u6b62\u5206\u914d\u3002 Alloc \n    \u60a8\u7684\u5e94\u7528\u5728\u5806\u5df2\u6ee1\u65f6\u5c1d\u8bd5\u5206\u914d\u5185\u5b58\u5f15\u8d77\u7684\u5783\u573e\u56de\u6536\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5206\u914d\u7ebf\u7a0b\u4e2d\u53d1\u751f\u4e86\u5783\u573e\u56de\u6536\u3002 Explicit \n    \u7531\u5e94\u7528\u660e\u786e\u8bf7\u6c42\u7684\u5783\u573e\u56de\u6536\uff0c\u4f8b\u5982\uff0c\u901a\u8fc7\u8c03\u7528 gc() \u6216 gc()\u3002\u4e0e Dalvik \u76f8\u540c\uff0c\u5728 ART \u4e2d\uff0c\u6700\u4f73\u505a\u6cd5\u662f\u60a8\u5e94\u4fe1\u4efb\u5783\u573e\u56de\u6536\u5e76\u907f\u514d\u8bf7\u6c42\u663e\u5f0f\u5783\u573e\u56de\u6536\uff08\u5982\u679c\u53ef\u80fd\uff09\u3002\u4e0d\u5efa\u8bae\u4f7f\u7528\u663e\u5f0f\u5783\u573e\u56de\u6536\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f1a\u963b\u6b62\u5206\u914d\u7ebf\u7a0b\u5e76\u4e0d\u5fc5\u8981\u5730\u6d6a\u8d39 CPU \u5468\u671f\u3002\u5982\u679c\u663e\u5f0f\u5783\u573e\u56de\u6536\u5bfc\u81f4\u5176\u4ed6\u7ebf\u7a0b\u88ab\u62a2\u5360\uff0c\u90a3\u4e48\u5b83\u4eec\u4e5f\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5361\u987f\uff08\u5e94\u7528\u4e2d\u51fa\u73b0\u95f4\u65ad\u3001\u6296\u52a8\u6216\u6682\u505c\uff09\u3002 NativeAlloc \n    \u539f\u751f\u5206\u914d\uff08\u5982\u4f4d\u56fe\u6216 RenderScript \u5206\u914d\u5bf9\u8c61\uff09\u5bfc\u81f4\u51fa\u73b0\u539f\u751f\u5185\u5b58\u538b\u529b\uff0c\u8fdb\u800c\u5f15\u8d77\u7684\u56de\u6536\u3002 CollectorTransition \n    \u7531\u5806\u8f6c\u6362\u5f15\u8d77\u7684\u56de\u6536\uff1b\u6b64\u56de\u6536\u7531\u8fd0\u884c\u65f6\u5207\u6362\u5783\u573e\u56de\u6536\u5f15\u8d77\u3002\u56de\u6536\u5668\u8f6c\u6362\u5305\u62ec\u5c06\u6240\u6709\u5bf9\u8c61\u4ece\u7a7a\u95f2\u5217\u8868\u7a7a\u95f4\u590d\u5236\u5230\u78b0\u649e\u6307\u9488\u7a7a\u95f4\uff08\u53cd\u4e4b\u4ea6\u7136\uff09\u3002\u5f53\u524d\uff0c\u56de\u6536\u5668\u8f6c\u6362\u4ec5\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\u51fa\u73b0\uff1a\u5728 RAM \u8f83\u5c0f\u7684\u8bbe\u5907\u4e0a\uff0c\u5e94\u7528\u5c06\u8fdb\u7a0b\u72b6\u6001\u4ece\u53ef\u5bdf\u89c9\u7684\u6682\u505c\u72b6\u6001\u53d8\u66f4\u4e3a\u53ef\u5bdf\u89c9\u7684\u975e\u6682\u505c\u72b6\u6001\uff08\u53cd\u4e4b\u4ea6\u7136\uff09\u3002  HomogeneousSpaceCompact \n    \u9f50\u6027\u7a7a\u95f4\u538b\u7f29\u662f\u7a7a\u95f2\u5217\u8868\u7a7a\u95f4\u5230\u7a7a\u95f2\u5217\u8868\u7a7a\u95f4\u538b\u7f29\uff0c\u901a\u5e38\u5728\u5e94\u7528\u8fdb\u5165\u5230\u53ef\u5bdf\u89c9\u7684\u6682\u505c\u8fdb\u7a0b\u72b6\u6001\u65f6\u53d1\u751f\u3002\u8fd9\u6837\u505a\u7684\u4e3b\u8981\u539f\u56e0\u662f\u51cf\u5c11 RAM \u4f7f\u7528\u91cf\u5e76\u5bf9\u5806\u8fdb\u884c\u788e\u7247\u6574\u7406\u3002  DisableMovingGc \n    \u8fd9\u4e0d\u662f\u771f\u6b63\u7684\u5783\u573e\u56de\u6536\u539f\u56e0\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u53d1\u751f\u5e76\u53d1\u5806\u538b\u7f29\u65f6\uff0c\u7531\u4e8e\u4f7f\u7528\u4e86 GetPrimitiveArrayCritical\uff0c\u56de\u6536\u906d\u5230\u963b\u6b62\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5f3a\u70c8\u5efa\u8bae\u4e0d\u8981\u4f7f\u7528 GetPrimitiveArrayCritical\uff0c\u56e0\u4e3a\u5b83\u5728\u79fb\u52a8\u56de\u6536\u5668\u65b9\u9762\u5177\u6709\u9650\u5236\u3002  HeapTrim \n    \u8fd9\u4e0d\u662f\u5783\u573e\u56de\u6536\u539f\u56e0\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u5806\u4fee\u526a\u5b8c\u6210\u4e4b\u524d\u56de\u6536\u4f1a\u4e00\u76f4\u53d7\u5230\u963b\u6b62\u3002   GC_Name :  ART \u5177\u6709\u53ef\u4ee5\u8fd0\u884c\u7684\u591a\u79cd\u4e0d\u540c\u7684\u5783\u573e\u56de\u6536\u3002   Concurrent mark sweep (CMS) \n    \u6574\u4e2a\u5806\u56de\u6536\u5668\uff0c\u4f1a\u91ca\u653e\u548c\u56de\u6536\u6620\u50cf\u7a7a\u95f4\u4ee5\u5916\u7684\u6240\u6709\u5176\u4ed6\u7a7a\u95f4\u3002 Concurrent partial mark sweep \n    \u51e0\u4e4e\u6574\u4e2a\u5806\u56de\u6536\u5668\uff0c\u4f1a\u56de\u6536\u9664\u4e86\u6620\u50cf\u7a7a\u95f4\u548c zygote \u7a7a\u95f4\u4ee5\u5916\u7684\u6240\u6709\u5176\u4ed6\u7a7a\u95f4\u3002  Concurrent sticky mark sweep \n    \u751f\u6210\u56de\u6536\u5668\uff0c\u53ea\u80fd\u91ca\u653e\u81ea\u4e0a\u6b21\u5783\u573e\u56de\u6536\u4ee5\u6765\u5206\u914d\u7684\u5bf9\u8c61\u3002\u6b64\u5783\u573e\u56de\u6536\u6bd4\u5b8c\u6574\u6216\u90e8\u5206\u6807\u8bb0\u6e05\u9664\u8fd0\u884c\u5f97\u66f4\u9891\u7e41\uff0c\u56e0\u4e3a\u5b83\u66f4\u5feb\u901f\u4e14\u6682\u505c\u65f6\u95f4\u66f4\u77ed\u3002  Marksweep + semispace \n    \u975e\u5e76\u53d1\u3001\u590d\u5236\u5783\u573e\u56de\u6536\uff0c\u7528\u4e8e\u5806\u8f6c\u6362\u4ee5\u53ca\u9f50\u6027\u7a7a\u95f4\u538b\u7f29\uff08\u5bf9\u5806\u8fdb\u884c\u788e\u7247\u6574\u7406\uff09\u3002   Objects_freed :  \u6b64\u6b21\u5783\u573e\u56de\u6536\u4ece\u975e\u5927\u578b\u5bf9\u8c61\u7a7a\u95f4\u56de\u6536\u7684\u5bf9\u8c61\u6570\u91cf\u3002  Size_freed :  \u6b64\u6b21\u5783\u573e\u56de\u6536\u4ece\u975e\u5927\u578b\u5bf9\u8c61\u7a7a\u95f4\u56de\u6536\u7684\u5b57\u8282\u6570\u91cf\u3002  Large_objects_freed :  \u6b64\u6b21\u5783\u573e\u56de\u6536\u4ece\u5927\u578b\u5bf9\u8c61\u7a7a\u95f4\u56de\u6536\u7684\u5bf9\u8c61\u6570\u91cf\u3002  Large_object_size_freed :  \u6b64\u6b21\u5783\u573e\u56de\u6536\u4ece\u5927\u578b\u5bf9\u8c61\u7a7a\u95f4\u56de\u6536\u7684\u5b57\u8282\u6570\u91cf\u3002  Heap_stats  \u7a7a\u95f2\u767e\u5206\u6bd4\u4e0e\uff08\u6d3b\u52a8\u5bf9\u8c61\u6570\u91cf\uff09/\uff08\u5806\u603b\u5927\u5c0f\uff09\u3002  Pause_time(s)  \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6682\u505c\u65f6\u95f4\u4e0e\u5783\u573e\u56de\u6536\u8fd0\u884c\u65f6\u4fee\u6539\u7684\u5bf9\u8c61\u5f15\u7528\u6570\u91cf\u6210\u6b63\u6bd4\u3002\u5f53\u524d\uff0cART CMS \u5783\u573e\u56de\u6536\u4ec5\u5728\u5783\u573e\u56de\u6536\u5373\u5c06\u5b8c\u6210\u65f6\u6682\u505c\u4e00\u6b21\u3002\u79fb\u52a8\u7684\u5783\u573e\u56de\u6536\u6682\u505c\u65f6\u95f4\u8f83\u957f\uff0c\u4f1a\u5728\u5927\u90e8\u5206\u5783\u573e\u56de\u6536\u671f\u95f4\u6301\u7eed\u51fa\u73b0\u3002", 
            "title": "art\u65e5\u5fd7\u6253\u5370"
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#android_1", 
            "text": "", 
            "title": "android\u81ea\u5e26\u5de5\u5177"
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#dumpsys-meminfo", 
            "text": "https://developer.android.com/studio/profile/investigate-ram.html\nhttp://gityuan.com/2016/01/02/memory-analysis-command/  \u573a\u666f: \u67e5\u770bdalvik\u7b49\u533a\u57df\u5185\u5b58\u60c5\u51b5.  root@zx1800:/data # dumpsys meminfo\nApplications Memory Usage (kB):                                           --- \u4ee5\u4e0b\u5185\u5b58\u5355\u4f4d\nUptime: 618252294 Realtime: 618252294                                     --- Realtime: \u7cfb\u7edf\u542f\u52a8\u5f00\u59cb\u8ba1\u65f6, \u5305\u542b\u4f11\u7720, \u51c6\u786e\u6027\u4f9d\u8d56\u9a71\u52a8\u5b9e\u73b0. \u5728\u9a71\u52a8\u65e0\u5b9e\u73b0\u65f6, \u4f7f\u7528Uptime.\n                                                                          --- Uptime: \u7cfb\u7edf\u542f\u52a8\u5f00\u59cb\u8ba1\u65f6, \u4e0d\u5305\u542b\u4f11\u7720.\n\nTotal PSS by process:                                                     --- \u6240\u6709\u8fdb\u7a0b PSS \u5360\u7528\u6392\u5e8f\n    24712 kB: system (pid 445)\n    19600 kB: com.china_liantong.upgrade (pid 2660)\n    17500 kB: com.china_liantong.video (pid 3002 / activities)\n    11100 kB: com.china_liantong.oam (pid 999)\n    10627 kB: com.china_liantong.channelmanagerservice (pid 961)\n     8733 kB: com.china_liantong.live.service.LiveService (pid 2086)\n     8394 kB: com.china_liantong.ocnadservice (pid 942)\n     7622 kB: com.android.systemui (pid 677)\n     6708 kB: dhcpcd (pid 639)\n     6541 kB: com.china_liantong.epg (pid 1235)\n     6286 kB: android.process.media (pid 2041)\n     5691 kB: com.china_liantong.airsharingservice (pid 2063)\n     4466 kB: dvbserver (pid 211)\n     4041 kB: mediaserver (pid 196)\n     3890 kB: com.china_liantong.xmppservice (pid 887)\n     3354 kB: com.china_liantong.tvmediaplayerservice (pid 905)\n     3239 kB: com.china_liantong.launcher:SettingContentProvider (pid 1165)\n     2466 kB: surfaceflinger (pid 183)\n     2214 kB: com.china_liantong.inputmethod.pinyin (pid 773)\n     2122 kB: com.china_liantong.dtvsyskeyservice (pid 980)\n     1955 kB: logd (pid 178)\n     1943 kB: com.china_liantong.tvframe (pid 1066)\n     1847 kB: com.china_liantong.playback (pid 923)\n     1640 kB: zygote (pid 220)\n      615 kB: sdcard (pid 1698)\n      473 kB: netd (pid 191)\n      415 kB: sysinfod (pid 184)\n      392 kB: vold (pid 182)\n      364 kB: developed (pid 222)\n      356 kB: adbd (pid 224)\n      350 kB: sh (pid 12684)\n      285 kB: /init (pid 1)\n      279 kB: dvbresourceserver (pid 210)\n      261 kB: sdcard (pid 223)\n      258 kB: avsettingd (pid 215)\n      240 kB: sh (pid 1325)\n      164 kB: ueventd (pid 159)\n      135 kB: keystore (pid 201)\n       82 kB: servicemanager (pid 181)\n       81 kB: installd (pid 199)\n       76 kB: healthd (pid 179)\n       62 kB: lmkd (pid 180)\n       26 kB: drmserver (pid 195)\n       26 kB: systemtaskd (pid 202)\n       22 kB: frontpaneld (pid 207)\n       15 kB: common_time (pid 189)\n       15 kB: frontpadserver (pid 216)\n       15 kB: dcaseventsvr (pid 219)\n        9 kB: sh (pid 190)\n        9 kB: debuggerd (pid 192)\n\nTotal PSS by OOM adjustment:                                              --- \u4ee5OOM\u7c7b\u522b\u5212\u5206(TODO: \u6bcf\u4e2a\u7c7b\u522b\u4f9d\u636e\u548c\u542b\u4e49)\n    26301 kB: Native\n                6708 kB: dhcpcd (pid 639)\n                4466 kB: dvbserver (pid 211)\n                4041 kB: mediaserver (pid 196)\n                2466 kB: surfaceflinger (pid 183)\n                1955 kB: logd (pid 178)\n                1640 kB: zygote (pid 220)\n                 615 kB: sdcard (pid 1698)\n                 473 kB: netd (pid 191)\n                 415 kB: sysinfod (pid 184)\n                 392 kB: vold (pid 182)\n                 364 kB: developed (pid 222)\n                 356 kB: adbd (pid 224)\n                 350 kB: sh (pid 12684)\n                 285 kB: /init (pid 1)\n                 279 kB: dvbresourceserver (pid 210)\n                 261 kB: sdcard (pid 223)\n                 258 kB: avsettingd (pid 215)\n                 240 kB: sh (pid 1325)\n                 164 kB: ueventd (pid 159)\n                 135 kB: keystore (pid 201)\n                  82 kB: servicemanager (pid 181)\n                  81 kB: installd (pid 199)\n                  76 kB: healthd (pid 179)\n                  62 kB: lmkd (pid 180)\n                  26 kB: drmserver (pid 195)\n                  26 kB: systemtaskd (pid 202)\n                  22 kB: frontpaneld (pid 207)\n                  15 kB: common_time (pid 189)\n                  15 kB: frontpadserver (pid 216)\n                  15 kB: dcaseventsvr (pid 219)\n                   9 kB: sh (pid 190)\n                   9 kB: debuggerd (pid 192)\n    24712 kB: System\n               24712 kB: system (pid 445)\n    48956 kB: Persistent\n               11100 kB: com.china_liantong.oam (pid 999)\n               10627 kB: com.china_liantong.channelmanagerservice (pid 961)\n                8394 kB: com.china_liantong.ocnadservice (pid 942)\n                7622 kB: com.android.systemui (pid 677)\n                3890 kB: com.china_liantong.xmppservice (pid 887)\n                3354 kB: com.china_liantong.tvmediaplayerservice (pid 905)\n                2122 kB: com.china_liantong.dtvsyskeyservice (pid 980)\n                1847 kB: com.china_liantong.playback (pid 923)\n    27280 kB: Foreground\n               17500 kB: com.china_liantong.video (pid 3002 / activities)\n                6541 kB: com.china_liantong.epg (pid 1235)\n                3239 kB: com.china_liantong.launcher:SettingContentProvider (pid 1165)\n     1943 kB: Visible\n                1943 kB: com.china_liantong.tvframe (pid 1066)\n     2214 kB: Perceptible\n                2214 kB: com.china_liantong.inputmethod.pinyin (pid 773)\n     6286 kB: Home\n                6286 kB: android.process.media (pid 2041)\n    34024 kB: B Services  (\u6ce8\u91ca: \u8001\u65e7\u7684, \u4e0d\u592a\u53ef\u80fd\u88ab\u4f7f\u7528\u5230\u7684\u670d\u52a1\u8fdb\u7a0b)\n               19600 kB: com.china_liantong.upgrade (pid 2660)\n                8733 kB: com.china_liantong.live.service.LiveService (pid 2086)\n                5691 kB: com.china_liantong.airsharingservice (pid 2063)\n\nTotal PSS by category:                                               --- \u4ee5 category \u5212\u5206\n    49530 kB: Native\n    35318 kB: Dalvik\n    26569 kB: .so mmap\n    17158 kB: .oat mmap\n    16357 kB: .art mmap\n     8144 kB: .dex mmap\n     6671 kB: Stack\n     2822 kB: Dalvik Other\n     2635 kB: Other mmap\n     2160 kB: .ttf mmap\n     1892 kB: Other dev\n     1581 kB: Unknown\n      843 kB: .apk mmap\n       36 kB: EGL mtrack\n        0 kB: Cursor\n        0 kB: Ashmem\n        0 kB: Gfx dev\n        0 kB: .jar mmap\n        0 kB: GL mtrack\n        0 kB: Other mtrack\n\nTotal RAM: 443652 kB (status critical)\n Free RAM: 137634 kB (40310 cached pss + 9492 cached kernel + 87832 free)\n Used RAM: 168782 kB (131406 used pss + 37376 kernel)\n Lost RAM: 137236 kB\n     ZRAM: 10684 kB physical used for 32252 kB in swap (196604 kB total swap)\n           \u538b\u7f29\u540e\u5185\u5b58\u5360\u7528             \u88ab\u538b\u7f29\u5185\u5b58\n      KSM: 39500 kB saved from shared 5844 kB\n           85420 kB unshared; 99276 kB volatile\n   Tuning: 96 (large 96), oom 10240 kB, restore limit 3413 kB (low-ram)", 
            "title": "dumpsys meminfo "
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#procrank", 
            "text": "\u573a\u666f: \u67e5\u770b\u5404\u4e2a\u8fdb\u7a0b\u7684PSS/USS \u5e76\u6bd4\u8f83  shell@zx1800:/ # procrank\n  PID       Vss      Rss      Pss      Uss  cmdline\n  884   589628K   89320K   30444K   23128K  com.china_liantong.launcher\n  447   617060K   74620K   25695K   20904K  system_server\n 1139   572780K   61160K   14848K   10160K  com.china_liantong.browserreceiver\n  209   125160K   25312K   13834K   12696K  /system/bin/dvbserver\n 1180   549556K   65992K   12433K    6192K  com.china_liantong.upgrade\n  807   554556K   48092K    9636K    7160K  com.china_liantong.ocnadservice\n  222   516596K   54256K    8960K    3152K  zygote\n  864   547692K   47220K    8431K    6024K  com.china_liantong.oam\n  827   552092K   46208K    8180K    5840K  com.china_liantong.channelmanagerservice\n  223    71580K   18580K    7156K    3928K  /system/bin/developed\n  955   529948K   44620K    6591K    4000K  com.china_liantong.epg\n  534   525112K   41324K    6233K    3816K  com.android.systemui\n  516   523764K   39424K    5949K    3884K  android.process.media\n  183    55092K   17936K    5935K    4284K  /system/bin/surfaceflinger\n 1066   525392K   41296K    5140K    2712K  com.china_liantong.live.service.LiveService\n  771   529900K   40224K    4864K    2888K  com.china_liantong.tvmediaplayerservice\n  753   525476K   37228K    4681K    2804K  com.china_liantong.xmppservice\n  201    53500K   12232K    4421K    3460K  /system/bin/mediaserver\n 1206   521008K   36324K    4288K    2580K  com.china_liantong.mytv\n  979   527892K   36256K    4201K    2080K  com.china_liantong.launcher:SettingContentProvider\n 1095   526240K   36480K    4145K    2368K  com.china_liantong.airsharingservice\n  601   518952K   37128K    3898K    1984K  com.china_liantong.inputmethod.pinyin\n  789   526912K   32468K    3309K    1832K  com.china_liantong.playback\n 1048   520468K   32616K    2799K     968K  com.china_liantong.live\n  846   525972K   32620K    2787K    1336K  com.china_liantong.dtvsyskeyservice\n 1252   519376K   31716K    2687K    1260K  com.china_liantong.video\n  907   524920K   32120K    2676K    1236K  com.china_liantong.tvframe\n  511    19896K    5168K    2350K    1208K  /system/bin/dhcpcd\n  210    25496K    6480K    1662K    1316K  /system/bin/avsettingd\n  178    18252K    2596K    1509K    1476K  /system/bin/logd\n  199    23564K    4880K    1273K    1004K  /system/bin/drmserver\n  217    18936K    2864K     826K     740K  /system/bin/frontpadserver\n  182    19568K    3176K     816K     636K  /system/bin/vold\n  205    12508K    2804K     718K     572K  /system/bin/keystore\n  184    16580K    2580K     681K     536K  /system/bin/sysinfod\n  197    21796K    1672K     538K     480K  /system/bin/netd\n 2135     9192K    1100K     532K     520K  procrank\n  189    17484K    1748K     481K     420K  /system/bin/common_time\n  208    17492K    1792K     479K     436K  /system/bin/dvbresourceserver\n  220    16400K    1672K     434K     388K  /system/bin/dcaseventsvr\n  225    16980K     508K     416K     416K  /sbin/adbd\n  224    15412K    1048K     356K     336K  /system/bin/sdcard\n 1434     9324K    1020K     338K     244K  sh\n  186    14820K     428K     336K     332K  /sbin/watchdog\n    1     8860K     396K     327K     316K  /init\n 1428     9324K    1008K     326K     232K  /system/bin/sh\n  206    14460K    1036K     310K     288K  /system/bin/systemtaskd\n  203     9412K    1012K     272K     248K  /system/bin/installd\n  207    14456K     992K     266K     244K  /system/bin/frontpaneld\n  179     9828K     316K     260K     256K  /sbin/healthd\n  180    10624K    1664K     184K     116K  /system/bin/lmkd\n  181     9460K     792K      98K      76K  /system/bin/servicemanager\n  198    10056K    1108K      64K      28K  /system/bin/debuggerd\n  160     8852K      56K      11K       4K  /sbin/ueventd\n                           ------   ------  ------\n                          230106K  155544K  TOTAL\n\nRAM: 443652K total, 38684K free, 0K buffers, 98768K cached, 1384K shmem, 21560K slab", 
            "title": "procrank "
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#cat-procmeminfo", 
            "text": "\u573a\u666f: \u7cfb\u7edf\u5185\u5b58\u8be6\u7ec6\u4fe1\u606f  shell@zx1800:/ # cat /proc/meminfo                                             \nMemTotal:         443652 kB                      --- \u7cfb\u7edf\u53ef\u89c1\u7684\u603b\u7269\u7406\u5185\u5b58\nMemFree:           38584 kB                      --- \u7cfb\u7edf\u4e2d\u672a\u4f7f\u7528\u7684\u7269\u7406\u5185\u5b58\nMemAvailable:     125556 kB                      --- \u53ef\u7528\u5185\u5b58 = MemFree + Cached + Buffers\nBuffers:               0 kB                      --- \u7528\u4e8e\u6587\u4ef6\u7f13\u51b2\u7684\u5185\u5b58\u5927\u5c0f\nCached:            98768 kB                      --- \u7528\u4e8e\u9ad8\u901f\u7f13\u5b58\u5668\u5360\u7528\u7684\u5185\u5b58\u5927\u5c0f\nSwapCached:          128 kB                      --- \u7528\u4e8e\u9ad8\u901f\u7f13\u5b58\u5668\u5360\u7528\u7684swap\u5927\u5c0f\nActive:           143160 kB                      --- \u6d3b\u8dc3\u4f7f\u7528\u4e2d\u7684\u5185\u5b58, \u4e00\u822c\u4e0d\u4f1a\u56de\u6536. = anon + file\nInactive:          87104 kB                      --- \u6700\u8fd1\u672a\u88ab\u4f7f\u7528\u7684\u5185\u5b58, \u53ef\u4ee5\u88ab\u56de\u6536. = anon + file\nActive(anon):      94348 kB\nInactive(anon):    38532 kB\nActive(file):      48812 kB\nInactive(file):    48572 kB\nUnevictable:           0 kB                      \nMlocked:               0 kB\nHighTotal:             0 kB                      \nHighFree:              0 kB\nLowTotal:         443652 kB\nLowFree:           38584 kB\nSwapTotal:        196604 kB                      --- swap\u5206\u533a\u5927\u5c0f\nSwapFree:         193784 kB                      --- swap\u5206\u533a\u5269\u4f59\u7a7a\u95f4\nDirty:                 0 kB                      \nWriteback:             0 kB\nAnonPages:        131492 kB                      --- \u533f\u540d\u9875\nMapped:            90688 kB                      --- map\u7684\u5185\u5b58\nShmem:              1384 kB                      --- \u5171\u4eab\u5185\u5b58, \u8ddf\u6587\u4ef6\u65e0\u5173\u7684\nSlab:              21604 kB                      --- kernel slab\u5206\u914d\u5668\nSReclaimable:       5464 kB\nSUnreclaim:        16140 kB\nKernelStack:        5424 kB                      --- \u5185\u6838\u6808\nPageTables:         7932 kB                      --- \u7ba1\u7406\u9875\u7684\u6570\u636e\u7ed3\u6784\u5927\u5c0f\nNFS_Unstable:          0 kB\nBounce:                0 kB\nWritebackTmp:          0 kB\nCommitLimit:      418428 kB\nCommitted_AS:    8764944 kB\nVmallocTotal:     565248 kB\nVmallocUsed:       55952 kB\nVmallocChunk:     472068 kB", 
            "title": "cat /proc/meminfo "
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#vmstat", 
            "text": "\u573a\u666f: \u76d1\u63a7\u7cfb\u7edf\u72b6\u6001.  \u8be5\u5de5\u5177\u53ef\u4ee5\u67e5\u770b\u7cfb\u7edf\u5185\u5b58\u4fe1\u606f, \u8fdb\u7a0b\u961f\u5217, \u7cfb\u7edf\u5207\u6362, CPU\u65f6\u95f4\u5360\u6bd4\u7b49\u4fe1\u606f, \u5468\u671f\u6027\u52a8\u6001\u8f93\u51fa.  procs  memory                       system          cpu              \n r  b    free mapped   anon   slab    in   cs  flt  us ni sy id wa ir\n  0    0     38628    90844   131992    21688    5268   10257      0     5    0    6   99    0    0 \n  0    0     38628    90844   132008    21688    5271   10367      0     8    0    9   99    0    0 \n  0    0     38628    90844   132048    21688    5150   10497      0    10    1    8   99    0    0 \n  0    0     38628    90844   132100    21688    5112   10180      0     8    0    3   99    0    0 \n  0    0     38628    90844   132120    21688    5221   10289      0     8    0    4   99    0    0   \u603b\u517115\u5217\u53c2\u6570, \u4e2a\u53c2\u6570\u542b\u4e49\u5982\u4e0b:   procs(\u8fdb\u7a0b)  r: Running\u961f\u5217\u4e2d\u8fdb\u7a0b\u6570, \u8fd9\u4e2a\u503c\u8d85\u8fc7cpu\u4e2a\u6570\u5c31\u4f1a\u51fa\u73b0cpu\u74f6\u9888.  b: IO wait \u7684\u8fdb\u7a0b\u6570, \u8be5\u503c\u8fc7\u5927, \u53ef\u80fd\u662f\u7b49\u5f85\u6587\u4ef6\u64cd\u4f5c\u7684\u8fdb\u7a0b\u591a\u6216\u8005\u6587\u4ef6\u8bfb\u5199\u6162.    memory(\u5185\u5b58)  free: \u53ef\u7528\u5185\u5b58\u5927\u5c0f  mapped: mmap\u6620\u5c04\u7684\u5185\u5b58\u5927\u5c0f  anon: \u533f\u540d\u5185\u5b58\u5927\u5c0f, \u4e00\u822c\u7531malloc\u5f15\u8d77, \u6216\u8005\u533f\u540dmmap.  slab: slab\u7684\u5185\u5b58\u5927\u5c0f.    system(\u7cfb\u7edf)  in: \u6bcf\u4e2a\u95f4\u9694\u65f6\u95f4\u7684\u4e2d\u65ad\u6b21\u6570(\u5305\u62ec\u65f6\u949f\u4e2d\u65ad), \u8fd9\u4e2a\u503c\u8d8a\u5927, \u5185\u6838\u6d88\u8017\u7684cpu\u65f6\u95f4\u8d8a\u591a.\u9700\u8981\u67e5\u770b /proc/interrupts \u4e0b\u4e2d\u65ad\u589e\u957f\u60c5\u51b5.  cs: \u6bcf\u4e2a\u95f4\u9694\u65f6\u95f4\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u6b21\u6570  flt: major page faults. \u9700\u8981\u4ecedisk\u8bfb\u53d6\u6570\u636e\u7684\u7f3a\u9875\u9519\u8bef.    CPU (\u5904\u7406\u5668)  us: user time, \u6bd4\u8f83\u9ad8\u65f6\uff0c\u8bf4\u660e\u7528\u6237\u8fdb\u7a0b\u6d88\u8017\u7684cpu\u65f6\u95f4\u591a.  ni: nice time, \u88ab\u964d\u4f4e\u4f18\u5148\u7ea7\u7684\u8fdb\u7a0b\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u7684\u6267\u884cCPU\u65f6\u95f4\u767e\u5206\u6bd4.  sy: system time, \u7cfb\u7edf\u5185\u6838\u6d88\u8017\u7684CPU\u767e\u5206\u6bd4  id: idle time, \u7cfb\u7edf\u7a7a\u95f2\u65f6\u95f4\u767e\u5206\u6bd4  wa: iowait time, CPU\u5728\u7b49\u5f85IO\u5b8c\u6210\u65f6\u95f4\u5360\u6bd4  ir: interrupt time, \u7cfb\u7edf\u4e2d\u65ad\u8017\u65f6\u5360CPU\u767e\u5206\u6bd4     \u66f4\u591a\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f, \u8bf7\u76f4\u63a5\u67e5\u770b  /proc/vmstat \nhttp://blog.csdn.net/macky0668/article/details/6839498", 
            "title": "vmstat "
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#librank", 
            "text": "\u573a\u666f: \u4e0eprocrank\u4e92\u8865\u4f7f\u7528, \u662fprocmem\u7684\u6269\u5c55. \u663e\u793a\u6240\u6709\u8fdb\u7a0b\u7684\u4fe1\u606f, \u9700\u8981\u5de5\u5177\u7edf\u8ba1\u5206\u7c7b. \u4e5f\u53ef\u4ee5\u7528\u6765\u67e5\u770b\u6bcf\u4e2a\u5e93\u6216\u5171\u4eab\u6587\u4ef6\u771f\u5b9e\u5360\u7528\u7684\u5185\u5b58\u5927\u5c0f.  \u6570\u636e\u6765\u6e90\u4e0eprocmem\u4e00\u6837, \u4f46\u662fprocmem\u9488\u5bf9\u7684\u662f\u5355\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\u5360\u7528\u60c5\u51b5. \u800clibrank\u662f\u663e\u793a\u67d0\u4e2a\u5e93\u6216\u8005\u6587\u4ef6\u88ab\u54ea\u4e9b\u8fdb\u7a0b\u5171\u4eab, \u5e76\u663e\u793a\u5360\u7528\u5927\u5c0f. \u5982\u4e0b\u56fe\u6240\u793a.", 
            "title": "librank "
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#dumpcache", 
            "text": "\u8be5\u5de5\u5177\u662fandroid7.0\u4e4b\u540e\u624d\u6709\u7684\u5de5\u5177,\u7528\u4e8e\u67e5\u770b\u6587\u4ef6\u7cfb\u7edf\u4e2d\u6709\u6bcf\u4e2a\u6587\u4ef6\u88abcache\u5230\u5185\u5b58\u7684\u5927\u5c0f. \u8be5\u6587\u4ef6\u53ef\u4ee5\u7528\u6765\u5224\u65ad\u7f3a\u9875\u9519\u8bef\u65f6\u52a0\u8f7d\u7684\u6587\u4ef6.  \u5728Launcher\u754c\u9762\u65f6\u7684\u8f93\u51fa\u5982\u4e0b:   \u7a33\u5b9a\u64ad\u653e1080P\u89c6\u9891\u65f6:   \u6309\u4e0b\u9065\u63a7\u5668\u786e\u5b9a\u952e\u663e\u793aUI\u65f6:   \u5bf9\u6bd4, \u53ef\u4ee5\u77e5\u9053\u5728\u64ad\u653e\u8fc7\u7a0b\u4e2d, \u663e\u793aUI\u65f6\u4e3b\u8981\u52a0\u8f7d\u7684\u6587\u4ef6\u662f:", 
            "title": "dumpcache "
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#bugreport", 
            "text": "Android\u7cfb\u7edf\u60f3\u8981\u6210\u4e3a\u4e00\u4e2a\u529f\u80fd\u5b8c\u5907\uff0c\u751f\u6001\u7e41\u8363\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u90a3\u5c31\u5fc5\u987b\u63d0\u4f9b\u5b8c\u6574\u7684\u5e94\u7528\u5f00\u53d1\u73af\u5883\u3002\u800c\u5728\u5e94\u7528\u5f00\u53d1\u4e2d\uff0capp\u7a0b\u5e8f\u7684\u8c03\u8bd5\u5206\u6790\u662f\u65e5\u5e38\u751f\u4ea7\u4e2d\u8fdb\u7a0b\u4f1a\u8fdb\u884c\u7684\u5de5\u4f5c\u3002Android\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u4eba\u5458\u5206\u6790\u6574\u4e2a\u7cfb\u7edf\u5e73\u53f0\u548c\u67d0\u4e2aapp\u5728\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u4e4b\u5185\u7684\u6240\u6709\u4fe1\u606f\uff0c\u4e13\u95e8\u5f00\u53d1\u4e86bugreport\u5de5\u5177\u3002  \n\u8be5\u5de5\u5177\u7684\u7f3a\u70b9\u662f: \n1. \u8017\u65f6\u8fc7\u957f, \u53ea\u80fd\u6293\u53d6\u5f53\u524d\u72b6\u6001.\n2. \u6293\u53d6\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u5bfc\u81f4\u7cfb\u7edf\u5f02\u5e38, \u56e0\u4e3a\u5176oom\u4f1a\u88ab\u8c03\u9ad8, \u5728\u5185\u5b58\u4e0d\u8db3\u65f6\u5bfc\u81f4\u7cfb\u7edf\u5176\u4ed6\u5e94\u7528\u88abkill.\n3. \u7531\u4e8ebugreport\u7684\u6743\u9650\u4f1a\u964d\u4f4e\u5230shell, \u800c\u5f88\u591a\u670d\u52a1\u5728\u4f1a\u62d2\u7edddumpsys\u7684\u64cd\u4f5c, \u5bfc\u81f4\u90e8\u5206\u4fe1\u606f\u65e0\u6cd5\u6293\u53d6.    \u4f7f\u7528\u65b9\u6cd5:    \u901a\u8fc7bugreport\u547d\u4ee4\u6293\u53d6\u4e00\u4efdbugreport\u539f\u59cb\u7684\u6587\u672clog\uff1a\n     shell# bugreport gt;/data/local/tmp/bugreport.txt    \u5c06\u4e0a\u9762\u547d\u4ee4\u6293\u53d6\u7684bugreport.txt\u6587\u672c\u6587\u4ef6\u62f7\u8d1d\u51fa\u6765\uff0c\u4e0a\u4f20\u5230bugreport\u5206\u6790\u670d\u52a1\u5668\u4e0a\u9762\uff0c\u670d\u52a1\u5668\u4f1a\u81ea\u52a8\u751f\u6210\u7cfb\u7edf\u5f53\u524d\u72b6\u6001\u5feb\u7167\uff0c\u4e0a\u4f20\u65b9\u6cd5\u5982\u4e0b\uff1a\n  a. \u901a\u8fc7\u6d4f\u89c8\u5668\u8fdb\u5165\u670d\u52a1\u5668\u5730\u5740\uff1ahttp://10.27.254.108:8080/,\u5982\u4e0b\u56fe\uff1a     b. \u70b9\u51fbbroswer\u6d4f\u89c8report.txt\u6587\u672c\u6587\u4ef6\uff0c\u7136\u540e\u70b9\u51fbupload\u6309\u94ae\u4e0a\u4f20\u6587\u4ef6\uff0c\u4e0a\u4f20\u540e\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u751f\u6210\u7cfb\u7edf\u72b6\u6001\u5feb\u7167\uff0c\u5feb\u7167\u540d\u79f0\u5bf9\u5e94\u5230\u4e0a\u4f20\u65f6\u95f4\uff0c\u70b9\u51fb\u5feb\u7167\u540d\u79f0\u8fdb\u5165\u7cfb\u7edf\u5206\u6790\u9875\u9762\uff0c\u5982\u4e0b\uff1a   \u8be5\u7f51\u9875\u670d\u52a1\u5668\u7684dockerfile\u5982\u4e0b:  FROM ubuntu:14.04\n MAINTAINER wertherzhang  werther0331@gmail.com \n\n RUN apt-get update\n\n RUN apt-get -y install openjdk-7-jdk openjdk-7-jre\n RUN apt-get -y install python\n\n RUN mkdir -p /root/chkbugreport\n RUN apt-get -y install wget\n RUN wget http://10.27.8.54/chkbugreport.tgz -O /root/chkbugreport.tgz\n RUN tar xvf /root/chkbugreport.tgz -C /tmp/\n RUN mkdir -p /root/bin\n\n ADD server.py /root/chkbugreport/\n ADD chkbugreport.jar /root/bin/\n ADD chkbugreport /usr/local/bin/\n ADD ddmlib.jar /root/bin/\n\n RUN apt-get clean\n\n ENV JAVA_HOME /usr/lib/jvm/java-7-openjdk-amd64\n ENV PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n WORKDIR /root/chkbugreport/\n\n CMD [ python ,  server.py ]  \u9644\u4ef6:  chkbugreport-server.zip", 
            "title": "bugreport \u4fe1\u606f\u5206\u6790 "
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#_4", 
            "text": "", 
            "title": "\u5e94\u7528\u5185\u5b58\u5206\u6790"
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#android_2", 
            "text": "", 
            "title": "android\u81ea\u5e26\u5de5\u5177"
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#dumpsys-meminfo_1", 
            "text": "\u573a\u666f: \u67e5\u770bjava\u8fdb\u7a0b\u7684\u4e0d\u540c\u7c7b\u522b\u5185\u5b58\u5360\u7528\u60c5\u51b5, \u7279\u522b\u662f\u786e\u5b9aactivity\u662f\u5426\u6cc4\u9732\u7b49\u4fe1\u606f.  \u547d\u4ee4  dumpsys meminfo com.china_liantong.launcher -d  \u8f93\u51fa:  shell@zx1800:/  # dumpsys meminfo com.china_liantong.launcher -d                 \nApplications Memory Usage  ( kB ) :\nUptime:  2612261  Realtime:  2612261 \n\n** MEMINFO in pid  884   [ com.china_liantong.launcher ]  **\n                   Pss  Private  Private  Swapped     Heap     Heap     Heap\n                 Total    Dirty    Clean    Dirty     Size    Alloc     Free\n                ------   ------   ------   ------   ------   ------   ------\n  Native Heap      5915       5440          0          0      24576      16208       8367 \n  Dalvik Heap     13764      13364          0          0      26989      20896       6093 \n Dalvik Other       248        248          0          0                            \n        Stack       513        512          0          0                            \n    Other dev         4          0          4          0                            \n     .so mmap      3392        424        472          0                            \n    .apk mmap        94          0          4          0                            \n    .ttf mmap      1573          0        568          0                            \n    .dex mmap      1188          0        752          0                            \n    .oat mmap      1419          0        260          0                            \n    .art mmap       979        616          0          0                            \n   Other mmap        80          4          0          0                            \n   EGL mtrack        17         17          0          0                            \n      Unknown       134        128          0          0                            \n        TOTAL     29320      20753       2060          0      51565      37104      14460 \n\n Objects\n               Views:      1192          ViewRootImpl:         1 \n         AppContexts:         3            Activities:         1 \n              Assets:         2         AssetManagers:         2 \n       Local Binders:        41         Proxy Binders:       220 \n       Parcel memory:         7          Parcel count:        14 \n    Death Recipients:        10       OpenSSL Sockets:         0 \n\n SQL\n         MEMORY_USED:         0 \n  PAGECACHE_OVERFLOW:         0           MALLOC_SIZE:         0   Native Heap : native\u5206\u914d\u5360\u7528\u7684RAM, \u901a\u8fc7malloc\u7533\u8bf7\u7684\u5185\u5b58.  Heap Size  \u662f\u5185\u5b58\u6c60\u603b\u5927\u5c0f(\u5411\u7cfb\u7edf\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f).  Heap Alloc  \u5df2\u7ecf\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f(\u5e94\u7528\u5411dlmalloc\u7533\u8bf7\u7684\u5185\u5b58).  Heap Free  \u5185\u5b58\u6c60\u5269\u4f59\u53ef\u5206\u914d\u5185\u5b58\u5927\u5c0f.  Dalvik Heap : \u5e94\u7528\u4e2dDalvi\u5206\u914d\u5360\u7528\u7684RAM.  Pss Total : \u5305\u542b\u6240\u6709Zygote\u5206\u914d(\u901a\u8fc7\u8fdb\u7a0b\u95f4\u5171\u4eab\u5360\u7528).  Private Dirty : \u4ec5\u5206\u914d\u5230\u5e94\u7528\u7684\u5b9e\u9645RAM, \u7531\u5e94\u7528\u5206\u914d\u6216\u8005zygote\u5206\u914d\u9875, \u8fd9\u4e9b\u9875\u81ea\u4ecezygote fork\u5e94\u7528\u8fdb\u7a0b\u540e\u88ab\u4fee\u6539\u8fc7.  .so map  \u548c  .dex map : mmap\u7684.so\u548c.dex(Dalvik\u6216ART)\u4ee3\u7801\u5360\u7528\u7684RAM.  Pss Total  \u6570\u503c\u5305\u62ec\u5e94\u7528\u4e4b\u95f4\u5171\u4eab\u7684\u5e73\u53f0\u4ee3\u7801\uff1b Private Clean  \u662f\u60a8\u7684\u5e94\u7528\u81ea\u5df1\u7684\u4ee3\u7801\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5b9e\u9645\u6620\u5c04\u7684\u5185\u5b58\u66f4\u5927 - \u6b64\u5904\u7684 RAM \u4ec5\u4e3a\u5e94\u7528\u6267\u884c\u7684\u4ee3\u7801\u5f53\u524d\u6240\u9700\u7684 RAM\u3002\u4e0d\u8fc7\uff0c.so mmap \u5177\u6709\u8f83\u5927\u7684\u79c1\u6709\u810f RAM\uff0c\u56e0\u4e3a\u5728\u52a0\u8f7d\u5230\u5176\u6700\u7ec8\u5730\u5740\u65f6\u5bf9\u539f\u751f\u4ee3\u7801\u8fdb\u884c\u4e86\u4fee\u6539(GOT?!)\u3002   .oat mmap : \u4ee3\u7801\u6620\u50cf\u5360\u7528\u7684 RAM \u91cf\uff0c\u6839\u636e\u591a\u4e2a\u5e94\u7528\u901a\u5e38\u4f7f\u7528\u7684\u9884\u52a0\u8f7d\u7c7b\u8ba1\u7b97\u3002\u6b64\u6587\u4ef6\u5728\u6240\u6709\u5e94\u7528\u4e4b\u95f4\u5171\u4eab\uff0c\u4e0d\u53d7\u7279\u5b9a\u5e94\u7528\u5f71\u54cd\u3002   .art mmap : \u5806\u5360\u7528\u7684 RAM \u91cf\uff0c\u6839\u636e\u591a\u4e2a\u5e94\u7528\u901a\u5e38\u4f7f\u7528\u7684\u9884\u52a0\u8f7d\u7c7b\u8ba1\u7b97\u3002\u6b64\u6620\u50cf\u5728\u6240\u6709\u5e94\u7528\u4e4b\u95f4\u5171\u4eab\uff0c\u4e0d\u53d7\u7279\u5b9a\u5e94\u7528\u5f71\u54cd\u3002\u5c3d\u7ba1 ART \u6620\u50cf\u5305\u542b Object \u5b9e\u4f8b\uff0c\u5b83\u4ecd\u7136\u4e0d\u4f1a\u8ba1\u5165\u60a8\u7684\u5806\u5927\u5c0f\u3002   Unknown : \u7cfb\u7edf\u65e0\u6cd5\u5c06\u5176\u5206\u7c7b\u5230\u5176\u4ed6\u66f4\u5177\u4f53\u7684\u4e00\u4e2a\u9879\u4e2d\u7684\u4efb\u4f55 RAM \u9875\u3002 \u5176  Pss Total  \u4e0e Zygote\u5171\u4eab.  TOTAL : \u4e0a\u65b9\u6240\u6709 PSS \u5b57\u6bb5\u7684\u603b\u548c\u3002\u8868\u793a\u60a8\u7684\u8fdb\u7a0b\u5360\u7528\u7684\u5185\u5b58\u91cf\u5360\u6574\u4f53\u5185\u5b58\u7684\u6bd4.  Private Dirty  \u548c  Private Clean  \u662f\u60a8\u7684\u8fdb\u7a0b\u4e2d\u7684\u603b\u5206\u914d\uff0c\u672a\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u5171\u4eab\u3002\u5b83\u4eec\uff08\u5c24\u5176\u662f Private Dirty\uff09\u7b49\u4e8e\u60a8\u7684\u8fdb\u7a0b\u88ab\u7834\u574f\u540e\u5c06\u91ca\u653e\u56de\u7cfb\u7edf\u4e2d\u7684 RAM \u91cf\u3002 Dirty \u56e0\u4e3a\u5df2\u88ab\u4fee\u6539\u800c\u5fc5\u987b\u4fdd\u6301\u5728 RAM \u4e2d\u7684 RAM \u9875\uff08\u56e0\u4e3a\u6ca1\u6709\u4ea4\u6362\uff09\uff1b Clean  \u662f\u5df2\u4ece\u67d0\u4e2a\u6301\u4e45\u6027\u6587\u4ef6\uff08\u4f8b\u5982\u6b63\u5728\u6267\u884c\u7684\u4ee3\u7801\uff09\u6620\u5c04\u7684 RAM \u9875\uff0c\u5982\u679c\u4e00\u6bb5\u65f6\u95f4\u4e0d\u7528\uff0c\u53ef\u4ee5\u79fb\u51fa\u5206\u9875\u3002  ViewRootImpl : \u8fdb\u7a0b\u4e2d\u5f53\u524d\u6d3b\u52a8\u7684\u6839\u89c6\u56fe\u6570\u91cf\u3002\u6bcf\u4e2a\u6839\u89c6\u56fe\u90fd\u4e0e\u4e00\u4e2a\u7a97\u53e3\u5173\u8054\uff0c\u56e0\u6b64\u6709\u52a9\u4e8e\u786e\u5b9a\u6d89\u53ca\u5bf9\u8bdd\u6846\u6216\u5176\u4ed6\u7a97\u53e3\u7684\u5185\u5b58\u6cc4\u6f0f\u3002   AppContexts  \u548c  Activities : \u5f53\u524d\u6d3b\u52a8\u7684\u5e94\u7528 Context \u548c Activity \u5bf9\u8c61\u6570\u91cf\u3002\u5feb\u901f\u786e\u5b9a\u7531\u4e8e\u5b58\u5728\u9759\u6001\u5f15\u7528\uff08\u6bd4\u8f83\u5e38\u89c1\uff09\u800c\u65e0\u6cd5\u8fdb\u884c\u5783\u573e\u56de\u6536\u7684\u5df2\u6cc4\u6f0f Activity \u5bf9\u8c61\u3002\u8fd9\u4e9b\u5bf9\u8c61\u7ecf\u5e38\u62e5\u6709\u5f88\u591a\u5173\u8054\u7684\u5176\u4ed6\u5206\u914d\uff0c\u56e0\u6b64\u6210\u4e3a\u8ddf\u8e2a\u5927\u578b\u5185\u5b58\u6cc4\u6f0f\u7684\u4e00\u79cd\u4e0d\u9519\u7684\u65b9\u5f0f\u3002  \u4f8b\u5b50\u89c1\u5185\u5b58\u6cc4\u9732\u90e8\u5206.", 
            "title": "dumpsys meminfo \u5e94\u7528\u5185\u5b58 "
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#procmem", 
            "text": "\u573a\u666f: \u67e5\u770b\u6307\u5b9a\u8fdb\u7a0b\u7684\u5404\u90e8\u5206\u5185\u5b58\u5360\u7528\u60c5\u51b5.\n\u547d\u4ee4:  procmem  pid \n\u4f8b\u5b50:  procmem 2509 \n\u6570\u636e\u6765\u6e90:  /proc/ pid /maps  \u548c  /proc/ pid /pagemap  Vss      Rss      Pss      Uss     ShCl     ShDi     PrCl     PrDi  Name   \u5404\u5b57\u6bb5\u542b\u4e49:  ShCl  --  shared clean\nShDi  --  shared dirty\nPrCl  --  private clean\nPrDi  --  private dirty", 
            "title": "procmem  "
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#showmap", 
            "text": "\u573a\u666f: \u8fdb\u7a0b\u865a\u62df\u8fdb\u7a0b\u7a7a\u95f4\u7684\u5185\u5b58\u5206\u914d\u60c5\u51b5 \u548c \u8be6\u7ec6\u7684\u5e72\u51c0\u810f\u6570\u636e\u4fe1\u606f.  \u4ece  /proc/[pid]/smaps  \u83b7\u53d6\u6570\u636e\u5e76\u7edf\u8ba1\u7684\u5de5\u5177.  \u547d\u4ee4:  showmap [-a] [-t] [-v]  pid \n\u4f8b\u5b50:  showmap -a 884 \n\u8f93\u51fa\u5355\u4f4d: KB   \u7531\u4e8e\u73b0\u5728\u5185\u6838\u90fd\u4f7f\u7528\u4e86\u52a8\u6001\u5185\u5b58\u5206\u914d\u7684\u673a\u5236, \u5728\u5927\u91cf\u7533\u8bf7\u5c0f\u5185\u5b58\u7684\u60c5\u51b5\u4e0b, \u4ece\u7cfb\u7edf\u770b\u5185\u5b58\u6709\u5269\u4f59, \u4f46\u662f\u8fdb\u7a0b\u5374\u65e0\u6cd5\u5206\u914d\u51fa\u9700\u8981\u7684\u5185\u5b58, \u8fd9\u5c31\u6709\u53ef\u80fd\u662f\u7531\u4e8e\u865a\u62df\u5730\u5740\u7684\u5185\u5b58\u788e\u7247\u5f15\u8d77, \u65e0\u6cd5\u627e\u5230\u4e00\u6bb5\u5927\u4e8e\u6240\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u7684\u5730\u5740\u7a7a\u95f4.   \u4f8b\u5b50:", 
            "title": "showmap "
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#android-oom", 
            "text": "\u89e6\u53d1OOM\u7684\u539f\u56e0\u662f, java\u5c42\u5185\u5b58\u5206\u914d\u5931\u8d25\u4e86.  \u9020\u6210\u5185\u5b58\u5206\u914d\u5931\u8d25\u7684\u53ef\u80fd\u539f\u56e0\u5982\u4e0b:   \u5185\u5b58\u6ea2\u51fa. \u7533\u8bf7\u7684\u5185\u5b58\u8d85\u51fa\u4e86\u865a\u62df\u673a\u6700\u5927\u5185\u5b58.  \u788e\u7247, \u5bfc\u81f4\u65e0\u6cd5\u627e\u5230\u8fde\u7eed\u7a7a\u95f4\u6ee1\u8db3\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f.  \u8d44\u6e90\u95ee\u9898, \u6bd4\u5982\u6587\u4ef6\u8282\u70b9\u8d85\u8fc7\u9650\u5236, \u5bfc\u81f4\u533f\u540d\u5185\u5b58\u7533\u8bf7\u51fa\u9519, \u9519\u8bef\u4fe1\u606f\u4e3a \"Too many open files\"  \u865a\u62df\u7a7a\u95f4\u5730\u5740\u7a7a\u95f4\u88ab\u5360\u6ee1, \u5bfc\u81f4OOM.   \u4ee5\u4e0a\u4e3a\u7f51\u4e0a\u7684\u7ed3\u8bba, \u5728android5.1.1\u4e0a\u6d4b\u8bd5\u53d1\u73b0:  fd\u95ee\u9898\u5e76\u4e0d\u4f1a\u5bfc\u81f4OOM  \u4ee3\u7801\u590d\u7528\u4e0b\u9762\u5185\u5b58\u6cc4\u9732\u7684\u4ee3\u7801,\u5728asynctask\u4e2d\u6267\u884c\u6587\u4ef6\u6253\u5f00\u64cd\u4f5c.   logcat\u4e2d\u8f93\u51fa\u5982\u4e0b, \u5e76\u6ca1\u6709OOM\u8f93\u51fa:   \u4f46\u662f\u8fd9\u6bb5\u4ee3\u7801\u7684\u786e\u8bc1\u660e\u4e86\u6253\u5f00\u6587\u4ef6\u592a\u591a\u4f1a\u5bfc\u81f4shmem\u521b\u5efa\u5931\u8d25.", 
            "title": "Android \u5e94\u7528 OOM"
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#_5", 
            "text": "", 
            "title": "\u5185\u5b58\u6cc4\u9732\u5206\u6790"
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#activity", 
            "text": "activity \u7684\u6cc4\u9732\u57fa\u4e8eandroid\u81ea\u5e26\u5de5\u5177, \u53ef\u4ee5\u5feb\u901f\u786e\u5b9a, \u4f46\u662f\u5177\u4f53\u6cc4\u9732\u7684activity, \u9700\u8981\u4f9d\u8d56\u5de5\u5177 LeakCanary.  \u4ee3\u7801:   \u754c\u9762:   \u5728\u7b2c\u4e00\u6b21\u8fdb\u5165\u8be5\u5e94\u7528\u65f6:   \u6309\u4e0bBUTTON, \u7136\u540e\u9000\u51fa\u5e94\u7528:   \u7b2c\u4e8c\u6b21\u8fdb\u5165\u8be5\u5e94\u7528:   \u7b2c\u4e8c\u6b21\u6309\u4e0bBUTTON:   \u7b2c\u4e8c\u6b21\u9000\u51fa\u5e94\u7528:   \u57fa\u4e8e  dumpsys meminfo  \u786e\u8ba4\u5e94\u7528\u6709activity\u6cc4\u9732\u540e, \u5355\u7eaf\u901a\u8fc7UI\u64cd\u4f5c\u57fa\u672c\u4e5f\u53ef\u4ee5\u5224\u65ad\u51fa\u6765\u54ea\u4e2aactivity\u6cc4\u9732, \u66f4\u51c6\u786e\u7684\u6cc4\u9732\u68c0\u6d4b\u5de5\u5177\u662f LeakCanary, \u8be5\u5de5\u5177\u4e3a\u7b2c\u4e09\u65b9\u5de5\u5177.  \n\u5177\u4f53\u7528\u6cd5: https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/  \u8fd8\u662f\u4ee5\u4e0a\u7684\u4f8b\u5b50, \u989d\u5916\u589e\u52a0\u5982\u4e0b\u4ee3\u7801.   \u5728MainActivity\u589e\u52a0\u5982\u4e0b\u4ee3\u7801, \u8be5\u4ee3\u7801\u7684\u542b\u4e49\u662f, \u5728activity\u89e6\u53d1onDestroy\u65f6, \u76d1\u63a7\u8be5activity\u5bf9\u8c61.      @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        LeakApplication.getRefWatcher().watch(this);\n\n    }  \u589e\u52a0application, \u5982\u4e0b:   \u7f16\u8bd1\u8fd0\u884c, \u6267\u884c\u4e0a\u9762\u540c\u6837\u7684\u64cd\u4f5c. \u5728\u901a\u77e5\u4e2d\u5fc3\u6709\u5982\u4e0b\u663e\u793a:   \u70b9\u51fb\u540e\u53ef\u4ee5\u67e5\u770b\u8be6\u7ec6\u7684\u5806\u6808:   \u540c\u6837\u5728logcat\u4e2d\u6709\u5982\u4e0b\u8f93\u51fa:", 
            "title": "activity \u6cc4\u9732 "
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#strictmode", 
            "text": "\u540c\u6837\u662f\u4e0a\u9762\u7684\u4f8b\u5b50, \u4fee\u6539\u4ee3\u7801\u5982\u4e0b, \u589e\u52a0strickmode\u7684\u8c03\u7528:   \u540c\u6837\u7684\u4e0a\u9762\u64cd\u4f5c\u65b9\u6cd5, logcat\u4e2d\u6709\u5982\u4e0b\u8f93\u51fa:", 
            "title": "StrictMode\u68c0\u6d4b\u5e94\u7528\u5185\u5b58\u6cc4\u9732 "
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#libc", 
            "text": "\u5185\u5b58\u6cc4\u9732\u7684\u68c0\u6d4b\u4f9d\u636e\u662f, \u8fdb\u7a0b\u9000\u51fa\u65f6, \u8fd8\u6709\u672a\u91ca\u653e\u7684\u5185\u5b58. \u6240\u4ee5, valgrind\u5305\u62ecbionic libc\u4e2d, \u80fd\u7cbe\u786e\u68c0\u6d4b\u5230\u6cc4\u9732\u7684\u524d\u63d0\u6761\u4ef6\u5c31\u662f\u8fdb\u7a0b\u9000\u51fa. \u4f46\u662f\u8fd9\u4e2a\u5bf9\u4e8e\u7cfb\u7edf\u7ea7\u522b\u7684\u8fdb\u7a0b\u662f\u65e0\u7528\u7684, \u56e0\u4e3a\u7cfb\u7edf\u7ea7\u8fdb\u7a0b\u5e76\u4e0d\u4f1a\u9000\u51fa. \u4eceRD\u89d2\u5ea6, \u5224\u65ad\u7cfb\u7edf\u7ea7\u8fdb\u7a0b\u662f\u5426\u6cc4\u9732\u7684\u4f9d\u636e\u662f\u5185\u5b58\u662f\u5426\u6301\u7eed\u589e\u957f, \u7279\u522b\u662f\u5728\u538b\u529b\u6d4b\u8bd5\u7684\u60c5\u51b5\u4e0b. \u6240\u4ee5, \u8fd9\u4e2a\u90e8\u5206\u4ecb\u7ecd\u7684\u5de5\u5177, \u5b9e\u9645\u4e0a\u662f\u6293\u53d6\u4e86\u6301\u7eed\u589e\u957f\u7684\u5185\u5b58\u4fe1\u606f, \u8fd9\u4e9b\u4fe1\u606f, \u53ef\u80fd\u662f\u5185\u5b58\u6cc4\u9732, \u4e5f\u53ef\u80fd\u662f\u8fdb\u7a0b\u6b63\u5e38\u7533\u8bf7\u7684\u5185\u5b58, \u9700\u8981RD\u4ecb\u5165\u5224\u65ad.  \u9644\u4ef6:  Memleak_tools_android.zip  \u4f9d\u8d56\u5de5\u5177:   libc_malloc_debug_leak.so  , bionic\u6e90\u7801\u4e0b, \u9700\u8981\u7f16\u8bd1\u5e76push\u5230\u7cfb\u7edf\u4e2d  libmemleakutils.so , \u4eceandroid\u63d0\u53d6\u5e76\u66f4\u6539. \u4ece\u9644\u4ef6\u6e90\u7801\u4e0b\u8f7d\u7f16\u8bd1, \u9700\u8981push\u5230\u7cfb\u7edf\u4e2d.  addr2func.py, \u8be5\u811a\u672c\u80fd\u81ea\u52a8\u5c06\u5730\u5740\u8f6c\u6362\u6210\u5e93\u548c\u5806\u6808. \u5728\u9644\u4ef6\u4e2d.  memincrease.py, \u8be5\u811a\u672c\u80fd\u5c06\u4e0a\u4e00\u811a\u672c\u7684\u8f93\u51fa, \u8fdb\u884c\u7edf\u8ba1\u6392\u5e8f,  \u6309\u5185\u5b58\u589e\u52a0\u4ece\u5927\u5230\u5c0f\u6392\u5e8f. \u57fa\u672c\u6700\u9876\u4e0a\u7684\u662f\u5b58\u5728\u95ee\u9898\u7684. \u5728\u9644\u4ef6\u4e2d.   \u5c40\u9650:   \u53ea\u80fd\u8c03\u8bd5native\u8fdb\u7a0b.  \u8fdb\u7a0b\u4e0d\u80fd\u91cd\u542f.  \u9700\u8981\u538b\u529b\u6d4b\u8bd5, \u957f\u65f6\u95f4\u8fd0\u884c  \u9700\u8981RD\u4ecb\u5165\u5224\u65ad\u662f\u5426\u5b58\u5728\u6cc4\u9732.   \u7528\u6cd5:   \u5c06libmemleakutils.so\u5e93\u94fe\u63a5\u5230\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u4e2d, \u8c03\u7528\u51fd\u6570 start_memleak_watcher(memstep) , \u5176\u4e2dmemstep\u8868\u793a, pss\u6bcf\u589e\u52a0memstep, \u5219\u6293\u53d6\u4e00\u6b21\u5f53\u524d\u5185\u5b58\u5206\u914d\u4fe1\u606f.  \u5c06libmemleakutils.so \u548c  libc_malloc_debug_leak.so  push\u5230/system/lib/\u4e0b.  \u5c06\u88ab\u8c03\u8bd5\u7a0b\u5e8fpush\u5230 /system/bin/ \u4e0b.  \u8bbe\u7f6e property  libc.debug.malloc.program  \u4e3a \u4f60\u7684\u8c03\u8bd5\u8fdb\u7a0b\u540d\u5b57.  \u8bbe\u7f6e property  libc.debug.malloc  \u4e3a 1  stop \u6216\u8005 kill \u88ab\u8c03\u8bd5\u8fdb\u7a0b.  start \u6216\u8005 \u542f\u52a8 \u88ab\u8c03\u8bd5\u8fdb\u7a0b.  \u538b\u529b\u6d4b\u8bd5\u540e, \u68c0\u67e5 /data/local/tmp/ \u5e95\u4e0b\u5b58\u5728\u6587\u4ef6  mem_snapshot_$pid_$memsize.log , \u4e14\u4e2a\u6570\u5927\u4e8e2\u4e2a(\u8d8a\u591a\u8d8a\u597d).  cp /proc/${pid}/maps /data/local/tmp/  \u5c06 /data/local/tmp/ \u5e95\u4e0b\u6240\u6709\u6587\u4ef6\u590d\u5236\u5230host\u673a\u5668.  \u7528 diff \u547d\u4ee4\u6bd4\u8f83 \u4e24\u4e2a  mem_snapshot_$pid_$memsize.log , \u5e76\u4fdd\u5b58\u8f93\u51fa\u4e3a  diff_$pid_$memsize1_$memsize2.log  \u6267\u884c  ./addr2func.py --root-dir=/remote/ANDROID/hdtv/ --maps-file=./maps --product=zx2000 diff_$pid_$memsize1_$memsize2.log   mem_stack_$pid_$memsize1_$memsize2.log , \u8be5\u8fc7\u7a0b\u662f\u5c06diff\u751f\u6210\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5730\u5740\u8f6c\u6362\u6210\u5e93\u548c\u5806\u6808\u4fe1\u606f.  \u6267\u884c  ./memincrease.py mem_stack_$pi_$memsize1_$memsize2.log incr_$pid_$memsize1_$memsize2.log , \u8be5\u8fc7\u7a0b\u662f\u5bf912\u751f\u6210\u7684\u6587\u4ef6\u8fdb\u884c\u7edf\u8ba1\u6392\u5e8f, \u4ece\u5927\u5230\u5c0f\u6392\u5e8f.   \u4f8b\u5b50:   \u8fd0\u884c\u4e00\u4f1a\u513f\u540e, \u5728 /data/local/tmp/\u76ee\u5f55\u4e0b\u5b58\u5728\u6587\u4ef6:  mem_snapshot_2158_1.log\nmem_snapshot_2158_2.log\nmem_snapshot_2158_3.log\nmem_snapshot_2158_4.log  \u5176\u5185\u5bb9\u5982\u4e0b:   Allocation count  5 \n Total memory  6293072 \nsize   5242880 , dup     1 , 0xb6ed36b2, 0xb6f4cd4e, 0xb6f1da44, 0xb6f1de38, 0xb6f1dea0, 0xb6f5104a, 0xb6f4ef92\nsize   1048576 , dup     1 , 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc8492, 0xb6fc8390, 0xb6f4ce68, 0xb6fc8400\nsize      1024 , dup     1 , 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc84aa, 0xb6fc8394, 0xb6f4ce68, 0xb6fc8400\nsize       580 , dup     1 , 0xb6ed36b2, 0xb6ed391c, 0xb6f4cd0e, 0xb6f510c8, 0xb6f1decc, 0xb6fc838c, 0xb6f4ce68, 0xb6fc8400\nsize        12 , dup     1 , 0xb6ed36b2, 0xb6ed391c, 0xb6f4cd0e, 0xb6f14c46, 0xb6f1dd98, 0xb6f1dea0, 0xb6f5104a, 0xb6f4ef92  \u6267\u884cdiff\u547d\u4ee4:  # diff ./mem_snapshot_2158_1.log ./mem_snapshot_2158_2.log   diff_2158_1_2.log  #   # diff ./mem_snapshot_2158_3.log ./mem_snapshot_2158_4.log   diff_2158_3_4.log  #   \u5f97\u5230\u4e00\u4e2aPSS\u4ece1M\u589e\u957f\u52302M\u548c3M\u589e\u957f\u52304M\u7684\u4e24\u4e2adiff\u6587\u4ef6. \u5185\u5bb9\u5982\u4e0b:  2c2   Total memory 6293072\n---   Total memory 7342672\n4,5c4,5  size  1048576, dup    1, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc8492, 0xb6fc8390, 0xb6f4ce68, 0xb6fc8400  size     1024, dup    1, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc84aa, 0xb6fc8394, 0xb6f4ce68, 0xb6fc8400\n---  size  1048576, dup    2, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc8492, 0xb6fc8390, 0xb6f4ce68, 0xb6fc8400  size     1024, dup    2, 0xb6ed36b2, 0xb6f4cd4e, 0xb6fc84aa, 0xb6fc8394, 0xb6f4ce68, 0xb6fc8400  \n\u6267\u884c addr2func.py :  # ./addr2func.py --root-dir=/remote/ANDROID/hdtv/ --maps-file=./maps --product=zx2000 diff_2158_3_4.log   mem_stack_2158_3_4.log   \u751f\u6210\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b:  2c2                                                                                                                                                                               [ 0 /59466 ]    Total memory  8392272 \n\n---   Total memory  9441872  4 ,5c4,5  size   1048576 , dup     3 ,\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315  ( discriminator  1 ) \n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test () , /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:11\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:25  ( discriminator  1 ) \n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?  size      1024 , dup     3 ,\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315  ( discriminator  1 ) \n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test1 () , /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:17\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:26  ( discriminator  1 ) \n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n---  size   1048576 , dup     4 ,\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315  ( discriminator  1 ) \n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test () , /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:11\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:25  ( discriminator  1 ) \n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?  size      1024 , dup     4 ,\n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315  ( discriminator  1 ) \n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test1 () , /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:17\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:26  ( discriminator  1 ) \n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?  \u6240\u6709\u7684\u5730\u5740\u88ab\u8f6c\u6362\u6210\u4e86\u961f\u957f. \n\u6700\u540e\u6267\u884c memincrease.py :  ./memincrease.py mem_stack_2158_3_4.log incr_2158_3_4.log  \u751f\u6210\u7684\u6587\u4ef6 incr_2158_3_4.log \u5185\u5bb9\u5982\u4e0b:  Memory increase  1048576  bytes                    ### \u5185\u5b58\u589e\u52a0\u4e86 1048576 bytes \n98990365afa0d71d62949620cc7e3753f386e4e3\nold size  1048576  count  3 , total memory  3145728         ### \u4ece 3145728 \n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315  ( discriminator  1 ) \n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test () , /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:11\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:25  ( discriminator  1 ) \n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n98990365afa0d71d62949620cc7e3753f386e4e3\nnew size  1048576  count  4 , total memory  4194304        ### \u589e\u52a0\u5230 4194304 \n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315  ( discriminator  1 ) \n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test () , /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:11\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:25  ( discriminator  1 ) \n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n\nMemory increase  1024  bytes\n833f23c991cc75facaa41fb74f7466b91c27917b\nold size  1024  count  3 , total memory  3072 \n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315  ( discriminator  1 ) \n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test1 () , /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:17\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:26  ( discriminator  1 ) \n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?\n833f23c991cc75facaa41fb74f7466b91c27917b\nnew size  1024  count  4 , total memory  4096 \n    leak_malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_leak.cpp:315  ( discriminator  1 ) \n    malloc, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/malloc_debug_common.cpp:259\n    mem_test1 () , /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:17\n    main, /home/werther/workspace/ANDROID/hdtv/pdk/memleak/main.cpp:26  ( discriminator  1 ) \n    __libc_init, /home/werther/workspace/ANDROID/hdtv/bionic/libc/bionic/libc_init_dynamic.cpp:113\n    _start, main.cpp:?  \u57fa\u672c\u4e0a, \u5c06\u6700\u9876\u4e0a\u7684\u51e0\u4e2a\u5806\u6808\u786e\u8ba4\u4e0b\u662f\u5426\u5185\u5b58\u6cc4\u9732\u5373\u53ef.  \u7279\u522b\u6ce8\u610f:   \u7c7b\u6cc4\u9732\u65f6, \u5728\u5806\u6808\u4e0a\u7684\u8868\u73b0\u662f\u5176\u6210\u5458\u5185\u5b58\u6cc4\u9732. \u9700\u8981\u67e5\u770b\u5806\u6808\u662f\u5426\u6709\u8be5\u7c7b\u5bf9\u8c61\u7684new\u65b9\u6cd5, \u5e76\u4e14\u8be5\u65b9\u6cd5\u662f\u5426\u5728\u591a\u5904\u5b58\u5728.", 
            "title": "\u57fa\u4e8elibc\u8c03\u8bd5\u5185\u5b58\u6cc4\u9732 "
        }, 
        {
            "location": "/2017-11-14-Android-memory-debug/#valgrind", 
            "text": "\u573a\u666f: \u5bf9\u4e8e\u53ef\u9000\u51fa\u7684\u8fdb\u7a0b\u8fdb\u884c\u8c03\u8bd5\u6bd4\u8f83\u5408\u9002, \u53ef\u4ee5\u5bf9\u5e94\u7528\u7684native\u4ee3\u7801\u8fdb\u884c\u8c03\u8bd5.  \u76ee\u524dhdtv\u4ee3\u7801\u4e0a\u7684 valgrind \u65e0\u6cd5\u83b7\u53d6\u88ab\u8c03\u8bd5\u8fdb\u7a0b\u7684\u5806\u6808, \u53ea\u80fd\u83b7\u53d6\u5b83\u81ea\u5df1\u5e93\u7684\u5806\u6808, \u5b58\u5728\u95ee\u9898. \u6682\u65f6\u65e0\u6cd5\u4f7f\u7528.", 
            "title": "valgrind \u8c03\u8bd5\u5185\u5b58\u6cc4\u9732"
        }, 
        {
            "location": "/2017-10-01-slackbot/", 
            "text": "slackbot \u6846\u67b6\n\n\n\u6765\u6e90: https://pengzhangdev.github.io/slackbot/\n\n\nslackbot, \u987e\u540d\u601d\u4e49, \u662f\u57fa\u4e8eslack\u7684bot\u7a0b\u5e8f, \u4f7f\u7528python\u5b9e\u73b0. \u4e2a\u4eba\u5728\nlins05/slackbot\n\u7684\u57fa\u7840\u4e0a, \u8fdb\u884c\u4e86\u4e8c\u6b21\u5f00\u53d1,\u7528\u4e8e\u6811\u8393\u6d3e\u7684\u63a7\u5236\u4e2d\u5fc3\u548c\u667a\u80fd\u5bb6\u5c45\u7684\u63a7\u5236\u4e2d\u5fc3. \u6700\u521d\u9009\u4e2d\u5b83\u7684\u539f\u56e0\u662f, \u5728\u7f51\u4e0a\u770b\u5230\u5927\u91cf\u7684\u4f8b\u5b50\u57fa\u4e8eslack\u505a\u8fdc\u7a0b\u8fd0\u7ef4\u7684\u4f8b\u5b50.\n\n\n\u4e0b\u6587\u4ecb\u7ecd\u7684slackbot\u6846\u67b6, \u662f\u5305\u542b\nlins05/slackbot\n\u548c\u4e2a\u4eba\u4e8c\u6b21\u5f00\u53d1\u4e4b\u540e\u7684\u5185\u5bb9.\u4e8c\u6b21\u5f00\u53d1\u7684\u6838\u5fc3\u5728\u4e8e\u63d2\u4ef6\u548c\u7ec4\u4ef6\u6269\u5145.\n\n\n\u7531\u4e8e\u7528\u4e86\u63d2\u4ef6\u548c\u7ec4\u4ef6\u7684\u6a21\u5f0f, \u5bfc\u81f4\u53ef\u4ee5\u6dfb\u52a0\u4efb\u610f\u591a\u529f\u80fd\u7684\u63d2\u4ef6\u548c\u7ec4\u4ef6. \u6240\u4ee5, \u529f\u80fd\u8fd8\u5728\u6301\u7eed\u5f00\u53d1\u4e2d.\n\n\n\u8ba1\u5212: \u63d2\u4ef6\u548c\u7ec4\u4ef6\u8ddfpython-fire\u7ed3\u5408, \u671f\u671b\u5b9e\u73b0\u81ea\u52a8\u89e3\u6790\u7ec4\u4ef6\u7684\u63a5\u53e3, \u800c\u4e0d\u9700\u8981\u4e13\u95e8\u5c01\u88c5\u63d2\u4ef6.\n\n\n\u6846\u67b6\u56fe\n\n\n\n\n\u8be5\u6a21\u5f0f\u662f\u5178\u578b\u7684\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b, \u751f\u4ea7\u8005\u67092\u4e2a, \u4e00\u4e2a\u662f\u4eceslack\u5b98\u7f51\u63a5\u6536\u6d88\u606f\u5e76\u653e\u5165\u961f\u5217, \u53e6\u4e00\u4e2a\u662f\u5b9a\u65f6\u4efb\u52a1,\u9694\u4e00\u5b9a\u65f6\u95f4\u5f80\u961f\u5217\u4e2d\u5b58\u5165\u6307\u4ee4. \u6d88\u8d39\u8005\u670910\u4e2a(10\u7ebf\u7a0b\u7b49\u5f85\u5728\u961f\u5217\u4e0a), \u5176\u529f\u80fd\u5c31\u662f\u5206\u522b\u5904\u7406\u5b9a\u65f6\u4efb\u52a1, \u5404\u79cd\u6d88\u606f.\n\n\n\u63d2\u4ef6\u7c7b\u662f\u7531PluginManager\u7ba1\u7406\u548c\u52a0\u8f7d, \u4ece\u63d2\u4ef6\u76ee\u5f55\u4e2d\u6839\u636e\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u89c4\u5219\u52a0\u8f7d\u6307\u5b9a\u7684\u63d2\u4ef6\u7c7b, \u5e76\u6839\u636e\u63d2\u4ef6\u7c7b\u7684\u4fee\u9970\u51fd\u6570\u83b7\u53d6\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570(\u5b9a\u65f6\u5904\u7406\u51fd\u6570, \u6d88\u606f\u5904\u7406\u51fd\u6570).\n\n\n\u63d2\u4ef6\u548c\u7ec4\u4ef6\u7684\u5b9e\u73b0\n\n\n\u7531\u4e8e\u4f7f\u7528\u4e86\u4fee\u9970\u51fd\u6570, \u5219\u88ab\u8c03\u7528\u51fd\u6570\u65e0\u6cd5\u662f\u7c7b\u6210\u5458\u51fd\u6570. \u867d\u7136\u5728\u5199\u63d2\u4ef6\u4e0a\u66f4\u65b9\u4fbf, \u4f46\u662f\u5bf9\u4e8e\u63d2\u4ef6\u529f\u80fd\u5f3a\u5927\u7684\u5b9e\u73b0, \u5219\u9700\u8981\u989d\u5916\u5c01\u88c5.\n\n\n\u5728\u6b64\u57fa\u7840\u4e0a, \u65b0\u6dfb\u52a0\u4e86\u7ec4\u4ef6\u6982\u5ff5, \u7ec4\u4ef6\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u7b2c\u4e09\u65b9\u5e93\u6216\u5b9e\u73b0(\u7eaf\u9762\u5411\u5bf9\u8c61\u5b9e\u73b0), \u7136\u540e\u5728\u63d2\u4ef6\u76ee\u5f55\u4e0b\u5b9e\u73b0\u5bf9\u5e94\u7684\u63d2\u4ef6\u8c03\u7528\u8be5\u7ec4\u4ef6\u7ec4\u6210\u529f\u80fd. \u8fd9\u5c31\u662fpi\u4e0a\u667a\u80fd\u5bb6\u5c45\u63a7\u5236\u4e2d\u7684\u57fa\u7840. \u540e\u7eed\u7684\u63a7\u5236\u5b9e\u73b0\u90fd\u5728\u8be5\u57fa\u7840\u4e0a\u6269\u5c55, \u7279\u522b\u662f\u5b9a\u65f6\u4efb\u52a1.\n\n\n\u7ec4\u4ef6\u4e2d\u4f1a\u51fa\u73b0\u591a\u4e2a\u6a21\u5757\u88ab\u4e0d\u540c\u63d2\u4ef6\u8c03\u7528\u7684\u573a\u666f, \u8fd9\u5c31\u9700\u8981\u7ec4\u4ef6\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f(\u7ec4\u4ef6\u521d\u59cb\u5316\u53c2\u6570\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u6307\u5b9a). \u5355\u4f8b\u6a21\u5f0f\u7684\u5b9e\u73b0,\u5728python2\u548cpython3\u4e0a\u4e0d\u540c, \u7531\u4e8e\u76ee\u524d\u5168\u4f53\u5207\u6362\u5230python3\u4e0a, \u5b9e\u73b0\u4e0a\u4f7f\u7528\u4e86metaclass, \u4f46\u662f\u5b9e\u9645\u4e0a\u91cd\u5199new\u65b9\u6cd5\u7684\u5b9e\u73b0\u4e5f\u662f\u53ef\u4ee5\u7684. \u7279\u522b\u6ce8\u610f, \u5355\u4f8b\u5b9e\u9645\u4e0a\u662f\u76f4\u63a5\u8fd4\u56de\u4e86\u5185\u5b58\u5bf9\u8c61, \u4f46\u4f9d\u7136\u4f1a\u7ee7\u7eed\u540e\u7eed\u7684\n__init__\n, \u6240\u4ee5\u5fc5\u987b\u6dfb\u52a0\u6807\u8bb0\u6765\u8868\u793a\u5df2\u7ecf\u521d\u59cb\u5316\u53d8\u91cf.\n\n\n\u63d2\u4ef6\u5217\u8868\n\n\n\u667a\u80fd\u5bb6\u5c45\u7684\u4e3b\u63a7\u4e3ahomeassistant, \u8fd9\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u6846\u67b6, \u5e76\u4e14\u652f\u6301\u5f00\u6e90\u534f\u8bae, \u5c0f\u7c73\u7cfb\u5217\u548cyeelight\u7cfb\u5217\u5927\u90e8\u5206\u90fd\u80fd\u76f4\u63a5\u6dfb\u52a0, \u5c11\u91cf\u9700\u8981hack\u4e0b.\n\n\n\u6240\u6709\u667a\u80fd\u5bb6\u5c45\u6a21\u5757\u5b58\u653e\u5728 \ncomponent/ha/\n, slackbot\u4e0ehomeassistant\u901a\u8fc7rest API \u901a\u4fe1. \u6240\u6709\u7684\u8bf7\u6c42\u90fd\u662fslackbot\u8bf7\u6c42\u53d1\u8d77. \n\n\n\u6240\u6709\u7684\u667a\u80fd\u5bb6\u5c45\u8bbe\u5907\u90fd\u53ef\u4ee5\u901a\u8fc7slackbot\u8fdc\u7a0b\u63a7\u5236\u5f00\u5173.\n\n\n\u540e\u9762\u5217\u51fa\u7684\u662f\u7ec4\u4ef6\u5217\u8868, \u5217\u8868\u4e2d\u7ec4\u4ef6\u7ec4\u5408\u4e0d\u540c\u53ef\u4ee5\u4ea7\u751f\u4e0d\u540c\u7684\u63d2\u4ef6, \u6bd4\u5982:\n\n\n\n\n\u65e5\u7167\u72b6\u6001 + \u5bb6\u5ead\u4eba\u5458\u5728\u5ba2\u5385\u72b6\u6001 + \u706f\u5177\u63a7\u5236 = \u592a\u9633\u4e0b\u5c71\u5ba2\u5385\u6709\u4eba\u81ea\u52a8\u5f00\u706f, \u5ba2\u5385\u6ca1\u4eba\u81ea\u52a8\u5173\u706f\n\n\n\u5c0f\u7c73\u626b\u5730\u673a\u5668\u4eba + \u5bb6\u5ead\u4eba\u5458\u5728\u5ba2\u5385\u72b6\u6001 = \u5bb6\u91cc\u6ca1\u4eba, \u4e14\u5b9a\u65f6\u4efb\u52a1\u5230, \u81ea\u52a8\u5f00\u59cb\u626b\u5730\n\n\n\u5f55\u5236\u6a21\u5757 + \u64ad\u653e\u6a21\u5757 + \u8bed\u97f3\u8f6c\u6587\u5b57\u6a21\u5757 + \u6587\u5b57\u8f6c\u8bed\u97f3\u6a21\u5757 = \u8ddf\u795e\u7ecf\u51b0\u804a\u5929\u5e76\u53d1\u5e03\u4efb\u52a1\u7684\u529f\u80fd\n\n\n\n\nhomeassistant\u63d0\u4f9b\u7684\u529f\u80fd\u5217\u8868\n\n\n\u5bb6\u5ead\u4eba\u5458\u5728\u5bb6\u72b6\u6001\n\n\n\u83b7\u53d6\u5bb6\u5ead\u4eba\u5458\u662f\u5426\u5728\u5bb6, \u8be5\u5b9e\u73b0\u5176\u5b9e\u662f\u68c0\u6d4b\u5bb6\u5ead\u6210\u5458\u624b\u673a\u7684mac\u5730\u5740\u5224\u65ad\u662f\u5426\u8fde\u63a5\u4e0a\u8def\u7531\u5668.\n\n\n\u706f\u5177\u63a7\u5236\n\n\n\u8fdc\u7a0b\u63a7\u5236\u6307\u5b9a\u706f\u5177\u7684\u5f00\u5173\n\n\n\u5c0f\u7c73\u626b\u5730\u673a\u5668\u4eba\n\n\n\u63a5\u5165\u5c0f\u7c73\u626b\u5730\u673a\u5668\u4eba, \u9ed8\u8ba4\u6bcf\u5468\u4e00\u4e09\u4e94\u542f\u52a8\u6e05\u626b, \u4f4624\u5c0f\u65f6\u5185\u4e0d\u91cd\u542f\u542f\u52a8\u6e05\u626b.\n\n\n\u65e5\u7167\u72b6\u6001\n\n\n\u4e5f\u5c31\u662f\u592a\u9633\u4e0b\u5c71\u4e0e\u5426\u7684\u72b6\u6001.\n\n\n\u5bb6\u5ead\u4eba\u5458\u5728\u5ba2\u5385\u72b6\u6001\n\n\n\u8be5\u72b6\u6001\u7684\u5b58\u5728\u610f\u4e49\u662f, \u4e2a\u4eba\u671f\u671b\u5bb6\u5ead\u6210\u5458\u5728\u5ba2\u5385\u65f6, \u81ea\u52a8\u6253\u5f00\u5ba2\u5385\u706f, \u79bb\u5f00\u5ba2\u5385\u65f6, \u81ea\u52a8\u5173\u95ed\u5ba2\u5385\u7684.\n\n\n\u5728\u521d\u671f\u5b66\u4e60\u9636\u6bb5, \u89e3\u9664\u5230\u7684\u4e3b\u8981\u6709\u84dd\u7259\u5e7f\u64ad\u548cRFID, \u90fd\u662f\u901a\u8fc7\u4e09\u70b9\u6cd5\u6765\u5b9a\u4f4d(\u76f8\u5173\u4fe1\u606f\u53ef\u4ee5\u767e\u5ea6\u5ba4\u5185\u5b9a\u4f4d). \u9996\u5148, \u57fa\u4e8e\u82af\u7247\u7684\u5b9a\u4f4d(\u4ed3\u5e93\u5b9a\u4f4d)\u4e0d\u9002\u5408\u5bb6\u5ead\u4f7f\u7528, \u56e0\u4e3a\u5bb6\u5ead\u4e0d\u53ef\u80fd\u4f1a\u5e26\u7740\u5c04\u9891\u82af\u7247.\u800c\u84dd\u7259\u5e7f\u64ad\u53ea\u6709\u63a5\u6536\u7aef\u624d\u80fd\u77e5\u9053\u81ea\u5df1\u4e0e\u53d1\u9001\u7aef\u7684\u8ddd\u79bb(\u4fe1\u53f7\u8870\u51cf), \u4e14\u9700\u8981\u4e09\u4e2a\u84dd\u7259\u5b9a\u4f4d. \u8003\u8651\u5230\u4e0e\u84dd\u7259\u7c7b\u4f3c, \u4f46\u6536\u5230\u73af\u5883\u5f71\u54cd\u66f4\u5927\u7684wifi, \u6d4b\u8bd5\u5c0f\u7c73\u8def\u7531\u5668\u4e0a\u53ef\u4ee5\u83b7\u53d6\u5230\u76ee\u6807\u624b\u673a\u7684\u4fe1\u53f7\u5f3a\u5ea6, \u5219\u51b3\u5b9a\u6539\u7528wifi\u5212\u5b9a\u4e24\u4e2a\u5706\u5f27\u533a\u57df. \u5c0f\u5706\u5f27\u533a\u57df\u5185\u5f00\u706f, \u5927\u5706\u5f27\u533a\u57df\u5916\u5173\u706f, \u800c\u4e24\u4e2a\u5706\u5f27\u533a\u57df\u4e2d\u95f4\u4fdd\u6301\u539f\u72b6\u6001\u4e0d\u53d8. \n\n\n\n\n\u804a\u5929\u673a\u5668\u4eba\n\n\n\u5206\u522b\u6709 ibot, tuling, xiaoi, emotibot. \u4f46\u4e0d\u662f\u6240\u6709\u7684\u90fd\u542f\u7528, \u5728\u804a\u5929\u63d2\u4ef6\u4e2d, \u9009\u62e9\u5176\u4e2d\u7684\u4e00\u4e2a\u542f\u52a8\u5e76\u4ea4\u4e92.\n\n\n\u6587\u4ef6\u7ba1\u7406\u5668\n\n\n\u6240\u8c13\u7684\u6587\u4ef6\u7ba1\u7406\u5668, \u53ea\u662f\u4e00\u4e2a\u6587\u4ef6\u7d22\u5f15\u52a0\u4e0a\u6587\u4ef6\u67e5\u627e\u7684\u5de5\u5177, \u989d\u5916\u589e\u52a0\u4e86\u4e00\u4e2a\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd. \u6587\u4ef6\u7d22\u5f15\u4f7f\u7528\u7684\u662fjieba\u548cwhoos. \u53ef\u4ee5\u901a\u8fc7slackbot\u5feb\u901f\u67e5\u627e\u67d0\u4e2a\u6587\u4ef6\u6216\u8005\u67d0\u672c\u4e66(\u7535\u5b50\u4e66\u591a\u5230\u81ea\u5df1\u4e5f\u4e0d\u77e5\u9053\u6709\u591a\u5c11\u672c).\n\n\n\u8ffd\u5267\u6a21\u5757\n\n\n\u4e0d\u53ea\u662f\u8ffd\u5267, \u4e5f\u662f\u8ffd\u7535\u5f71. \u7535\u5f71\u8c46\u74e37.0\u4ee5\u4e0a\u624d\u63a8\u9001, \u800c\u5267\u662f\u5bb6\u91cc\u653f\u59d4\u559c\u6b22\u7684\u65e5\u5267, \u5168\u63a8((\u2299\ufe4f\u2299)b),\u540e\u6765\u56e0\u4e3a\u67d0\u4e9b\u6bd4\u8f83\u65e0\u5948\u7684\u539f\u56e0,  \u8fd9\u8d27\u5f00\u59cb\u63a8\u4e00\u4e9b\u8001\u5bb6\u91cc\u653f\u59d4\u559c\u6b22\u7684\u5267, \u5c31\u6309\u9700\u52a0\u4e86\u4e2a\u529f\u80fd, \u9ed1\u767d\u540d\u5355. \u679c\u7136\u8001\u5a46\u662f\u7b2c\u4e00\u751f\u4ea7\u529b.\n\n\n\u5c0f\u8bf4\u6a21\u5757\n\n\n\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u722c\u866b, \u4e0d\u505c\u5730\u722c\u53d6\u6307\u5b9a\u5c0f\u8bf4\u5224\u65ad\u662f\u5426\u5b58\u5728\u66f4\u65b0. \u5728\u4e2a\u4eba\u7684\u4e3b\u9875\u4ecb\u7ecd\u4e2d\u4ecb\u7ecd\u4e86\u559c\u6b22\u5386\u53f2\u5c0f\u8bf4, \u6240\u4ee5\u5927\u90e8\u5206\u90fd\u662f\u5386\u53f2\u7c7b\u5c0f\u8bf4\n\n\n\u64ad\u653e\u6a21\u5757\n\n\n\u8c03\u7528mplayer\u64ad\u653e\n\n\n\u5f55\u5236\u6a21\u5757\n\n\n\u8c03\u7528arecord\u5f55\u97f3\n\n\n\u8bed\u97f3\u8f6c\u6587\u5b57\n\n\n\u7528\u4e86\u767e\u5ea6\u7684api\n\n\n\u6587\u5b57\u8f6c\u8bed\n\n\n\u7528\u4e86iflytek\u7684API, \u4e0d\u5f97\u4e0d\u8bf4\u5b83\u4eec\u5bb6\u8bed\u97f3\u505a\u5f97\u597d, \u5404\u79cd\u4eba\u7269\u53ef\u9009.\n\n\n\u5de5\u5177\n\n\n\u5305\u542b\u4e86\u6a21\u4eff\u6d4f\u89c8\u5668\u6253\u5f00\u7684\u4ee3\u7801(cookie\u7b49), \u5b9e\u73b0\u4e86\u4ee3\u7406\u6c60, \u5e76\u53ef\u4ee3\u7406\u8bbf\u95ee.", 
            "title": "slackbot\u8be6\u7ec6\u8bf4\u660e"
        }, 
        {
            "location": "/2017-10-01-slackbot/#slackbot", 
            "text": "\u6765\u6e90: https://pengzhangdev.github.io/slackbot/  slackbot, \u987e\u540d\u601d\u4e49, \u662f\u57fa\u4e8eslack\u7684bot\u7a0b\u5e8f, \u4f7f\u7528python\u5b9e\u73b0. \u4e2a\u4eba\u5728 lins05/slackbot \u7684\u57fa\u7840\u4e0a, \u8fdb\u884c\u4e86\u4e8c\u6b21\u5f00\u53d1,\u7528\u4e8e\u6811\u8393\u6d3e\u7684\u63a7\u5236\u4e2d\u5fc3\u548c\u667a\u80fd\u5bb6\u5c45\u7684\u63a7\u5236\u4e2d\u5fc3. \u6700\u521d\u9009\u4e2d\u5b83\u7684\u539f\u56e0\u662f, \u5728\u7f51\u4e0a\u770b\u5230\u5927\u91cf\u7684\u4f8b\u5b50\u57fa\u4e8eslack\u505a\u8fdc\u7a0b\u8fd0\u7ef4\u7684\u4f8b\u5b50.  \u4e0b\u6587\u4ecb\u7ecd\u7684slackbot\u6846\u67b6, \u662f\u5305\u542b lins05/slackbot \u548c\u4e2a\u4eba\u4e8c\u6b21\u5f00\u53d1\u4e4b\u540e\u7684\u5185\u5bb9.\u4e8c\u6b21\u5f00\u53d1\u7684\u6838\u5fc3\u5728\u4e8e\u63d2\u4ef6\u548c\u7ec4\u4ef6\u6269\u5145.  \u7531\u4e8e\u7528\u4e86\u63d2\u4ef6\u548c\u7ec4\u4ef6\u7684\u6a21\u5f0f, \u5bfc\u81f4\u53ef\u4ee5\u6dfb\u52a0\u4efb\u610f\u591a\u529f\u80fd\u7684\u63d2\u4ef6\u548c\u7ec4\u4ef6. \u6240\u4ee5, \u529f\u80fd\u8fd8\u5728\u6301\u7eed\u5f00\u53d1\u4e2d.  \u8ba1\u5212: \u63d2\u4ef6\u548c\u7ec4\u4ef6\u8ddfpython-fire\u7ed3\u5408, \u671f\u671b\u5b9e\u73b0\u81ea\u52a8\u89e3\u6790\u7ec4\u4ef6\u7684\u63a5\u53e3, \u800c\u4e0d\u9700\u8981\u4e13\u95e8\u5c01\u88c5\u63d2\u4ef6.", 
            "title": "slackbot \u6846\u67b6"
        }, 
        {
            "location": "/2017-10-01-slackbot/#_1", 
            "text": "\u8be5\u6a21\u5f0f\u662f\u5178\u578b\u7684\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b, \u751f\u4ea7\u8005\u67092\u4e2a, \u4e00\u4e2a\u662f\u4eceslack\u5b98\u7f51\u63a5\u6536\u6d88\u606f\u5e76\u653e\u5165\u961f\u5217, \u53e6\u4e00\u4e2a\u662f\u5b9a\u65f6\u4efb\u52a1,\u9694\u4e00\u5b9a\u65f6\u95f4\u5f80\u961f\u5217\u4e2d\u5b58\u5165\u6307\u4ee4. \u6d88\u8d39\u8005\u670910\u4e2a(10\u7ebf\u7a0b\u7b49\u5f85\u5728\u961f\u5217\u4e0a), \u5176\u529f\u80fd\u5c31\u662f\u5206\u522b\u5904\u7406\u5b9a\u65f6\u4efb\u52a1, \u5404\u79cd\u6d88\u606f.  \u63d2\u4ef6\u7c7b\u662f\u7531PluginManager\u7ba1\u7406\u548c\u52a0\u8f7d, \u4ece\u63d2\u4ef6\u76ee\u5f55\u4e2d\u6839\u636e\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u89c4\u5219\u52a0\u8f7d\u6307\u5b9a\u7684\u63d2\u4ef6\u7c7b, \u5e76\u6839\u636e\u63d2\u4ef6\u7c7b\u7684\u4fee\u9970\u51fd\u6570\u83b7\u53d6\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570(\u5b9a\u65f6\u5904\u7406\u51fd\u6570, \u6d88\u606f\u5904\u7406\u51fd\u6570).", 
            "title": "\u6846\u67b6\u56fe"
        }, 
        {
            "location": "/2017-10-01-slackbot/#_2", 
            "text": "\u7531\u4e8e\u4f7f\u7528\u4e86\u4fee\u9970\u51fd\u6570, \u5219\u88ab\u8c03\u7528\u51fd\u6570\u65e0\u6cd5\u662f\u7c7b\u6210\u5458\u51fd\u6570. \u867d\u7136\u5728\u5199\u63d2\u4ef6\u4e0a\u66f4\u65b9\u4fbf, \u4f46\u662f\u5bf9\u4e8e\u63d2\u4ef6\u529f\u80fd\u5f3a\u5927\u7684\u5b9e\u73b0, \u5219\u9700\u8981\u989d\u5916\u5c01\u88c5.  \u5728\u6b64\u57fa\u7840\u4e0a, \u65b0\u6dfb\u52a0\u4e86\u7ec4\u4ef6\u6982\u5ff5, \u7ec4\u4ef6\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u7b2c\u4e09\u65b9\u5e93\u6216\u5b9e\u73b0(\u7eaf\u9762\u5411\u5bf9\u8c61\u5b9e\u73b0), \u7136\u540e\u5728\u63d2\u4ef6\u76ee\u5f55\u4e0b\u5b9e\u73b0\u5bf9\u5e94\u7684\u63d2\u4ef6\u8c03\u7528\u8be5\u7ec4\u4ef6\u7ec4\u6210\u529f\u80fd. \u8fd9\u5c31\u662fpi\u4e0a\u667a\u80fd\u5bb6\u5c45\u63a7\u5236\u4e2d\u7684\u57fa\u7840. \u540e\u7eed\u7684\u63a7\u5236\u5b9e\u73b0\u90fd\u5728\u8be5\u57fa\u7840\u4e0a\u6269\u5c55, \u7279\u522b\u662f\u5b9a\u65f6\u4efb\u52a1.  \u7ec4\u4ef6\u4e2d\u4f1a\u51fa\u73b0\u591a\u4e2a\u6a21\u5757\u88ab\u4e0d\u540c\u63d2\u4ef6\u8c03\u7528\u7684\u573a\u666f, \u8fd9\u5c31\u9700\u8981\u7ec4\u4ef6\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f(\u7ec4\u4ef6\u521d\u59cb\u5316\u53c2\u6570\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u6307\u5b9a). \u5355\u4f8b\u6a21\u5f0f\u7684\u5b9e\u73b0,\u5728python2\u548cpython3\u4e0a\u4e0d\u540c, \u7531\u4e8e\u76ee\u524d\u5168\u4f53\u5207\u6362\u5230python3\u4e0a, \u5b9e\u73b0\u4e0a\u4f7f\u7528\u4e86metaclass, \u4f46\u662f\u5b9e\u9645\u4e0a\u91cd\u5199new\u65b9\u6cd5\u7684\u5b9e\u73b0\u4e5f\u662f\u53ef\u4ee5\u7684. \u7279\u522b\u6ce8\u610f, \u5355\u4f8b\u5b9e\u9645\u4e0a\u662f\u76f4\u63a5\u8fd4\u56de\u4e86\u5185\u5b58\u5bf9\u8c61, \u4f46\u4f9d\u7136\u4f1a\u7ee7\u7eed\u540e\u7eed\u7684 __init__ , \u6240\u4ee5\u5fc5\u987b\u6dfb\u52a0\u6807\u8bb0\u6765\u8868\u793a\u5df2\u7ecf\u521d\u59cb\u5316\u53d8\u91cf.", 
            "title": "\u63d2\u4ef6\u548c\u7ec4\u4ef6\u7684\u5b9e\u73b0"
        }, 
        {
            "location": "/2017-10-01-slackbot/#_3", 
            "text": "\u667a\u80fd\u5bb6\u5c45\u7684\u4e3b\u63a7\u4e3ahomeassistant, \u8fd9\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u6846\u67b6, \u5e76\u4e14\u652f\u6301\u5f00\u6e90\u534f\u8bae, \u5c0f\u7c73\u7cfb\u5217\u548cyeelight\u7cfb\u5217\u5927\u90e8\u5206\u90fd\u80fd\u76f4\u63a5\u6dfb\u52a0, \u5c11\u91cf\u9700\u8981hack\u4e0b.  \u6240\u6709\u667a\u80fd\u5bb6\u5c45\u6a21\u5757\u5b58\u653e\u5728  component/ha/ , slackbot\u4e0ehomeassistant\u901a\u8fc7rest API \u901a\u4fe1. \u6240\u6709\u7684\u8bf7\u6c42\u90fd\u662fslackbot\u8bf7\u6c42\u53d1\u8d77.   \u6240\u6709\u7684\u667a\u80fd\u5bb6\u5c45\u8bbe\u5907\u90fd\u53ef\u4ee5\u901a\u8fc7slackbot\u8fdc\u7a0b\u63a7\u5236\u5f00\u5173.  \u540e\u9762\u5217\u51fa\u7684\u662f\u7ec4\u4ef6\u5217\u8868, \u5217\u8868\u4e2d\u7ec4\u4ef6\u7ec4\u5408\u4e0d\u540c\u53ef\u4ee5\u4ea7\u751f\u4e0d\u540c\u7684\u63d2\u4ef6, \u6bd4\u5982:   \u65e5\u7167\u72b6\u6001 + \u5bb6\u5ead\u4eba\u5458\u5728\u5ba2\u5385\u72b6\u6001 + \u706f\u5177\u63a7\u5236 = \u592a\u9633\u4e0b\u5c71\u5ba2\u5385\u6709\u4eba\u81ea\u52a8\u5f00\u706f, \u5ba2\u5385\u6ca1\u4eba\u81ea\u52a8\u5173\u706f  \u5c0f\u7c73\u626b\u5730\u673a\u5668\u4eba + \u5bb6\u5ead\u4eba\u5458\u5728\u5ba2\u5385\u72b6\u6001 = \u5bb6\u91cc\u6ca1\u4eba, \u4e14\u5b9a\u65f6\u4efb\u52a1\u5230, \u81ea\u52a8\u5f00\u59cb\u626b\u5730  \u5f55\u5236\u6a21\u5757 + \u64ad\u653e\u6a21\u5757 + \u8bed\u97f3\u8f6c\u6587\u5b57\u6a21\u5757 + \u6587\u5b57\u8f6c\u8bed\u97f3\u6a21\u5757 = \u8ddf\u795e\u7ecf\u51b0\u804a\u5929\u5e76\u53d1\u5e03\u4efb\u52a1\u7684\u529f\u80fd", 
            "title": "\u63d2\u4ef6\u5217\u8868"
        }, 
        {
            "location": "/2017-10-01-slackbot/#homeassistant", 
            "text": "", 
            "title": "homeassistant\u63d0\u4f9b\u7684\u529f\u80fd\u5217\u8868"
        }, 
        {
            "location": "/2017-10-01-slackbot/#_4", 
            "text": "\u83b7\u53d6\u5bb6\u5ead\u4eba\u5458\u662f\u5426\u5728\u5bb6, \u8be5\u5b9e\u73b0\u5176\u5b9e\u662f\u68c0\u6d4b\u5bb6\u5ead\u6210\u5458\u624b\u673a\u7684mac\u5730\u5740\u5224\u65ad\u662f\u5426\u8fde\u63a5\u4e0a\u8def\u7531\u5668.", 
            "title": "\u5bb6\u5ead\u4eba\u5458\u5728\u5bb6\u72b6\u6001"
        }, 
        {
            "location": "/2017-10-01-slackbot/#_5", 
            "text": "\u8fdc\u7a0b\u63a7\u5236\u6307\u5b9a\u706f\u5177\u7684\u5f00\u5173", 
            "title": "\u706f\u5177\u63a7\u5236"
        }, 
        {
            "location": "/2017-10-01-slackbot/#_6", 
            "text": "\u63a5\u5165\u5c0f\u7c73\u626b\u5730\u673a\u5668\u4eba, \u9ed8\u8ba4\u6bcf\u5468\u4e00\u4e09\u4e94\u542f\u52a8\u6e05\u626b, \u4f4624\u5c0f\u65f6\u5185\u4e0d\u91cd\u542f\u542f\u52a8\u6e05\u626b.", 
            "title": "\u5c0f\u7c73\u626b\u5730\u673a\u5668\u4eba"
        }, 
        {
            "location": "/2017-10-01-slackbot/#_7", 
            "text": "\u4e5f\u5c31\u662f\u592a\u9633\u4e0b\u5c71\u4e0e\u5426\u7684\u72b6\u6001.", 
            "title": "\u65e5\u7167\u72b6\u6001"
        }, 
        {
            "location": "/2017-10-01-slackbot/#_8", 
            "text": "\u8be5\u72b6\u6001\u7684\u5b58\u5728\u610f\u4e49\u662f, \u4e2a\u4eba\u671f\u671b\u5bb6\u5ead\u6210\u5458\u5728\u5ba2\u5385\u65f6, \u81ea\u52a8\u6253\u5f00\u5ba2\u5385\u706f, \u79bb\u5f00\u5ba2\u5385\u65f6, \u81ea\u52a8\u5173\u95ed\u5ba2\u5385\u7684.  \u5728\u521d\u671f\u5b66\u4e60\u9636\u6bb5, \u89e3\u9664\u5230\u7684\u4e3b\u8981\u6709\u84dd\u7259\u5e7f\u64ad\u548cRFID, \u90fd\u662f\u901a\u8fc7\u4e09\u70b9\u6cd5\u6765\u5b9a\u4f4d(\u76f8\u5173\u4fe1\u606f\u53ef\u4ee5\u767e\u5ea6\u5ba4\u5185\u5b9a\u4f4d). \u9996\u5148, \u57fa\u4e8e\u82af\u7247\u7684\u5b9a\u4f4d(\u4ed3\u5e93\u5b9a\u4f4d)\u4e0d\u9002\u5408\u5bb6\u5ead\u4f7f\u7528, \u56e0\u4e3a\u5bb6\u5ead\u4e0d\u53ef\u80fd\u4f1a\u5e26\u7740\u5c04\u9891\u82af\u7247.\u800c\u84dd\u7259\u5e7f\u64ad\u53ea\u6709\u63a5\u6536\u7aef\u624d\u80fd\u77e5\u9053\u81ea\u5df1\u4e0e\u53d1\u9001\u7aef\u7684\u8ddd\u79bb(\u4fe1\u53f7\u8870\u51cf), \u4e14\u9700\u8981\u4e09\u4e2a\u84dd\u7259\u5b9a\u4f4d. \u8003\u8651\u5230\u4e0e\u84dd\u7259\u7c7b\u4f3c, \u4f46\u6536\u5230\u73af\u5883\u5f71\u54cd\u66f4\u5927\u7684wifi, \u6d4b\u8bd5\u5c0f\u7c73\u8def\u7531\u5668\u4e0a\u53ef\u4ee5\u83b7\u53d6\u5230\u76ee\u6807\u624b\u673a\u7684\u4fe1\u53f7\u5f3a\u5ea6, \u5219\u51b3\u5b9a\u6539\u7528wifi\u5212\u5b9a\u4e24\u4e2a\u5706\u5f27\u533a\u57df. \u5c0f\u5706\u5f27\u533a\u57df\u5185\u5f00\u706f, \u5927\u5706\u5f27\u533a\u57df\u5916\u5173\u706f, \u800c\u4e24\u4e2a\u5706\u5f27\u533a\u57df\u4e2d\u95f4\u4fdd\u6301\u539f\u72b6\u6001\u4e0d\u53d8.", 
            "title": "\u5bb6\u5ead\u4eba\u5458\u5728\u5ba2\u5385\u72b6\u6001"
        }, 
        {
            "location": "/2017-10-01-slackbot/#_9", 
            "text": "\u5206\u522b\u6709 ibot, tuling, xiaoi, emotibot. \u4f46\u4e0d\u662f\u6240\u6709\u7684\u90fd\u542f\u7528, \u5728\u804a\u5929\u63d2\u4ef6\u4e2d, \u9009\u62e9\u5176\u4e2d\u7684\u4e00\u4e2a\u542f\u52a8\u5e76\u4ea4\u4e92.", 
            "title": "\u804a\u5929\u673a\u5668\u4eba"
        }, 
        {
            "location": "/2017-10-01-slackbot/#_10", 
            "text": "\u6240\u8c13\u7684\u6587\u4ef6\u7ba1\u7406\u5668, \u53ea\u662f\u4e00\u4e2a\u6587\u4ef6\u7d22\u5f15\u52a0\u4e0a\u6587\u4ef6\u67e5\u627e\u7684\u5de5\u5177, \u989d\u5916\u589e\u52a0\u4e86\u4e00\u4e2a\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd. \u6587\u4ef6\u7d22\u5f15\u4f7f\u7528\u7684\u662fjieba\u548cwhoos. \u53ef\u4ee5\u901a\u8fc7slackbot\u5feb\u901f\u67e5\u627e\u67d0\u4e2a\u6587\u4ef6\u6216\u8005\u67d0\u672c\u4e66(\u7535\u5b50\u4e66\u591a\u5230\u81ea\u5df1\u4e5f\u4e0d\u77e5\u9053\u6709\u591a\u5c11\u672c).", 
            "title": "\u6587\u4ef6\u7ba1\u7406\u5668"
        }, 
        {
            "location": "/2017-10-01-slackbot/#_11", 
            "text": "\u4e0d\u53ea\u662f\u8ffd\u5267, \u4e5f\u662f\u8ffd\u7535\u5f71. \u7535\u5f71\u8c46\u74e37.0\u4ee5\u4e0a\u624d\u63a8\u9001, \u800c\u5267\u662f\u5bb6\u91cc\u653f\u59d4\u559c\u6b22\u7684\u65e5\u5267, \u5168\u63a8((\u2299\ufe4f\u2299)b),\u540e\u6765\u56e0\u4e3a\u67d0\u4e9b\u6bd4\u8f83\u65e0\u5948\u7684\u539f\u56e0,  \u8fd9\u8d27\u5f00\u59cb\u63a8\u4e00\u4e9b\u8001\u5bb6\u91cc\u653f\u59d4\u559c\u6b22\u7684\u5267, \u5c31\u6309\u9700\u52a0\u4e86\u4e2a\u529f\u80fd, \u9ed1\u767d\u540d\u5355. \u679c\u7136\u8001\u5a46\u662f\u7b2c\u4e00\u751f\u4ea7\u529b.", 
            "title": "\u8ffd\u5267\u6a21\u5757"
        }, 
        {
            "location": "/2017-10-01-slackbot/#_12", 
            "text": "\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u722c\u866b, \u4e0d\u505c\u5730\u722c\u53d6\u6307\u5b9a\u5c0f\u8bf4\u5224\u65ad\u662f\u5426\u5b58\u5728\u66f4\u65b0. \u5728\u4e2a\u4eba\u7684\u4e3b\u9875\u4ecb\u7ecd\u4e2d\u4ecb\u7ecd\u4e86\u559c\u6b22\u5386\u53f2\u5c0f\u8bf4, \u6240\u4ee5\u5927\u90e8\u5206\u90fd\u662f\u5386\u53f2\u7c7b\u5c0f\u8bf4", 
            "title": "\u5c0f\u8bf4\u6a21\u5757"
        }, 
        {
            "location": "/2017-10-01-slackbot/#_13", 
            "text": "\u8c03\u7528mplayer\u64ad\u653e", 
            "title": "\u64ad\u653e\u6a21\u5757"
        }, 
        {
            "location": "/2017-10-01-slackbot/#_14", 
            "text": "\u8c03\u7528arecord\u5f55\u97f3", 
            "title": "\u5f55\u5236\u6a21\u5757"
        }, 
        {
            "location": "/2017-10-01-slackbot/#_15", 
            "text": "\u7528\u4e86\u767e\u5ea6\u7684api", 
            "title": "\u8bed\u97f3\u8f6c\u6587\u5b57"
        }, 
        {
            "location": "/2017-10-01-slackbot/#_16", 
            "text": "\u7528\u4e86iflytek\u7684API, \u4e0d\u5f97\u4e0d\u8bf4\u5b83\u4eec\u5bb6\u8bed\u97f3\u505a\u5f97\u597d, \u5404\u79cd\u4eba\u7269\u53ef\u9009.", 
            "title": "\u6587\u5b57\u8f6c\u8bed"
        }, 
        {
            "location": "/2017-10-01-slackbot/#_17", 
            "text": "\u5305\u542b\u4e86\u6a21\u4eff\u6d4f\u89c8\u5668\u6253\u5f00\u7684\u4ee3\u7801(cookie\u7b49), \u5b9e\u73b0\u4e86\u4ee3\u7406\u6c60, \u5e76\u53ef\u4ee3\u7406\u8bbf\u95ee.", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/2017-09-20-Android-AB-system-update/", 
            "text": "\u6765\u6e90:https://pengzhangdev.github.io/Android-AB-system-update/\n\n\n A/B\u7cfb\u7edf\u7b80\u4ecb \n\n\n\n\u987e\u540d\u601d\u4e49, \nA/B\n\u7cfb\u7edf\u5c31\u662f\u6307\u7ec8\u7aef\u8bbe\u5907\u4e0a\u5b58\u5728\u4e24\u5957\u7cfb\u7edf,(userdata\u53ea\u6709\u4e00\u4efd, \u88ab\u4e24\u5957\u7cfb\u7edf\u5171\u7528). \u7b80\u5355\u6765\u8bb2, \u53ef\u4ee5\u7406\u89e3\u4e3a, \u5b58\u5728\u4e00\u5957\u7cfb\u7edf\u5206\u533a, \u4e00\u5957\u5907\u4efd\u5206\u533a, \u4e24\u5957\u7cfb\u7edf\u90fd\u53ef\u4ee5\u88ab\u542f\u52a8, \u4e24\u5957\u7cfb\u7edf\u7684\u7248\u672c\u53f7\u53ef\u4ee5\u4e00\u6837, \u4e5f\u53ef\u4ee5\u4e00\u5957\u65e7, \u4e00\u5957\u65b0. \u800c\u5347\u7ea7\u5c31\u662f\u5c06\u65e7\u7684\u7cfb\u7edf\u5347\u7ea7\u5230\u65b0\u7248\u672c.\n\n\nA/B\u7cfb\u7edf\u5b9e\u73b0\u4e86\u65e0\u7f1d\u5347\u7ea7(Seamless System Updates), \u5b58\u5728\u5982\u4e0b\u7279\u70b9:\n\n\n\n\n\u7ec8\u7aef\u8bbe\u5907\u5728\u51fa\u5382\u65f6\u6709\u4e24\u5957\u8bbe\u5907\u53ef\u4ee5\u5de5\u4f5c, \u5728\u5347\u7ea7\u51fa\u73b0\u5f02\u5e38\u6216\u8005\u51fa\u9519\u65f6, \u59cb\u7ec8\u786e\u4fdd\u7cfb\u7edf\u5b58\u5728\u4e00\u5957\u8bbe\u5907\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c.\n\n\n\u7cfb\u7edf\u5728\u540e\u53f0\u8fdb\u884c\u5347\u7ea7, \u66f4\u65b0\u5230\u53e6\u4e00\u5957\u7cfb\u7edf, \u7528\u6237\u4e0d\u4f1a\u88ab\u6253\u65ad. \u5728\u66f4\u65b0\u5b8c\u6210\u540e, \u7528\u6237\u5728\u4e0b\u6b21\u91cd\u542f\u624b\u673a\u65f6, \u5c31\u4f1a\u8fdb\u5165\u65b0\u7cfb\u7edf.\n\n\n\u5728 dm-verity \u6216\u8005\u5176\u4ed6\u6821\u9a8c\u65b9\u5f0f\u68c0\u6d4b\u5230\u7cfb\u7edf\u987a\u574f\u6216\u5f02\u5e38\u540e, \u53ef\u4ee5\u91cd\u542f\u56de\u5230\u5347\u7ea7\u524d\u7684\u7cfb\u7edf, \u786e\u4fdd\u7528\u6237\u4f7f\u7528\u4e0d\u53d7\u5f71\u54cd.\n\n\n\n\nAndroid8.0\u7684\u4ee3\u7801\u7f16\u8bd1\u65f6, \u5728BoardConfig\u6709\u5bf9\u5e94\u7684\u9009\u9879\u6765\u63a7\u5236\u662f\u7f16\u8bd1\u6210A/B\u7cfb\u7edf\u8fd8\u662f\u6b63\u5e38\u5355\u7cfb\u7edf. \u7531\u4e8e\u65b0\u7cfb\u7edf\u8ddf\u539f\u6765\u7684OTA\u5347\u7ea7\u7cfb\u7edf\u5b58\u5728\u5927\u4e0d\u540c, \u5bfc\u81f4\u65e0\u6cd5\u901a\u8fc7\u4ee5\u524d\u7684OTA\u5347\u7ea7\u65b9\u5f0f(\u5b89\u5168\u5730)\u5347\u7ea7\u5230A/B\u7cfb\u7edf.\n\n\n\u800cA/B\u7cfb\u7edf\u5347\u7ea7, \u662f\u7531\u8fd0\u884c\u4e8eAndroid\u540e\u53f0\u7684\nupdate_engine\n\u548c \nslot a\n, \nslot b\n\u4e24\u5957\u7cfb\u7edf\u5171\u540c\u5b8c\u6210. \u5728\u542f\u52a8\u5176\u4e2d\u4e00\u5957\u7cfb\u7edf\u7684\u60c5\u51b5\u4e0b, \nupdate_engine\n\u5728\u540e\u53f0\u4e0e\u670d\u52a1\u5668\u901a\u4fe1\u4e0b\u8f7d\u5347\u7ea7\u6d41\u5e76\u66f4\u65b0\u5230\u53e6\u4e00\u5957\u7cfb\u7edf.\n\n\nA/B \u7cfb\u7edf\u5347\u7ea7\u4e3b\u8981\u6d89\u53ca\u5982\u4e0b4\u4e2a\u65b9\u9762:\n\n\n\n\n\u5206\u533a\u9009\u62e9(slots), \u5373\u9009\u62e9\u54ea\u4e2a\u7cfb\u7edf.\n\n\nupdate_engine\n, \u5373\u5347\u7ea7\u6d41\u4e0b\u8f7d\u548c\u5347\u7ea7\n\n\nbootloader\u4ea4\u4e92, \u5373\u5982\u4f55\u901a\u77e5bootloader\u5207\u6362slot\n\n\nota\u5305\u751f\u6210.\n\n\n\n\n\n \u5206\u533a\u9009\u62e9 \n\n\n\n\n\u5206\u533a\u8868\u548c\u5206\u533a\u5185\u5bb9\u53d8\u5316\n\n\n\n\n\u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u8003 \nAndroid8 \u5206\u533a\u8868\u548c\u5206\u533a\u76f8\u5173\u64cd\u4f5c\n. \u8fd9\u91cc\u7b80\u5355\u603b\u7ed3\u4e0b\u5206\u533a\u8868\u4e0a\u8ddf\u5355\u7cfb\u7edf\u7684\u5dee\u5f02.\n\u8fd9\u91cc\u4ee5boot,system, vendor\u548cmodem\u5b58\u5728\u4e24\u5957\u7cfb\u7edf\u4e3a\u4f8b\u5b50, \u5176\u4f59\u5206\u533a\u6309\u7167\u6700\u5c0f\u5206\u533a\u8868.\n\n\n\n\n\n\n\n\n\u5355\u7cfb\u7edf\u5206\u533a\u8868\n\n\nA/B\u7cfb\u7edf\u5206\u533a\u8868\n\n\n\u529f\u80fd\u63cf\u8ff0\n\n\n\n\n\n\n\n\n\n\nbootloader\n\n\nbootloader\n\n\n\u5f15\u5bfclinux\u7cfb\u7edf\n\n\n\n\n\n\nmisc\n\n\nmisc\n\n\nAndroid\u7cfb\u7edf\u4e0erecovery, bootloade\u901a\u4fe1\u7684\u6570\u636e\n\n\n\n\n\n\nboot\n\n\n-\n\n\n\u5b58\u653eAndroid\u7684kernel\u548cramdisk\n\n\n\n\n\n\n-\n\n\nboot_a\n\n\n\u5b58\u653eAndroid\u7684kernel\u548c\u5355\u7cfb\u7edf\u4e2drecovery\u7684ramdisk\n\n\n\n\n\n\n-\n\n\nboot_b\n\n\n\u5b58\u653eAndroid\u7684kernel\u548c\u5355\u7cfb\u7edf\u4e2drecovery\u7684ramdisk\n\n\n\n\n\n\nsystem\n\n\n-\n\n\nAndroid\u7cfb\u7edf\u5e94\u7528, \u5e93\u548c\u8d44\u6e90\u6587\u4ef6.\n\n\n\n\n\n\n-\n\n\nsystem_a\n\n\n\u5b58\u653e\u5355\u7cfb\u7edfboot\u4e2d\u7684ramdisk\u548csystem\u4e2d\u7684\u5e94\u7528, \u5e93\u548c\u8d44\u6e90\u6587\u4ef6\n\n\n\n\n\n\n-\n\n\nsystem_b\n\n\n\u5b58\u653e\u5355\u7cfb\u7edfboot\u4e2d\u7684ramdisk\u548csystem\u4e2d\u7684\u5e94\u7528, \u5e93\u548c\u8d44\u6e90\u6587\u4ef6\n\n\n\n\n\n\n-\n\n\nvendor_a\n\n\n\u5b58\u653e\u5382\u5546\u7684\u914d\u7f6e, \u53ef\u6267\u884c\u7a0b\u5e8f, \u5e93, \u76ee\u5f55\u7ed3\u6784\u4e0e/system/\u4e00\u81f4\n\n\n\n\n\n\n-\n\n\nvendor_b\n\n\n\u5b58\u653e\u5382\u5546\u7684\u914d\u7f6e, \u53ef\u6267\u884c\u7a0b\u5e8f, \u5e93, \u76ee\u5f55\u7ed3\u6784\u4e0e/system/\u4e00\u81f4\n\n\n\n\n\n\ncache\n\n\n-\n\n\n\u4e34\u65f6\u5b58\u653e\u6570\u636e, \u901a\u5e38\u4e34\u65f6\u5b58\u653e\u4e0b\u8f7d, \u5907\u4efd\u548c\u5347\u7ea7\u5305\n\n\n\n\n\n\nrecovery\n\n\n-\n\n\n\u5b58\u653erecovery\u7cfb\u7edf\u7684kernel\u548cramdisk\n\n\n\n\n\n\nuserdata\n\n\nuserdata\n\n\n\u5b58\u653e\u7528\u6237\u6570\u636e\n\n\n\n\n\n\n\n\n\u6240\u8c13\u7684A/B\u7cfb\u7edf\u5206\u533a, \u5c31\u662f\u5728\u539f\u6709\u5206\u533a\u540d\u5b57\u540e\u5417\u6dfb\u52a0\n_a\n \u548c \n_b\n, \u5728\u5237\u673a, \u6216\u8005\u7cfb\u7edf\u542f\u52a8\u7684\u65f6\u5019, \u6839\u636ebootloader\u7684\u53c2\u6570\u6dfb\u52a0\u540e\u7f00, \u9009\u62e9\u6b63\u786e\u7684\u7cfb\u7edf. misc\u5206\u533a\u5728A/B\u7cfb\u7edf\u4e2d\u53d8\u6210\u4e00\u4e2a\u53ef\u6709\u53ef\u65e0\u7684\u5b58\u5728, \u56e0\u4e3a\u5176\u529f\u80fd\u53ea\u662f\u4f20\u9012\u6062\u590d\u51fa\u5382\u8bbe\u7f6e\u7684\u53c2\u6570, \u800crecovery\u7684\u529f\u80fd\u4e5f\u53ea\u5269\u4e0b\u6062\u590d\u51fa\u5382\u8bbe\u7f6e, \u6240\u4ee5, \u672c\u8d28\u4e0a, \u6ca1\u5fc5\u8981\u518d\u57fa\u4e8emisc\u4f20\u9012\u53c2\u6570\u4e86.\n\n\n\n\u7cfb\u7edf\u5206\u533a\u5c5e\u6027\n\n\n\nbootloader\u4e3a\u4e86\u5224\u65ad\u4e00\u4e2a\u7cfb\u7edf(slot)\u662f\u5426\u4e3a\u53ef\u4ee5\u542f\u52a8\u7684\u72b6\u6001, \u9700\u8981\u4e3a\u5176\u5b9a\u4e49\u5bf9\u5e94\u7684\u5c5e\u6027(\u72b6\u6001). \u5176\u72b6\u6001\u8bf4\u660e\u5982\u4e0b:\n\n\n\n\nactive. \u6d3b\u52a8\u5206\u533a\u6807\u8bc6, \u6392\u4ed6, \u4ee3\u8868\u8be5\u5206\u533a\u4e3a\u542f\u52a8\u5206\u533a, bootloader\u603b\u4f1a\u9009\u62e9\u8be5\u5206\u533a.\n\n\nbootable. \u8868\u793a\u8be5slot\u7684\u5206\u533a\u5b58\u5728\u4e00\u5957\u53ef\u80fd\u53ef\u4ee5\u542f\u52a8\u7684\u7cfb\u7edf.\n\n\nsuccessful. \u8868\u793a\u8be5slot\u7684\u7cfb\u7edf\u80fd\u6b63\u5e38\u542f\u52a8.\n\n\nunbootable. \u4ee3\u8868\u8be5\u5206\u533a\u635f\u574f\u7684, \u65e0\u6cd5\u542f\u52a8, \u5728\u5347\u7ea7\u8fc7\u7a0b\u603b\u88ab\u6807\u8bb0, \u8be5\u6807\u8bb0\u7b49\u6548\u4e8e\u4ee5\u4e0a\u6807\u8bb0\u88ab\u6e05\u7a7a. \u800cactive\u6807\u8bb0\u4f1a\u5c06\u8be5\u6807\u8bb0\u6e05\u7a7a.\n\n\n\n\nslot a\n \u548c \nslot b\n, \u53ea\u6709\u4e00\u4e2a\u662factive, \u5b83\u4eec\u53ef\u4ee5\u540c\u65f6\u6709 bootable \u548c successful \u5c5e\u6027.\n\n\n\n\n\nbootloader\u68c0\u6d4b\u52301\u4e2a\u6216\u80052\u4e2aslot\u90fd\u662fbootable\u7684\u72b6\u6001.\n\n\n\u9009\u62e9active\u7684slot\u6216\u8005\u9009\u62e9successful\u7684slot\u8fdb\u884c\u5c1d\u8bd5\u542f\u52a8.\n\n\n\u542f\u52a8\u6210\u529f\u7684\u6807\u8bb0\u662f, dm-verity \u6210\u529f.\n\n\n\u7531\u4e8e\u542f\u52a8\u6210\u529f, \u5219\u8be5slot\u88ab\u6807\u8bb0\u4e3asuccessful\u548cactive\n\n\n\u7531\u4e8e\u542f\u52a8\u5931\u8d25, \u5219\u8bbe\u7f6e\u8be5slot\u4e3aunbootable, \u5e76\u8bbe\u7f6e\u53e6\u4e00\u4e2aslot\u4e3aactive, \u8fdb\u884c\u4e0b\u4e00\u6b21\u5c1d\u8bd5.\n\n\n\n\n\n\n\n\n\u5347\u7ea7\u6d41\u4e0b\u8f7d\u548c\u5347\u7ea7\n\n\n\n\n\u9996\u5148, \u6211\u4eec\u770b\u4e0b\u5347\u7ea7\u5305\u7684\u5185\u5bb9. \u5728A/B\u5347\u7ea7\u7684\u60c5\u51b5\u4e0b, \u5347\u7ea7\u5305\u5185\u5bb9\u5982\u4e0b:\n\n\nPath = aosp_marlin-ota-eng.builder.zip\nType = zip\nComment = signed by SignApk\nPhysical Size = 384694679\n\n   Date      Time    Attr         Size   Compressed  Name\n------------------- ----- ------------ ------------  ------------------------\n2009-01-01 00:00:00 .....          360          360  META-INF/com/android/metadata\n2009-01-01 00:00:00 .....          107          107  care_map.txt\n2009-01-01 00:00:00 .....    384690699    384690699  payload.bin\n2009-01-01 00:00:00 .....          154          154  payload_properties.txt\n2009-01-01 00:00:00 .....         1675          943  META-INF/com/android/otacert\n------------------- ----- ------------ ------------  ------------------------\n                             384692995    384692263  5 files, 0 folders\n\n\n\n\n\n\n\n\u4e0b\u8f7d\u548c\u5347\u7ea7\u7a0b\u5e8f\u662f\nupdate_engine\n, \u6765\u81eachrome os, \u4ee3\u7801\u4e2d\u5927\u91cf\u5b58\u5728dbus\u548cchrome os\u7684\u75d5\u8ff9, \u800cAndroid\u4e0a\u6539\u7a0b\u5e8f\u662f\u57fa\u4e8ebinde\u8fdb\u884c\u901a\u4fe1. \u4e0e\u539f\u5148\u7684ota\u5347\u7ea7\u4e0d\u540c, \u8be5\u5347\u7ea7\u5305\u4e2d\u4e0d\u5305\u542bupdater, \u4e5f\u5c31\u662f\u8bf4, \u5347\u7ea7\u7684\u903b\u8f91\u5728\u8bbe\u5907\u7aef\u800c\u4e0d\u662f\u5728\u5347\u7ea7\u5305\u4e2d. \u5982\u679c\u719f\u6089ota\u5347\u7ea7\u7684\u8bdd, \u8fd9\u4e2a\u5347\u7ea7\u5305\u4e2d\u7684\u6570\u636e\u8ddf\u5757\u5347\u7ea7\u6570\u636e\u51e0\u4e4e\u4e00\u6837, \u521d\u6b65\u5224\u65ad\u7528\u7684\u662f\u5757\u5347\u7ea7.\n\u90a3\u4e48, \u5982\u679c\u6709\u65b0\u7684\u9700\u6c42, \u6bd4\u5982\u6b64\u6b21\u66f4\u65b0\u9700\u8981\u8c03\u6574\u6570\u636e\u5e93, \u662f\u5982\u4f55\u505a\u5230\u7684? \u8bf7\u67e5\u770b\u540e\u6587\u7b2c\u4e8c\u6b65\u5347\u7ea7.\n\n\n\n\u6574\u4e2a\u5347\u7ea7\u5206\u4e3a\u4e94\u6b65:\n\n\n\n\n\u4e0b\u8f7d\u5347\u7ea7\u5305, \u6216\u8005\u5347\u7ea7\u6d41. Android8 \u65b0\u652f\u6301\u4e86\u6d41\u5f0f\u5347\u7ea7, \u53ef\u4ee5\u8fb9\u4e0b\u8fb9\u5347.\n\n\n\u7b2c\u4e00\u6b65\u5347\u7ea7. \u4e5f\u5c31\u662f, \nupdate_engine\n\u6267\u884c\u7684\u5347\u7ea7\u903b\u8f91, \u57fa\u672c\u7684\u6570\u636e\u5199\u5165.\n\n\n\u6821\u9a8c\u5199\u5165\u6570\u636e. \u786e\u4fdd\u4e0a\u4e00\u6b65\u5199\u5165\u6570\u636e\u53ef\u9760\u5b8c\u6574.\n\n\n\u7b2c\u4e8c\u6b65\u5347\u7ea7. \u4e5f\u5c31\u662f, \u6302\u8f7d\u65b0\u70e7\u5199\u7684\u5206\u533a, \u5e76\u6267\u884c\u5176\u4e2d\u7684\u6307\u5b9a\u811a\u672c(\u7a0b\u5e8f)\u8fdb\u884c\u540e\u7eed\u66f4\u65b0\u64cd\u4f5c.\n\n\n\u5e94\u7528\u4f18\u5316.  \u7531\u4e8e\u5b58\u5728A/B\u65b0\u65e7\u4e24\u5957\u7cfb\u7edf, \u6240\u4ee5, data\u5e95\u4e0b\u4e5f\u5b58\u5728\u4e24\u5957odex/vdex.\n\n\n\n\n\u524d4\u6b65, \u57fa\u4e8e\u4e00\u79cdpipe\u7684\u6846\u67b6\u5b9e\u73b0, \u6bcf\u4e00\u6b65\u90fd\u662f\u4e00\u4e2aaction, \u522b\u94fe\u63a5\u5230actio list\u4e2d, \u524d\u540e\u4e24\u4e2aaction\u901a\u8fc7pipe\u673a\u5236\u8fdb\u884c\u6570\u636e\u901a\u4fe1. \u4e5f\u5c31\u662f\u8bf4, \u524d\u4e00\u4e2aaction\u7684\u8f93\u51fa\u9ed8\u8ba4\u53d8\u6210\u540e\u4e00\u4e2aaction\u7684\u8f93\u5165. action\u7684\u6267\u884c\u51fd\u6570\u662f\nPerformAction()\n. \u901a\u8fc7\nHasInputObject()\n\u548c\nHasOutputPipe()\n\u5224\u65ad\u662f\u5426\u6709\u8f93\u5165\u548c\u8f93\u51fa\u6d41, \u800c\nGetInputObject()\n\u63a5\nSetOutputObject()\n\u5206\u522b\u662f\u8bfb\u53d6\u548c\u5199\u5165pipe.\n\n\nupdate_engine\n \u7684 Androidmk\u76ee\u6807, \u4f9d\u8d56\u548c\u5bf9\u5e94\u6e90\u7801\u6587\u4ef6\u5982\u4e0b.\n\n\n# \u9759\u6001\u5e93\u6a21\u5757\nSTATIC_LIBRARIES:\n    update_metadata-protos      (host, target)\n    libpayload_consumer         (host, target)\n    libupdate_engine_android    (target)\n    libpayload_generator        (host, target)\n\n# \u53ef\u6267\u884c\u6a21\u5757\nEXECUTABLES:\n    update_engine           (target)\n    update_engine_sideload      (target)\n    update_engine_client        (target)\n    delta_generator         (host)\n\n# \u5171\u4eab\u5e93\u6a21\u5757\nSHARED_LIBRARIES:\n    libupdate_engine_client     (target)\n\n# \u9884\u7f16\u8bd1\u6a21\u5757\nPREBUILT:\n    updater.json            (target)\n    brillo_update_payload       (host)\n\n\n\n\n\n\u4ece\u4e0a\u6587\u7684\u76ee\u6807\u53ef\u4ee5\u83b7\u53d6\u5982\u4e0b\u4fe1\u606f:\n\n\n\n\npayload \u4e2d\u7684\u6587\u4ef6\u7ed3\u6784\u662fprotos\n\n\n\u53ef\u6267\u884c\u6587\u4ef6\u662f \nupdate_engine\n, \u800c \nupdate_engine_client\n \u662f\u5ba2\u6237\u7aef, \nupdate_engine_sideload\n \u662frecovery\u6a21\u5f0f\u4e0b\u901a\u8fc7usb\u66f4\u65b0.\n\n\ndelta_generator\n \u7528\u4e8e\u751f\u6210payload\n\n\n\u5b8c\u6574\u7684Android.mk\u4e2d, \u5b58\u5728\u6807\u8bb0\u4e3a\nlocal_use_omaha\n, \u53ea\u6709\u5728 \nPRODUCT_IOT\n \u7269\u8054\u7f51\u65f6, \u624d\u542f\u7528, \u7f16\u8bd1\u83b7\u5f97\u7684\u662fdbus\u7248\u672c\u7684\nupdate_engine\n.\n\n\n\n\n\u4f9d\u8d56\u5173\u7cfb\u5982\u4e0b:\n\n\nupdate_engine (target)\n  --\n libupdate_engine_android\n    --\n libpayload_consumer\n      --\n update_metadata-protos\n\nupdate_engine_sideload (target)\n  --\n update_engine_sideload\n    --\n update_metadata-protos\n\nupdate_engine_client (target)\n\ndelta_generator (host)\n  --\n libpayload_generator\n    --\n libpayload_consumer\n      --\n update_metadata-protos\n\n\n\n\n\n\u6e90\u7801\u5217\u8868\u5982\u4e0b:\n\n\nupdate_metadata-protos (STATIC_LIBRARIES)\n  --\n update_metadata.proto\n\nlibpayload_consumer (STATIC_LIBRARIES)\n  --\n common/action_processor.cc\n      common/boot_control_stub.cc\n      common/clock.cc\n      common/constants.cc\n      common/cpu_limiter.cc\n      common/error_code_utils.cc\n      common/hash_calculator.cc\n      common/http_common.cc\n      common/http_fetcher.cc\n      common/file_fetcher.cc\n      common/hwid_override.cc\n      common/multi_range_http_fetcher.cc\n      common/platform_constants_android.cc\n      common/prefs.cc\n      common/subprocess.cc\n      common/terminator.cc\n      common/utils.cc\n      payload_consumer/bzip_extent_writer.cc\n      payload_consumer/delta_performer.cc\n      payload_consumer/download_action.cc\n      payload_consumer/extent_writer.cc\n      payload_consumer/file_descriptor.cc\n      payload_consumer/file_writer.cc\n      payload_consumer/filesystem_verifier_action.cc\n      payload_consumer/install_plan.cc\n      payload_consumer/payload_constants.cc\n      payload_consumer/payload_verifier.cc\n      payload_consumer/postinstall_runner_action.cc\n      payload_consumer/xz_extent_writer.cc\n\nlibupdate_engine_android (STATIC_LIBRARIES)\n  --\n binder_bindings/android/os/IUpdateEngine.aidl\n      binder_bindings/android/os/IUpdateEngineCallback.aidl\n      binder_service_android.cc\n      boot_control_android.cc\n      certificate_checker.cc\n      daemon.cc\n      daemon_state_android.cc\n      hardware_android.cc\n      libcurl_http_fetcher.cc\n      network_selector_android.cc\n      proxy_resolver.cc\n      update_attempter_android.cc\n      update_status_utils.cc\n      utils_android.cc\n\nupdate_engine (EXECUTABLES)\n  --\n main.cc\n\nupdate_engine_sideload (EXECUTABLES)\n  --\n boot_control_android.cc\n      hardware_android.cc\n      network_selector_stub.cc\n      proxy_resolver.cc\n      sideload_main.cc\n      update_attempter_android.cc\n      update_status_utils.cc\n      utils_android.cc\n      boot_control_recovery_stub.cc\n\nupdate_engine_client (EXECUTABLES)\n  --\n binder_bindings/android/os/IUpdateEngine.aidl\n      binder_bindings/android/os/IUpdateEngineCallback.aidl\n      common/error_code_utils.cc\n      update_engine_client_android.cc\n      update_status_utils.cc\n\nlibpayload_generator (SHARED_LIBRARIES)\n  --\n payload_generator/ab_generator.cc\n      payload_generator/annotated_operation.cc\n      payload_generator/blob_file_writer.cc\n      payload_generator/block_mapping.cc\n      payload_generator/bzip.cc\n      payload_generator/cycle_breaker.cc\n      payload_generator/delta_diff_generator.cc\n      payload_generator/delta_diff_utils.cc\n      payload_generator/ext2_filesystem.cc\n      payload_generator/extent_ranges.cc\n      payload_generator/extent_utils.cc\n      payload_generator/full_update_generator.cc\n      payload_generator/graph_types.cc\n      payload_generator/graph_utils.cc\n      payload_generator/inplace_generator.cc\n      payload_generator/payload_file.cc\n      payload_generator/payload_generation_config.cc\n      payload_generator/payload_signer.cc\n      payload_generator/raw_filesystem.cc\n      payload_generator/tarjan.cc\n      payload_generator/topological_sort.cc\n      payload_generator/xz_android.cc\n\ndelta_generator (EXECUTABLES)\n  --\n payload_generator/generate_delta_main.cc\n\n\n\n\n\n \u4e0b\u8f7d \n\n\n\u4e0b\u8f7d\u76f8\u5173\u4e0e\u670d\u52a1\u5668\u4ea4\u4e92\u7684\u903b\u8f91: \ndelta_performer.cc\n\n\n\u5347\u7ea7\u6d41(\u5305)\u7684\u4e0b\u8f7d, \u5206\u4e3a\u4e24\u4e2a\u6a21\u5f0f:\n\n\n\n\n\u4e0b\u8f7dzip\u5305\u5230data\u5206\u533a.\n\n\n\u4e0b\u8f7d\u5347\u7ea7\u6d41, \u8fb9\u4e0b\u8fb9\u5347\u7ea7.\n\n\n\n\n( \u4ecechrome os\u4ee3\u7801\u770b, \u5176\u5347\u7ea7\u670d\u52a1\u5668\u662fomaha server, \u53ef\u4ee5\u53c2\u8003\u770b\u4e0b\u5bf9\u4e8e\u6211\u4eec\u7684\u5347\u7ea7\u670d\u52a1\u5668\u662f\u5426\u6709\u5e2e\u52a9.\nhttps://github.com/Crystalnix/omaha-server\nhttps://github.com/Crystalnix/omaha-server/wiki\n)\n\n\npayload \u6570\u636e\u7ed3\u6784:\n\n\nversion 1:\n| \nC\nr\nA\nU\n | version(8) | manifestSize(8) | manifest(manifestSize) | rawData | payloadSignatureMessageSize | payloadSignatureMessage(payloadSignatureMessageSize) |\n\nversion 2:\n| \nC\nr\nA\nU\n | version(8) | manifestSize(8) | MetadataSignatureSize(4) | manifest(manifestSize) | medatadataSignatureMessage(MetadataSignatureSize) | rawData | payloadSignatureMessageSize | payloadSignatureMessage(payloadSignatureMessageSize) |\n\n\n\n\n\n\u5176\u4e2d medatadataSignatureMessage \u6821\u9a8c\u7684\u662f\u5176\u4e4b\u524d\u7684\u6240\u6709\u6570\u636e, \u800c payloadSignatureMessage \u6821\u9a8c\u7684\u662f payloadSignatureMessageSize \u4e4b\u524d\u7684\u6240\u6709\u6570\u636e.\n\n\n\u800c manifest \u662fprotobuff, \u5176\u4e2d\u5305\u542b\u4e00\u7ec4\u6307\u4ee4\u96c6, \u4e5f\u5c31\u662f\u4ee5\u524drecovery \u5757\u5347\u7ea7\u7684\u4e00\u7cfb\u5217\u6307\u4ee4. rawData\u662f\u88ab\u66f4\u65b0\u6570\u636e, \u6307\u4ee4\u4f1a\u4ecerawData\u6307\u5b9a\u4f4d\u7f6e\u8bfb\u53d6\u6570\u636e\u5e76\u5e94\u7528\u5230\u76ee\u6807\u5206\u533a\u7684\u6307\u5b9a\u4f4d\u7f6e.\n\n\nmetadata\u7684\u6570\u636e\u662fprotobuf, \u6570\u636e\u7ed3\u6784\u4e3a update_metadata.proto\n\n\n\u4e0b\u8f7d\u5b58\u5728\u4e24\u79cd\u6a21\u5f0f, p2p\u548c\u666e\u901a\u4e0b\u8f7d.\n\n\n\u4e0b\u8f7d\u5230data\u5206\u533a\u7684\u903b\u8f91\u4e0e\u4e4b\u524dota\u5347\u7ea7\u4e0b\u8f7d\u5347\u7ea7\u5305\u7684\u903b\u8f91\u4e00\u81f4. \nupdate_engine\n\u5c06\u5347\u7ea7\u5305\u4e0b\u8f7d\u5230\u672c\u5730.  \u4e0b\u9762\u5148\u4ecb\u7ecd\u8fb9\u4e0b\u8fb9\u5347\u7ea7\u7684\u903b\u8f91.\n\n\n\u4e0b\u8f7d\u5230data\u5206\u533a\n\n\n\u4e0b\u8f7d\u5230data\u5206\u533a\u7684\u5b9e\u73b0\u4e0d\u518d\nupdate_engine\n\u4e2d, \u800c\u5982\u679c\u662f\u9884\u5148\u4e0b\u8f7d\u5b8c\u6210\u7684payload, \u901a\u8fc7\nfile://\n\u7684url\u4f20\u9012\u7ed9\nupdate_engine\n, \u540e\u7eed\u903b\u8f91\u4e0e\u8fb9\u4e0b\u8fb9\u5347\u7ea7\u4e00\u6837.\n\n\n\u800cjava\u5c42\u7684UpdateEngine.java\u7684API, \u66b4\u9732\u5230\u4e86\u7cfb\u7edf\u7684jar\u5305\u4e2d, \u5e76\u672a\u627e\u5230\u8c03\u7528\u8005, \u4e5f\u5c31\u662f\u8bf4, \u8fd9\u5757\u903b\u8f91\u662f\u975e\u5f00\u6e90\u7684, \u6211\u4eec\u65e0\u6cd5\u83b7\u5f97.\n\n\n\u8fb9\u4e0b\u8fb9\u5347\n\n\n\u6240\u8c13\u8fb9\u4e0b\u8fb9\u5347, \u5c31\u662f\u5c06\u5347\u7ea7\u6570\u636e\u4e0b\u8f7d\u5230\u5185\u5b58\u4e2d, \u5e76\u5728\u5185\u5b58\u4e2d\u5b8c\u6210\u76f8\u5e94\u5904\u7406, \u6700\u540e\u5199\u5165\u76ee\u6807\u5206\u533a.\n\n\n\u4e0b\u9762\u662f\u8fb9\u4e0b\u8fb9\u5347\u7684\u5ba2\u6237\u7aef\u6267\u884c\u547d\u4ee4.\n\n\n# update_engine_client \\\n--payload=http://xxx/android/full-ota/payload.bin \\\n--update \\\n--headers=\n\\\n  FILE_HASH=ozGgyQEddkI5Zax+Wbjo6I/PCR8PEZka9gGd0nWa+oY= \\\n  FILE_SIZE=282344983\n  METADATA_HASH=GLIKfE6KRwylWMHsNadG/Q8iy5f786WTatvMdBlpOPg= \\\n  METADATA_SIZE=26723 \\\n\n\n\n\n\n\n\n\u5728Pixel\u624b\u673a\u4e0a\u5347\u7ea7\u7684\u8f93\u51falog\u5982\u9644\u4ef6\nupdate_engine.log\n, \u611f\u5174\u8da3\u7684\u7ae5\u978b\u53ef\u4ee5\u770b\u4e0b, \u5176\u4e2d\u5305\u542b\u4e86\u5404\u4e2a\u9636\u6bb5\u7684\u884c\u4e3a.\n\n\n\u5176\u4e2dheader\u540e\u9762\u7684\u5185\u5bb9, \u8ddf\u5347\u7ea7\u5305\u4e2d\u7684\npayload_properties.txt\n \u6587\u4ef6\u5185\u5bb9\u4e00\u6837. \u5404\u5b57\u6bb5\u7684\u4f5c\u7528\u53ef\u4ee5\u53c2\u8003\u524d\u6587payload\u7684\u5934\u6570\u636e\u683c\u5f0f\u6765\u7406\u89e3\u5177\u4f53\u6821\u9a8c\u7684\u6570\u636e\u4f4d.\n\n\nupdate_engine\n \u9996\u5148\u5b9a\u4e49\u4e00\u7cfb\u5217\u7684action:\n\n\n\n\ndownload_action\n: \u4e0b\u8f7d\u6a21\u5757, \u8d1f\u8d23\u8fb9\u4e0b\u8fb9\u5347\u7ea7.\n\n\nfilesystem_verifier_action\n: \u6587\u4ef6\u7cfb\u7edf\u6821\u9a8c\u6a21\u5757, \u8d1f\u8d23\u5347\u7ea7\u5b8c\u6210\u540e\u6821\u9a8c\u6570\u636e\u7684\u5b8c\u6574\u6027\n\n\npostinstall_runner_action\n: \u540e\u5347\u7ea7\u6a21\u5757, \u4e00\u4e9b\u811a\u672c\u6216\u53ef\u6267\u884c\u7a0b\u5e8f\u5728\u7cfb\u7edf\u5347\u7ea7\u5b8c\u6210\u540e\u6267\u884c.\n\n\n\n\n\u4ee5\u4e0aaction\u901a\u8fc7\u7c7b\u4f3cpipeline\u7684\u5f62\u5f0f\u7ec4\u7ec7, \u524d\u4e00\u4e2aaction\u7684\u8f93\u51fa\u4f5c\u4e3a\u540e\u4e00\u4e2aaction\u7684\u8f93\u5165. \u800c\u5728\u5176\u4e2d\u4f20\u9012\u7684\u6570\u636e\u662f\ninstall_plan_\n, \u8be5\u6570\u636e\u5305\u542b\u4e86payload(\u5347\u7ea7\u6570\u636e)\u7684\u6240\u6709\u4fe1\u606f(\u64cd\u4f5c\u5206\u533a, url, \u6821\u9a8c\u4fe1\u606f\u7b49), \u90e8\u5206\u4fe1\u606f\u7531\u540e\u9762\u7684action\u6267\u884c\u540e\u63d0\u4f9b.\n\u6240\u6709\u7684action, \u5176\u6267\u884c\u5165\u53e3\u51fd\u6570\u662f\nPerformAction()\n, \u901a\u8fc7\u8fd9\u4e2a\u51fd\u6570, \u53ef\u4ee5\u66f4\u7ec6\u81f4\u5730\u4e86\u89e3\u8f93\u5165\u8f93\u51fa\u6570\u636e\u548c\u8be5action\u7684\u5177\u4f53\u529f\u80fd.\n\n\n\u672c\u6bb5\u5185\u5bb9\u7740\u91cd\u4ecb\u7ecd\ndownload_action\n, \u5176\u4f59\u6a21\u5757\u5728\u540e\u9762\u4ecb\u7ecd.\n\n\n\n\n\n\n1. \u8bfb\u53d6\u6570\u636e. \u8fd9\u91cc\u5e76\u4e0d\u662f\u6b63\u5e38\u7684read, \u8be5\u51fd\u6570\u662f\u4e2a\u4e0b\u8f7d\u7684Write\u56de\u8c03, \u800c\u8bfb\u53d6\u6570\u636e\u5728\u4ee3\u7801\u4e0a\u7684\u771f\u5b9e\u884c\u4e3a\u662f, \u8fd4\u56de\u9519\u8bef\u8868\u793a\u6570\u636e\u4e0d\u591f, \u7ee7\u7eed\u8bfb\u53d6, \u800c\u5df2\u7ecf\u8bfb\u53d6\u7684\u6570\u636e\u5b58\u653e\u5728buffer\u4e2d.\n2. \u89e3\u6790manifest. \u5c31\u662f\u4e0a\u6587\u4e2dpayload\u7684\u5934, \u5305\u542b\u6821\u9a8c\u4fe1\u606f\u548c\u6267\u884c\u7684\u6307\u4ee4\u96c6, \u8fd8\u6709\u6240\u6709\u64cd\u4f5c\u7684\u5206\u533a\u6821\u9a8c\u503c\u7b49.\n3. \u6253\u5f00\u5206\u533a\u8bbe\u5907. \u6839\u636e\u5347\u7ea7\u7c7b\u578b, \u5982\u679c\u662f\u5168\u91cf\u5347\u7ea7(manifest\u4e2d\u5305\u542b\u8be5\u4fe1\u606f), \u5219\u6253\u5f00\u88ab\u5347\u7ea7\u8bbe\u5907\u5206\u533a, \u5982\u679c\u662f\u589e\u91cf\u5347\u7ea7, \u6253\u5f00\u5f53\u524d\u8fd0\u884c\u8bbe\u5907\u5206\u533a\u548c\u88ab\u5347\u7ea7\u76ee\u6807\u5206\u533a.\n4. \u83b7\u53d6\u6307\u4ee4\u5217\u8868. \u662f\u4ecemanifest\u4e2d\u83b7\u53d6. \u4e0d\u540c\u6307\u4ee4, \u683c\u5f0f\u4e0d\u540c, \u4f46\u57fa\u672c\u683c\u5f0f\u662f \nsrc:offset:size\n, \u6307\u5b9a\u64cd\u4f5c\u6e90/\u76ee\u6807, \u504f\u79fb\u548c\u5927\u5c0f.\n5. \u7531\u4e8e1\u63d0\u5230\u7684, \u5728\u6570\u636e\u4e0d\u591f\u65f6\u4f1a\u9000\u51fa, \u6240\u4ee5, \u4f1a\u4fdd\u5b58\u5f53\u524d\u5df2\u7ecf\u6267\u884c\u5230\u7684\u6307\u4ee4, \u5e76\u83b7\u53d6\u4e0b\u4e00\u4e2a\u6307\u4ee4\u4fe1\u606f, \u8fd9\u91cc\u4fe1\u606f\u91cd\u70b9\u662f, \u9700\u8981\u8bfb\u53d6\u7684payload\u4e2doffset\u548csize. \u7531\u4e8epayload\u4e2d\u7684\u5347\u7ea7\u6570\u636e\u662f\u8ddf\u6307\u4ee4\u4e00\u8d77\u751f\u6210\u7684, \u6240\u4ee5, \u5176\u6570\u636e\u7684\u504f\u79fb\u5b8c\u5168\u53ef\u4ee5\u8ddf\u6307\u4ee4\u7684\u987a\u5e8f\u4e00\u81f4, \u4fdd\u8bc1\u4e0d\u4f1a\u51fa\u73b0\u8bfb\u6307\u9488\u8df3\u52a8, \u4e5f\u5c31\u4e0d\u9700\u8981p2p\u652f\u6301.\n6. \u6267\u884c\u6307\u4ee4. \u57fa\u672c\u6307\u4ee4\u53ef\u4ee5\u67e5\u770b\u4ee3\u7801, \u4e0e\u5757\u5347\u7ea7\u6307\u4ee4\u4e00\u6837.\n\n\n\u4e0b\u9762\u662f\u5347\u7ea7\u65f6\u6570\u636e\u7684\u5408\u6210\u56fe.\n\n\n\n\n\n\u8fd9\u5e45\u56fe\u5c55\u793a\u7684\u662f\u5347\u7ea7\u6570\u636e\u7684\u5408\u6210. \u5982\u679c\u662f\u5168\u91cf\u5347\u7ea7, source\u4e3a\u7a7a, \u5219payload\u76f4\u63a5\u5199\u5165target. \u4f46\u4e0e\u4e00\u822c\u5206\u533a\u70e7\u5199\u8fd8\u662f\u6709\u4e9b\u5dee\u5f02, \u5e76\u4e0d\u4f1a\u64e6\u9664target, \u800c\u662f\u6309\u7167\u504f\u79fb\u548c\u5927\u5c0f\u76f4\u63a5\u5199\u5165.\u800c\u5982\u679c\u662f\u589e\u91cf\u5347\u7ea7, \u5219\u662f\u57fa\u4e8e\u5f53\u524d\u8fd0\u884c\u7cfb\u7edf\u4e3asource, \u4e0epayload\u7684\u6570\u636e\u5408\u5e76\u5199\u5165target.\n\n\n\u6240\u4ee5, \u4e0d\u7ba1\u662f\u5168\u91cf\u5347\u7ea7\u8fd8\u662f\u589e\u91cf\u5347\u7ea7, \u65ad\u7535\u540e\u90fd\u53ef\u4ee5\u4ece\u5934\u5f00\u59cb\u518d\u5347\u7ea7.\n\n\n \u6821\u9a8c \n\n\n\n\n\n\n\n\n\n\n\u83b7\u53d6\u8f93\u5165\u6570\u636e. \u662f\u6307\u83b7\u53d6\u4ece\ndownload_action\n\u5b8c\u6210\u540e\u7684\u6570\u636e, \u5305\u542b\u88ab\u5347\u7ea7\u5206\u533a\u53ca\u5176\u54c8\u5e0c\u503c\u7b49.\n\n\n\u5f00\u59cb\u6821\u9a8c\u88ab\u5347\u7ea7\u5206\u533a. \u5355\u7eaf\u4ece\u5206\u533a\u8bfb\u53d6\u5757\u6570\u636e\u5e76\u4e0epayload\u4e2d\u5b58\u653e\u7684\u8fdb\u884c\u6bd4\u5bf9\u6821\u9a8c.\n\n\n\u5f00\u59cb\u6821\u9a8c\u5f53\u524dslot\u6e90\u5206\u533a. \u8fd9\u4e2a\u662f\u9488\u5bf9\u589e\u91cf\u5347\u7ea7\u7684. \u5728\u6821\u9a8c\u76ee\u6807\u5206\u533a\u5931\u8d25\u540e, \u6821\u9a8c\u6e90\u5206\u533a.\u6b64\u5904\u6821\u9a8c\u7684\u76ee\u7684\u4e0d\u662f\u5224\u65ad\u5f53\u524d\u8fd0\u884c\u7684\u5206\u533a\u662f\u5426\u5408\u6cd5(\u542f\u52a8\u65f6, \u7531\u5176\u4ed6\u6a21\u5757\u6821\u9a8c), \u800c\u662f\u5224\u65ad\u4e0b\u8f7d\u7684payload\u662f\u5426\u4e0e\u5f53\u524d\u7cfb\u7edf\u5339\u914d(\u670d\u52a1\u5668\u7aef\u653e\u9519\u5347\u7ea7\u6587\u4ef6).\n\n\n\u6807\u8bb0\u4f20\u8f93\u5931\u8d25. \u8fd9\u91cc\u662f\u57283\u7684\u57fa\u7840\u4e0a, \u5c06\u5f53\u524dpayload\u7684\u4e0b\u8f7durl\u6807\u8bb0\u5931\u8d25, \u5e76\u589e\u52a0\u5931\u8d25\u6b21\u6570. \u5728\u8fbe\u5230\u4e00\u5b9a\u6b21\u6570\u540e(\u670d\u52a1\u7aef\u914d\u7f6e), \u4e0d\u518d\u4ece\u8be5url\u83b7\u53d6\u5347\u7ea7\u6570\u636e, \u8df3\u5f80\u4e0b\u4e00\u4e2aurl.\n\n\n\n\n post install \n\n\n\u5404\u4e2a\u5206\u533a\u90fd\u53ef\u4ee5\u6307\u5b9apostinstall, \u800cpostinstall\u811a\u672c\u662f\u5728\ndownload_action\n\u89e3\u6790mainifest\u65f6\u89e3\u6790\u5e76\u83b7\u5f97. \u5728\u5b9a\u4e49\u6267\u884cpostinstall\u4f46\u53c8\u65e0\u811a\u672c\u6307\u5b9a\u65f6, \u9ed8\u8ba4postinstall\u811a\u672c\u662f\u5206\u533a\u6839\u76ee\u5f55\u4e0b\u7684\npostinst\n\n\n\u5728Chrome OS\u4e2d, postinstall \u662f\u5141\u8bb8\u5bf9\u5206\u533a\u6267\u884c\u5757\u5199\u5165\u64cd\u4f5c\u7684,\u4f46\u662f\u5728Android, \u6302\u8f7d\u5206\u533a\u88ab\u6267\u884c\u6807\u8bb0\u4e3a\u53ea\u8bfb, \u5e76\u4e14\u4e5f\u6302\u8f7d\u6210\u53ea\u8bfb, \u4e5f\u5c31\u662f\u8bf4, \u4e0d\u5141\u8bb8\u5bf9\u88ab\u5347\u7ea7\u5206\u533a\u505a\u4fee\u6539(\u5c31\u7b97\u4fee\u6539\u4e86, \u4e4b\u540e\u6821\u9a8c\u4f9d\u7136\u53ef\u80fd\u51fa\u9519). postinstall\u7684\u811a\u672c\u662f\u76f4\u63a5\u57fa\u4e8e\u5f53\u524d\u88ab\u5347\u7ea7\u7cfb\u7edf\u6267\u884c, \u5e76\u672achroot, \u6240\u4ee5, postinstall\u811a\u672c\u5fc5\u987b\u80fd\u591f\u88ab\u4fdd\u8bc1\u8fd0\u884c\u5728\u88ab\u5347\u7ea7\u7cfb\u7edf\u4e2d. \u6240\u4ee5, \u4e00\u822c\u662f\u7eaf\u9759\u6001\u7684\u53ef\u6267\u884c\u7a0b\u5e8f, \u800c\u4e14\u5176\u529f\u80fd\u5728android\u4e0a\u4e5f\u88ab\u5f31\u5316\u4e86.\n\n\n odex\u4f18\u5316 \n\n\n\u5728\u4ee5\u4e0a\u5168\u90e8\u5b8c\u6210\u540e, \u7cfb\u7edf\u5c06\u6807\u8bb0slot\u4e3a\u88ab\u5347\u7ea7\u7cfb\u7edf, \u5e76\u5728\u4e0b\u6b21\u91cd\u542f\u540e, \u8fdb\u5165\u5347\u7ea7\u540e\u7684\u7cfb\u7edf, \u6821\u9a8c\u5e76\u4f18\u5316. \u8fd9\u65f6\u5019\u5982\u679c\u6821\u9a8c\u5931\u8d25, \u5219\u8fd8\u4f1a\u56de\u5230\u539f\u5148\u7cfb\u7edf. \u5219\u8be5\u60c5\u51b5\u5b58\u5728data\u4e0b\u5e94\u7528\u6570\u636e\u5df2\u7ecf\u88ab\u4f18\u5316\u4e3a\u65b0\u7248\u672c\u6216\u8005\u4f18\u5316\u5230\u4e00\u534a\u7684\u95ee\u9898. \u8ddf\u4e86\u4e0b\u76f8\u5173\u4ee3\u7801\u548c\u7f51\u4e0a\u7684\u8d44\u6599, \u7ed3\u8bba\u5982\u4e0b.\n\n\n\u5728A/B\u5347\u7ea7\u5b8c\u6210\u8fdb\u5165\u65b0\u7cfb\u7edf\u540e, dexopt\u7684\u53c2\u6570\u662fspeed-profile, \u800c\u8be5\u53c2\u6570\u7684\u542b\u4e49\u5c31\u662f\u6839\u636e\u201c\u70ed\u4ee3\u7801\u201d\u7684profile\u914d\u7f6e\u6765\u7f16\u8bd1. \u90a3\u4e48\u95ee\u9898\u5c31\u662f\u8fd9\u4e2aprofile\u7684\u751f\u6210,\u548c\u4ec0\u4e48\u65f6\u5019\u6267\u884c\u589e\u91cf\u7f16\u8bd1.\n\n\n\n\nprofile\u5728\u8fbe\u5230\u4e00\u5b9a\u6761\u4ef6\u540e\u5199\u5165/data/, \u76ee\u524d\u4ece\u4ee3\u7801\u770b, \u5df2\u77e5\u7684\u4e00\u4e2a\u6761\u4ef6\u662f\u5927\u5c0f\n50K\u65f6, \u5199\u5165\u6587\u4ef6. \u800c\u5728\u5df2\u7ecf\u5b58\u5728\u8be5\u6587\u4ef6\u7684\u60c5\u51b5\u4e0b, \u4f1a\u4f18\u5148\u52a0\u8f7d, \u5982\u679c\u52a0\u8f7d\u5931\u8d25, \u5219\u5220\u9664\u5e76\u91cd\u65b0\u751f\u6210.\n\n\n\u6267\u884c\u589e\u91cf\u7f16\u8bd1\u7684\u65f6\u95f4\u662f, \u673a\u5728\u5145\u7535\uff0b\u7a7a\u95f2\uff0b\u56db\u4e2a\u5c0f\u65f6\u95f4\u9694\u7b49\u591a\u4e2a\u6761\u4ef6\u4e0b, \u5728\u540e\u53f0\u5b8c\u6210.\n\n\n\n\n\n\u4e5f\u5c31\u662f\u8bf4, \u5728AB\u7cfb\u7edf\u5347\u7ea7\u5b8c\u6210\u65f6, \u4e0d\u4f1a\u6267\u884c\u7f16\u8bd1, \u53ea\u4f1a\u6267\u884cprofile\u7684\u751f\u6210. \u800c\u5728\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u88ab\u68c0\u6d4b\u5230\u7cfb\u7edf\u6821\u9a8c\u5931\u8d25, \u5219\u4f1a\u56de\u5230\u4e0a\u4e00\u7248\u672c\u7cfb\u7edf.\n\n\nbootloader\u4ea4\u4e92\n\n\n\n\n\u4f20\u7edf\u7684Android\u4e0ebootloader\u901a\u4fe1\u662f\u901a\u8fc7misc\u5206\u533a. \u7136\u800c\u5728A/B\u7cfb\u7edf\u4e2d, \u6570\u636e\u5e76\u4e0d\u662f\u5b58\u5728misc\u5206\u533a, \u800c\u4e14\u5b58\u653e\u4f4d\u7f6e\u7531\u5382\u5546\u5b9a\u4e49, \u63a5\u53e3\u5728\nhardware/libhardware/include/hardware/boot_control.h\n. \u5176\u7ed3\u6784\u4f53\u662f \nboot_control_module_t\n, \u5305\u542b\u4e86\u6240\u6709\u8bbe\u7f6e\u4ee5\u4e0aslot\u72b6\u6001\u7684\u63a5\u53e3.\n\n\n\u4e0b\u9762\u4ecb\u7ecd\u4e0b\u4e0d\u540c\u5382\u5546\nboot_control\n\u7684\u5b9e\u73b0.\n\n\n\nqcom\u7684\u5b9e\u73b0\n\n\n\n\u4ee3\u7801\u4f4d\u7f6e:  \nhardware/qcom/bootctrl/boot_control.cpp\n\nqcom\u7684\u5b9e\u73b0\u662f, \u76f4\u63a5\u5c06A/B\u5206\u533a\u7684\u5c5e\u6027, \u5199\u5165\u7684gpt\u5206\u533a\u8868\u7684boot\u5206\u533a(\nboot_a\n\u548c\nboot_b\n).qcom\u673a\u9876\u76d2gpt\u8868\u7684\u5206\u6790:http://blog.csdn.net/guyongqiangx/article/details/68924436\n\n\n\n\n\n\n\u4e0a\u56fe\u662fqcom\u673a\u9876\u76d2gpt\u5206\u533a\u8868\u7684\u4fe1\u606f, \u5728Entry\u4e2d\u67e5\u627e\u5230\u5206\u533a\nboot_a\n\u548c\nboot_b\n, \u63d0\u53d6\u5176\u5c5e\u6027.\n\u4ece LAB 2 \u5f00\u59cb\u5b58\u653e\u7684\u662fGPT\u5206\u533a\u7684\u8be6\u7ec6\u4fe1\u606f\nPartition Entry\n, \u5355\u4e2a\nPartition Entry\n\u5360128\u4e2a\u5b57\u8282, \u4ece\u7b2c48\u4e2a\u5b57\u8282\u5f00\u59cb\u5b58\u653e\u7684\u662f\u5206\u533a\u5c5e\u6027, \u800cA/B\u7cfb\u7edf\u7684\u5206\u533a\u5c5e\u6027\u4e5f\u662f\u5b58\u653e\u5728\u8fd9\u4e2a\u4f4d\u7f6e.\n\n\n\u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u5230, qcom\u7684\u5b9e\u73b0, \u6ca1\u6709bootable\u7684\u6807\u8bb0\u4f4d, \u53d6\u800c\u4ee3\u4e4b\u7684\u662funbootable.\n\n\n\ngoogle\u7684\u53c2\u8003\u5b9e\u73b0\n\n\n\n\u4ee3\u7801\u4f4d\u7f6e\nsystem/extras/boot_control_copy/boot_control_copy.c\n\n\ngoogle\u7684\u53c2\u8003\u5b9e\u73b0\u590d\u7528\u4e86misc\u5206\u533a\u7684\nbootloader_message\n(recovery\u4e0ebootloader\u901a\u4fe1\u7684\u5206\u533a). \u6574\u4e2amisc\u5206\u533a\u7684\u6570\u636e\u7ed3\u6784\u56fe\u5982\u4e0b.\n\n\n\n\n\n\n\n\n\nfsmgr\u4f7f\u7528, \u5728\u8bbe\u7f6e\u6307\u5b9aslot\u4e3aactive\u65f6, \u540c\u65f6\u5c06\u5bf9\u5e94\u540e\u7f00\u8bbe\u7f6e\u5230\u8be5\u5b57\u6bb5. fsmgr\u5728\u6302\u8f7d\u5206\u533a\u65f6,\u901a\u8fc7\u8be5\u5b57\u6bb5\u62fc\u6210\u5b8c\u6210\u7684\u5206\u533a\u8def\u5f84.\n\n\nMagic Numbe. \u7528\u6765\u786e\u5b9a\u8be5\u6570\u636e\u7aef\u7684\u5408\u6cd5, \u5fc5\u987b\u662f 'B', 'C' , 'c' (\"\nboot_control\n copy\" \u7684\u7f29\u5199)\n\n\n\u63a5\u53e3\u7248\u672c\u53f7\n\n\nactive\u72b6\u6001\u7684slot\u53f7, \u5728\u8be5\u5b9e\u73b0\u4e2d\u53ea\u6709 0 \u6216 1.\n\n\n0 \u4e3a \u7b2c\u4e00\u4e2aslot, 1 \u4e3a\u7b2c\u4e8c\u4e2aslot, \u8bbe\u7f6eslot\u7684bootable/unbootable\u72b6\u6001.\n\n\n\n\n\u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa, \u5e76\u6ca1\u6709\u53ef\u4ee5\u6807\u8bb0\u4e3asuccessful\u7684\u4f4d, \u901a\u8fc7\u4ee3\u7801\u4e5f\u53d1\u73b0, \u5176\u5b9e\u73b0\u4e3a\u7a7a, \u4e5f\u5c31\u662f\u8bf4, \u5e76\u6ca1\u6709\u5b9e\u73b0\u8be5\u72b6\u6001.\n\n\n\u5982\u679c\u6ce8\u610f\u5230\u4ee3\u7801, \u5728\nmodule_setActiveBootSlot\n\u540e\u534a\u6bb5, \u4f1a\u5c06active\u72b6\u6001\u7684\nboot_X\n\u5206\u533a\u5185\u5bb9\u62f7\u8d1d\u5230boot\u5206\u533a. \u4e5f\u5c31\u662f\u8bf4, \u7cfb\u7edf\u5b58\u5728\u4e09\u4e2a\u5206\u533a(boot, \nboot_a\n, \nboot_b\n), \u88ab\u8bbe\u7f6e\u4e3aactive\u7684\u5206\u533a\u4f1a\u88ab\u62f7\u8d1d\u5230boot\u5206\u533a, \u518d\u7ed3\u5408\nmodule_getCurrentSlot\n\u7684\u5b9e\u73b0(\u4ece/system\u5206\u533a\u83b7\u53d6\u6302\u8f7d\u4fe1\u606f) ,\u4ece\u8fd9\u4e24\u6bb5\u4ee3\u7801\u53ef\u4ee5\u63a8\u6d4b\u51fa\u4e24\u4e2a\u7ed3\u8bba:\n\n\n\n\nA/B\u7cfb\u7edf\u53ef\u4ee5\u4e0d\u5347\u7ea7firmware(bootloader), \u6216\u8005\u8bf4google\u7684\u8be5\u5b9e\u73b0\u6700\u521d\u662f\u4e3a\u4e86\u517c\u5bb9\u8001\u7684bootloader.\n\n\nboot.img\u4e2d\u7684ramdisk\u53ef\u4ee5\u8fd8\u662fboot\u7684ramdisk.\n\n\n\n\n\u4f46\u662f, \u4e0d\u786e\u5b9a\u53c2\u8003\u4ee3\u7801\u662f\u5426\u80fd\u6b63\u5e38\u8fd0\u884c. \u4f46\u662f\u5355\u7eaf\u4ece\u4ee5\u4e0a\u4ee3\u7801\u770b, \u9664\u4e86\u5206\u533a, A/B\u7cfb\u7edf\u7684\u542f\u52a8, \u6302\u8f7d, \u90fd\u53ef\u4ee5\u5728\u7528\u6237\u5c42\u641e\u5b9a. \u4f46\u662f\u5e26\u6765\u7684\u540e\u679c\u5c31\u662f, \u5982\u679cbootloader\u542f\u52a8boot\u5931\u8d25, \u5219\u65e0\u6cd5\u5207\u6362\u5230\u53e6\u4e00\u4e2aslot.\n\n\n\u5347\u7ea7\u5305\u751f\u6210\n\n\n\u5347\u7ea7\u5305\u5236\u4f5c\u5de5\u5177\u4e0d\u518d\u652f\u6301 \u57fa\u4e8e\u6587\u4ef6\u7684\u5347\u7ea7, \u5f53\u524d\u53ea\u652f\u6301ab\u5347\u7ea7\u548c\u5757\u5347\u7ea7.\n\n\n\u5757\u5347\u7ea7\u548cab\u5347\u7ea7\u5728\u751f\u6210\u6570\u636e\u6587\u4ef6\u548c\u811a\u672c\u4e0a\u539f\u7406\u662f\u4e00\u6837\u7684, \u53ea\u662f\u5728\u751f\u6210\u5347\u7ea7\u6570\u636e\u65f6\u5b58\u5728\u5dee\u5f02.\n\n\nAB\u5347\u7ea7payload\u5236\u4f5c\u903b\u8f91\u5728\u5347\u7ea7\u5305\u5236\u4f5c\u811a\u672c\u7684\nWriteABOTAPackageWithBrilloScript\n, \u800c\u771f\u6b63payload\u751f\u6210\u7684\u903b\u8f91\u5728\u51fd\u6570\nGenerateUpdatePayloadFile\n.\n\n\n\u6d41\u7a0b\u5982\u4e0b:\n\n\n\n\u751f\u6210payload\u6307\u4ee4\u89c4\u5219:\n\n\n\nAB\u5347\u7ea7\u603b\u6d41\u7a0b\u56fe", 
            "title": "AB\u7cfb\u7edf\u5347\u7ea7"
        }, 
        {
            "location": "/2017-09-20-Android-AB-system-update/#ab", 
            "text": "\u987e\u540d\u601d\u4e49,  A/B \u7cfb\u7edf\u5c31\u662f\u6307\u7ec8\u7aef\u8bbe\u5907\u4e0a\u5b58\u5728\u4e24\u5957\u7cfb\u7edf,(userdata\u53ea\u6709\u4e00\u4efd, \u88ab\u4e24\u5957\u7cfb\u7edf\u5171\u7528). \u7b80\u5355\u6765\u8bb2, \u53ef\u4ee5\u7406\u89e3\u4e3a, \u5b58\u5728\u4e00\u5957\u7cfb\u7edf\u5206\u533a, \u4e00\u5957\u5907\u4efd\u5206\u533a, \u4e24\u5957\u7cfb\u7edf\u90fd\u53ef\u4ee5\u88ab\u542f\u52a8, \u4e24\u5957\u7cfb\u7edf\u7684\u7248\u672c\u53f7\u53ef\u4ee5\u4e00\u6837, \u4e5f\u53ef\u4ee5\u4e00\u5957\u65e7, \u4e00\u5957\u65b0. \u800c\u5347\u7ea7\u5c31\u662f\u5c06\u65e7\u7684\u7cfb\u7edf\u5347\u7ea7\u5230\u65b0\u7248\u672c.  A/B\u7cfb\u7edf\u5b9e\u73b0\u4e86\u65e0\u7f1d\u5347\u7ea7(Seamless System Updates), \u5b58\u5728\u5982\u4e0b\u7279\u70b9:   \u7ec8\u7aef\u8bbe\u5907\u5728\u51fa\u5382\u65f6\u6709\u4e24\u5957\u8bbe\u5907\u53ef\u4ee5\u5de5\u4f5c, \u5728\u5347\u7ea7\u51fa\u73b0\u5f02\u5e38\u6216\u8005\u51fa\u9519\u65f6, \u59cb\u7ec8\u786e\u4fdd\u7cfb\u7edf\u5b58\u5728\u4e00\u5957\u8bbe\u5907\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c.  \u7cfb\u7edf\u5728\u540e\u53f0\u8fdb\u884c\u5347\u7ea7, \u66f4\u65b0\u5230\u53e6\u4e00\u5957\u7cfb\u7edf, \u7528\u6237\u4e0d\u4f1a\u88ab\u6253\u65ad. \u5728\u66f4\u65b0\u5b8c\u6210\u540e, \u7528\u6237\u5728\u4e0b\u6b21\u91cd\u542f\u624b\u673a\u65f6, \u5c31\u4f1a\u8fdb\u5165\u65b0\u7cfb\u7edf.  \u5728 dm-verity \u6216\u8005\u5176\u4ed6\u6821\u9a8c\u65b9\u5f0f\u68c0\u6d4b\u5230\u7cfb\u7edf\u987a\u574f\u6216\u5f02\u5e38\u540e, \u53ef\u4ee5\u91cd\u542f\u56de\u5230\u5347\u7ea7\u524d\u7684\u7cfb\u7edf, \u786e\u4fdd\u7528\u6237\u4f7f\u7528\u4e0d\u53d7\u5f71\u54cd.   Android8.0\u7684\u4ee3\u7801\u7f16\u8bd1\u65f6, \u5728BoardConfig\u6709\u5bf9\u5e94\u7684\u9009\u9879\u6765\u63a7\u5236\u662f\u7f16\u8bd1\u6210A/B\u7cfb\u7edf\u8fd8\u662f\u6b63\u5e38\u5355\u7cfb\u7edf. \u7531\u4e8e\u65b0\u7cfb\u7edf\u8ddf\u539f\u6765\u7684OTA\u5347\u7ea7\u7cfb\u7edf\u5b58\u5728\u5927\u4e0d\u540c, \u5bfc\u81f4\u65e0\u6cd5\u901a\u8fc7\u4ee5\u524d\u7684OTA\u5347\u7ea7\u65b9\u5f0f(\u5b89\u5168\u5730)\u5347\u7ea7\u5230A/B\u7cfb\u7edf.  \u800cA/B\u7cfb\u7edf\u5347\u7ea7, \u662f\u7531\u8fd0\u884c\u4e8eAndroid\u540e\u53f0\u7684 update_engine \u548c  slot a ,  slot b \u4e24\u5957\u7cfb\u7edf\u5171\u540c\u5b8c\u6210. \u5728\u542f\u52a8\u5176\u4e2d\u4e00\u5957\u7cfb\u7edf\u7684\u60c5\u51b5\u4e0b,  update_engine \u5728\u540e\u53f0\u4e0e\u670d\u52a1\u5668\u901a\u4fe1\u4e0b\u8f7d\u5347\u7ea7\u6d41\u5e76\u66f4\u65b0\u5230\u53e6\u4e00\u5957\u7cfb\u7edf.  A/B \u7cfb\u7edf\u5347\u7ea7\u4e3b\u8981\u6d89\u53ca\u5982\u4e0b4\u4e2a\u65b9\u9762:   \u5206\u533a\u9009\u62e9(slots), \u5373\u9009\u62e9\u54ea\u4e2a\u7cfb\u7edf.  update_engine , \u5373\u5347\u7ea7\u6d41\u4e0b\u8f7d\u548c\u5347\u7ea7  bootloader\u4ea4\u4e92, \u5373\u5982\u4f55\u901a\u77e5bootloader\u5207\u6362slot  ota\u5305\u751f\u6210.", 
            "title": " A/B\u7cfb\u7edf\u7b80\u4ecb "
        }, 
        {
            "location": "/2017-09-20-Android-AB-system-update/#_1", 
            "text": "", 
            "title": " \u5206\u533a\u9009\u62e9 "
        }, 
        {
            "location": "/2017-09-20-Android-AB-system-update/#_2", 
            "text": "\u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u8003  Android8 \u5206\u533a\u8868\u548c\u5206\u533a\u76f8\u5173\u64cd\u4f5c . \u8fd9\u91cc\u7b80\u5355\u603b\u7ed3\u4e0b\u5206\u533a\u8868\u4e0a\u8ddf\u5355\u7cfb\u7edf\u7684\u5dee\u5f02.\n\u8fd9\u91cc\u4ee5boot,system, vendor\u548cmodem\u5b58\u5728\u4e24\u5957\u7cfb\u7edf\u4e3a\u4f8b\u5b50, \u5176\u4f59\u5206\u533a\u6309\u7167\u6700\u5c0f\u5206\u533a\u8868.     \u5355\u7cfb\u7edf\u5206\u533a\u8868  A/B\u7cfb\u7edf\u5206\u533a\u8868  \u529f\u80fd\u63cf\u8ff0      bootloader  bootloader  \u5f15\u5bfclinux\u7cfb\u7edf    misc  misc  Android\u7cfb\u7edf\u4e0erecovery, bootloade\u901a\u4fe1\u7684\u6570\u636e    boot  -  \u5b58\u653eAndroid\u7684kernel\u548cramdisk    -  boot_a  \u5b58\u653eAndroid\u7684kernel\u548c\u5355\u7cfb\u7edf\u4e2drecovery\u7684ramdisk    -  boot_b  \u5b58\u653eAndroid\u7684kernel\u548c\u5355\u7cfb\u7edf\u4e2drecovery\u7684ramdisk    system  -  Android\u7cfb\u7edf\u5e94\u7528, \u5e93\u548c\u8d44\u6e90\u6587\u4ef6.    -  system_a  \u5b58\u653e\u5355\u7cfb\u7edfboot\u4e2d\u7684ramdisk\u548csystem\u4e2d\u7684\u5e94\u7528, \u5e93\u548c\u8d44\u6e90\u6587\u4ef6    -  system_b  \u5b58\u653e\u5355\u7cfb\u7edfboot\u4e2d\u7684ramdisk\u548csystem\u4e2d\u7684\u5e94\u7528, \u5e93\u548c\u8d44\u6e90\u6587\u4ef6    -  vendor_a  \u5b58\u653e\u5382\u5546\u7684\u914d\u7f6e, \u53ef\u6267\u884c\u7a0b\u5e8f, \u5e93, \u76ee\u5f55\u7ed3\u6784\u4e0e/system/\u4e00\u81f4    -  vendor_b  \u5b58\u653e\u5382\u5546\u7684\u914d\u7f6e, \u53ef\u6267\u884c\u7a0b\u5e8f, \u5e93, \u76ee\u5f55\u7ed3\u6784\u4e0e/system/\u4e00\u81f4    cache  -  \u4e34\u65f6\u5b58\u653e\u6570\u636e, \u901a\u5e38\u4e34\u65f6\u5b58\u653e\u4e0b\u8f7d, \u5907\u4efd\u548c\u5347\u7ea7\u5305    recovery  -  \u5b58\u653erecovery\u7cfb\u7edf\u7684kernel\u548cramdisk    userdata  userdata  \u5b58\u653e\u7528\u6237\u6570\u636e     \u6240\u8c13\u7684A/B\u7cfb\u7edf\u5206\u533a, \u5c31\u662f\u5728\u539f\u6709\u5206\u533a\u540d\u5b57\u540e\u5417\u6dfb\u52a0 _a  \u548c  _b , \u5728\u5237\u673a, \u6216\u8005\u7cfb\u7edf\u542f\u52a8\u7684\u65f6\u5019, \u6839\u636ebootloader\u7684\u53c2\u6570\u6dfb\u52a0\u540e\u7f00, \u9009\u62e9\u6b63\u786e\u7684\u7cfb\u7edf. misc\u5206\u533a\u5728A/B\u7cfb\u7edf\u4e2d\u53d8\u6210\u4e00\u4e2a\u53ef\u6709\u53ef\u65e0\u7684\u5b58\u5728, \u56e0\u4e3a\u5176\u529f\u80fd\u53ea\u662f\u4f20\u9012\u6062\u590d\u51fa\u5382\u8bbe\u7f6e\u7684\u53c2\u6570, \u800crecovery\u7684\u529f\u80fd\u4e5f\u53ea\u5269\u4e0b\u6062\u590d\u51fa\u5382\u8bbe\u7f6e, \u6240\u4ee5, \u672c\u8d28\u4e0a, \u6ca1\u5fc5\u8981\u518d\u57fa\u4e8emisc\u4f20\u9012\u53c2\u6570\u4e86.", 
            "title": "\u5206\u533a\u8868\u548c\u5206\u533a\u5185\u5bb9\u53d8\u5316"
        }, 
        {
            "location": "/2017-09-20-Android-AB-system-update/#_3", 
            "text": "bootloader\u4e3a\u4e86\u5224\u65ad\u4e00\u4e2a\u7cfb\u7edf(slot)\u662f\u5426\u4e3a\u53ef\u4ee5\u542f\u52a8\u7684\u72b6\u6001, \u9700\u8981\u4e3a\u5176\u5b9a\u4e49\u5bf9\u5e94\u7684\u5c5e\u6027(\u72b6\u6001). \u5176\u72b6\u6001\u8bf4\u660e\u5982\u4e0b:   active. \u6d3b\u52a8\u5206\u533a\u6807\u8bc6, \u6392\u4ed6, \u4ee3\u8868\u8be5\u5206\u533a\u4e3a\u542f\u52a8\u5206\u533a, bootloader\u603b\u4f1a\u9009\u62e9\u8be5\u5206\u533a.  bootable. \u8868\u793a\u8be5slot\u7684\u5206\u533a\u5b58\u5728\u4e00\u5957\u53ef\u80fd\u53ef\u4ee5\u542f\u52a8\u7684\u7cfb\u7edf.  successful. \u8868\u793a\u8be5slot\u7684\u7cfb\u7edf\u80fd\u6b63\u5e38\u542f\u52a8.  unbootable. \u4ee3\u8868\u8be5\u5206\u533a\u635f\u574f\u7684, \u65e0\u6cd5\u542f\u52a8, \u5728\u5347\u7ea7\u8fc7\u7a0b\u603b\u88ab\u6807\u8bb0, \u8be5\u6807\u8bb0\u7b49\u6548\u4e8e\u4ee5\u4e0a\u6807\u8bb0\u88ab\u6e05\u7a7a. \u800cactive\u6807\u8bb0\u4f1a\u5c06\u8be5\u6807\u8bb0\u6e05\u7a7a.   slot a  \u548c  slot b , \u53ea\u6709\u4e00\u4e2a\u662factive, \u5b83\u4eec\u53ef\u4ee5\u540c\u65f6\u6709 bootable \u548c successful \u5c5e\u6027.   bootloader\u68c0\u6d4b\u52301\u4e2a\u6216\u80052\u4e2aslot\u90fd\u662fbootable\u7684\u72b6\u6001.  \u9009\u62e9active\u7684slot\u6216\u8005\u9009\u62e9successful\u7684slot\u8fdb\u884c\u5c1d\u8bd5\u542f\u52a8.  \u542f\u52a8\u6210\u529f\u7684\u6807\u8bb0\u662f, dm-verity \u6210\u529f.  \u7531\u4e8e\u542f\u52a8\u6210\u529f, \u5219\u8be5slot\u88ab\u6807\u8bb0\u4e3asuccessful\u548cactive  \u7531\u4e8e\u542f\u52a8\u5931\u8d25, \u5219\u8bbe\u7f6e\u8be5slot\u4e3aunbootable, \u5e76\u8bbe\u7f6e\u53e6\u4e00\u4e2aslot\u4e3aactive, \u8fdb\u884c\u4e0b\u4e00\u6b21\u5c1d\u8bd5.", 
            "title": "\u7cfb\u7edf\u5206\u533a\u5c5e\u6027"
        }, 
        {
            "location": "/2017-09-20-Android-AB-system-update/#_4", 
            "text": "\u9996\u5148, \u6211\u4eec\u770b\u4e0b\u5347\u7ea7\u5305\u7684\u5185\u5bb9. \u5728A/B\u5347\u7ea7\u7684\u60c5\u51b5\u4e0b, \u5347\u7ea7\u5305\u5185\u5bb9\u5982\u4e0b:  Path = aosp_marlin-ota-eng.builder.zip\nType = zip\nComment = signed by SignApk\nPhysical Size = 384694679\n\n   Date      Time    Attr         Size   Compressed  Name\n------------------- ----- ------------ ------------  ------------------------\n2009-01-01 00:00:00 .....          360          360  META-INF/com/android/metadata\n2009-01-01 00:00:00 .....          107          107  care_map.txt\n2009-01-01 00:00:00 .....    384690699    384690699  payload.bin\n2009-01-01 00:00:00 .....          154          154  payload_properties.txt\n2009-01-01 00:00:00 .....         1675          943  META-INF/com/android/otacert\n------------------- ----- ------------ ------------  ------------------------\n                             384692995    384692263  5 files, 0 folders   \u4e0b\u8f7d\u548c\u5347\u7ea7\u7a0b\u5e8f\u662f update_engine , \u6765\u81eachrome os, \u4ee3\u7801\u4e2d\u5927\u91cf\u5b58\u5728dbus\u548cchrome os\u7684\u75d5\u8ff9, \u800cAndroid\u4e0a\u6539\u7a0b\u5e8f\u662f\u57fa\u4e8ebinde\u8fdb\u884c\u901a\u4fe1. \u4e0e\u539f\u5148\u7684ota\u5347\u7ea7\u4e0d\u540c, \u8be5\u5347\u7ea7\u5305\u4e2d\u4e0d\u5305\u542bupdater, \u4e5f\u5c31\u662f\u8bf4, \u5347\u7ea7\u7684\u903b\u8f91\u5728\u8bbe\u5907\u7aef\u800c\u4e0d\u662f\u5728\u5347\u7ea7\u5305\u4e2d. \u5982\u679c\u719f\u6089ota\u5347\u7ea7\u7684\u8bdd, \u8fd9\u4e2a\u5347\u7ea7\u5305\u4e2d\u7684\u6570\u636e\u8ddf\u5757\u5347\u7ea7\u6570\u636e\u51e0\u4e4e\u4e00\u6837, \u521d\u6b65\u5224\u65ad\u7528\u7684\u662f\u5757\u5347\u7ea7.\n\u90a3\u4e48, \u5982\u679c\u6709\u65b0\u7684\u9700\u6c42, \u6bd4\u5982\u6b64\u6b21\u66f4\u65b0\u9700\u8981\u8c03\u6574\u6570\u636e\u5e93, \u662f\u5982\u4f55\u505a\u5230\u7684? \u8bf7\u67e5\u770b\u540e\u6587\u7b2c\u4e8c\u6b65\u5347\u7ea7.  \u6574\u4e2a\u5347\u7ea7\u5206\u4e3a\u4e94\u6b65:   \u4e0b\u8f7d\u5347\u7ea7\u5305, \u6216\u8005\u5347\u7ea7\u6d41. Android8 \u65b0\u652f\u6301\u4e86\u6d41\u5f0f\u5347\u7ea7, \u53ef\u4ee5\u8fb9\u4e0b\u8fb9\u5347.  \u7b2c\u4e00\u6b65\u5347\u7ea7. \u4e5f\u5c31\u662f,  update_engine \u6267\u884c\u7684\u5347\u7ea7\u903b\u8f91, \u57fa\u672c\u7684\u6570\u636e\u5199\u5165.  \u6821\u9a8c\u5199\u5165\u6570\u636e. \u786e\u4fdd\u4e0a\u4e00\u6b65\u5199\u5165\u6570\u636e\u53ef\u9760\u5b8c\u6574.  \u7b2c\u4e8c\u6b65\u5347\u7ea7. \u4e5f\u5c31\u662f, \u6302\u8f7d\u65b0\u70e7\u5199\u7684\u5206\u533a, \u5e76\u6267\u884c\u5176\u4e2d\u7684\u6307\u5b9a\u811a\u672c(\u7a0b\u5e8f)\u8fdb\u884c\u540e\u7eed\u66f4\u65b0\u64cd\u4f5c.  \u5e94\u7528\u4f18\u5316.  \u7531\u4e8e\u5b58\u5728A/B\u65b0\u65e7\u4e24\u5957\u7cfb\u7edf, \u6240\u4ee5, data\u5e95\u4e0b\u4e5f\u5b58\u5728\u4e24\u5957odex/vdex.   \u524d4\u6b65, \u57fa\u4e8e\u4e00\u79cdpipe\u7684\u6846\u67b6\u5b9e\u73b0, \u6bcf\u4e00\u6b65\u90fd\u662f\u4e00\u4e2aaction, \u522b\u94fe\u63a5\u5230actio list\u4e2d, \u524d\u540e\u4e24\u4e2aaction\u901a\u8fc7pipe\u673a\u5236\u8fdb\u884c\u6570\u636e\u901a\u4fe1. \u4e5f\u5c31\u662f\u8bf4, \u524d\u4e00\u4e2aaction\u7684\u8f93\u51fa\u9ed8\u8ba4\u53d8\u6210\u540e\u4e00\u4e2aaction\u7684\u8f93\u5165. action\u7684\u6267\u884c\u51fd\u6570\u662f PerformAction() . \u901a\u8fc7 HasInputObject() \u548c HasOutputPipe() \u5224\u65ad\u662f\u5426\u6709\u8f93\u5165\u548c\u8f93\u51fa\u6d41, \u800c GetInputObject() \u63a5 SetOutputObject() \u5206\u522b\u662f\u8bfb\u53d6\u548c\u5199\u5165pipe.  update_engine  \u7684 Androidmk\u76ee\u6807, \u4f9d\u8d56\u548c\u5bf9\u5e94\u6e90\u7801\u6587\u4ef6\u5982\u4e0b.  # \u9759\u6001\u5e93\u6a21\u5757\nSTATIC_LIBRARIES:\n    update_metadata-protos      (host, target)\n    libpayload_consumer         (host, target)\n    libupdate_engine_android    (target)\n    libpayload_generator        (host, target)\n\n# \u53ef\u6267\u884c\u6a21\u5757\nEXECUTABLES:\n    update_engine           (target)\n    update_engine_sideload      (target)\n    update_engine_client        (target)\n    delta_generator         (host)\n\n# \u5171\u4eab\u5e93\u6a21\u5757\nSHARED_LIBRARIES:\n    libupdate_engine_client     (target)\n\n# \u9884\u7f16\u8bd1\u6a21\u5757\nPREBUILT:\n    updater.json            (target)\n    brillo_update_payload       (host)  \u4ece\u4e0a\u6587\u7684\u76ee\u6807\u53ef\u4ee5\u83b7\u53d6\u5982\u4e0b\u4fe1\u606f:   payload \u4e2d\u7684\u6587\u4ef6\u7ed3\u6784\u662fprotos  \u53ef\u6267\u884c\u6587\u4ef6\u662f  update_engine , \u800c  update_engine_client  \u662f\u5ba2\u6237\u7aef,  update_engine_sideload  \u662frecovery\u6a21\u5f0f\u4e0b\u901a\u8fc7usb\u66f4\u65b0.  delta_generator  \u7528\u4e8e\u751f\u6210payload  \u5b8c\u6574\u7684Android.mk\u4e2d, \u5b58\u5728\u6807\u8bb0\u4e3a local_use_omaha , \u53ea\u6709\u5728  PRODUCT_IOT  \u7269\u8054\u7f51\u65f6, \u624d\u542f\u7528, \u7f16\u8bd1\u83b7\u5f97\u7684\u662fdbus\u7248\u672c\u7684 update_engine .   \u4f9d\u8d56\u5173\u7cfb\u5982\u4e0b:  update_engine (target)\n  --  libupdate_engine_android\n    --  libpayload_consumer\n      --  update_metadata-protos\n\nupdate_engine_sideload (target)\n  --  update_engine_sideload\n    --  update_metadata-protos\n\nupdate_engine_client (target)\n\ndelta_generator (host)\n  --  libpayload_generator\n    --  libpayload_consumer\n      --  update_metadata-protos  \u6e90\u7801\u5217\u8868\u5982\u4e0b:  update_metadata-protos (STATIC_LIBRARIES)\n  --  update_metadata.proto\n\nlibpayload_consumer (STATIC_LIBRARIES)\n  --  common/action_processor.cc\n      common/boot_control_stub.cc\n      common/clock.cc\n      common/constants.cc\n      common/cpu_limiter.cc\n      common/error_code_utils.cc\n      common/hash_calculator.cc\n      common/http_common.cc\n      common/http_fetcher.cc\n      common/file_fetcher.cc\n      common/hwid_override.cc\n      common/multi_range_http_fetcher.cc\n      common/platform_constants_android.cc\n      common/prefs.cc\n      common/subprocess.cc\n      common/terminator.cc\n      common/utils.cc\n      payload_consumer/bzip_extent_writer.cc\n      payload_consumer/delta_performer.cc\n      payload_consumer/download_action.cc\n      payload_consumer/extent_writer.cc\n      payload_consumer/file_descriptor.cc\n      payload_consumer/file_writer.cc\n      payload_consumer/filesystem_verifier_action.cc\n      payload_consumer/install_plan.cc\n      payload_consumer/payload_constants.cc\n      payload_consumer/payload_verifier.cc\n      payload_consumer/postinstall_runner_action.cc\n      payload_consumer/xz_extent_writer.cc\n\nlibupdate_engine_android (STATIC_LIBRARIES)\n  --  binder_bindings/android/os/IUpdateEngine.aidl\n      binder_bindings/android/os/IUpdateEngineCallback.aidl\n      binder_service_android.cc\n      boot_control_android.cc\n      certificate_checker.cc\n      daemon.cc\n      daemon_state_android.cc\n      hardware_android.cc\n      libcurl_http_fetcher.cc\n      network_selector_android.cc\n      proxy_resolver.cc\n      update_attempter_android.cc\n      update_status_utils.cc\n      utils_android.cc\n\nupdate_engine (EXECUTABLES)\n  --  main.cc\n\nupdate_engine_sideload (EXECUTABLES)\n  --  boot_control_android.cc\n      hardware_android.cc\n      network_selector_stub.cc\n      proxy_resolver.cc\n      sideload_main.cc\n      update_attempter_android.cc\n      update_status_utils.cc\n      utils_android.cc\n      boot_control_recovery_stub.cc\n\nupdate_engine_client (EXECUTABLES)\n  --  binder_bindings/android/os/IUpdateEngine.aidl\n      binder_bindings/android/os/IUpdateEngineCallback.aidl\n      common/error_code_utils.cc\n      update_engine_client_android.cc\n      update_status_utils.cc\n\nlibpayload_generator (SHARED_LIBRARIES)\n  --  payload_generator/ab_generator.cc\n      payload_generator/annotated_operation.cc\n      payload_generator/blob_file_writer.cc\n      payload_generator/block_mapping.cc\n      payload_generator/bzip.cc\n      payload_generator/cycle_breaker.cc\n      payload_generator/delta_diff_generator.cc\n      payload_generator/delta_diff_utils.cc\n      payload_generator/ext2_filesystem.cc\n      payload_generator/extent_ranges.cc\n      payload_generator/extent_utils.cc\n      payload_generator/full_update_generator.cc\n      payload_generator/graph_types.cc\n      payload_generator/graph_utils.cc\n      payload_generator/inplace_generator.cc\n      payload_generator/payload_file.cc\n      payload_generator/payload_generation_config.cc\n      payload_generator/payload_signer.cc\n      payload_generator/raw_filesystem.cc\n      payload_generator/tarjan.cc\n      payload_generator/topological_sort.cc\n      payload_generator/xz_android.cc\n\ndelta_generator (EXECUTABLES)\n  --  payload_generator/generate_delta_main.cc", 
            "title": "\u5347\u7ea7\u6d41\u4e0b\u8f7d\u548c\u5347\u7ea7"
        }, 
        {
            "location": "/2017-09-20-Android-AB-system-update/#_5", 
            "text": "\u4e0b\u8f7d\u76f8\u5173\u4e0e\u670d\u52a1\u5668\u4ea4\u4e92\u7684\u903b\u8f91:  delta_performer.cc  \u5347\u7ea7\u6d41(\u5305)\u7684\u4e0b\u8f7d, \u5206\u4e3a\u4e24\u4e2a\u6a21\u5f0f:   \u4e0b\u8f7dzip\u5305\u5230data\u5206\u533a.  \u4e0b\u8f7d\u5347\u7ea7\u6d41, \u8fb9\u4e0b\u8fb9\u5347\u7ea7.   ( \u4ecechrome os\u4ee3\u7801\u770b, \u5176\u5347\u7ea7\u670d\u52a1\u5668\u662fomaha server, \u53ef\u4ee5\u53c2\u8003\u770b\u4e0b\u5bf9\u4e8e\u6211\u4eec\u7684\u5347\u7ea7\u670d\u52a1\u5668\u662f\u5426\u6709\u5e2e\u52a9.\nhttps://github.com/Crystalnix/omaha-server\nhttps://github.com/Crystalnix/omaha-server/wiki\n)  payload \u6570\u636e\u7ed3\u6784:  version 1:\n|  C r A U  | version(8) | manifestSize(8) | manifest(manifestSize) | rawData | payloadSignatureMessageSize | payloadSignatureMessage(payloadSignatureMessageSize) |\n\nversion 2:\n|  C r A U  | version(8) | manifestSize(8) | MetadataSignatureSize(4) | manifest(manifestSize) | medatadataSignatureMessage(MetadataSignatureSize) | rawData | payloadSignatureMessageSize | payloadSignatureMessage(payloadSignatureMessageSize) |  \u5176\u4e2d medatadataSignatureMessage \u6821\u9a8c\u7684\u662f\u5176\u4e4b\u524d\u7684\u6240\u6709\u6570\u636e, \u800c payloadSignatureMessage \u6821\u9a8c\u7684\u662f payloadSignatureMessageSize \u4e4b\u524d\u7684\u6240\u6709\u6570\u636e.  \u800c manifest \u662fprotobuff, \u5176\u4e2d\u5305\u542b\u4e00\u7ec4\u6307\u4ee4\u96c6, \u4e5f\u5c31\u662f\u4ee5\u524drecovery \u5757\u5347\u7ea7\u7684\u4e00\u7cfb\u5217\u6307\u4ee4. rawData\u662f\u88ab\u66f4\u65b0\u6570\u636e, \u6307\u4ee4\u4f1a\u4ecerawData\u6307\u5b9a\u4f4d\u7f6e\u8bfb\u53d6\u6570\u636e\u5e76\u5e94\u7528\u5230\u76ee\u6807\u5206\u533a\u7684\u6307\u5b9a\u4f4d\u7f6e.  metadata\u7684\u6570\u636e\u662fprotobuf, \u6570\u636e\u7ed3\u6784\u4e3a update_metadata.proto  \u4e0b\u8f7d\u5b58\u5728\u4e24\u79cd\u6a21\u5f0f, p2p\u548c\u666e\u901a\u4e0b\u8f7d.  \u4e0b\u8f7d\u5230data\u5206\u533a\u7684\u903b\u8f91\u4e0e\u4e4b\u524dota\u5347\u7ea7\u4e0b\u8f7d\u5347\u7ea7\u5305\u7684\u903b\u8f91\u4e00\u81f4.  update_engine \u5c06\u5347\u7ea7\u5305\u4e0b\u8f7d\u5230\u672c\u5730.  \u4e0b\u9762\u5148\u4ecb\u7ecd\u8fb9\u4e0b\u8fb9\u5347\u7ea7\u7684\u903b\u8f91.", 
            "title": " \u4e0b\u8f7d "
        }, 
        {
            "location": "/2017-09-20-Android-AB-system-update/#data", 
            "text": "\u4e0b\u8f7d\u5230data\u5206\u533a\u7684\u5b9e\u73b0\u4e0d\u518d update_engine \u4e2d, \u800c\u5982\u679c\u662f\u9884\u5148\u4e0b\u8f7d\u5b8c\u6210\u7684payload, \u901a\u8fc7 file:// \u7684url\u4f20\u9012\u7ed9 update_engine , \u540e\u7eed\u903b\u8f91\u4e0e\u8fb9\u4e0b\u8fb9\u5347\u7ea7\u4e00\u6837.  \u800cjava\u5c42\u7684UpdateEngine.java\u7684API, \u66b4\u9732\u5230\u4e86\u7cfb\u7edf\u7684jar\u5305\u4e2d, \u5e76\u672a\u627e\u5230\u8c03\u7528\u8005, \u4e5f\u5c31\u662f\u8bf4, \u8fd9\u5757\u903b\u8f91\u662f\u975e\u5f00\u6e90\u7684, \u6211\u4eec\u65e0\u6cd5\u83b7\u5f97.", 
            "title": "\u4e0b\u8f7d\u5230data\u5206\u533a"
        }, 
        {
            "location": "/2017-09-20-Android-AB-system-update/#_6", 
            "text": "\u6240\u8c13\u8fb9\u4e0b\u8fb9\u5347, \u5c31\u662f\u5c06\u5347\u7ea7\u6570\u636e\u4e0b\u8f7d\u5230\u5185\u5b58\u4e2d, \u5e76\u5728\u5185\u5b58\u4e2d\u5b8c\u6210\u76f8\u5e94\u5904\u7406, \u6700\u540e\u5199\u5165\u76ee\u6807\u5206\u533a. \n\u4e0b\u9762\u662f\u8fb9\u4e0b\u8fb9\u5347\u7684\u5ba2\u6237\u7aef\u6267\u884c\u547d\u4ee4.  # update_engine_client \\\n--payload=http://xxx/android/full-ota/payload.bin \\\n--update \\\n--headers= \\\n  FILE_HASH=ozGgyQEddkI5Zax+Wbjo6I/PCR8PEZka9gGd0nWa+oY= \\\n  FILE_SIZE=282344983\n  METADATA_HASH=GLIKfE6KRwylWMHsNadG/Q8iy5f786WTatvMdBlpOPg= \\\n  METADATA_SIZE=26723 \\   \u5728Pixel\u624b\u673a\u4e0a\u5347\u7ea7\u7684\u8f93\u51falog\u5982\u9644\u4ef6 update_engine.log , \u611f\u5174\u8da3\u7684\u7ae5\u978b\u53ef\u4ee5\u770b\u4e0b, \u5176\u4e2d\u5305\u542b\u4e86\u5404\u4e2a\u9636\u6bb5\u7684\u884c\u4e3a.  \u5176\u4e2dheader\u540e\u9762\u7684\u5185\u5bb9, \u8ddf\u5347\u7ea7\u5305\u4e2d\u7684 payload_properties.txt  \u6587\u4ef6\u5185\u5bb9\u4e00\u6837. \u5404\u5b57\u6bb5\u7684\u4f5c\u7528\u53ef\u4ee5\u53c2\u8003\u524d\u6587payload\u7684\u5934\u6570\u636e\u683c\u5f0f\u6765\u7406\u89e3\u5177\u4f53\u6821\u9a8c\u7684\u6570\u636e\u4f4d.  update_engine  \u9996\u5148\u5b9a\u4e49\u4e00\u7cfb\u5217\u7684action:   download_action : \u4e0b\u8f7d\u6a21\u5757, \u8d1f\u8d23\u8fb9\u4e0b\u8fb9\u5347\u7ea7.  filesystem_verifier_action : \u6587\u4ef6\u7cfb\u7edf\u6821\u9a8c\u6a21\u5757, \u8d1f\u8d23\u5347\u7ea7\u5b8c\u6210\u540e\u6821\u9a8c\u6570\u636e\u7684\u5b8c\u6574\u6027  postinstall_runner_action : \u540e\u5347\u7ea7\u6a21\u5757, \u4e00\u4e9b\u811a\u672c\u6216\u53ef\u6267\u884c\u7a0b\u5e8f\u5728\u7cfb\u7edf\u5347\u7ea7\u5b8c\u6210\u540e\u6267\u884c.   \u4ee5\u4e0aaction\u901a\u8fc7\u7c7b\u4f3cpipeline\u7684\u5f62\u5f0f\u7ec4\u7ec7, \u524d\u4e00\u4e2aaction\u7684\u8f93\u51fa\u4f5c\u4e3a\u540e\u4e00\u4e2aaction\u7684\u8f93\u5165. \u800c\u5728\u5176\u4e2d\u4f20\u9012\u7684\u6570\u636e\u662f install_plan_ , \u8be5\u6570\u636e\u5305\u542b\u4e86payload(\u5347\u7ea7\u6570\u636e)\u7684\u6240\u6709\u4fe1\u606f(\u64cd\u4f5c\u5206\u533a, url, \u6821\u9a8c\u4fe1\u606f\u7b49), \u90e8\u5206\u4fe1\u606f\u7531\u540e\u9762\u7684action\u6267\u884c\u540e\u63d0\u4f9b.\n\u6240\u6709\u7684action, \u5176\u6267\u884c\u5165\u53e3\u51fd\u6570\u662f PerformAction() , \u901a\u8fc7\u8fd9\u4e2a\u51fd\u6570, \u53ef\u4ee5\u66f4\u7ec6\u81f4\u5730\u4e86\u89e3\u8f93\u5165\u8f93\u51fa\u6570\u636e\u548c\u8be5action\u7684\u5177\u4f53\u529f\u80fd.  \u672c\u6bb5\u5185\u5bb9\u7740\u91cd\u4ecb\u7ecd download_action , \u5176\u4f59\u6a21\u5757\u5728\u540e\u9762\u4ecb\u7ecd.   \n1. \u8bfb\u53d6\u6570\u636e. \u8fd9\u91cc\u5e76\u4e0d\u662f\u6b63\u5e38\u7684read, \u8be5\u51fd\u6570\u662f\u4e2a\u4e0b\u8f7d\u7684Write\u56de\u8c03, \u800c\u8bfb\u53d6\u6570\u636e\u5728\u4ee3\u7801\u4e0a\u7684\u771f\u5b9e\u884c\u4e3a\u662f, \u8fd4\u56de\u9519\u8bef\u8868\u793a\u6570\u636e\u4e0d\u591f, \u7ee7\u7eed\u8bfb\u53d6, \u800c\u5df2\u7ecf\u8bfb\u53d6\u7684\u6570\u636e\u5b58\u653e\u5728buffer\u4e2d.\n2. \u89e3\u6790manifest. \u5c31\u662f\u4e0a\u6587\u4e2dpayload\u7684\u5934, \u5305\u542b\u6821\u9a8c\u4fe1\u606f\u548c\u6267\u884c\u7684\u6307\u4ee4\u96c6, \u8fd8\u6709\u6240\u6709\u64cd\u4f5c\u7684\u5206\u533a\u6821\u9a8c\u503c\u7b49.\n3. \u6253\u5f00\u5206\u533a\u8bbe\u5907. \u6839\u636e\u5347\u7ea7\u7c7b\u578b, \u5982\u679c\u662f\u5168\u91cf\u5347\u7ea7(manifest\u4e2d\u5305\u542b\u8be5\u4fe1\u606f), \u5219\u6253\u5f00\u88ab\u5347\u7ea7\u8bbe\u5907\u5206\u533a, \u5982\u679c\u662f\u589e\u91cf\u5347\u7ea7, \u6253\u5f00\u5f53\u524d\u8fd0\u884c\u8bbe\u5907\u5206\u533a\u548c\u88ab\u5347\u7ea7\u76ee\u6807\u5206\u533a.\n4. \u83b7\u53d6\u6307\u4ee4\u5217\u8868. \u662f\u4ecemanifest\u4e2d\u83b7\u53d6. \u4e0d\u540c\u6307\u4ee4, \u683c\u5f0f\u4e0d\u540c, \u4f46\u57fa\u672c\u683c\u5f0f\u662f  src:offset:size , \u6307\u5b9a\u64cd\u4f5c\u6e90/\u76ee\u6807, \u504f\u79fb\u548c\u5927\u5c0f.\n5. \u7531\u4e8e1\u63d0\u5230\u7684, \u5728\u6570\u636e\u4e0d\u591f\u65f6\u4f1a\u9000\u51fa, \u6240\u4ee5, \u4f1a\u4fdd\u5b58\u5f53\u524d\u5df2\u7ecf\u6267\u884c\u5230\u7684\u6307\u4ee4, \u5e76\u83b7\u53d6\u4e0b\u4e00\u4e2a\u6307\u4ee4\u4fe1\u606f, \u8fd9\u91cc\u4fe1\u606f\u91cd\u70b9\u662f, \u9700\u8981\u8bfb\u53d6\u7684payload\u4e2doffset\u548csize. \u7531\u4e8epayload\u4e2d\u7684\u5347\u7ea7\u6570\u636e\u662f\u8ddf\u6307\u4ee4\u4e00\u8d77\u751f\u6210\u7684, \u6240\u4ee5, \u5176\u6570\u636e\u7684\u504f\u79fb\u5b8c\u5168\u53ef\u4ee5\u8ddf\u6307\u4ee4\u7684\u987a\u5e8f\u4e00\u81f4, \u4fdd\u8bc1\u4e0d\u4f1a\u51fa\u73b0\u8bfb\u6307\u9488\u8df3\u52a8, \u4e5f\u5c31\u4e0d\u9700\u8981p2p\u652f\u6301.\n6. \u6267\u884c\u6307\u4ee4. \u57fa\u672c\u6307\u4ee4\u53ef\u4ee5\u67e5\u770b\u4ee3\u7801, \u4e0e\u5757\u5347\u7ea7\u6307\u4ee4\u4e00\u6837. \n\u4e0b\u9762\u662f\u5347\u7ea7\u65f6\u6570\u636e\u7684\u5408\u6210\u56fe.   \u8fd9\u5e45\u56fe\u5c55\u793a\u7684\u662f\u5347\u7ea7\u6570\u636e\u7684\u5408\u6210. \u5982\u679c\u662f\u5168\u91cf\u5347\u7ea7, source\u4e3a\u7a7a, \u5219payload\u76f4\u63a5\u5199\u5165target. \u4f46\u4e0e\u4e00\u822c\u5206\u533a\u70e7\u5199\u8fd8\u662f\u6709\u4e9b\u5dee\u5f02, \u5e76\u4e0d\u4f1a\u64e6\u9664target, \u800c\u662f\u6309\u7167\u504f\u79fb\u548c\u5927\u5c0f\u76f4\u63a5\u5199\u5165.\u800c\u5982\u679c\u662f\u589e\u91cf\u5347\u7ea7, \u5219\u662f\u57fa\u4e8e\u5f53\u524d\u8fd0\u884c\u7cfb\u7edf\u4e3asource, \u4e0epayload\u7684\u6570\u636e\u5408\u5e76\u5199\u5165target.  \u6240\u4ee5, \u4e0d\u7ba1\u662f\u5168\u91cf\u5347\u7ea7\u8fd8\u662f\u589e\u91cf\u5347\u7ea7, \u65ad\u7535\u540e\u90fd\u53ef\u4ee5\u4ece\u5934\u5f00\u59cb\u518d\u5347\u7ea7.", 
            "title": "\u8fb9\u4e0b\u8fb9\u5347"
        }, 
        {
            "location": "/2017-09-20-Android-AB-system-update/#_7", 
            "text": "\u83b7\u53d6\u8f93\u5165\u6570\u636e. \u662f\u6307\u83b7\u53d6\u4ece download_action \u5b8c\u6210\u540e\u7684\u6570\u636e, \u5305\u542b\u88ab\u5347\u7ea7\u5206\u533a\u53ca\u5176\u54c8\u5e0c\u503c\u7b49.  \u5f00\u59cb\u6821\u9a8c\u88ab\u5347\u7ea7\u5206\u533a. \u5355\u7eaf\u4ece\u5206\u533a\u8bfb\u53d6\u5757\u6570\u636e\u5e76\u4e0epayload\u4e2d\u5b58\u653e\u7684\u8fdb\u884c\u6bd4\u5bf9\u6821\u9a8c.  \u5f00\u59cb\u6821\u9a8c\u5f53\u524dslot\u6e90\u5206\u533a. \u8fd9\u4e2a\u662f\u9488\u5bf9\u589e\u91cf\u5347\u7ea7\u7684. \u5728\u6821\u9a8c\u76ee\u6807\u5206\u533a\u5931\u8d25\u540e, \u6821\u9a8c\u6e90\u5206\u533a.\u6b64\u5904\u6821\u9a8c\u7684\u76ee\u7684\u4e0d\u662f\u5224\u65ad\u5f53\u524d\u8fd0\u884c\u7684\u5206\u533a\u662f\u5426\u5408\u6cd5(\u542f\u52a8\u65f6, \u7531\u5176\u4ed6\u6a21\u5757\u6821\u9a8c), \u800c\u662f\u5224\u65ad\u4e0b\u8f7d\u7684payload\u662f\u5426\u4e0e\u5f53\u524d\u7cfb\u7edf\u5339\u914d(\u670d\u52a1\u5668\u7aef\u653e\u9519\u5347\u7ea7\u6587\u4ef6).  \u6807\u8bb0\u4f20\u8f93\u5931\u8d25. \u8fd9\u91cc\u662f\u57283\u7684\u57fa\u7840\u4e0a, \u5c06\u5f53\u524dpayload\u7684\u4e0b\u8f7durl\u6807\u8bb0\u5931\u8d25, \u5e76\u589e\u52a0\u5931\u8d25\u6b21\u6570. \u5728\u8fbe\u5230\u4e00\u5b9a\u6b21\u6570\u540e(\u670d\u52a1\u7aef\u914d\u7f6e), \u4e0d\u518d\u4ece\u8be5url\u83b7\u53d6\u5347\u7ea7\u6570\u636e, \u8df3\u5f80\u4e0b\u4e00\u4e2aurl.", 
            "title": " \u6821\u9a8c "
        }, 
        {
            "location": "/2017-09-20-Android-AB-system-update/#post-install", 
            "text": "\u5404\u4e2a\u5206\u533a\u90fd\u53ef\u4ee5\u6307\u5b9apostinstall, \u800cpostinstall\u811a\u672c\u662f\u5728 download_action \u89e3\u6790mainifest\u65f6\u89e3\u6790\u5e76\u83b7\u5f97. \u5728\u5b9a\u4e49\u6267\u884cpostinstall\u4f46\u53c8\u65e0\u811a\u672c\u6307\u5b9a\u65f6, \u9ed8\u8ba4postinstall\u811a\u672c\u662f\u5206\u533a\u6839\u76ee\u5f55\u4e0b\u7684 postinst  \u5728Chrome OS\u4e2d, postinstall \u662f\u5141\u8bb8\u5bf9\u5206\u533a\u6267\u884c\u5757\u5199\u5165\u64cd\u4f5c\u7684,\u4f46\u662f\u5728Android, \u6302\u8f7d\u5206\u533a\u88ab\u6267\u884c\u6807\u8bb0\u4e3a\u53ea\u8bfb, \u5e76\u4e14\u4e5f\u6302\u8f7d\u6210\u53ea\u8bfb, \u4e5f\u5c31\u662f\u8bf4, \u4e0d\u5141\u8bb8\u5bf9\u88ab\u5347\u7ea7\u5206\u533a\u505a\u4fee\u6539(\u5c31\u7b97\u4fee\u6539\u4e86, \u4e4b\u540e\u6821\u9a8c\u4f9d\u7136\u53ef\u80fd\u51fa\u9519). postinstall\u7684\u811a\u672c\u662f\u76f4\u63a5\u57fa\u4e8e\u5f53\u524d\u88ab\u5347\u7ea7\u7cfb\u7edf\u6267\u884c, \u5e76\u672achroot, \u6240\u4ee5, postinstall\u811a\u672c\u5fc5\u987b\u80fd\u591f\u88ab\u4fdd\u8bc1\u8fd0\u884c\u5728\u88ab\u5347\u7ea7\u7cfb\u7edf\u4e2d. \u6240\u4ee5, \u4e00\u822c\u662f\u7eaf\u9759\u6001\u7684\u53ef\u6267\u884c\u7a0b\u5e8f, \u800c\u4e14\u5176\u529f\u80fd\u5728android\u4e0a\u4e5f\u88ab\u5f31\u5316\u4e86.", 
            "title": " post install "
        }, 
        {
            "location": "/2017-09-20-Android-AB-system-update/#odex", 
            "text": "\u5728\u4ee5\u4e0a\u5168\u90e8\u5b8c\u6210\u540e, \u7cfb\u7edf\u5c06\u6807\u8bb0slot\u4e3a\u88ab\u5347\u7ea7\u7cfb\u7edf, \u5e76\u5728\u4e0b\u6b21\u91cd\u542f\u540e, \u8fdb\u5165\u5347\u7ea7\u540e\u7684\u7cfb\u7edf, \u6821\u9a8c\u5e76\u4f18\u5316. \u8fd9\u65f6\u5019\u5982\u679c\u6821\u9a8c\u5931\u8d25, \u5219\u8fd8\u4f1a\u56de\u5230\u539f\u5148\u7cfb\u7edf. \u5219\u8be5\u60c5\u51b5\u5b58\u5728data\u4e0b\u5e94\u7528\u6570\u636e\u5df2\u7ecf\u88ab\u4f18\u5316\u4e3a\u65b0\u7248\u672c\u6216\u8005\u4f18\u5316\u5230\u4e00\u534a\u7684\u95ee\u9898. \u8ddf\u4e86\u4e0b\u76f8\u5173\u4ee3\u7801\u548c\u7f51\u4e0a\u7684\u8d44\u6599, \u7ed3\u8bba\u5982\u4e0b. \n\u5728A/B\u5347\u7ea7\u5b8c\u6210\u8fdb\u5165\u65b0\u7cfb\u7edf\u540e, dexopt\u7684\u53c2\u6570\u662fspeed-profile, \u800c\u8be5\u53c2\u6570\u7684\u542b\u4e49\u5c31\u662f\u6839\u636e\u201c\u70ed\u4ee3\u7801\u201d\u7684profile\u914d\u7f6e\u6765\u7f16\u8bd1. \u90a3\u4e48\u95ee\u9898\u5c31\u662f\u8fd9\u4e2aprofile\u7684\u751f\u6210,\u548c\u4ec0\u4e48\u65f6\u5019\u6267\u884c\u589e\u91cf\u7f16\u8bd1.   profile\u5728\u8fbe\u5230\u4e00\u5b9a\u6761\u4ef6\u540e\u5199\u5165/data/, \u76ee\u524d\u4ece\u4ee3\u7801\u770b, \u5df2\u77e5\u7684\u4e00\u4e2a\u6761\u4ef6\u662f\u5927\u5c0f 50K\u65f6, \u5199\u5165\u6587\u4ef6. \u800c\u5728\u5df2\u7ecf\u5b58\u5728\u8be5\u6587\u4ef6\u7684\u60c5\u51b5\u4e0b, \u4f1a\u4f18\u5148\u52a0\u8f7d, \u5982\u679c\u52a0\u8f7d\u5931\u8d25, \u5219\u5220\u9664\u5e76\u91cd\u65b0\u751f\u6210.  \u6267\u884c\u589e\u91cf\u7f16\u8bd1\u7684\u65f6\u95f4\u662f, \u673a\u5728\u5145\u7535\uff0b\u7a7a\u95f2\uff0b\u56db\u4e2a\u5c0f\u65f6\u95f4\u9694\u7b49\u591a\u4e2a\u6761\u4ef6\u4e0b, \u5728\u540e\u53f0\u5b8c\u6210.   \u4e5f\u5c31\u662f\u8bf4, \u5728AB\u7cfb\u7edf\u5347\u7ea7\u5b8c\u6210\u65f6, \u4e0d\u4f1a\u6267\u884c\u7f16\u8bd1, \u53ea\u4f1a\u6267\u884cprofile\u7684\u751f\u6210. \u800c\u5728\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u88ab\u68c0\u6d4b\u5230\u7cfb\u7edf\u6821\u9a8c\u5931\u8d25, \u5219\u4f1a\u56de\u5230\u4e0a\u4e00\u7248\u672c\u7cfb\u7edf.", 
            "title": " odex\u4f18\u5316 "
        }, 
        {
            "location": "/2017-09-20-Android-AB-system-update/#bootloader", 
            "text": "\u4f20\u7edf\u7684Android\u4e0ebootloader\u901a\u4fe1\u662f\u901a\u8fc7misc\u5206\u533a. \u7136\u800c\u5728A/B\u7cfb\u7edf\u4e2d, \u6570\u636e\u5e76\u4e0d\u662f\u5b58\u5728misc\u5206\u533a, \u800c\u4e14\u5b58\u653e\u4f4d\u7f6e\u7531\u5382\u5546\u5b9a\u4e49, \u63a5\u53e3\u5728 hardware/libhardware/include/hardware/boot_control.h . \u5176\u7ed3\u6784\u4f53\u662f  boot_control_module_t , \u5305\u542b\u4e86\u6240\u6709\u8bbe\u7f6e\u4ee5\u4e0aslot\u72b6\u6001\u7684\u63a5\u53e3.  \u4e0b\u9762\u4ecb\u7ecd\u4e0b\u4e0d\u540c\u5382\u5546 boot_control \u7684\u5b9e\u73b0.", 
            "title": "bootloader\u4ea4\u4e92"
        }, 
        {
            "location": "/2017-09-20-Android-AB-system-update/#qcom", 
            "text": "\u4ee3\u7801\u4f4d\u7f6e:   hardware/qcom/bootctrl/boot_control.cpp \nqcom\u7684\u5b9e\u73b0\u662f, \u76f4\u63a5\u5c06A/B\u5206\u533a\u7684\u5c5e\u6027, \u5199\u5165\u7684gpt\u5206\u533a\u8868\u7684boot\u5206\u533a( boot_a \u548c boot_b ).qcom\u673a\u9876\u76d2gpt\u8868\u7684\u5206\u6790:http://blog.csdn.net/guyongqiangx/article/details/68924436   \n\u4e0a\u56fe\u662fqcom\u673a\u9876\u76d2gpt\u5206\u533a\u8868\u7684\u4fe1\u606f, \u5728Entry\u4e2d\u67e5\u627e\u5230\u5206\u533a boot_a \u548c boot_b , \u63d0\u53d6\u5176\u5c5e\u6027.\n\u4ece LAB 2 \u5f00\u59cb\u5b58\u653e\u7684\u662fGPT\u5206\u533a\u7684\u8be6\u7ec6\u4fe1\u606f Partition Entry , \u5355\u4e2a Partition Entry \u5360128\u4e2a\u5b57\u8282, \u4ece\u7b2c48\u4e2a\u5b57\u8282\u5f00\u59cb\u5b58\u653e\u7684\u662f\u5206\u533a\u5c5e\u6027, \u800cA/B\u7cfb\u7edf\u7684\u5206\u533a\u5c5e\u6027\u4e5f\u662f\u5b58\u653e\u5728\u8fd9\u4e2a\u4f4d\u7f6e.  \u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u5230, qcom\u7684\u5b9e\u73b0, \u6ca1\u6709bootable\u7684\u6807\u8bb0\u4f4d, \u53d6\u800c\u4ee3\u4e4b\u7684\u662funbootable.", 
            "title": "qcom\u7684\u5b9e\u73b0"
        }, 
        {
            "location": "/2017-09-20-Android-AB-system-update/#google", 
            "text": "\u4ee3\u7801\u4f4d\u7f6e system/extras/boot_control_copy/boot_control_copy.c  google\u7684\u53c2\u8003\u5b9e\u73b0\u590d\u7528\u4e86misc\u5206\u533a\u7684 bootloader_message (recovery\u4e0ebootloader\u901a\u4fe1\u7684\u5206\u533a). \u6574\u4e2amisc\u5206\u533a\u7684\u6570\u636e\u7ed3\u6784\u56fe\u5982\u4e0b.     fsmgr\u4f7f\u7528, \u5728\u8bbe\u7f6e\u6307\u5b9aslot\u4e3aactive\u65f6, \u540c\u65f6\u5c06\u5bf9\u5e94\u540e\u7f00\u8bbe\u7f6e\u5230\u8be5\u5b57\u6bb5. fsmgr\u5728\u6302\u8f7d\u5206\u533a\u65f6,\u901a\u8fc7\u8be5\u5b57\u6bb5\u62fc\u6210\u5b8c\u6210\u7684\u5206\u533a\u8def\u5f84.  Magic Numbe. \u7528\u6765\u786e\u5b9a\u8be5\u6570\u636e\u7aef\u7684\u5408\u6cd5, \u5fc5\u987b\u662f 'B', 'C' , 'c' (\" boot_control  copy\" \u7684\u7f29\u5199)  \u63a5\u53e3\u7248\u672c\u53f7  active\u72b6\u6001\u7684slot\u53f7, \u5728\u8be5\u5b9e\u73b0\u4e2d\u53ea\u6709 0 \u6216 1.  0 \u4e3a \u7b2c\u4e00\u4e2aslot, 1 \u4e3a\u7b2c\u4e8c\u4e2aslot, \u8bbe\u7f6eslot\u7684bootable/unbootable\u72b6\u6001.   \u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa, \u5e76\u6ca1\u6709\u53ef\u4ee5\u6807\u8bb0\u4e3asuccessful\u7684\u4f4d, \u901a\u8fc7\u4ee3\u7801\u4e5f\u53d1\u73b0, \u5176\u5b9e\u73b0\u4e3a\u7a7a, \u4e5f\u5c31\u662f\u8bf4, \u5e76\u6ca1\u6709\u5b9e\u73b0\u8be5\u72b6\u6001.  \u5982\u679c\u6ce8\u610f\u5230\u4ee3\u7801, \u5728 module_setActiveBootSlot \u540e\u534a\u6bb5, \u4f1a\u5c06active\u72b6\u6001\u7684 boot_X \u5206\u533a\u5185\u5bb9\u62f7\u8d1d\u5230boot\u5206\u533a. \u4e5f\u5c31\u662f\u8bf4, \u7cfb\u7edf\u5b58\u5728\u4e09\u4e2a\u5206\u533a(boot,  boot_a ,  boot_b ), \u88ab\u8bbe\u7f6e\u4e3aactive\u7684\u5206\u533a\u4f1a\u88ab\u62f7\u8d1d\u5230boot\u5206\u533a, \u518d\u7ed3\u5408 module_getCurrentSlot \u7684\u5b9e\u73b0(\u4ece/system\u5206\u533a\u83b7\u53d6\u6302\u8f7d\u4fe1\u606f) ,\u4ece\u8fd9\u4e24\u6bb5\u4ee3\u7801\u53ef\u4ee5\u63a8\u6d4b\u51fa\u4e24\u4e2a\u7ed3\u8bba:   A/B\u7cfb\u7edf\u53ef\u4ee5\u4e0d\u5347\u7ea7firmware(bootloader), \u6216\u8005\u8bf4google\u7684\u8be5\u5b9e\u73b0\u6700\u521d\u662f\u4e3a\u4e86\u517c\u5bb9\u8001\u7684bootloader.  boot.img\u4e2d\u7684ramdisk\u53ef\u4ee5\u8fd8\u662fboot\u7684ramdisk.   \u4f46\u662f, \u4e0d\u786e\u5b9a\u53c2\u8003\u4ee3\u7801\u662f\u5426\u80fd\u6b63\u5e38\u8fd0\u884c. \u4f46\u662f\u5355\u7eaf\u4ece\u4ee5\u4e0a\u4ee3\u7801\u770b, \u9664\u4e86\u5206\u533a, A/B\u7cfb\u7edf\u7684\u542f\u52a8, \u6302\u8f7d, \u90fd\u53ef\u4ee5\u5728\u7528\u6237\u5c42\u641e\u5b9a. \u4f46\u662f\u5e26\u6765\u7684\u540e\u679c\u5c31\u662f, \u5982\u679cbootloader\u542f\u52a8boot\u5931\u8d25, \u5219\u65e0\u6cd5\u5207\u6362\u5230\u53e6\u4e00\u4e2aslot.", 
            "title": "google\u7684\u53c2\u8003\u5b9e\u73b0"
        }, 
        {
            "location": "/2017-09-20-Android-AB-system-update/#_8", 
            "text": "\u5347\u7ea7\u5305\u5236\u4f5c\u5de5\u5177\u4e0d\u518d\u652f\u6301 \u57fa\u4e8e\u6587\u4ef6\u7684\u5347\u7ea7, \u5f53\u524d\u53ea\u652f\u6301ab\u5347\u7ea7\u548c\u5757\u5347\u7ea7.  \u5757\u5347\u7ea7\u548cab\u5347\u7ea7\u5728\u751f\u6210\u6570\u636e\u6587\u4ef6\u548c\u811a\u672c\u4e0a\u539f\u7406\u662f\u4e00\u6837\u7684, \u53ea\u662f\u5728\u751f\u6210\u5347\u7ea7\u6570\u636e\u65f6\u5b58\u5728\u5dee\u5f02.  AB\u5347\u7ea7payload\u5236\u4f5c\u903b\u8f91\u5728\u5347\u7ea7\u5305\u5236\u4f5c\u811a\u672c\u7684 WriteABOTAPackageWithBrilloScript , \u800c\u771f\u6b63payload\u751f\u6210\u7684\u903b\u8f91\u5728\u51fd\u6570 GenerateUpdatePayloadFile .  \u6d41\u7a0b\u5982\u4e0b:  \u751f\u6210payload\u6307\u4ee4\u89c4\u5219:", 
            "title": "\u5347\u7ea7\u5305\u751f\u6210"
        }, 
        {
            "location": "/2017-09-20-Android-AB-system-update/#ab_1", 
            "text": "", 
            "title": "AB\u5347\u7ea7\u603b\u6d41\u7a0b\u56fe"
        }, 
        {
            "location": "/2017-09-19-android8-partiton-table/", 
            "text": "\u6765\u6e90: https://pengzhangdev.github.io/android8-partiton-table/\n\n\n\u5dee\u5f02\u7b80\u8ff0 \n\n\n\u5728Android8.0\u4e4b\u540e, \u5c31\u5b58\u5728\u4e24\u5957\u5206\u533a\u8868, \u5206\u522b\u5bf9\u5e94\u7684\u662fA/B\u7cfb\u7edf\u548c\u975eA/B\u7cfb\u7edf.\n\n\n\n\n\u975eA/B\u7cfb\u7edf\u7684\u5206\u533a\u8868\u4e0e\u4e4b\u524d\u5206\u533a\u8868\u4e00\u6837, \u6ca1\u6709\u53d8\u5316.\n\n\nA/B\u7cfb\u7edf\u7684\u5206\u533a\u8868, \u662f\u672c\u6587\u7684\u4e3b\u8981\u63cf\u8ff0\u70b9.\n\n\n\n\n\u6240\u8c13\u7684A/B\u7cfb\u7edf, \u662f\u6307\u8bbe\u5907\u4e0a\u5b58\u5728\u4e24\u5957\u7cfb\u7edf, \u5176\u5206\u533a\u540d\u4e5f\u662f\u5b58\u5728\n_a\n \u548c \n_b\n \u7684\u533a\u522b.\u4e24\u5957\u7cfb\u7edf\u4e2d, \u53ea\u6709\u4e00\u5957\u4e3aactive, \u8fd0\u884c\u72b6\u6001, \u800c\u5347\u7ea7\u5219\u6267\u884c\u5728\u53e6\u4e00\u5957\u7cfb\u7edf\u7684\u5206\u533a\u4e2d. \u4ece\u800c\u8fbe\u5230, \u4e0d\u7ba1\u5347\u7ea7\u6210\u529f\u4e0e\u5426, \u603b\u6709\u4e00\u5957\u7cfb\u7edf\u4fdd\u8bc1\u80fd\u4f7f\u7528.\n\n\n\u800c\u5237\u673a, \u5305\u62ec\u6302\u65f6\u7684\u5206\u533a\u8868\u4e2d, \u90fd\u4e0d\u4f1a\u6dfb\u52a0\u540e\u7f00(\n_a\n\u6216\n_b\n). \u53ea\u6709\u5728fastboot\u5237\u673a\u65f6, \u6216\u8005\u5728init\u6302\u8f7d\u65f6, \u627e\u5230active\u7684slot, \u5728\u6307\u5b9a\u5206\u533a\u540d\u5b57\u540e\u9762\u6dfb\u52a0\u540e\u7f00\u5e76\u6302\u8f7d. \u6240\u4ee5, \u5355\u7eaf\u4ece\u6e90\u7801\u6216\u8005\u5237\u673a\u5305\u662f\u65e0\u6cd5\u6307\u5b9a\u54ea\u4e9b\u5206\u533a\u88ab\u6307\u5b9a\u4e3aA/B\u4e86.\n\n\n\nA/B\u7cfb\u7edf\u5e26\u6765\u7684\u597d\u5904\u662f:\n\n\n\n\n\u65e0\u7f1d\u5347\u7ea7, \u4e0d\u9700\u8981\u518d\u8fdb\u5165recovery\u8fdb\u884c\u5347\u7ea7.\n\n\n\u53cc\u7cfb\u7edf\u5907\u4efd, \u4e0d\u7ba1\u662f\u7cfb\u7edf\u5347\u7ea7\u5931\u8d25, \u8fd8\u662f\u88ab\u7834\u574f, \u90fd\u53ef\u4ee5\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u7cfb\u7edf, \u786e\u4fdd\u7528\u6237\u8bbe\u5907\u7684\u6b63\u5e38\u4f7f\u7528.\n\n\n\n\n\u5206\u533a\u8868\u4e0e\u5176\u5185\u5bb9\n\n\n\u4e0b\u9762\u4e3b\u8981\u9488\u5bf9pixel\u8bbe\u5907\u8fdb\u884c\u5206\u6790, \u4e5f\u5c31\u662fAndroid8\u7684\u6e90\u7801\u4e2dmarlin\u8bbe\u5907.\n\n\n\u5237\u673a\u6587\u4ef6\u548c\u5237\u673a\u65b9\u5f0f \n\n\n\u9996\u5148\u6211\u4eec\u770b\u4e0bandroid\u5b98\u7f51\u63d0\u4f9b\u7684marlin\u8bbe\u5907\u5237\u673a\u6587\u4ef6. \u4e0b\u9762\u662f\u57fa\u5e26\u548cbootloader\u7684\u5237\u673a\u6587\u4ef6.\n\n\n\n\n\nzip\u5305\u4e2d\u7684\u6587\u4ef6\u5982\u4e0b.\n\n\n\n\n\n\u5982\u679c\u5355\u7eaf\u6309\u7167\u4e4b\u524d\u5bf9\u8be5zip\u5305\u6587\u4ef6\u7684\u7406\u89e3, \u6587\u4ef6\u540d\u5b57\u5c31\u662f\u5bf9\u5e94\u7684\u5206\u533a\u540d. \u7136\u800c\u5728A/B\u7cfb\u7edf\u4e2d, \u5374\u5e76\u4e0d\u662f\u5982\u6b64. \u800c\u662f\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219\u67e5\u627eA/B\u5206\u533a.\n\n\n\u9996\u5148, \u6700\u5148\u6ce8\u610f\u5230\u7684\u662f\u4e24\u4e2asystem\u5927\u5c0f\u4e0d\u4e00\u81f4, \u4f46\u662f\u8fd9\u4e2a\u5c55\u5f00\u6765\u8bb2\u6709\u70b9\u591a, \u6211\u4eec\u5148\u628aA/B\u7cfb\u7edf\u5237\u673a\u7684\u7b2c\u4e00\u4e2a\u89c4\u5219\u4ecb\u7ecd\u4ee5\u4e0b, \u4ee3\u7801\u5728\u540e\u6587\u4ecb\u7ecd\u7b2c\u4e8c\u4e2a\u89c4\u5219\u65f6\u53ef\u4ee5\u540c\u65f6\u770b\u5230.\n\n\nA/B\u7cfb\u7edffastboot\u5237\u673a\u65f6, \u5982\u679c\u6ca1\u6709\u6307\u5b9aslot, \u5219\u9ed8\u8ba4\u5237\u5165\u7684\u662factive\u7684slot, \u6bd4\u5982\u5982\u679cbootloader\u6807\u8bb0\u4e3aslot A \u4e3aactive, \u5219\u6240\u6709\u5206\u533a\u9ed8\u8ba4\u5237\u5165slot A, \u4e5f\u5c31\u662f\u8bf4\nboot_a\n, \nsystem_a\n \u7b49. \u4f46\u662f, \u5982\u679cbootloader\u53cd\u9988\u67d0\u4e2a\u5206\u533a\u6ca1\u6709\u533a\u5206A/B, \u5219\u9ed8\u8ba4\u76f4\u63a5\u5237\u5165\u8be5\u5206\u533a. \u6bd4\u5982 vendor \u65e0\u533a\u5206A/B, \u5219\u76f4\u63a5\u5237\u5165vendor.\n\n\n\u7136\u540e, \u6211\u4eec\u5173\u6ce8\u4e0b\nsystem.img\n\u548c\nsystem_other.img\n, \u5982\u679c\u5355\u7eaf\u7406\u89e3\u4e3a\u8fd9\u4e24\u4e2aimage\u5206\u522b\u5237\u5165A/B\u5206\u533a, \u5219\u5927\u5c0f\u4e5f\u5b8c\u5168\u5bf9\u5e94\u4e0d\u4e0a. \u5927\u5c0f\u95ee\u9898, \u6211\u4eec\u7a0d\u540e\u518d\u770b, \u5148\u7814\u7a76\u4e0b\nsystem_other.img\n\u5237\u5165\u54ea\u4e2a\u5206\u533a.\n\n\nstatic struct {\n    char img_name[17];\n    char sig_name[17];\n    char part_name[9];\n    bool is_optional;\n    bool is_secondary;\n} images[] = {\n    {\nboot.img\n, \nboot.sig\n, \nboot\n, false, false},\n    {\nboot_other.img\n, \nboot.sig\n, \nboot\n, true, true},\n    {\nrecovery.img\n, \nrecovery.sig\n, \nrecovery\n, true, false},\n    {\nsystem.img\n, \nsystem.sig\n, \nsystem\n, false, false},\n    {\nsystem_other.img\n, \nsystem.sig\n, \nsystem\n, true, true},\n    {\nvendor.img\n, \nvendor.sig\n, \nvendor\n, true, false},\n    {\nvendor_other.img\n, \nvendor.sig\n, \nvendor\n, true, true},\n};\n\n\n\n\n\n\u5176\u4e2d \nis_secondary\n \u5982\u679c\u4e3atrue, \u5219\u610f\u5473\u7740\u8f93\u5165\u975eactive slot.\n\n\n    \nif\n \n(!\nskip_secondary\n)\n \n{\n         \n//\n \n\u9ed8\u8ba4\n \nfalse\n\n        \nif\n \n(slot_override\n \n!=\n \n)\n \n{\n  \n//\n \n\u5237\u673a\u65f6\n \n\u4e3a\n \n\n            \nsecondary\n \n=\n \nget_other_slot(transport,\n \nslot_override)\n;\n\n        \n}\n \nelse\n \n{\n\n            \nsecondary\n \n=\n \nget_other_slot(transport)\n;\n \n//\n \n\u83b7\u53d6\u975eactive\n \nslot\n\n        \n}\n\n        \nif\n \n(\nsecondary\n \n==\n \n)\n \n{\n\n            \nif\n \n(supports_AB(transport))\n \n{\n\n                \nfprintf(stderr,\n \nWarning\n:\n \nCould\n \nnot\n \ndetermine\n \nslot\n \nfor\n \nsecondary\n \nimages\n.\n \nIgnoring\n.\n\\\nn\n);\n\n\n            }\n\n\n            skip_secondary = true;\n\n\n        }\n\n\n    }\n\n\n    for (size_t i = 0; i \n arraysize(images); ++i) {\n\n\n        const char* slot = slot_override.c_str();\n\n\n        if (images\n[\ni\n]\n.is_secondary) {\n\n\n            if (!skip_secondary) {\n\n\n                slot = secondary.c_str(); //\u6307\u5b9a\u4e3a\u975eactive slot\n\n\n            } else {\n\n\n                continue;\n\n\n            }\n\n\n        }\n\n\n\n        int fd = unzip_to_file(zip, images\n[\ni\n]\n.img_name);\n\n\n        if (fd == -1) {\n\n\n            if (images\n[\ni\n]\n.is_optional) {\n\n\n                continue;\n\n\n            }\n\n\n            CloseArchive(zip);\n\n\n            exit(1); // unzip_to_file already explained why.\n\n\n        }\n\n\n        fastboot_buffer buf;\n\n\n        if (!load_buf_fd(transport, fd, \nbuf)) {\n\n\n            die(\ncannot\n \nload\n \n%\ns\n \nfrom\n \nflash\n:\n \n%\ns\n,\n \nimages\n[\ni\n]\n.\nimg_name\n,\n \nstrerror\n(\nerrno\n));\n\n        \n}\n\n\n        \nauto\n \nupdate\n \n=\n \n[\n]\n(\nconst\n \nstd\n::\nstring\n \npartition\n)\n \n{\n\n            \ndo_update_signature(zip,\n \nimages\n[\ni\n]\n.sig_name)\n;\n\n            \nif\n \n(erase_first\n \n \nneeds_erase(transport,\n \npartition.c_str()))\n \n{\n\n                \nfb_queue_erase(partition.c_str())\n;\n\n            \n}\n\n            \nflash_buf\n(\npartition\n.\nc_str\n(),\n \nbuf\n);\n\n            \n/* not closing the fd here since the sparse code keeps the fd around\n\n\n             * but hasn\nt mmaped data yet. The tmpfile will get cleaned up when the\n\n\n             * program exits.\n\n\n             */\n\n        \n}\n;\n\n        \ndo_for_partitions\n(\ntransport\n,\n \nimages\n[\ni\n]\n.\npart_name\n,\n \nslot\n,\n \nupdate\n,\n \nfalse\n);\n\n    \n}\n\n\n\n\n\n\n\u6240\u4ee5, \nsystem_other.img\n \u4f1a\u5237\u5165\u975eactive slot, \u5982\u679cactive\u4e3aa. \u5219\u5237\u5165\nsystem_b\n. \n\n\n\u5728\u786e\u5b9a\nsystem_other.img\n\u4f1a\u5237\u5165\u53e6\u4e00\u4e2aslot\u540e, \u6309\u7167\u7b2c\u4e00\u4e2a\u89c4\u5219(\u53ea\u5237active\u7684slot), \u5219\u53ef\u4ee5\u57fa\u672c\u731c\u6d4b, \nsystem_other.img\n\u4e2d\u7684\u5185\u5bb9\u4e0d\u662f\u7528\u4e8e\u542f\u52a8\u7cfb\u7edf\u7684, \u6216\u8005\u4e0d\u662f\u5b8c\u6574\u7cfb\u7edf.\n\n\n\n\n\u5bf9\u6bd4, \u5176\u5185\u5bb9\u5dee\u5f02, \nsystem_other.img\n \u4e2d, \u53ea\u6709 app \u548c \npriv-app\n\u76ee\u5f55.\nsystem_other.img\n\u7684\u76ee\u5f55\u4e2d\u53ea\u5b58\u5728odex\u548cvdex\u6587\u4ef6, \u4e5f\u5c31\u662fapp\u4f18\u5316\u8fc7\u7684\u6587\u4ef6, \u5e76\u4e14\u989d\u5916\u591a\u4e00\u4e2a\u6587\u4ef6\nsystem-other-odex-marker\n. \u8fd9\u4e2a\u6587\u4ef6\u662f\u4e2a\u7ebf\u7d22, \u6240\u4ee5, \u521d\u6b65\u53ef\u4ee5\u5224\u65ad, \u7cfb\u7edf\u542f\u52a8\u540e\u4e00\u5b9a\u4f1a\u4ece\nsystem_b\n\u5c06\u8fd9\u4e9b\u6570\u636e\u590d\u5236\u5230/data/\u4e0b.\n\n\n\u4e0b\u9762\u6211\u4eec\u770b\u4e0b\u8fd9\u4e2a\u6587\u4ef6\u7684\u4f5c\u7528\u548c\u5982\u4f55copy.\n\n\non property:sys.cppreopt=requested \n property:ro.boot.slot_suffix=_a\n    mount ext4 /dev/block/bootdevice/by-name/system_b /postinstall ro nosuid nodev noexec\n    exec - root -- /system/bin/cppreopts.sh /postinstall\n    # Optional script to copy additional preloaded content to data directory\n    exec - system system -- /system/bin/preloads_copy.sh /postinstall\n    umount /postinstall\n    setprop sys.cppreopt finished\n\non property:sys.cppreopt=requested \n property:ro.boot.slot_suffix=_b\n    mount ext4 /dev/block/bootdevice/by-name/system_a /postinstall ro nosuid nodev noexec\n    exec - root -- /system/bin/cppreopts.sh /postinstall\n    # Optional script to copy additional preloaded content to data directory\n    exec - system system -- /system/bin/preloads_copy.sh /postinstall\n    umount /postinstall\n    setprop sys.cppreopt finished\n\n\n\n\n\n\u5728\u542f\u52a8\u4e3a\u4efb\u4f55\u4e4b\u4e00\u65f6, \u4f1a\u4ece\u53e6\u4e00\u4e2aslot\u6302\u8f7d\u5230/postinstall, \u7136\u540e\u4f7f\u7528cppreopts.sh, \u5c06odexvdex\u6587\u4ef6\u62f7\u8d1d\u5230\n/data/\ndalvik-cache/\nisa\n/\nxiam, isa\u662f\u786c\u4ef6\u67b6\u6784(arm64/arm32).\n\u800c \npreloads_copy.sh\n \u4f1a\u5c06\nsystem_other\n\u4e2d\u7684preloads\u6587\u4ef6\u62f7\u8d1d\u5230/data/preloads/ \u76ee\u5f55\u4e0b.\n\n\n\u57fa\u4e8e\u4ee5\u4e0asystem\u7684\u673a\u5236, \u5728\u5237\u673a\u65f6, \u5b9e\u9645\u53ea\u5237\u5165\u4e00\u5957\u7cfb\u7edf\u5230active slot\u4e2d, \u7136\u540e\u4ece\u53e6\u4e00\u5957\u7cfb\u7edf\u4e2d\u7684system\u5206\u533a\u5c06\u4f18\u5316\u540e\u7684dex\u5305\u62f7\u8d1d\u5230data\u5206\u533a\u4e0b,. \u4e0e\u4e4b\u524d\u7684\u5dee\u5f02\u662f, \u8fde\u5e94\u7528\u7684\u7f16\u8bd1\u548c\u4f18\u5316\u90fd\u5728host\u7aef\u5b8c\u6210, android8\u7684\u542f\u52a8\u901f\u5ea6\u5c06\u975e\u5e38\u5feb.\n\n\n\u6e90\u7801\u548c\u5206\u533a\u5927\u5c0f \n\n\n\u4ecerecovery\u7684fstab\u4e2d,\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7684\u5206\u533a\u8868\u5982\u4e0b:\n\n\n/dev/block/platform/soc/624000.ufshc/by-name/system_a\n/dev/block/platform/soc/624000.ufshc/by-name/system_b\n/dev/block/platform/soc/624000.ufshc/by-name/vendor_a\n/dev/block/platform/soc/624000.ufshc/by-name/vendor_b\n/dev/block/platform/soc/624000.ufshc/by-name/userdata\n/dev/block/platform/soc/624000.ufshc/by-name/boot_a\n/dev/block/platform/soc/624000.ufshc/by-name/boot_b\n\n\n\n\n\n\u4f46\u4ee5\u4e0a\u5206\u533a\u8868\u5728\u4e3b\u7cfb\u7edf\u4e2d\u65e0\u6cd5\u770b\u5230, \u6216\u8005\u8bf4\u4e3b\u7cfb\u7edf\u4e2d\u53ea\u6709\u5728vendor\u4e0b\u5b58\u5728fstab, \u5176\u4ed6\u5730\u65b9\u5e76\u6ca1\u6709, \u800cvendor\u4e0b\u7684fstab\u5185\u5bb9\u5982\u4e0b, \u662f\u7531vendor\u5e95\u4e0b\u7684init.{device}.rc \u6302\u8f7d.\n\n\n/dev/block/platform/soc/624000.ufshc/by-name/system     /                   ext4    ro,barrier=1                wait,slotselect,verify\n/dev/block/platform/soc/624000.ufshc/by-name/modem      /firmware/radio     vfat    ro,shortname=lower,uid=1000,gid=0,dmask=227,fmask=337,context=u:object_r:firmware_file:s0   wait,slotselect\n/dev/block/platform/soc/624000.ufshc/by-name/userdata   /data               ext4    noatime,nosuid,nodev,barrier=1,noauto_da_alloc  latemount,wait,check,formattable,fileencryption=ice,quota\n/dev/block/zram0                                        none                swap    defaults                    zramsize=536870912,max_comp_streams=4\n/dev/block/platform/soc/624000.ufshc/by-name/misc       /misc               emmc    defaults                    defaults\n/devices/*/xhci-hcd.0.auto/usb*                         auto                vfat    defaults                    voldmanaged=usb:auto\n\n\n\n\n\n\u521d\u6b65\u5224\u65ad, \u5176\u6709\u7528\u7684\u5185\u5bb9\u662f\u7ed9vold\u7684\u6302\u8f7d\u4fe1\u606f\u548c\u57fa\u5e26\u5206\u533a. \u4f46\u4e0d\u7ba1\u600e\u4e48\u770b\u81f3\u5c11\u7f3a\u5c11\u4e86vendor\u6302\u8f7d\u7684\u4fe1\u606f. \u800c\u4e14fstab\u5728vendor\u5206\u533a\u4e0b, \u5219\u610f\u5473\u7740vendor\u7684\u6302\u8f7d\u5c06\u63d0\u524d\u5230\u548cboot\u540c\u4e2a\u7ea7\u522b. \u6ca1\u9519, \u65b0\u5f15\u5165\u4e86\u4e00\u4e2a\nearly-mounted\n, \u800c\u5206\u533a\u8868\u662f\u5728 device tree \u4e2d, \u4e5f\u5c31\u662f\u542f\u52a8\u540e, \u5728 \n/proc/device-tree/firmware/android/fstab/vendor\n. \n\u4e0a\u6587\u7684fstab\u8fd8\u7ed9\u6211\u4eec\u4e00\u4e2a\u4fe1\u606f, \u6807\u5fd7\u4f4d\nslotselect\n, \u610f\u5473\u8fd9system\u5206\u533a\u662f\u5206A/B\u7cfb\u7edf\u7684\u5e76\u4e14\u7531init\u6839\u636eactive\u7684slot\u9009\u62e9\u5bf9\u5e94\u7684\u771f\u5b9e\u5206\u533a\u8def\u5f84(\u540e\u7f00'_a'\u6216'_b')\u8fdb\u884c\u6302\u8f7d.\n\n\n\u6211\u4eec\u5728\u770b\u4e00\u773csystem\u5206\u533a, \u5176\u6302\u8f7d\u70b9\u662f / .  \u6ca1\u9519, \u5728Android8\u4e4b\u540e, system\u5206\u533a\u7684\u786e\u662f\u88ab\u6302\u8f7d\u5230 /, \u4e5f\u5c31\u662f\u8bf4, system\u5206\u533a\u5305\u542b\u4e86rootfs, \u5176\u5185\u5bb9\u5982\u4e0b.\n\n\ntotal 1724\ndrwxr-xr-x. 21 root    root       4096 Sep  8 18:30 .\ndrwxrwxrwx  25 werther werther   32768 Sep 19 13:15 ..\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 acct\ndrwxrwx--x.  2 werther werther    4096 Sep  8 15:49 bt_firmware\nlrw-r--r--.  1 root    root         50 Sep  8 18:30 bugreports -\n /data/user_de/0/com.android.shell/files/bugreports\nlrw-r--r--.  1 root    root         11 Sep  8 18:30 cache -\n /data/cache\nlrw-r--r--.  1 root    root         13 Sep  8 18:30 charger -\n /sbin/charger\ndr-x------.  2 root    root       4096 Sep  8 15:49 config\nlrw-r--r--.  1 root    root         17 Sep  8 18:30 d -\n /sys/kernel/debug\ndrwxrwx--x.  2 werther werther    4096 Sep  8 15:49 data\nlrw-------.  1 root    root         23 Sep  8 18:30 default.prop -\n system/etc/prop.default\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 dev\nlrw-r--r--.  1 root    root         15 Sep  8 18:30 dsp -\n /vendor/lib/dsp\nlrw-r--r--.  1 root    root         11 Sep  8 18:30 etc -\n /system/etc\ndrwxr-xr-x.  3 root    root       4096 Sep  8 15:49 firmware\n-rwxr-x---.  1 root       2000 1559136 Sep  8 18:11 init\n-rwxr-x---.  1 root       2000     996 Sep  8 15:49 init.environ.rc\n-rwxr-x---.  1 root       2000   26830 Sep  8 15:49 init.rc\n-rwxr-x---.  1 root       2000     141 Sep  8 15:49 init.recovery.marlin.rc\n-rwxr-x---.  1 root       2000    7623 Sep  8 15:49 init.usb.configfs.rc\n-rwxr-x---.  1 root       2000    5715 Sep  8 15:49 init.usb.rc\n-rwxr-x---.  1 root       2000     497 Sep  8 15:49 init.zygote32.rc\n-rwxr-x---.  1 root       2000     847 Sep  8 15:49 init.zygote64_32.rc\ndrwx------.  2 root    root      16384 Sep  8 18:30 lost+found\ndrwxr-xr-x.  2 root    werther    4096 Sep  8 15:49 mnt\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 oem\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 persist\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 postinstall\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 proc\ndrwxr-xr-x.  3 root    root       4096 Sep  8 15:48 res\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 root\ndrwxr-x---.  2 root       2000    4096 Sep  8 18:11 sbin\nlrw-r--r--.  1 root    root         21 Sep  8 18:30 sdcard -\n /storage/self/primary\ndrwxr-x--x.  2 root       1028    4096 Sep  8 15:49 storage\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 sys\ndrwxr-xr-x. 16 root    root       4096 Sep  8 18:30 system\n-rw-r--r--.  1 root    root       4849 Sep  8 15:49 ueventd.rc\ndrwxr-xr-x.  2 root       2000    4096 Sep  8 15:49 vendor\n-rw-r--r--.  1 root    root        524 Sep  8 15:50 verity_key\n\n\n\n\n\n\u90a3\u4e48, \u8fd9\u4e9b\u53d8\u5316\u662f\u5982\u4f55\u505a\u5230\u7684, \u5e76\u4e14, \u4e3a\u4ec0\u4e48system.img\u4e2d\u8981\u5305\u542brootfs? \u6211\u4eec\u5728\u540e\u6587\u4f1a\u63d0\u5230.\n\n\n\n\u6211\u4eec\u6765\u770b\u4e0bAndroid\u5b98\u65b9\u7f51\u7ad9\u7ed9\u51fa\u7684\u4ece\u666e\u901a\u5206\u533a\u5207\u6362\u5230A/B\u5206\u533a, \u5bf9\u4e8e\u5206\u533a\u5927\u5c0f\u7684\u5f71\u54cd.\n\n\n\n\n\n\n\n\nPixel Partitions Size\n\n\nA/B\n\n\nNon-A/B\n\n\n\n\n\n\n\n\n\n\nBootloader\n\n\n50*2\n\n\n50\n\n\n\n\n\n\nBoot\n\n\n32*2\n\n\n32\n\n\n\n\n\n\nRecovery\n\n\n0\n\n\n32\n\n\n\n\n\n\nCache\n\n\n0\n\n\n100\n\n\n\n\n\n\nRadio\n\n\n70*2\n\n\n70\n\n\n\n\n\n\nVendor\n\n\n300*2\n\n\n300\n\n\n\n\n\n\nSystem\n\n\n2048*2\n\n\n4096\n\n\n\n\n\n\nTotal\n\n\n5000\n\n\n4680\n\n\n\n\n\n\n\n\n\u4ece\u8fd9\u5f20\u8868\u4e0a,\u6211\u4eec\u770b\u5230pixel\u5206\u533a\u7684A/B\u7cfb\u7edf\u5305\u62ec bootloader, boot, radio, vendor, system.\n\n\n\u5206\u533a\u8868\u6539\u53d8\u5bf9\u7cfb\u7edf\u903b\u8f91\u7684\u5f71\u54cd\n\n\n\u8fd9\u91cc\u603b\u7ed3\u4e0b\u4ee5\u4e0a\u5206\u533a\u8868\u7684\u6539\u53d8:\n\n\n\n\n\u6ca1\u6709recovery\u5206\u533a\u548ccache\u5206\u533a.\n\n\nvendor\u5206\u533a\u63d0\u524d\u6302\u8f7d(\u4e0d\u662f\u5728fstab\u6587\u4ef6\u4e2d\u4e2d\u6302\u8f7d, \u5728 device tree\u4e2d\u6307\u5b9a)\n\n\n\u771f\u5b9e\u5206\u533a\u540d\u5b57\u5b58\u5728\n_a\n\u548c\n_b\n\u540e\u7f00.\n\n\n\n\n \u6302\u8f7d\u5206\u533a\u65b9\u5f0f\u6539\u53d8 \n\n\nearly-mounted\n\u4ee3\u7801\u89c1 \ninit_first_stage.cpp\n\n\u5728init\u7b2c\u4e00\u6b21\u542f\u52a8\u65f6, \u4f1a\u8c03\u7528\nDoFirstStageMount\n, \u548c\u4e00\u4e9b\u73af\u5883\u7684\u914d\u7f6e. \u5b8c\u6210\u540e\u518d\u6b21\u8fd0\u884cinit, \u8fdb\u5165\u7b2c\u4e8c\u9636\u6bb5\u7684\u6267\u884c. \u800c\u7b2c\u4e8c\u9636\u6bb5\u5b9e\u9645\u4e0a\u5c31\u662f\u8ddf\u4ee5\u524d\u7684Android\u5904\u7406\u65b9\u5f0f\u4e00\u6837.\n\n\n\u6302\u8f7d\u65f6\u9009\u62e9slot\u7684\u4ee3\u7801\u89c1init\u7684\nDoFirstStageMount\n\n\u5237\u673a\u65f6\u9009\u62e9slog\u7684\u4ee3\u7801\u89c1fastboot, \u4e5f\u53ef\u89c1\u4e0a\u9762\u8d34\u7684\u4ee3\u7801.\n\n\nboot\u5305\u542brecovery\u529f\u80fd\n\n\n\u9996\u5148, \u5347\u7ea7\u5207\u6362\u6210A/B\u65e0\u7f1d\u5347\u7ea7, \u5177\u4f53\u8bf4\u660e\u8bf7\u53c2\u8003recovery8\u7684\u6587\u6863.\n\u4f46\u662f, recovery\u7684\u529f\u80fd\u5e76\u4e0d\u6b62\u662f\u5347\u7ea7, \u8fd8\u5305\u62ec\u6062\u590d, \u5982\u5176\u540d\u5b57.\n\n\n\u4e3a\u4e86\u652f\u6301\u6062\u590d\u51fa\u5382\u8bbe\u7f6e\u7684\u529f\u80fd, recovery\u7684\u529f\u80fd\u88ab\u96c6\u6210\u5230\u4e86boot\u4e2d, bootloader\u5728\u8fdb\u5165recovery\u7684\u65f6\u5019, \u8fdb\u7684\u662fboot\u5206\u533a, \u4f46\u662f\u4f20\u7684\u53c2\u6570\u4e0d\u5305\u542b\nskip_initramfs\n. \n\u6b63\u5e38\u542f\u52a8\u5230android\u7cfb\u7edf\u65f6\u7684\u542f\u52a8\u53c2\u6570.\n\n\nskip_initramfs rootwait ro init=/init root=\n/dev/dm-0 dm=system none ro,0 1 android-verity \npublic-key-id\n \npath-to-system-partition\n\n\n\n\n\n\n\u8fd9\u91cc\u8bbe\u7f6e\u7684\nskip_initramfs\n, \u662f\u901a\u77e5\u5185\u6838, \u8df3\u8fc7boot\u4e2d\u7684ramdisk. \u8fd9\u4e2a\u53c2\u6570\u662fandroid\u6dfb\u52a0\u7684, \u6807\u51c6\u5185\u6838\u4e0d\u652f\u6301. \n\u7136\u540e\u6211\u4eec\u89e3\u6790\u4e0b\u5269\u4f59\u53c2\u6570, \u4e3b\u8981\u662froot\u53c2\u6570. \u8fd9\u91cc\u53ef\u4ee5\u770b\u5230, root\u6307\u5b9a\u7684\u662fsystem\u5206\u533a. \u4e5f\u5c31\u662f\u8bf4, \u6839\u5206\u533a\u5c31\u662f\u4ee5system\u5206\u533a.\n\n\n\u7136\u540e\u6211\u4eec\u770b\u4e0b\u542f\u52a8recovery\u65f6\u7684\u53c2\u6570.\n\n\nrootwait init=/init ro\n\n\n\n\n\n\u8fd9\u91cc\u56e0\u4e3a\u6ca1\u6307\u5b9a\nskip_initramfs\n, \u6240\u4ee5, \u4f1a\u76f4\u63a5\u8bfb\u53d6boot\u5206\u533a\u4e2d\u7684ramdisk.\n\n\n\u8fdb\u4e00\u6b65\u7684\u7406\u89e3\u5c31\u662f, boot.img\u5305\u542b\u7684\u662f\u4ee5\u524drecovery\u7684\u5185\u5bb9, \u529f\u80fd\u53ea\u6709\u6062\u590d\u51fa\u5382\u8bbe\u7f6e. \u800c\u539f\u6765\u7684boot\u4e0esystem\u5408\u5e76\u4e3asystem.img.\n\n\n\u7f16\u8bd1\u53c2\u6570\u6539\u53d8\n\n\nhttps://source.android.com/devices/tech/ota/ab_implement\n\n\n\u5fc5\u987b\u5b9a\u4e49\u5b58\u6863\u53c2\u6570\u5982\u4e0b:\n\n\n    AB_OTA_UPDATER := true\n    AB_OTA_PARTITIONS := \\\n      boot \\\n      system \\\n      vendor\n    *and other partitions updated through update_engine (radio, bootloader, etc.)*\n    BOARD_BUILD_SYSTEM_ROOT_IMAGE := true\n    TARGET_NO_RECOVERY := true\n    BOARD_USES_RECOVERY_AS_BOOT := true\n    PRODUCT_PACKAGES += \\\n      update_engine \\\n      update_verifier\n\n*For an example, refer to /device/google/marlin/+/android-7.1.0_r1/device-common.mk. You can optionally conduct the post-install (but pre-reboot) dex2oat step described in Compiling. *\n\n\n\n\n\n\u5fc5\u987b\u4e0d\u5b9a\u4e49\u7684\u53c2\u6570\u5982\u4e0b:\n\n\n    BOARD_RECOVERYIMAGE_PARTITION_SIZE\n    BOARD_CACHEIMAGE_PARTITION_SIZE\n    BOARD_CACHEIMAGE_FILE_SYSTEM_TYPE", 
            "title": "Android8\u5206\u533a\u8868\u5206\u6790"
        }, 
        {
            "location": "/2017-09-19-android8-partiton-table/#_1", 
            "text": "\u5728Android8.0\u4e4b\u540e, \u5c31\u5b58\u5728\u4e24\u5957\u5206\u533a\u8868, \u5206\u522b\u5bf9\u5e94\u7684\u662fA/B\u7cfb\u7edf\u548c\u975eA/B\u7cfb\u7edf.   \u975eA/B\u7cfb\u7edf\u7684\u5206\u533a\u8868\u4e0e\u4e4b\u524d\u5206\u533a\u8868\u4e00\u6837, \u6ca1\u6709\u53d8\u5316.  A/B\u7cfb\u7edf\u7684\u5206\u533a\u8868, \u662f\u672c\u6587\u7684\u4e3b\u8981\u63cf\u8ff0\u70b9.   \u6240\u8c13\u7684A/B\u7cfb\u7edf, \u662f\u6307\u8bbe\u5907\u4e0a\u5b58\u5728\u4e24\u5957\u7cfb\u7edf, \u5176\u5206\u533a\u540d\u4e5f\u662f\u5b58\u5728 _a  \u548c  _b  \u7684\u533a\u522b.\u4e24\u5957\u7cfb\u7edf\u4e2d, \u53ea\u6709\u4e00\u5957\u4e3aactive, \u8fd0\u884c\u72b6\u6001, \u800c\u5347\u7ea7\u5219\u6267\u884c\u5728\u53e6\u4e00\u5957\u7cfb\u7edf\u7684\u5206\u533a\u4e2d. \u4ece\u800c\u8fbe\u5230, \u4e0d\u7ba1\u5347\u7ea7\u6210\u529f\u4e0e\u5426, \u603b\u6709\u4e00\u5957\u7cfb\u7edf\u4fdd\u8bc1\u80fd\u4f7f\u7528.  \u800c\u5237\u673a, \u5305\u62ec\u6302\u65f6\u7684\u5206\u533a\u8868\u4e2d, \u90fd\u4e0d\u4f1a\u6dfb\u52a0\u540e\u7f00( _a \u6216 _b ). \u53ea\u6709\u5728fastboot\u5237\u673a\u65f6, \u6216\u8005\u5728init\u6302\u8f7d\u65f6, \u627e\u5230active\u7684slot, \u5728\u6307\u5b9a\u5206\u533a\u540d\u5b57\u540e\u9762\u6dfb\u52a0\u540e\u7f00\u5e76\u6302\u8f7d. \u6240\u4ee5, \u5355\u7eaf\u4ece\u6e90\u7801\u6216\u8005\u5237\u673a\u5305\u662f\u65e0\u6cd5\u6307\u5b9a\u54ea\u4e9b\u5206\u533a\u88ab\u6307\u5b9a\u4e3aA/B\u4e86.  \nA/B\u7cfb\u7edf\u5e26\u6765\u7684\u597d\u5904\u662f:   \u65e0\u7f1d\u5347\u7ea7, \u4e0d\u9700\u8981\u518d\u8fdb\u5165recovery\u8fdb\u884c\u5347\u7ea7.  \u53cc\u7cfb\u7edf\u5907\u4efd, \u4e0d\u7ba1\u662f\u7cfb\u7edf\u5347\u7ea7\u5931\u8d25, \u8fd8\u662f\u88ab\u7834\u574f, \u90fd\u53ef\u4ee5\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u7cfb\u7edf, \u786e\u4fdd\u7528\u6237\u8bbe\u5907\u7684\u6b63\u5e38\u4f7f\u7528.", 
            "title": "\u5dee\u5f02\u7b80\u8ff0 "
        }, 
        {
            "location": "/2017-09-19-android8-partiton-table/#_2", 
            "text": "\u4e0b\u9762\u4e3b\u8981\u9488\u5bf9pixel\u8bbe\u5907\u8fdb\u884c\u5206\u6790, \u4e5f\u5c31\u662fAndroid8\u7684\u6e90\u7801\u4e2dmarlin\u8bbe\u5907.", 
            "title": "\u5206\u533a\u8868\u4e0e\u5176\u5185\u5bb9"
        }, 
        {
            "location": "/2017-09-19-android8-partiton-table/#_3", 
            "text": "\u9996\u5148\u6211\u4eec\u770b\u4e0bandroid\u5b98\u7f51\u63d0\u4f9b\u7684marlin\u8bbe\u5907\u5237\u673a\u6587\u4ef6. \u4e0b\u9762\u662f\u57fa\u5e26\u548cbootloader\u7684\u5237\u673a\u6587\u4ef6.   \nzip\u5305\u4e2d\u7684\u6587\u4ef6\u5982\u4e0b.   \u5982\u679c\u5355\u7eaf\u6309\u7167\u4e4b\u524d\u5bf9\u8be5zip\u5305\u6587\u4ef6\u7684\u7406\u89e3, \u6587\u4ef6\u540d\u5b57\u5c31\u662f\u5bf9\u5e94\u7684\u5206\u533a\u540d. \u7136\u800c\u5728A/B\u7cfb\u7edf\u4e2d, \u5374\u5e76\u4e0d\u662f\u5982\u6b64. \u800c\u662f\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219\u67e5\u627eA/B\u5206\u533a.  \u9996\u5148, \u6700\u5148\u6ce8\u610f\u5230\u7684\u662f\u4e24\u4e2asystem\u5927\u5c0f\u4e0d\u4e00\u81f4, \u4f46\u662f\u8fd9\u4e2a\u5c55\u5f00\u6765\u8bb2\u6709\u70b9\u591a, \u6211\u4eec\u5148\u628aA/B\u7cfb\u7edf\u5237\u673a\u7684\u7b2c\u4e00\u4e2a\u89c4\u5219\u4ecb\u7ecd\u4ee5\u4e0b, \u4ee3\u7801\u5728\u540e\u6587\u4ecb\u7ecd\u7b2c\u4e8c\u4e2a\u89c4\u5219\u65f6\u53ef\u4ee5\u540c\u65f6\u770b\u5230.  A/B\u7cfb\u7edffastboot\u5237\u673a\u65f6, \u5982\u679c\u6ca1\u6709\u6307\u5b9aslot, \u5219\u9ed8\u8ba4\u5237\u5165\u7684\u662factive\u7684slot, \u6bd4\u5982\u5982\u679cbootloader\u6807\u8bb0\u4e3aslot A \u4e3aactive, \u5219\u6240\u6709\u5206\u533a\u9ed8\u8ba4\u5237\u5165slot A, \u4e5f\u5c31\u662f\u8bf4 boot_a ,  system_a  \u7b49. \u4f46\u662f, \u5982\u679cbootloader\u53cd\u9988\u67d0\u4e2a\u5206\u533a\u6ca1\u6709\u533a\u5206A/B, \u5219\u9ed8\u8ba4\u76f4\u63a5\u5237\u5165\u8be5\u5206\u533a. \u6bd4\u5982 vendor \u65e0\u533a\u5206A/B, \u5219\u76f4\u63a5\u5237\u5165vendor.  \u7136\u540e, \u6211\u4eec\u5173\u6ce8\u4e0b system.img \u548c system_other.img , \u5982\u679c\u5355\u7eaf\u7406\u89e3\u4e3a\u8fd9\u4e24\u4e2aimage\u5206\u522b\u5237\u5165A/B\u5206\u533a, \u5219\u5927\u5c0f\u4e5f\u5b8c\u5168\u5bf9\u5e94\u4e0d\u4e0a. \u5927\u5c0f\u95ee\u9898, \u6211\u4eec\u7a0d\u540e\u518d\u770b, \u5148\u7814\u7a76\u4e0b system_other.img \u5237\u5165\u54ea\u4e2a\u5206\u533a.  static struct {\n    char img_name[17];\n    char sig_name[17];\n    char part_name[9];\n    bool is_optional;\n    bool is_secondary;\n} images[] = {\n    { boot.img ,  boot.sig ,  boot , false, false},\n    { boot_other.img ,  boot.sig ,  boot , true, true},\n    { recovery.img ,  recovery.sig ,  recovery , true, false},\n    { system.img ,  system.sig ,  system , false, false},\n    { system_other.img ,  system.sig ,  system , true, true},\n    { vendor.img ,  vendor.sig ,  vendor , true, false},\n    { vendor_other.img ,  vendor.sig ,  vendor , true, true},\n};  \u5176\u4e2d  is_secondary  \u5982\u679c\u4e3atrue, \u5219\u610f\u5473\u7740\u8f93\u5165\u975eactive slot.       if   (! skip_secondary )   {           //   \u9ed8\u8ba4   false \n         if   (slot_override   !=   )   {    //   \u5237\u673a\u65f6   \u4e3a   \n             secondary   =   get_other_slot(transport,   slot_override) ; \n         }   else   { \n             secondary   =   get_other_slot(transport) ;   //   \u83b7\u53d6\u975eactive   slot \n         } \n         if   ( secondary   ==   )   { \n             if   (supports_AB(transport))   { \n                 fprintf(stderr,   Warning :   Could   not   determine   slot   for   secondary   images .   Ignoring . \\ n );              }              skip_secondary = true;          }      }      for (size_t i = 0; i   arraysize(images); ++i) {          const char* slot = slot_override.c_str();          if (images [ i ] .is_secondary) {              if (!skip_secondary) {                  slot = secondary.c_str(); //\u6307\u5b9a\u4e3a\u975eactive slot              } else {                  continue;              }          }          int fd = unzip_to_file(zip, images [ i ] .img_name);          if (fd == -1) {              if (images [ i ] .is_optional) {                  continue;              }              CloseArchive(zip);              exit(1); // unzip_to_file already explained why.          }          fastboot_buffer buf;          if (!load_buf_fd(transport, fd,  buf)) {              die( cannot   load   % s   from   flash :   % s ,   images [ i ] . img_name ,   strerror ( errno )); \n         } \n\n         auto   update   =   [ ] ( const   std :: string   partition )   { \n             do_update_signature(zip,   images [ i ] .sig_name) ; \n             if   (erase_first     needs_erase(transport,   partition.c_str()))   { \n                 fb_queue_erase(partition.c_str()) ; \n             } \n             flash_buf ( partition . c_str (),   buf ); \n             /* not closing the fd here since the sparse code keeps the fd around               * but hasn t mmaped data yet. The tmpfile will get cleaned up when the               * program exits.               */ \n         } ; \n         do_for_partitions ( transport ,   images [ i ] . part_name ,   slot ,   update ,   false ); \n     }   \u6240\u4ee5,  system_other.img  \u4f1a\u5237\u5165\u975eactive slot, \u5982\u679cactive\u4e3aa. \u5219\u5237\u5165 system_b .   \u5728\u786e\u5b9a system_other.img \u4f1a\u5237\u5165\u53e6\u4e00\u4e2aslot\u540e, \u6309\u7167\u7b2c\u4e00\u4e2a\u89c4\u5219(\u53ea\u5237active\u7684slot), \u5219\u53ef\u4ee5\u57fa\u672c\u731c\u6d4b,  system_other.img \u4e2d\u7684\u5185\u5bb9\u4e0d\u662f\u7528\u4e8e\u542f\u52a8\u7cfb\u7edf\u7684, \u6216\u8005\u4e0d\u662f\u5b8c\u6574\u7cfb\u7edf.   \u5bf9\u6bd4, \u5176\u5185\u5bb9\u5dee\u5f02,  system_other.img  \u4e2d, \u53ea\u6709 app \u548c  priv-app \u76ee\u5f55. system_other.img \u7684\u76ee\u5f55\u4e2d\u53ea\u5b58\u5728odex\u548cvdex\u6587\u4ef6, \u4e5f\u5c31\u662fapp\u4f18\u5316\u8fc7\u7684\u6587\u4ef6, \u5e76\u4e14\u989d\u5916\u591a\u4e00\u4e2a\u6587\u4ef6 system-other-odex-marker . \u8fd9\u4e2a\u6587\u4ef6\u662f\u4e2a\u7ebf\u7d22, \u6240\u4ee5, \u521d\u6b65\u53ef\u4ee5\u5224\u65ad, \u7cfb\u7edf\u542f\u52a8\u540e\u4e00\u5b9a\u4f1a\u4ece system_b \u5c06\u8fd9\u4e9b\u6570\u636e\u590d\u5236\u5230/data/\u4e0b.  \u4e0b\u9762\u6211\u4eec\u770b\u4e0b\u8fd9\u4e2a\u6587\u4ef6\u7684\u4f5c\u7528\u548c\u5982\u4f55copy.  on property:sys.cppreopt=requested   property:ro.boot.slot_suffix=_a\n    mount ext4 /dev/block/bootdevice/by-name/system_b /postinstall ro nosuid nodev noexec\n    exec - root -- /system/bin/cppreopts.sh /postinstall\n    # Optional script to copy additional preloaded content to data directory\n    exec - system system -- /system/bin/preloads_copy.sh /postinstall\n    umount /postinstall\n    setprop sys.cppreopt finished\n\non property:sys.cppreopt=requested   property:ro.boot.slot_suffix=_b\n    mount ext4 /dev/block/bootdevice/by-name/system_a /postinstall ro nosuid nodev noexec\n    exec - root -- /system/bin/cppreopts.sh /postinstall\n    # Optional script to copy additional preloaded content to data directory\n    exec - system system -- /system/bin/preloads_copy.sh /postinstall\n    umount /postinstall\n    setprop sys.cppreopt finished  \u5728\u542f\u52a8\u4e3a\u4efb\u4f55\u4e4b\u4e00\u65f6, \u4f1a\u4ece\u53e6\u4e00\u4e2aslot\u6302\u8f7d\u5230/postinstall, \u7136\u540e\u4f7f\u7528cppreopts.sh, \u5c06odexvdex\u6587\u4ef6\u62f7\u8d1d\u5230 /data/\ndalvik-cache/ isa / xiam, isa\u662f\u786c\u4ef6\u67b6\u6784(arm64/arm32).\n\u800c  preloads_copy.sh  \u4f1a\u5c06 system_other \u4e2d\u7684preloads\u6587\u4ef6\u62f7\u8d1d\u5230/data/preloads/ \u76ee\u5f55\u4e0b.  \u57fa\u4e8e\u4ee5\u4e0asystem\u7684\u673a\u5236, \u5728\u5237\u673a\u65f6, \u5b9e\u9645\u53ea\u5237\u5165\u4e00\u5957\u7cfb\u7edf\u5230active slot\u4e2d, \u7136\u540e\u4ece\u53e6\u4e00\u5957\u7cfb\u7edf\u4e2d\u7684system\u5206\u533a\u5c06\u4f18\u5316\u540e\u7684dex\u5305\u62f7\u8d1d\u5230data\u5206\u533a\u4e0b,. \u4e0e\u4e4b\u524d\u7684\u5dee\u5f02\u662f, \u8fde\u5e94\u7528\u7684\u7f16\u8bd1\u548c\u4f18\u5316\u90fd\u5728host\u7aef\u5b8c\u6210, android8\u7684\u542f\u52a8\u901f\u5ea6\u5c06\u975e\u5e38\u5feb.", 
            "title": "\u5237\u673a\u6587\u4ef6\u548c\u5237\u673a\u65b9\u5f0f "
        }, 
        {
            "location": "/2017-09-19-android8-partiton-table/#_4", 
            "text": "\u4ecerecovery\u7684fstab\u4e2d,\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7684\u5206\u533a\u8868\u5982\u4e0b:  /dev/block/platform/soc/624000.ufshc/by-name/system_a\n/dev/block/platform/soc/624000.ufshc/by-name/system_b\n/dev/block/platform/soc/624000.ufshc/by-name/vendor_a\n/dev/block/platform/soc/624000.ufshc/by-name/vendor_b\n/dev/block/platform/soc/624000.ufshc/by-name/userdata\n/dev/block/platform/soc/624000.ufshc/by-name/boot_a\n/dev/block/platform/soc/624000.ufshc/by-name/boot_b  \u4f46\u4ee5\u4e0a\u5206\u533a\u8868\u5728\u4e3b\u7cfb\u7edf\u4e2d\u65e0\u6cd5\u770b\u5230, \u6216\u8005\u8bf4\u4e3b\u7cfb\u7edf\u4e2d\u53ea\u6709\u5728vendor\u4e0b\u5b58\u5728fstab, \u5176\u4ed6\u5730\u65b9\u5e76\u6ca1\u6709, \u800cvendor\u4e0b\u7684fstab\u5185\u5bb9\u5982\u4e0b, \u662f\u7531vendor\u5e95\u4e0b\u7684init.{device}.rc \u6302\u8f7d.  /dev/block/platform/soc/624000.ufshc/by-name/system     /                   ext4    ro,barrier=1                wait,slotselect,verify\n/dev/block/platform/soc/624000.ufshc/by-name/modem      /firmware/radio     vfat    ro,shortname=lower,uid=1000,gid=0,dmask=227,fmask=337,context=u:object_r:firmware_file:s0   wait,slotselect\n/dev/block/platform/soc/624000.ufshc/by-name/userdata   /data               ext4    noatime,nosuid,nodev,barrier=1,noauto_da_alloc  latemount,wait,check,formattable,fileencryption=ice,quota\n/dev/block/zram0                                        none                swap    defaults                    zramsize=536870912,max_comp_streams=4\n/dev/block/platform/soc/624000.ufshc/by-name/misc       /misc               emmc    defaults                    defaults\n/devices/*/xhci-hcd.0.auto/usb*                         auto                vfat    defaults                    voldmanaged=usb:auto  \u521d\u6b65\u5224\u65ad, \u5176\u6709\u7528\u7684\u5185\u5bb9\u662f\u7ed9vold\u7684\u6302\u8f7d\u4fe1\u606f\u548c\u57fa\u5e26\u5206\u533a. \u4f46\u4e0d\u7ba1\u600e\u4e48\u770b\u81f3\u5c11\u7f3a\u5c11\u4e86vendor\u6302\u8f7d\u7684\u4fe1\u606f. \u800c\u4e14fstab\u5728vendor\u5206\u533a\u4e0b, \u5219\u610f\u5473\u7740vendor\u7684\u6302\u8f7d\u5c06\u63d0\u524d\u5230\u548cboot\u540c\u4e2a\u7ea7\u522b. \u6ca1\u9519, \u65b0\u5f15\u5165\u4e86\u4e00\u4e2a early-mounted , \u800c\u5206\u533a\u8868\u662f\u5728 device tree \u4e2d, \u4e5f\u5c31\u662f\u542f\u52a8\u540e, \u5728  /proc/device-tree/firmware/android/fstab/vendor . \n\u4e0a\u6587\u7684fstab\u8fd8\u7ed9\u6211\u4eec\u4e00\u4e2a\u4fe1\u606f, \u6807\u5fd7\u4f4d slotselect , \u610f\u5473\u8fd9system\u5206\u533a\u662f\u5206A/B\u7cfb\u7edf\u7684\u5e76\u4e14\u7531init\u6839\u636eactive\u7684slot\u9009\u62e9\u5bf9\u5e94\u7684\u771f\u5b9e\u5206\u533a\u8def\u5f84(\u540e\u7f00'_a'\u6216'_b')\u8fdb\u884c\u6302\u8f7d.  \u6211\u4eec\u5728\u770b\u4e00\u773csystem\u5206\u533a, \u5176\u6302\u8f7d\u70b9\u662f / .  \u6ca1\u9519, \u5728Android8\u4e4b\u540e, system\u5206\u533a\u7684\u786e\u662f\u88ab\u6302\u8f7d\u5230 /, \u4e5f\u5c31\u662f\u8bf4, system\u5206\u533a\u5305\u542b\u4e86rootfs, \u5176\u5185\u5bb9\u5982\u4e0b.  total 1724\ndrwxr-xr-x. 21 root    root       4096 Sep  8 18:30 .\ndrwxrwxrwx  25 werther werther   32768 Sep 19 13:15 ..\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 acct\ndrwxrwx--x.  2 werther werther    4096 Sep  8 15:49 bt_firmware\nlrw-r--r--.  1 root    root         50 Sep  8 18:30 bugreports -  /data/user_de/0/com.android.shell/files/bugreports\nlrw-r--r--.  1 root    root         11 Sep  8 18:30 cache -  /data/cache\nlrw-r--r--.  1 root    root         13 Sep  8 18:30 charger -  /sbin/charger\ndr-x------.  2 root    root       4096 Sep  8 15:49 config\nlrw-r--r--.  1 root    root         17 Sep  8 18:30 d -  /sys/kernel/debug\ndrwxrwx--x.  2 werther werther    4096 Sep  8 15:49 data\nlrw-------.  1 root    root         23 Sep  8 18:30 default.prop -  system/etc/prop.default\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 dev\nlrw-r--r--.  1 root    root         15 Sep  8 18:30 dsp -  /vendor/lib/dsp\nlrw-r--r--.  1 root    root         11 Sep  8 18:30 etc -  /system/etc\ndrwxr-xr-x.  3 root    root       4096 Sep  8 15:49 firmware\n-rwxr-x---.  1 root       2000 1559136 Sep  8 18:11 init\n-rwxr-x---.  1 root       2000     996 Sep  8 15:49 init.environ.rc\n-rwxr-x---.  1 root       2000   26830 Sep  8 15:49 init.rc\n-rwxr-x---.  1 root       2000     141 Sep  8 15:49 init.recovery.marlin.rc\n-rwxr-x---.  1 root       2000    7623 Sep  8 15:49 init.usb.configfs.rc\n-rwxr-x---.  1 root       2000    5715 Sep  8 15:49 init.usb.rc\n-rwxr-x---.  1 root       2000     497 Sep  8 15:49 init.zygote32.rc\n-rwxr-x---.  1 root       2000     847 Sep  8 15:49 init.zygote64_32.rc\ndrwx------.  2 root    root      16384 Sep  8 18:30 lost+found\ndrwxr-xr-x.  2 root    werther    4096 Sep  8 15:49 mnt\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 oem\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 persist\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 postinstall\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 proc\ndrwxr-xr-x.  3 root    root       4096 Sep  8 15:48 res\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 root\ndrwxr-x---.  2 root       2000    4096 Sep  8 18:11 sbin\nlrw-r--r--.  1 root    root         21 Sep  8 18:30 sdcard -  /storage/self/primary\ndrwxr-x--x.  2 root       1028    4096 Sep  8 15:49 storage\ndrwxr-xr-x.  2 root    root       4096 Sep  8 15:49 sys\ndrwxr-xr-x. 16 root    root       4096 Sep  8 18:30 system\n-rw-r--r--.  1 root    root       4849 Sep  8 15:49 ueventd.rc\ndrwxr-xr-x.  2 root       2000    4096 Sep  8 15:49 vendor\n-rw-r--r--.  1 root    root        524 Sep  8 15:50 verity_key  \u90a3\u4e48, \u8fd9\u4e9b\u53d8\u5316\u662f\u5982\u4f55\u505a\u5230\u7684, \u5e76\u4e14, \u4e3a\u4ec0\u4e48system.img\u4e2d\u8981\u5305\u542brootfs? \u6211\u4eec\u5728\u540e\u6587\u4f1a\u63d0\u5230.  \n\u6211\u4eec\u6765\u770b\u4e0bAndroid\u5b98\u65b9\u7f51\u7ad9\u7ed9\u51fa\u7684\u4ece\u666e\u901a\u5206\u533a\u5207\u6362\u5230A/B\u5206\u533a, \u5bf9\u4e8e\u5206\u533a\u5927\u5c0f\u7684\u5f71\u54cd.     Pixel Partitions Size  A/B  Non-A/B      Bootloader  50*2  50    Boot  32*2  32    Recovery  0  32    Cache  0  100    Radio  70*2  70    Vendor  300*2  300    System  2048*2  4096    Total  5000  4680     \u4ece\u8fd9\u5f20\u8868\u4e0a,\u6211\u4eec\u770b\u5230pixel\u5206\u533a\u7684A/B\u7cfb\u7edf\u5305\u62ec bootloader, boot, radio, vendor, system.", 
            "title": "\u6e90\u7801\u548c\u5206\u533a\u5927\u5c0f "
        }, 
        {
            "location": "/2017-09-19-android8-partiton-table/#_5", 
            "text": "\u8fd9\u91cc\u603b\u7ed3\u4e0b\u4ee5\u4e0a\u5206\u533a\u8868\u7684\u6539\u53d8:   \u6ca1\u6709recovery\u5206\u533a\u548ccache\u5206\u533a.  vendor\u5206\u533a\u63d0\u524d\u6302\u8f7d(\u4e0d\u662f\u5728fstab\u6587\u4ef6\u4e2d\u4e2d\u6302\u8f7d, \u5728 device tree\u4e2d\u6307\u5b9a)  \u771f\u5b9e\u5206\u533a\u540d\u5b57\u5b58\u5728 _a \u548c _b \u540e\u7f00.", 
            "title": "\u5206\u533a\u8868\u6539\u53d8\u5bf9\u7cfb\u7edf\u903b\u8f91\u7684\u5f71\u54cd"
        }, 
        {
            "location": "/2017-09-19-android8-partiton-table/#_6", 
            "text": "early-mounted \u4ee3\u7801\u89c1  init_first_stage.cpp \n\u5728init\u7b2c\u4e00\u6b21\u542f\u52a8\u65f6, \u4f1a\u8c03\u7528 DoFirstStageMount , \u548c\u4e00\u4e9b\u73af\u5883\u7684\u914d\u7f6e. \u5b8c\u6210\u540e\u518d\u6b21\u8fd0\u884cinit, \u8fdb\u5165\u7b2c\u4e8c\u9636\u6bb5\u7684\u6267\u884c. \u800c\u7b2c\u4e8c\u9636\u6bb5\u5b9e\u9645\u4e0a\u5c31\u662f\u8ddf\u4ee5\u524d\u7684Android\u5904\u7406\u65b9\u5f0f\u4e00\u6837.  \u6302\u8f7d\u65f6\u9009\u62e9slot\u7684\u4ee3\u7801\u89c1init\u7684 DoFirstStageMount \n\u5237\u673a\u65f6\u9009\u62e9slog\u7684\u4ee3\u7801\u89c1fastboot, \u4e5f\u53ef\u89c1\u4e0a\u9762\u8d34\u7684\u4ee3\u7801.", 
            "title": " \u6302\u8f7d\u5206\u533a\u65b9\u5f0f\u6539\u53d8 "
        }, 
        {
            "location": "/2017-09-19-android8-partiton-table/#bootrecovery", 
            "text": "\u9996\u5148, \u5347\u7ea7\u5207\u6362\u6210A/B\u65e0\u7f1d\u5347\u7ea7, \u5177\u4f53\u8bf4\u660e\u8bf7\u53c2\u8003recovery8\u7684\u6587\u6863.\n\u4f46\u662f, recovery\u7684\u529f\u80fd\u5e76\u4e0d\u6b62\u662f\u5347\u7ea7, \u8fd8\u5305\u62ec\u6062\u590d, \u5982\u5176\u540d\u5b57.  \u4e3a\u4e86\u652f\u6301\u6062\u590d\u51fa\u5382\u8bbe\u7f6e\u7684\u529f\u80fd, recovery\u7684\u529f\u80fd\u88ab\u96c6\u6210\u5230\u4e86boot\u4e2d, bootloader\u5728\u8fdb\u5165recovery\u7684\u65f6\u5019, \u8fdb\u7684\u662fboot\u5206\u533a, \u4f46\u662f\u4f20\u7684\u53c2\u6570\u4e0d\u5305\u542b skip_initramfs . \n\u6b63\u5e38\u542f\u52a8\u5230android\u7cfb\u7edf\u65f6\u7684\u542f\u52a8\u53c2\u6570.  skip_initramfs rootwait ro init=/init root= /dev/dm-0 dm=system none ro,0 1 android-verity  public-key-id   path-to-system-partition   \u8fd9\u91cc\u8bbe\u7f6e\u7684 skip_initramfs , \u662f\u901a\u77e5\u5185\u6838, \u8df3\u8fc7boot\u4e2d\u7684ramdisk. \u8fd9\u4e2a\u53c2\u6570\u662fandroid\u6dfb\u52a0\u7684, \u6807\u51c6\u5185\u6838\u4e0d\u652f\u6301. \n\u7136\u540e\u6211\u4eec\u89e3\u6790\u4e0b\u5269\u4f59\u53c2\u6570, \u4e3b\u8981\u662froot\u53c2\u6570. \u8fd9\u91cc\u53ef\u4ee5\u770b\u5230, root\u6307\u5b9a\u7684\u662fsystem\u5206\u533a. \u4e5f\u5c31\u662f\u8bf4, \u6839\u5206\u533a\u5c31\u662f\u4ee5system\u5206\u533a. \n\u7136\u540e\u6211\u4eec\u770b\u4e0b\u542f\u52a8recovery\u65f6\u7684\u53c2\u6570.  rootwait init=/init ro  \u8fd9\u91cc\u56e0\u4e3a\u6ca1\u6307\u5b9a skip_initramfs , \u6240\u4ee5, \u4f1a\u76f4\u63a5\u8bfb\u53d6boot\u5206\u533a\u4e2d\u7684ramdisk.  \u8fdb\u4e00\u6b65\u7684\u7406\u89e3\u5c31\u662f, boot.img\u5305\u542b\u7684\u662f\u4ee5\u524drecovery\u7684\u5185\u5bb9, \u529f\u80fd\u53ea\u6709\u6062\u590d\u51fa\u5382\u8bbe\u7f6e. \u800c\u539f\u6765\u7684boot\u4e0esystem\u5408\u5e76\u4e3asystem.img.", 
            "title": "boot\u5305\u542brecovery\u529f\u80fd"
        }, 
        {
            "location": "/2017-09-19-android8-partiton-table/#_7", 
            "text": "https://source.android.com/devices/tech/ota/ab_implement  \u5fc5\u987b\u5b9a\u4e49\u5b58\u6863\u53c2\u6570\u5982\u4e0b:      AB_OTA_UPDATER := true\n    AB_OTA_PARTITIONS := \\\n      boot \\\n      system \\\n      vendor\n    *and other partitions updated through update_engine (radio, bootloader, etc.)*\n    BOARD_BUILD_SYSTEM_ROOT_IMAGE := true\n    TARGET_NO_RECOVERY := true\n    BOARD_USES_RECOVERY_AS_BOOT := true\n    PRODUCT_PACKAGES += \\\n      update_engine \\\n      update_verifier\n\n*For an example, refer to /device/google/marlin/+/android-7.1.0_r1/device-common.mk. You can optionally conduct the post-install (but pre-reboot) dex2oat step described in Compiling. *  \u5fc5\u987b\u4e0d\u5b9a\u4e49\u7684\u53c2\u6570\u5982\u4e0b:      BOARD_RECOVERYIMAGE_PARTITION_SIZE\n    BOARD_CACHEIMAGE_PARTITION_SIZE\n    BOARD_CACHEIMAGE_FILE_SYSTEM_TYPE", 
            "title": "\u7f16\u8bd1\u53c2\u6570\u6539\u53d8"
        }, 
        {
            "location": "/2017-08-22-zram/", 
            "text": "\u6765\u6e90: https://pengzhangdev.github.io/zram/\n\n\n\u7b80\u4ecb\n\n\n\u5728linux\u5185\u6838\u7684mm\u5b50\u7cfb\u7edf\u4e2d, \u5305\u542b\u4e09\u4e2a\u652f\u6301\u5185\u5b58\u538b\u7f29\u7684\u7ec4\u4ef6, \u5206\u522b\u662fzram, zcache \u548c zswap.\n\n\n\nzswap\n: \u524d\u63d0\u6761\u4ef6\u662f, \u7cfb\u7edf\u4e2d\u5b58\u5728swap\u8bbe\u5907, \u5185\u6838\u7248\u672c\n3.5, \u56e0\u4e3a\u4f9d\u8d56\u4e86frontswap\u7684\u63a5\u53e3, \u7528\u4e8e\u7ba1\u7406swap page.\nzswap\u662f\u4e00\u4e2a\u8f7b\u91cf\u5316\u7684\u540e\u7aef\u67b6\u6784, \u5c06\u8fdb\u7a0b\u5404\u79cd\u4ea4\u6362\u51fa\u7684\u9875\u9762\u8fdb\u884c\u538b\u7f29, \u5e76\u5b58\u50a8\u5728\u4e00\u4e2a\u57fa\u4e8eRAM\u7684\u5185\u7f13\u51b2\u6c60\u4e2d. \u7f13\u51b2\u6c60\u4e0d\u9884\u5206\u914d, \u6709\u6700\u5927\u503c, \u4e14\u5f53\u7f13\u51b2\u6c60\u6ee1\u4e86, LRU\u7684\u5185\u5b58\u9875\u4f1a\u88ab\u5199\u5165swap\u8bbe\u5907. \u4f9d\u8d56swap\u5206\u533a, \u4e0d\u9002\u7528hdtv.\n\n\n\nzcache\n: \u4e0ezswap\u7c7b\u4f3c, \u4f9d\u8d56frontswap\u63a5\u53e3\u548ccleacache\u63a5\u53e3, \u5185\u6838\u7248\u672c\n3.5. \u4e0ezswap\u4e00\u6837, \u5c06\u8fdb\u7a0b\u4ea4\u6362\u51fa\u7684\u9875\u9762\u548c\u6587\u4ef6\u7cfb\u7edf\u7684\u7f13\u51b2\u8fdb\u884c\u538b\u7f29\u5e76\u5b58\u50a8\u5728RAM\u7684\u5185\u5b58\u7f13\u51b2\u6c60\u4e2d, \u5728\u7f13\u51b2\u6c60\u6ee1\u540e, \u5c06\u9875\u9762\u5b58\u5165swap\u5206\u533a\u6216\u8005 RAMster (\u4e00\u79cd\u57fa\u4e8e\u7f51\u7edc\u7684\u5185\u5b58\u6c60\u5171\u4eab\u6280\u672f, \u53ef\u4ee5\u5171\u4eab\u7f51\u7edc\u4e2d\u5176\u4f59\u786c\u4ef6\u7684\u5185\u5b58). zswap\u53ef\u4ee5\u7406\u89e3\u4e3a\u662fzcache\u7684\u5b50\u96c6. \u4e0d\u9002\u7528hdtv.\n\n\n\nzram\n: \u5185\u5b58\u4e2d\u7684swap\u8bbe\u5907, \u5185\u6838\n3.14, \u53ef\u4ee5\u7406\u89e3\u4e3azcache\u7684RAM\u7f13\u51b2\u6c60. \u4f18\u5148\u7ea7\u6700\u9ad8, \u4e0d\u5efa\u8bae\u4e0e\u5176\u4ed6swap\u4e00\u8d77\u4f7f\u7528.\u4e0d\u4f9d\u8d56\u771f\u5b9e\u7684swap\u8bbe\u5907(Nand\u6216\u8005\u7f51\u7edc), \u503e\u5411\u4e8e\u5728\u4f4e\u5185\u5b58\u7684\u5d4c\u5165\u5f0f\u8bbe\u5907\u4e2d\u4f7f\u7528.\n\n\n\n\u7efc\u4e0a, zram\u66f4\u9002\u5408hdtv\u8fd9\u4e2a\u9879\u76ee\n\n\n zram \n\n\nzram\u662f\u5c06\u7cfb\u7edf\u4e2d\u7684\u5185\u5b58\u7684\u4e00\u90e8\u5206\u5185\u5b58\u9694\u79bb\u6210zram\u8bbe\u5907(swap\u8bbe\u5907),\u5bf9\u4e8e\u5c0f\u5185\u5b58\u7684\u8bbe\u5907, \u5728\u4f7f\u7528\u4e0a\u4f1a\u611f\u5185\u5b58\u88ab\u6269\u5927\u4e86.\n\n\nlinux\u5185\u6838\u4e2d\u4e3azram\u63d0\u4f9b\u4e86\u5404\u79cd\u538b\u7f29\u7b97\u6cd5, \u9ed8\u8ba4\u7684\u662fLZO, \u8be5\u7b97\u6cd5\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u90fd\u80fd\u5f88\u597d\u5730\u5e73\u8861\u538b\u7f29\u7387\u548c\u901f\u5ea6. LZO\u4e3b\u8981\u662f\u5728\u901f\u5ea6\u4e0a\u4f18\u5316.\u5728\u4e00\u4e9b\u6bd4\u8f83\u6b63\u5f0f\u7684\u6587\u6863\u4e0a, LZO\u7684\u538b\u7f29\u7387\u5e73\u5747\u4e3a50%. \u4e0b\u9762\u662f\u9488\u5bf9\u5185\u6838\u6e90\u7801(50.6M)\u538b\u7f29\u7684\u4e00\u4e2a\u56fe\u8868, \u7f51\u4e0a\u63d0\u4f9b\u7684.\n\n\nlzop\n:\n \n1.62\n \nseconds\n \nto\n \ncompress\n,\n \n18.0\n \nMB\n,\n \nratio\n=.\n355\n\n\ngzip\n:\n \n19.13\n \nseconds\n,\n \n10.8\n \nMB\n,\n \nratio\n=.\n213\n\n\nbzip2\n:\n \n60.81\n \nseconds\n,\n \n8.46\n \nMB\n,\n \nratio\n=.\n176\n\n\nxz\n:\n \n311.65\n \nseconds\n,\n \n7.33\n \nMB\n,\n \nratio\n=.\n145\n\n\n\n\n\n\n\n\n\u538b\u7f29\u7387\u8ba1\u7b97:\n\u76f8\u5173\u6570\u636e/sys/block/zram0/{\nmem_used_total\n,\norig_data_size\n,\ncompr_data_size\n}\n\n\ncompression radio = orig_data_size / compr_data_size\nreal compr. ratio  = orig_data_size / mem_used_total\n\n\n\n\n\n\n\n\u4f18\u70b9\n\n\n\n\n\u5185\u5b58\u6269\u5927, \u5e73\u5747\u538b\u7f29\u6bd4\u4e3a2.0\n\n\n\u7531\u4e8e\u5728\u5b9e\u73b0\u4e0a, \u5982\u679c\u67d0\u4e2aPAGE\u7684\u538b\u7f29\u7387\u5927\u4e8ePAGE_SIZE * 4 / 3 (kernel 3.10), \u5219\u4e0d\u8fdb\u884c\u538b\u7f29, \u5728\u8bfb\u53d6\u65f6, \u4e5f\u5c31\u7701\u4e0b\u89e3\u538b\u7684\u6d88\u8017. \u4ece\u800c\u63d0\u9ad8\u901f\u5ea6,\u964d\u4f4eCPU\u5360\u7528,\u4f46\u662f\u4f1a\u964d\u4f4e\u538b\u7f29\u7387.\n\n\n\n\n\u7f3a\u70b9\n\n\n\n\nCPU\u5360\u7528\n\n\n\u529f\u8017\u589e\u52a0\n\n\n\u7531\u4e8e\u5360\u7528\u4e00\u90e8\u5206\u5185\u5b58\u4f5c\u4e3azram\u8bbe\u5907, \u5219\u5982\u679czram\u538b\u7f29\u901f\u5ea6\u4e0d\u591f\u5feb, \u53cd\u800c\u66f4\u5bb9\u6613\u5f15\u53d1OOM.(github\u4e0a\u7684\u4e00\u4e2a\u60c5\u51b5, \u65e0\u6570\u636e\u4fe1\u606f, \u5728ZX2000\u4e0a\u672a\u51fa\u73b0\u8be5\u60c5\u51b5)\n\n\n\n\n\u8c03\u6574\u65b9\u6cd5\n\n\nCPU\u5360\u7528\u67e5\u770bkswapd(kswap)\n\n\nCPU\u5360\u7528\u8c03\u6574:\n\n\n\n\n/sys/block/zram0/max_comp_streams \u8bbe\u7f6e\u538b\u7f29\u6d41\u4e2a\u6570. \u9ed8\u8ba4\u4e3a\u6bcf\u4e2aCPU\u5206\u914d1\u4e2a.\n\n\n/sys/block/zram0/comp_algorithm  \u5207\u6362\u538b\u7f29\u7b97\u6cd5, \u5efa\u8bae\u4f7f\u7528\u9ed8\u8ba4\u7684LZO, \u901f\u5ea6\u5feb\n\n\n\n\n\n\n\u6d4b\u8bd5\n\n\n\n\n\u4ee5\u4e0b\u6570\u636e\u662f\u3000\u5728\nZX2000\n\u4e0a, UI\u5207\u6362\u548c\u542f\u52a8\u65b0\u5e94\u7528\u6362, \u6293\u53d6\u7684\u6570\u636e\uff0e\n\n\n\u538b\u7f29\u7387\u76f8\u5173\u7684\u4e09\u4e2a\u503c\u5206\u522b\u4e3a\n\n\n# busybox free                               \n             total       used       free     shared    buffers     cached\nMem:        427400     365136      62264        408        348      72148\n-/+ buffers/cache:     292640     134760\nSwap:       204796     103784     101012\n\n\norig_data_size:\u300090275840\nmem_used_total:  25862144\ncompr_data_size: 21846958\nzero_pages:      1903\n\n\n\n\n\n\n\u538b\u7f29\u7387\u4e3a\uff1a\n\n\ncompression radio(orig_data_size / compr_data_size) = 90275840 / 21846958 = 4.13\nreal compr. ratio (orig_data_size / mem_used_total) = 90275840 / 25862144 = 3.49\n\n\n\n\n\ncpu \u5360\u7528\u6570\u636e\uff1a\n\n\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  3   2% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  0   5% S     1      0K      0K  fg root     kswapd0\n   44  3   1% S     1      0K      0K  fg root     kswapd0\n\n\n\n\n\n5%\u662f\u5728\u542f\u52a8\u65b0Activity\u7684\u65f6\u5019, \u521d\u6b65\u7ed3\u8bba\u662f, CPU\u5360\u7528\u4e0d\u9ad8.\n\n\n\n\u4ee5\u4e0b\u6570\u636e\u662f\u3000\u5728\nZX1800\n\u4e0a, UI\u5207\u6362\u548c\u542f\u52a8\u65b0\u5e94\u7528\u6362, \u6293\u53d6\u7684\u6570\u636e\uff0e\n\n\n\n# ./busybox free                                  \n             total       used       free     shared    buffers     cached\nMem:        427396     422720       4676       1688          0      42412\n-/+ buffers/cache:     380308      47088\nSwap:       204796     112748      92048\n\norig_data_size:  106278912\nmem_used_total:  25624576\ncompr_data_size: 23845230\nzero_pages:      3273\n\n\n\n\n\n\n\u538b\u7f29\u7387\u4e3a\uff1a\n\n\ncompression radio(orig_data_size / compr_data_size) = 106278912 / 23845230 = 4.45\nreal compr. ratio (orig_data_size / mem_used_total) = 106278912 / 25624576 = 4.14\n\n\n\n\n\ncpu \u5360\u7528\u6570\u636e\uff1a\n\n\n   44  3   1% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  0   4% S     1      0K      0K  fg root     kswapd0\n   44  3   1% S     1      0K      0K  fg root     kswapd0\n   44  0   0% S     1      0K      0K  fg root     kswapd0\n   44  1   2% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   1% S     1      0K      0K  fg root     kswapd0\n\n\n\n\n\n\n\n\u5185\u5b58\u7533\u8bf7\u6d4b\u8bd5\n\n\n\u4ee5\u4e0b\u662f\u5728\nzx2000\n\u8bbe\u5907\u4e0a, \u901a\u8fc7\u6bcf\u79d2\u5206\u914d1M\u5185\u5b58\u7684\u65b9\u5f0f, \u5185\u5b58\u4e2d\u6570\u636e\u4e3aurandom\u8bbe\u5907\u6570\u636e, \u6d4b\u8bd5\u5b9e\u9645\u7533\u8bf7\u5185\u5b58\u589e\u52a0\u7684\u503c. \u7edf\u8ba1\u7684\u6570\u636e\u5982\u4e0b.\n\n\n\n\u5728\u7cfb\u7edf\u505c\u7559\u5728\u4e3b\u754c\u9762\u540e, \u5c0f\u7a97\u53e3\u64ad\u53f0, \u5728\u5185\u5b58\u7533\u8bf7\u4f7f\u7528\u4e86167M\u540e, \u89e6\u53d1OOM.\nCPU\u5360\u7528\u5982\u4e0b, \u89e6\u53d1OOM\u65f6, CPU\u5360\u7528\u8fbe\u52308%\n\n\n   44  0   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  3   8% S     1      0K      0K  fg root     kswapd0\n   44  1   8% S     1      0K      0K  fg root     kswapd0\n   44  1   8% S     1      0K      0K  fg root     kswapd0\n\n\n\n\n\n\u5185\u5b58\u5360\u7528\u5982\u4e0b:\n\n\n# busybox free     #\u5f00\u59cb\u65f6\u5185\u5b58                                             \n             total       used       free     shared    buffers     cached\nMem:        427400     423752       3648       2224       2540     105892\n-/+ buffers/cache:     315320     112080\nSwap:       204796          0     204796\n\n# busybox free     # OOM \u65f6\u5185\u5b58                              \n             total       used       free     shared    buffers     cached\nMem:        427400     422908       4492        292        200      11464\n-/+ buffers/cache:     411244      16156\nSwap:       204796     204796          0\n\n\n\n\n\nzram\u4fe1\u606f\u5982\u4e0b:\n\n\n# \u5f00\u59cb\u4f7f\u7528zram\u4e0d\u4e45\n==============================================\nstatus: enabled\ncompression: 1\ndisksize: 200M\ncompr_data_size: 1175K\norig_data_size: 2232K\nmem_used_total: 2232K\nmax_comp_streams: 1\ncomp_algorithm: [lzo]\n\n# \u4e00\u6bb5\u65f6\u95f4\u540e\n==============================================\nstatus: enabled\ncompression: 2\ndisksize: 200M\ncompr_data_size: 3675K\norig_data_size: 11800K\nmem_used_total: 4648K\nmax_comp_streams: 1\ncomp_algorithm: [lzo]\n\n==============================================\nstatus: enabled\ncompression: 3\ndisksize: 200M\ncompr_data_size: 15230K\norig_data_size: 55040K\nmem_used_total: 16624K\nmax_comp_streams: 1\ncomp_algorithm: [lzo] \n\n==============================================\nstatus: enabled\ncompression: 2\ndisksize: 200M\ncompr_data_size: 44355K\norig_data_size: 120788K\nmem_used_total: 46196K\nmax_comp_streams: 1\ncomp_algorithm: [lzo] \n\n==============================================\nstatus: enabled\ncompression: 1\ndisksize: 200M\ncompr_data_size: 137773K\norig_data_size: 200280K\nmem_used_total: 144096K\nmax_comp_streams: 1\ncomp_algorithm: [lzo]\n\n\n\n\n\n\u53ef\u4ee5\u770b\u5230, \u538b\u7f29\u6bd4, \u4ece1 -\n 3 -\n\uff11, \u4e5f\u5c31\u662f\u8bf4\u5728swap\u7a7a\u6216\u8005\u5feb\u6ee1\u662f, \u538b\u7f29\u6bd4\u662f\u6700\u4f4e\u7684, \u4ece\u6700\u540e\u89e6\u53d1OOM\u770b, \u901a\u8fc7\u538b\u7f29\u8282\u7701\u7684\u5185\u5b58\u670960M\u5de6\u53f3. \u5e76\u4e14\u7531\u4e8e1M\u586b\u5145\u7684\u90fd\u662furandom\u8bbe\u5907\u7684\u5185\u5bb9, \u672c\u8eab\u5bfc\u81f4\u538b\u7f29\u6bd4\u6bd4\u6b63\u5e38\u4f7f\u7528\u65f6\u504f\u4f4e(\u51e0\u4e4e\u65e00\u9875, \u6570\u636e\u968f\u673a).\n\n\n\n\u5728\u4e0d\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b\uff0c\u3000\u5185\u5b58\u7533\u8bf7\u572895 M\u7684\u65f6\u5019\uff0c\u3000\u89e6\u53d1\u4e86OOM.\n\n\n # busybox free       # \u5f00\u59cb\u5185\u5b58\u7533\u8bf7\u65f6\u7684\u5185\u5b58                                             \n             total       used       free     shared    buffers     cached\nMem:        427400     422932       4468       2224       2524     103748\n-/+ buffers/cache:     316660     110740\nSwap:            0          0          0\n\n\n# busybox free       # OOM \u65f6\u7684\u5185\u5b58                                            \n             total       used       free     shared    buffers     cached\nMem:        427400     424052       3348       2224         36      16608\n-/+ buffers/cache:     407408      19992\nSwap:            0          0          0\n\n\n\n\n\n\n\n\n\n\u4ee5\u4e0b\u662f\u5728\nzx1800\n\u8bbe\u5907\u4e0a, \u901a\u8fc7\u6bcf\u79d2\u5206\u914d1M\u5185\u5b58\u7684\u65b9\u5f0f, \u5185\u5b58\u4e2d\u6570\u636e\u4e3aurandom\u8bbe\u5907\u6570\u636e, \u6d4b\u8bd5\u5b9e\u9645\u7533\u8bf7\u5185\u5b58\u589e\u52a0\u7684\u503c. \u7edf\u8ba1\u7684\u6570\u636e\u5982\u4e0b.\n\n\n\u5728\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u7533\u8bf7\u5185\u5b58\u8fbe\u5230166M\u65f6, \u89e6\u53d1OOM.\nCPU \u5360\u7528\n\n\n   44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  2   1% S     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% R     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  0   0% S     1      0K      0K  fg root     kswapd0\n   44  1   2% R     1      0K      0K  fg root     kswapd0\n\n\n\n\n\n\u538b\u7f29\u6bd4\u7684\u6570\u636e\u4e0ezx2000 emmc\u76f8\u540c, \u7279\u522b\u662f\u5728zram\u5269\u4f59\u5927\u5c0f\u4e0d\u591a\u65f6, \u538b\u7f29\u6bd4\u5feb\u901f\u7f29\u5c0f\u52301.4(\u4ece3\u964d\u52301)\u5de6\u53f3.\n\u4ee5\u4e0b\u662ffree\u7684\u8f93\u51fa.\n\n\n# ./busybox free           #\u7cfb\u7edf\u542f\u52a8\u5b8c\u6210\u65f6                 \n             total       used       free     shared    buffers     cached\nMem:        427396     422192       5204       2224          4     109536\n-/+ buffers/cache:     312652     114744\nSwap:       204796          0     204796\n\n\n# ./busybox free        # OOM \u65f6\n             total       used       free     shared    buffers     cached\nMem:        427396     423280       4116        264          0      13268\n-/+ buffers/cache:     410012      17384\nSwap:       204796     204796          0\n\n\n\n\n\n\u5728\u4e0d\u5f00\u542fzram\u7684\u60c5\u51b5\u4e0b, \u7533\u8bf7\u7684\u5185\u5b58\u8fbe\u523096M\u65f6\u89e6\u53d1OOM, \u4ee5\u4e0b\u662ffree\u7684\u8f93\u51fa.\n\n\n# ./busybox free         # \u7cfb\u7edf\u542f\u52a8\u5b8c\u6210                      \n             total       used       free     shared    buffers     cached\nMem:        427396     411928      15468       2224          0     107552\n-/+ buffers/cache:     304376     123020\nSwap:            0          0          0\n\n\n# ./busybox free         # \u89e6\u53d1OOM                         \n             total       used       free     shared    buffers     cached\nMem:        427396     419892       7504       2224          0      15372\n-/+ buffers/cache:     404520      22876\nSwap:            0          0          0\n\n\n\n\n\n\u7efc\u4e0a, \u4e0ezx2000\u76f8\u540c, \u53ef\u7528\u5185\u5b58\u589e\u52a070M\u5de6\u53f3.\n\n\nOOM\u6d4b\u8bd5\n\n\n\u57fa\u4e8e\nzx2000\n 8\u670818\u65e5\u7684autobuild\u7cfb\u7edf, \u5728\u5206\u522b\u4e0d\u542f\u7528\u548c\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6d4b\u8bd5\u5bf9OOM\u7684\u5f71\u54cd.\n\n\n\u6267\u884c\u64cd\u4f5c\u5982\u4e0b:\n\n\n\n\n\u91cd\u542f\u7cfb\u7edf.\n\n\n\u901a\u8fc7UI\u754c\u9762\u5206\u522b\u542f\u52a8\u672c\u5730\u89c6\u9891, \u672c\u5730\u97f3\u4e50 \u548c\u672c\u5730\u56fe\u7247\u4e09\u4e2a\u5e94\u7528.\n\n\n\u6309\u9065\u63a7\u5668\u9000\u51fa\u952e, \u56de\u5230\u7535\u89c6\u76f4\u64ad\u754c\u9762.\n\n\n\n\n\u5728\u672a\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6267\u884c\u4ee5\u4e0a\u64cd\u4f5c, \u5fc5\u5b9a\u89e6\u53d1OOM. \u5728\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6267\u884c\u4ee5\u4e0a\u64cd\u4f5c, \u672a\u89e6\u53d1OOM.\n\n\n\n\n\n\u57fa\u4e8e\nzx1800\n 8\u670818\u65e5\u7684autobuild\u7cfb\u7edf, \u5728\u5206\u522b\u4e0d\u542f\u7528\u548c\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6d4b\u8bd5\u5bf9OOM\u7684\u5f71\u54cd.\n\n\n\u6267\u884c\u64cd\u4f5c\u5982\u4e0b:\n\n\n\n\n\u91cd\u542f\u7cfb\u7edf.\n\n\n\u901a\u8fc7UI\u754c\u9762\u5206\u522b\u542f\u52a8\u672c\u5730\u89c6\u9891, \u672c\u5730\u97f3\u4e50 \u548c\u672c\u5730\u56fe\u7247\u4e09\u4e2a\u5e94\u7528.\n\n\n\u6309\u9065\u63a7\u5668\u9000\u51fa\u952e, \u56de\u5230\u7535\u89c6\u76f4\u64ad\u754c\u9762.\n\n\n\n\n\u5728\u672a\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6267\u884c\u4ee5\u4e0a\u64cd\u4f5c, \u5fc5\u5b9a\u89e6\u53d1OOM. \u5e76\u4e14\u5728\u4ee5\u4e0a\u6b65\u9aa4\u4e4b\u540e, \u91cd\u590d\u6309\u5bfc\u89c6\u952e\u548c\u9000\u51fa\u952e, \u975e\u5e38\u5361, \u751a\u81f3\u9ed1\u5c4f\u51e0\u79d2\u949f.\n\u5728\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6267\u884c\u4ee5\u4e0a\u64cd\u4f5c, \u4e0d\u4f1a\u89e6\u53d1OOM. \u5e76\u4e14\u5728\u4ee5\u4e0a\u6b65\u9aa4\u4e4b\u540e, \u91cd\u590d\u6309\u5bfc\u89c6\u952e\u548c\u9000\u51fa\u952e, \u53ea\u6709\u7b2c\u4e00\u6b21\u5bfc\u89c6\u952e\u5361\u987f, \u4e4b\u540e\u90fd\u4e0d\u5361.\n\n\n \u5728Android\u542f\u7528\u65b9\u6cd5 \n\n\nhttps://source.android.com/devices/tech/perf/low-ram\n\n\n\u4e0a\u9762\u8fd9\u4e2a\u94fe\u63a5\u662fAndroid\u5b98\u7f51\u7ed9\u51fa\u6765\u7684\u5bf9\u4e8e\u4f4e\u5185\u5b58\u8bbe\u5907(512M)\u7684\u5185\u5b58\u4f18\u5316\u5efa\u8bae(\u5185\u6838/\u7cfb\u7edf/\u5e94\u7528\u7b49), \u5176\u4e2d\u6709\u5728Android\u4e0a\u542f\u7528zram\u7684\u6574\u4e2a\u914d\u7f6e\u6d41\u7a0b.\n\n\n\u5728hisi\u63d0\u4f9b\u7684TVOS2.0\u4ee3\u7801\u4e2d, \u5df2\u7ecf\u5b9e\u73b0Android\u5b98\u65b9\u63d0\u4f9b\u7684\u5185\u5b58\u4f18\u5316\u5efa\u8bae, \u8fdb\u884c\u4e86\u4f18\u5316, \u5176\u4e2d\u5305\u62eczram\u7684\u914d\u7f6e, \u53ef\u4ee5\u76f4\u63a5\u53c2\u8003\u4e5f\u4f7f\u7528.\n\n\n\u5b98\u65b9\u5efa\u8bae, \u4f7f\u7528\u603b\u5185\u5b58\u7684 30%-50% \u4f5c\u4e3azram, \u6309\u7167\u538b\u7f29\u7387\u4e3a50%\u8ba1\u7b97, \u5219\u5185\u5b58\u589e\u52a030%-50%\u5de6\u53f3.\n\n\nSwap to zRAM\n\n\nzRAM swap can increase the amount of memory available in the system by compressing memory pages and putting them in a dynamically allocated swap area of memory.\n\n\nAgain, since this is trading off CPU time for a small increase in memory, you should be careful about measuring the performance impact zRAM swap has on your system.\n\n\nAndroid handles swap to zRAM at several levels:\n\n\nFirst, the following kernel options must be enabled to use zRAM swap effectively:\n    CONFIG_SWAP\n    CONFIG_CGROUP_MEM_RES_CTLR\n    CONFIG_CGROUP_MEM_RES_CTLR_SWAP\n    CONFIG_ZRAM\nThen, you should add a line that looks like this to your fstab:\n\n/dev/block/zram0 none swap defaults zramsize=\nsize in bytes\n,swapprio=\nswap partition priority\n\n\n    zramsize is mandatory and indicates how much uncompressed memory you want the zram area to hold. Compression ratios in the 30-50% range are usually observed.\n    swapprio is optional and not needed if you don\nt have more than one swap area.\n\nYou should also be sure to label the associated block device as a swap_block_device in the device-specific sepolicy/file_contexts so that it is treated properly by SELinux.\n\n/dev/block/zram0 u:object_r:swap_block_device:s0\n\nBy default, the Linux kernel swaps in 8 pages of memory at a time. When using ZRAM, the incremental cost of reading 1 page at a time is negligible and may help in case the device is under extreme memory pressure. To read only 1 page at a time, add the following to your init.rc:\n\nwrite /proc/sys/vm/page-cluster 0\n\nIn your init.rc after the mount_all /fstab.X line, add:\n\nswapon_all /fstab.X\n\nThe memory cgroups are automatically configured at boot time if the feature is enabled in kernel.\nIf memory cgroups are available, the ActivityManager will mark lower priority threads as being more swappable than other threads. If memory is needed, the Android kernel will start migrating memory pages to zRAM swap, giving a higher priority to those memory pages that have been marked by ActivityManager.\n\n\n\n\n\n\n\n\n\n\n \u6210\u529f\u4f8b\u5b50 \n\n\n\n\nchrome os\n\n\ndebian/ubuntu\n\n\n\u7b2c\u4e09\u65b9Android ROM \u548c TV", 
            "title": "zram"
        }, 
        {
            "location": "/2017-08-22-zram/#_1", 
            "text": "\u5728linux\u5185\u6838\u7684mm\u5b50\u7cfb\u7edf\u4e2d, \u5305\u542b\u4e09\u4e2a\u652f\u6301\u5185\u5b58\u538b\u7f29\u7684\u7ec4\u4ef6, \u5206\u522b\u662fzram, zcache \u548c zswap.  zswap : \u524d\u63d0\u6761\u4ef6\u662f, \u7cfb\u7edf\u4e2d\u5b58\u5728swap\u8bbe\u5907, \u5185\u6838\u7248\u672c 3.5, \u56e0\u4e3a\u4f9d\u8d56\u4e86frontswap\u7684\u63a5\u53e3, \u7528\u4e8e\u7ba1\u7406swap page.\nzswap\u662f\u4e00\u4e2a\u8f7b\u91cf\u5316\u7684\u540e\u7aef\u67b6\u6784, \u5c06\u8fdb\u7a0b\u5404\u79cd\u4ea4\u6362\u51fa\u7684\u9875\u9762\u8fdb\u884c\u538b\u7f29, \u5e76\u5b58\u50a8\u5728\u4e00\u4e2a\u57fa\u4e8eRAM\u7684\u5185\u7f13\u51b2\u6c60\u4e2d. \u7f13\u51b2\u6c60\u4e0d\u9884\u5206\u914d, \u6709\u6700\u5927\u503c, \u4e14\u5f53\u7f13\u51b2\u6c60\u6ee1\u4e86, LRU\u7684\u5185\u5b58\u9875\u4f1a\u88ab\u5199\u5165swap\u8bbe\u5907. \u4f9d\u8d56swap\u5206\u533a, \u4e0d\u9002\u7528hdtv.  zcache : \u4e0ezswap\u7c7b\u4f3c, \u4f9d\u8d56frontswap\u63a5\u53e3\u548ccleacache\u63a5\u53e3, \u5185\u6838\u7248\u672c 3.5. \u4e0ezswap\u4e00\u6837, \u5c06\u8fdb\u7a0b\u4ea4\u6362\u51fa\u7684\u9875\u9762\u548c\u6587\u4ef6\u7cfb\u7edf\u7684\u7f13\u51b2\u8fdb\u884c\u538b\u7f29\u5e76\u5b58\u50a8\u5728RAM\u7684\u5185\u5b58\u7f13\u51b2\u6c60\u4e2d, \u5728\u7f13\u51b2\u6c60\u6ee1\u540e, \u5c06\u9875\u9762\u5b58\u5165swap\u5206\u533a\u6216\u8005 RAMster (\u4e00\u79cd\u57fa\u4e8e\u7f51\u7edc\u7684\u5185\u5b58\u6c60\u5171\u4eab\u6280\u672f, \u53ef\u4ee5\u5171\u4eab\u7f51\u7edc\u4e2d\u5176\u4f59\u786c\u4ef6\u7684\u5185\u5b58). zswap\u53ef\u4ee5\u7406\u89e3\u4e3a\u662fzcache\u7684\u5b50\u96c6. \u4e0d\u9002\u7528hdtv.  zram : \u5185\u5b58\u4e2d\u7684swap\u8bbe\u5907, \u5185\u6838 3.14, \u53ef\u4ee5\u7406\u89e3\u4e3azcache\u7684RAM\u7f13\u51b2\u6c60. \u4f18\u5148\u7ea7\u6700\u9ad8, \u4e0d\u5efa\u8bae\u4e0e\u5176\u4ed6swap\u4e00\u8d77\u4f7f\u7528.\u4e0d\u4f9d\u8d56\u771f\u5b9e\u7684swap\u8bbe\u5907(Nand\u6216\u8005\u7f51\u7edc), \u503e\u5411\u4e8e\u5728\u4f4e\u5185\u5b58\u7684\u5d4c\u5165\u5f0f\u8bbe\u5907\u4e2d\u4f7f\u7528.  \u7efc\u4e0a, zram\u66f4\u9002\u5408hdtv\u8fd9\u4e2a\u9879\u76ee", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/2017-08-22-zram/#zram", 
            "text": "zram\u662f\u5c06\u7cfb\u7edf\u4e2d\u7684\u5185\u5b58\u7684\u4e00\u90e8\u5206\u5185\u5b58\u9694\u79bb\u6210zram\u8bbe\u5907(swap\u8bbe\u5907),\u5bf9\u4e8e\u5c0f\u5185\u5b58\u7684\u8bbe\u5907, \u5728\u4f7f\u7528\u4e0a\u4f1a\u611f\u5185\u5b58\u88ab\u6269\u5927\u4e86.  linux\u5185\u6838\u4e2d\u4e3azram\u63d0\u4f9b\u4e86\u5404\u79cd\u538b\u7f29\u7b97\u6cd5, \u9ed8\u8ba4\u7684\u662fLZO, \u8be5\u7b97\u6cd5\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u90fd\u80fd\u5f88\u597d\u5730\u5e73\u8861\u538b\u7f29\u7387\u548c\u901f\u5ea6. LZO\u4e3b\u8981\u662f\u5728\u901f\u5ea6\u4e0a\u4f18\u5316.\u5728\u4e00\u4e9b\u6bd4\u8f83\u6b63\u5f0f\u7684\u6587\u6863\u4e0a, LZO\u7684\u538b\u7f29\u7387\u5e73\u5747\u4e3a50%. \u4e0b\u9762\u662f\u9488\u5bf9\u5185\u6838\u6e90\u7801(50.6M)\u538b\u7f29\u7684\u4e00\u4e2a\u56fe\u8868, \u7f51\u4e0a\u63d0\u4f9b\u7684.  lzop :   1.62   seconds   to   compress ,   18.0   MB ,   ratio =. 355  gzip :   19.13   seconds ,   10.8   MB ,   ratio =. 213  bzip2 :   60.81   seconds ,   8.46   MB ,   ratio =. 176  xz :   311.65   seconds ,   7.33   MB ,   ratio =. 145    \u538b\u7f29\u7387\u8ba1\u7b97:\n\u76f8\u5173\u6570\u636e/sys/block/zram0/{ mem_used_total , orig_data_size , compr_data_size }  compression radio = orig_data_size / compr_data_size\nreal compr. ratio  = orig_data_size / mem_used_total", 
            "title": " zram "
        }, 
        {
            "location": "/2017-08-22-zram/#_2", 
            "text": "\u5185\u5b58\u6269\u5927, \u5e73\u5747\u538b\u7f29\u6bd4\u4e3a2.0  \u7531\u4e8e\u5728\u5b9e\u73b0\u4e0a, \u5982\u679c\u67d0\u4e2aPAGE\u7684\u538b\u7f29\u7387\u5927\u4e8ePAGE_SIZE * 4 / 3 (kernel 3.10), \u5219\u4e0d\u8fdb\u884c\u538b\u7f29, \u5728\u8bfb\u53d6\u65f6, \u4e5f\u5c31\u7701\u4e0b\u89e3\u538b\u7684\u6d88\u8017. \u4ece\u800c\u63d0\u9ad8\u901f\u5ea6,\u964d\u4f4eCPU\u5360\u7528,\u4f46\u662f\u4f1a\u964d\u4f4e\u538b\u7f29\u7387.", 
            "title": "\u4f18\u70b9"
        }, 
        {
            "location": "/2017-08-22-zram/#_3", 
            "text": "CPU\u5360\u7528  \u529f\u8017\u589e\u52a0  \u7531\u4e8e\u5360\u7528\u4e00\u90e8\u5206\u5185\u5b58\u4f5c\u4e3azram\u8bbe\u5907, \u5219\u5982\u679czram\u538b\u7f29\u901f\u5ea6\u4e0d\u591f\u5feb, \u53cd\u800c\u66f4\u5bb9\u6613\u5f15\u53d1OOM.(github\u4e0a\u7684\u4e00\u4e2a\u60c5\u51b5, \u65e0\u6570\u636e\u4fe1\u606f, \u5728ZX2000\u4e0a\u672a\u51fa\u73b0\u8be5\u60c5\u51b5)", 
            "title": "\u7f3a\u70b9"
        }, 
        {
            "location": "/2017-08-22-zram/#_4", 
            "text": "CPU\u5360\u7528\u67e5\u770bkswapd(kswap)  CPU\u5360\u7528\u8c03\u6574:   /sys/block/zram0/max_comp_streams \u8bbe\u7f6e\u538b\u7f29\u6d41\u4e2a\u6570. \u9ed8\u8ba4\u4e3a\u6bcf\u4e2aCPU\u5206\u914d1\u4e2a.  /sys/block/zram0/comp_algorithm  \u5207\u6362\u538b\u7f29\u7b97\u6cd5, \u5efa\u8bae\u4f7f\u7528\u9ed8\u8ba4\u7684LZO, \u901f\u5ea6\u5feb", 
            "title": "\u8c03\u6574\u65b9\u6cd5"
        }, 
        {
            "location": "/2017-08-22-zram/#_5", 
            "text": "\u4ee5\u4e0b\u6570\u636e\u662f\u3000\u5728 ZX2000 \u4e0a, UI\u5207\u6362\u548c\u542f\u52a8\u65b0\u5e94\u7528\u6362, \u6293\u53d6\u7684\u6570\u636e\uff0e \n\u538b\u7f29\u7387\u76f8\u5173\u7684\u4e09\u4e2a\u503c\u5206\u522b\u4e3a  # busybox free                               \n             total       used       free     shared    buffers     cached\nMem:        427400     365136      62264        408        348      72148\n-/+ buffers/cache:     292640     134760\nSwap:       204796     103784     101012\n\n\norig_data_size:\u300090275840\nmem_used_total:  25862144\ncompr_data_size: 21846958\nzero_pages:      1903  \n\u538b\u7f29\u7387\u4e3a\uff1a  compression radio(orig_data_size / compr_data_size) = 90275840 / 21846958 = 4.13\nreal compr. ratio (orig_data_size / mem_used_total) = 90275840 / 25862144 = 3.49  cpu \u5360\u7528\u6570\u636e\uff1a     44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  3   2% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  0   5% S     1      0K      0K  fg root     kswapd0\n   44  3   1% S     1      0K      0K  fg root     kswapd0  5%\u662f\u5728\u542f\u52a8\u65b0Activity\u7684\u65f6\u5019, \u521d\u6b65\u7ed3\u8bba\u662f, CPU\u5360\u7528\u4e0d\u9ad8.  \n\u4ee5\u4e0b\u6570\u636e\u662f\u3000\u5728 ZX1800 \u4e0a, UI\u5207\u6362\u548c\u542f\u52a8\u65b0\u5e94\u7528\u6362, \u6293\u53d6\u7684\u6570\u636e\uff0e  # ./busybox free                                  \n             total       used       free     shared    buffers     cached\nMem:        427396     422720       4676       1688          0      42412\n-/+ buffers/cache:     380308      47088\nSwap:       204796     112748      92048\n\norig_data_size:  106278912\nmem_used_total:  25624576\ncompr_data_size: 23845230\nzero_pages:      3273  \n\u538b\u7f29\u7387\u4e3a\uff1a  compression radio(orig_data_size / compr_data_size) = 106278912 / 23845230 = 4.45\nreal compr. ratio (orig_data_size / mem_used_total) = 106278912 / 25624576 = 4.14  cpu \u5360\u7528\u6570\u636e\uff1a     44  3   1% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  0   4% S     1      0K      0K  fg root     kswapd0\n   44  3   1% S     1      0K      0K  fg root     kswapd0\n   44  0   0% S     1      0K      0K  fg root     kswapd0\n   44  1   2% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   1% S     1      0K      0K  fg root     kswapd0", 
            "title": "\u6d4b\u8bd5"
        }, 
        {
            "location": "/2017-08-22-zram/#_6", 
            "text": "\u4ee5\u4e0b\u662f\u5728 zx2000 \u8bbe\u5907\u4e0a, \u901a\u8fc7\u6bcf\u79d2\u5206\u914d1M\u5185\u5b58\u7684\u65b9\u5f0f, \u5185\u5b58\u4e2d\u6570\u636e\u4e3aurandom\u8bbe\u5907\u6570\u636e, \u6d4b\u8bd5\u5b9e\u9645\u7533\u8bf7\u5185\u5b58\u589e\u52a0\u7684\u503c. \u7edf\u8ba1\u7684\u6570\u636e\u5982\u4e0b.  \n\u5728\u7cfb\u7edf\u505c\u7559\u5728\u4e3b\u754c\u9762\u540e, \u5c0f\u7a97\u53e3\u64ad\u53f0, \u5728\u5185\u5b58\u7533\u8bf7\u4f7f\u7528\u4e86167M\u540e, \u89e6\u53d1OOM.\nCPU\u5360\u7528\u5982\u4e0b, \u89e6\u53d1OOM\u65f6, CPU\u5360\u7528\u8fbe\u52308%     44  0   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  3   8% S     1      0K      0K  fg root     kswapd0\n   44  1   8% S     1      0K      0K  fg root     kswapd0\n   44  1   8% S     1      0K      0K  fg root     kswapd0  \u5185\u5b58\u5360\u7528\u5982\u4e0b:  # busybox free     #\u5f00\u59cb\u65f6\u5185\u5b58                                             \n             total       used       free     shared    buffers     cached\nMem:        427400     423752       3648       2224       2540     105892\n-/+ buffers/cache:     315320     112080\nSwap:       204796          0     204796\n\n# busybox free     # OOM \u65f6\u5185\u5b58                              \n             total       used       free     shared    buffers     cached\nMem:        427400     422908       4492        292        200      11464\n-/+ buffers/cache:     411244      16156\nSwap:       204796     204796          0  zram\u4fe1\u606f\u5982\u4e0b:  # \u5f00\u59cb\u4f7f\u7528zram\u4e0d\u4e45\n==============================================\nstatus: enabled\ncompression: 1\ndisksize: 200M\ncompr_data_size: 1175K\norig_data_size: 2232K\nmem_used_total: 2232K\nmax_comp_streams: 1\ncomp_algorithm: [lzo]\n\n# \u4e00\u6bb5\u65f6\u95f4\u540e\n==============================================\nstatus: enabled\ncompression: 2\ndisksize: 200M\ncompr_data_size: 3675K\norig_data_size: 11800K\nmem_used_total: 4648K\nmax_comp_streams: 1\ncomp_algorithm: [lzo]\n\n==============================================\nstatus: enabled\ncompression: 3\ndisksize: 200M\ncompr_data_size: 15230K\norig_data_size: 55040K\nmem_used_total: 16624K\nmax_comp_streams: 1\ncomp_algorithm: [lzo] \n\n==============================================\nstatus: enabled\ncompression: 2\ndisksize: 200M\ncompr_data_size: 44355K\norig_data_size: 120788K\nmem_used_total: 46196K\nmax_comp_streams: 1\ncomp_algorithm: [lzo] \n\n==============================================\nstatus: enabled\ncompression: 1\ndisksize: 200M\ncompr_data_size: 137773K\norig_data_size: 200280K\nmem_used_total: 144096K\nmax_comp_streams: 1\ncomp_algorithm: [lzo]  \u53ef\u4ee5\u770b\u5230, \u538b\u7f29\u6bd4, \u4ece1 -  3 - \uff11, \u4e5f\u5c31\u662f\u8bf4\u5728swap\u7a7a\u6216\u8005\u5feb\u6ee1\u662f, \u538b\u7f29\u6bd4\u662f\u6700\u4f4e\u7684, \u4ece\u6700\u540e\u89e6\u53d1OOM\u770b, \u901a\u8fc7\u538b\u7f29\u8282\u7701\u7684\u5185\u5b58\u670960M\u5de6\u53f3. \u5e76\u4e14\u7531\u4e8e1M\u586b\u5145\u7684\u90fd\u662furandom\u8bbe\u5907\u7684\u5185\u5bb9, \u672c\u8eab\u5bfc\u81f4\u538b\u7f29\u6bd4\u6bd4\u6b63\u5e38\u4f7f\u7528\u65f6\u504f\u4f4e(\u51e0\u4e4e\u65e00\u9875, \u6570\u636e\u968f\u673a).  \n\u5728\u4e0d\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b\uff0c\u3000\u5185\u5b58\u7533\u8bf7\u572895 M\u7684\u65f6\u5019\uff0c\u3000\u89e6\u53d1\u4e86OOM.   # busybox free       # \u5f00\u59cb\u5185\u5b58\u7533\u8bf7\u65f6\u7684\u5185\u5b58                                             \n             total       used       free     shared    buffers     cached\nMem:        427400     422932       4468       2224       2524     103748\n-/+ buffers/cache:     316660     110740\nSwap:            0          0          0\n\n\n# busybox free       # OOM \u65f6\u7684\u5185\u5b58                                            \n             total       used       free     shared    buffers     cached\nMem:        427400     424052       3348       2224         36      16608\n-/+ buffers/cache:     407408      19992\nSwap:            0          0          0    \u4ee5\u4e0b\u662f\u5728 zx1800 \u8bbe\u5907\u4e0a, \u901a\u8fc7\u6bcf\u79d2\u5206\u914d1M\u5185\u5b58\u7684\u65b9\u5f0f, \u5185\u5b58\u4e2d\u6570\u636e\u4e3aurandom\u8bbe\u5907\u6570\u636e, \u6d4b\u8bd5\u5b9e\u9645\u7533\u8bf7\u5185\u5b58\u589e\u52a0\u7684\u503c. \u7edf\u8ba1\u7684\u6570\u636e\u5982\u4e0b.  \u5728\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u7533\u8bf7\u5185\u5b58\u8fbe\u5230166M\u65f6, \u89e6\u53d1OOM.\nCPU \u5360\u7528     44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  2   1% S     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% S     1      0K      0K  fg root     kswapd0\n   44  2   0% R     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  3   0% S     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  1   0% S     1      0K      0K  fg root     kswapd0\n   44  0   0% S     1      0K      0K  fg root     kswapd0\n   44  1   2% R     1      0K      0K  fg root     kswapd0  \u538b\u7f29\u6bd4\u7684\u6570\u636e\u4e0ezx2000 emmc\u76f8\u540c, \u7279\u522b\u662f\u5728zram\u5269\u4f59\u5927\u5c0f\u4e0d\u591a\u65f6, \u538b\u7f29\u6bd4\u5feb\u901f\u7f29\u5c0f\u52301.4(\u4ece3\u964d\u52301)\u5de6\u53f3.\n\u4ee5\u4e0b\u662ffree\u7684\u8f93\u51fa.  # ./busybox free           #\u7cfb\u7edf\u542f\u52a8\u5b8c\u6210\u65f6                 \n             total       used       free     shared    buffers     cached\nMem:        427396     422192       5204       2224          4     109536\n-/+ buffers/cache:     312652     114744\nSwap:       204796          0     204796\n\n\n# ./busybox free        # OOM \u65f6\n             total       used       free     shared    buffers     cached\nMem:        427396     423280       4116        264          0      13268\n-/+ buffers/cache:     410012      17384\nSwap:       204796     204796          0  \u5728\u4e0d\u5f00\u542fzram\u7684\u60c5\u51b5\u4e0b, \u7533\u8bf7\u7684\u5185\u5b58\u8fbe\u523096M\u65f6\u89e6\u53d1OOM, \u4ee5\u4e0b\u662ffree\u7684\u8f93\u51fa.  # ./busybox free         # \u7cfb\u7edf\u542f\u52a8\u5b8c\u6210                      \n             total       used       free     shared    buffers     cached\nMem:        427396     411928      15468       2224          0     107552\n-/+ buffers/cache:     304376     123020\nSwap:            0          0          0\n\n\n# ./busybox free         # \u89e6\u53d1OOM                         \n             total       used       free     shared    buffers     cached\nMem:        427396     419892       7504       2224          0      15372\n-/+ buffers/cache:     404520      22876\nSwap:            0          0          0  \u7efc\u4e0a, \u4e0ezx2000\u76f8\u540c, \u53ef\u7528\u5185\u5b58\u589e\u52a070M\u5de6\u53f3.", 
            "title": "\u5185\u5b58\u7533\u8bf7\u6d4b\u8bd5"
        }, 
        {
            "location": "/2017-08-22-zram/#oom", 
            "text": "\u57fa\u4e8e zx2000  8\u670818\u65e5\u7684autobuild\u7cfb\u7edf, \u5728\u5206\u522b\u4e0d\u542f\u7528\u548c\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6d4b\u8bd5\u5bf9OOM\u7684\u5f71\u54cd.  \u6267\u884c\u64cd\u4f5c\u5982\u4e0b:   \u91cd\u542f\u7cfb\u7edf.  \u901a\u8fc7UI\u754c\u9762\u5206\u522b\u542f\u52a8\u672c\u5730\u89c6\u9891, \u672c\u5730\u97f3\u4e50 \u548c\u672c\u5730\u56fe\u7247\u4e09\u4e2a\u5e94\u7528.  \u6309\u9065\u63a7\u5668\u9000\u51fa\u952e, \u56de\u5230\u7535\u89c6\u76f4\u64ad\u754c\u9762.   \u5728\u672a\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6267\u884c\u4ee5\u4e0a\u64cd\u4f5c, \u5fc5\u5b9a\u89e6\u53d1OOM. \u5728\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6267\u884c\u4ee5\u4e0a\u64cd\u4f5c, \u672a\u89e6\u53d1OOM.   \u57fa\u4e8e zx1800  8\u670818\u65e5\u7684autobuild\u7cfb\u7edf, \u5728\u5206\u522b\u4e0d\u542f\u7528\u548c\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6d4b\u8bd5\u5bf9OOM\u7684\u5f71\u54cd.  \u6267\u884c\u64cd\u4f5c\u5982\u4e0b:   \u91cd\u542f\u7cfb\u7edf.  \u901a\u8fc7UI\u754c\u9762\u5206\u522b\u542f\u52a8\u672c\u5730\u89c6\u9891, \u672c\u5730\u97f3\u4e50 \u548c\u672c\u5730\u56fe\u7247\u4e09\u4e2a\u5e94\u7528.  \u6309\u9065\u63a7\u5668\u9000\u51fa\u952e, \u56de\u5230\u7535\u89c6\u76f4\u64ad\u754c\u9762.   \u5728\u672a\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6267\u884c\u4ee5\u4e0a\u64cd\u4f5c, \u5fc5\u5b9a\u89e6\u53d1OOM. \u5e76\u4e14\u5728\u4ee5\u4e0a\u6b65\u9aa4\u4e4b\u540e, \u91cd\u590d\u6309\u5bfc\u89c6\u952e\u548c\u9000\u51fa\u952e, \u975e\u5e38\u5361, \u751a\u81f3\u9ed1\u5c4f\u51e0\u79d2\u949f.\n\u5728\u542f\u7528zram\u7684\u60c5\u51b5\u4e0b, \u6267\u884c\u4ee5\u4e0a\u64cd\u4f5c, \u4e0d\u4f1a\u89e6\u53d1OOM. \u5e76\u4e14\u5728\u4ee5\u4e0a\u6b65\u9aa4\u4e4b\u540e, \u91cd\u590d\u6309\u5bfc\u89c6\u952e\u548c\u9000\u51fa\u952e, \u53ea\u6709\u7b2c\u4e00\u6b21\u5bfc\u89c6\u952e\u5361\u987f, \u4e4b\u540e\u90fd\u4e0d\u5361.", 
            "title": "OOM\u6d4b\u8bd5"
        }, 
        {
            "location": "/2017-08-22-zram/#android", 
            "text": "https://source.android.com/devices/tech/perf/low-ram \n\u4e0a\u9762\u8fd9\u4e2a\u94fe\u63a5\u662fAndroid\u5b98\u7f51\u7ed9\u51fa\u6765\u7684\u5bf9\u4e8e\u4f4e\u5185\u5b58\u8bbe\u5907(512M)\u7684\u5185\u5b58\u4f18\u5316\u5efa\u8bae(\u5185\u6838/\u7cfb\u7edf/\u5e94\u7528\u7b49), \u5176\u4e2d\u6709\u5728Android\u4e0a\u542f\u7528zram\u7684\u6574\u4e2a\u914d\u7f6e\u6d41\u7a0b. \n\u5728hisi\u63d0\u4f9b\u7684TVOS2.0\u4ee3\u7801\u4e2d, \u5df2\u7ecf\u5b9e\u73b0Android\u5b98\u65b9\u63d0\u4f9b\u7684\u5185\u5b58\u4f18\u5316\u5efa\u8bae, \u8fdb\u884c\u4e86\u4f18\u5316, \u5176\u4e2d\u5305\u62eczram\u7684\u914d\u7f6e, \u53ef\u4ee5\u76f4\u63a5\u53c2\u8003\u4e5f\u4f7f\u7528. \n\u5b98\u65b9\u5efa\u8bae, \u4f7f\u7528\u603b\u5185\u5b58\u7684 30%-50% \u4f5c\u4e3azram, \u6309\u7167\u538b\u7f29\u7387\u4e3a50%\u8ba1\u7b97, \u5219\u5185\u5b58\u589e\u52a030%-50%\u5de6\u53f3. \nSwap to zRAM  zRAM swap can increase the amount of memory available in the system by compressing memory pages and putting them in a dynamically allocated swap area of memory.  Again, since this is trading off CPU time for a small increase in memory, you should be careful about measuring the performance impact zRAM swap has on your system.  Android handles swap to zRAM at several levels:  First, the following kernel options must be enabled to use zRAM swap effectively:\n    CONFIG_SWAP\n    CONFIG_CGROUP_MEM_RES_CTLR\n    CONFIG_CGROUP_MEM_RES_CTLR_SWAP\n    CONFIG_ZRAM\nThen, you should add a line that looks like this to your fstab:\n\n/dev/block/zram0 none swap defaults zramsize= size in bytes ,swapprio= swap partition priority \n\n    zramsize is mandatory and indicates how much uncompressed memory you want the zram area to hold. Compression ratios in the 30-50% range are usually observed.\n    swapprio is optional and not needed if you don t have more than one swap area.\n\nYou should also be sure to label the associated block device as a swap_block_device in the device-specific sepolicy/file_contexts so that it is treated properly by SELinux.\n\n/dev/block/zram0 u:object_r:swap_block_device:s0\n\nBy default, the Linux kernel swaps in 8 pages of memory at a time. When using ZRAM, the incremental cost of reading 1 page at a time is negligible and may help in case the device is under extreme memory pressure. To read only 1 page at a time, add the following to your init.rc:\n\nwrite /proc/sys/vm/page-cluster 0\n\nIn your init.rc after the mount_all /fstab.X line, add:\n\nswapon_all /fstab.X\n\nThe memory cgroups are automatically configured at boot time if the feature is enabled in kernel.\nIf memory cgroups are available, the ActivityManager will mark lower priority threads as being more swappable than other threads. If memory is needed, the Android kernel will start migrating memory pages to zRAM swap, giving a higher priority to those memory pages that have been marked by ActivityManager.", 
            "title": " \u5728Android\u542f\u7528\u65b9\u6cd5 "
        }, 
        {
            "location": "/2017-08-22-zram/#_7", 
            "text": "chrome os  debian/ubuntu  \u7b2c\u4e09\u65b9Android ROM \u548c TV", 
            "title": " \u6210\u529f\u4f8b\u5b50 "
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/", 
            "text": "SEAndroid\u89c4\u5219\u4ecb\u7ecd\n\n\n\u6765\u6e90: https://pengzhangdev.github.io/SEAndroid%E8%A7%84%E5%88%99%E4%BB%8B%E7%BB%8D/\n\n\nhistory:\n\n\n\n\nversion 1.0 by werther zhang @2016-12-12\n\n\nversion 1.1 by werther zhang @2017-06-27 \u603b\u7ed3\u9879\u76ee\u4e2d\u9047\u5230\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848\n\n\n\n\n\u524d\u8a00\n\n\nsepolicy\u7684\u8bed\u6cd5\u662fgnu m4, \u662funix\u7cfb\u7edf\u7684\u5b8f\u5904\u7406\u5668\uff0c \u8ddfC\u7684\u5b8f\u7c7b\u4f3c\u3002\n\n\n\u4ee5\u4e0b\u51fa\u73b0\u7684\u6240\u6709\u4e0e\u7cfb\u7edf\u8fdb\u7a0b\u540d\u5b57\u4e00\u6837\u7684\uff0c \u9664\u975e\u7279\u522b\u6307\u51fa\u8fdb\u7a0b\uff0c \u5426\u5219\u90fd\u53ea\u662f\u540d\u5b57\uff0c \u4e0d\u4e0e\u7279\u5b9a\u8fdb\u7a0b\u5173\u8054\u3002\n\n\n\u4e0b\u9762\uff0c \u5148\u6574\u7406\u4e0b\u6982\u5ff5.. \u77e5\u9053\u8fd9\u4e48\u4e2a\u4e1c\u897f\u5c31\u884c\uff0c\u4e0d\u7528\u7406\u89e3\uff0c\u540e\u9762\u4f1a\u8be6\u7ec6\u63d0\u5230\u3002\n\n\n\u5728linux\u7cfb\u7edf\u4e2d\uff0c\u3000\u6240\u6709\u5355\u5143(\u6587\u4ef6\uff0c\u76ee\u5f55\uff0c\u6587\u4ef6\u7cfb\u7edf\uff0c\u8fdb\u7a0b\u7b49),\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e3b\u52a8\u5355\u5143\u548c\u88ab\u52a8\u5355\u5143\uff0e\u8fdb\u7a0b\u5c5e\u4e8e\u4e3b\u52a8\u5355\u5143\uff08\u4e0d\u5b8c\u5168\uff0c\u8fdb\u7a0b\u7684\u8d44\u6e90\u5728\u88ab\u8bbf\u95ee\u65f6\uff0c\u5c5e\u4e8e\u88ab\u52a8\u5355\u5143\u7684\u6982\u5ff5\uff09\uff0c\u3000\u800c\u5176\u4ed6\u7684\u65e0\u6cd5\u53d1\u8d77\u52a8\u4f5c\u7684\u90fd\u5c5e\u4e8e\u88ab\u52a8\u5355\u5143\uff0e\u800csepolicy\u5b9a\u4e49\u7684\u5206\u522b\u662f\u4e3b\u52a8\u5355\u5143\u7684\u884c\u4e3a\u89c4\u5219\u548c\u88ab\u52a8\u5355\u5143\u7684\u7ee7\u627f\u89c4\u5219(\u8fd8\u662f\u7531\u4e3b\u52a8\u5355\u5143\u53d1\u8d77)\uff0e\n\n\n\u5728\u63d0\u5230domain\u8fd9\u4e2a\u6982\u5ff5\u65f6\uff0c\u4e00\u5219\u8868\u793a\u4e3b\u52a8\u5355\u5143scontext\u4e2d\u7b2c\u4e09\u4e2a\u5b57\u6bb5\uff0c\u6bd4\u5982\uff0c\u4e0b\u4e00\u4e2a\u4f8b\u5b50\u4e2dsdcard\u8fdb\u7a0b\u7684domain\u5c31\u662fsdcardd\uff1b\u4e00\u5219\u6307\u7684\u662f\u5c5e\u6027\uff0c\u5177\u4f53\u51fa\u73b0\u5728\u89c4\u5219\u8bed\u53e5\u4e2d\uff0c\u6bd4\u5982\u540e\u6587\u7684\ntype sdcardd domain\n \u662f\u6307\u8bb2sdcardd\u4e0e\u5c5e\u6027domain\u5173\u8054\uff0c\u800c\u5c5e\u6027domain\u5c31\u53ef\u4ee5\u8868\u793a\u6240\u6709\u7684\u4e0e\u4e4b\u5173\u8054\u7684\u7c7b\u578b\uff0c\u56e0\u4e3a\u6240\u6709\u88ab\u89c4\u5219\u4e86\u7684\u8fdb\u7a0b\u90fd\u4f1a\u4e0edomain\u5c5e\u6027\u5173\u8054\uff0c\u6240\u4ee5domain\u5728\u89c4\u5219\u8bed\u53e5\u4e2d\u6709\u65f6\u5019\u6307\u4ee3\u6240\u6709\u8fdb\u7a0b\u3002\n\n\n\u5728\u63d0\u5230type\u8fd9\u4e2a\u6982\u5ff5\u65f6\uff0c\u4e00\u5219\u662f\u8868\u793a\u88ab\u52a8\u5355\u5143scontext\u4e2d\u7b2c\u4e09\u4e2a\u5b57\u6bb5\uff0c\u6bd4\u5982\u4e0b\u4e00\u4e2a\u4f8b\u5b50\u4e2dsdcard\u8fd9\u4e2a\u6587\u4ef6\u7684type\u4e3asdcard_exec\u3002\u4e00\u5219\uff0c\u6307\u7684\u662f\u6253\u6807\u7b7e\u7684\u5173\u952e\u5b57\uff0c\u5b9a\u4e49domain/type\u7684\u5173\u952e\u5b57\uff0c\u6bd4\u5982\u4e0a\u9762\u7684sdcardd\u7684\u4f8b\u5b50\u3002\n\n\nattribute:  domain/type \u7684\u96c6\u5408\uff0c\u4e0etype/domain \u76f8\u540c\u547d\u540d\u7a7a\u95f4\uff0c\u56e0\u4e3am4\u5c31\u662f\u4e2a\u5b8f\u89e3\u91ca\u5668\uff0cattribute\u5c31\u662f\u4e3a\u4e00\u7fa4\u76f8\u540c\u6743\u9650\u6216\u8005\u89c4\u5219\u7684\u4e3b\u52a8\u5355\u5143\u6216\u88ab\u52a8\u5355\u5143\u96c6\u5408\u5b9a\u4e49\u4e86\u4e2a\u65b0\u540d\u5b57\uff0c\u8fd9\u4e2a\u65b0\u540d\u5b57\u5728sepolicy\u4e2d\u88ab\u5b9a\u4e49\u4e3aattribute. \u5728m4\u7f16\u8bd1\u8fc7\u7a0b\u4e2dattribute\u90fd\u4f1a\u88ab\u5206\u89e3\u6210\u5b9e\u9645\u7684type/domain\uff0c\u540e\u6587\u4f1a\u5728\u4f8b\u5b50\u4e2d\u63d0\u5230\u3002\n\n\n# \u88ab\u52a8\u5355\u5143\u5206\u7ec4\nsdcard_type -|\n             |-|- fuse  -|-|\n             |-|- vfat  -|-|\n               |- sysfs -|-|\n               |- tmpfs -|-|\n                           |- fs_type\n\n# \u4e3b\u52a8\u5355\u5143\u5206\u7ec4\uff0c\u3000\u4e5f\u4f1a\u505a\u88ab\u52a8\u5355\u5143\uff0c\u6bd4\u5982\u88ab\u8bbf\u95ee\uff0c\u88abkill\nnetdomain -|\n           |-|- netd -|-|\n           |-|- dhcp -|-|\n             |- vold -|-|\n             |- logd -|-|\n                        |- domain\n\n\n\n\n\n\u6253\u6807\u7b7e: \u5c31\u662f\u7ed9\u88ab\u52a8\u5355\u5143\u5b9a\u4e49type\uff0c\u3000\u7ed9\u4e3b\u52a8\u5355\u5143\u5b9a\u4e49domain\uff0e domain\u53ea\u6709init\u662f\u5b9a\u4e49\u7684\u5176\u4ed6\u90fd\u662ffork\u4e4b\u540e\u901a\u8fc7DT\u8f6c\u6362\u7684\uff0e\u800ctype\u53ea\u6709\u5df2\u77e5\u662f\u5b9a\u4e49\u7684\uff0c\u7531\u8fdb\u7a0b\u521b\u5efa\u7684\u90fd\u662f\u901a\u8fc7TT\u8f6c\u6362\u7684\uff0e DT\u548cTT\u5728\u540e\u9762\u4f1a\u4ecb\u7ecd\uff0e\n\n\nsepolicy\u89c4\u5219\u4ecb\u7ecd\n\n\nsepolicy\u7684\u89c4\u5219\u9488\u5bf9\u7684\u662flinux\u7cfb\u7edf\u4e2d\u7684\u8fdb\u7a0b\u548c\u6587\u4ef6\u3002\u8fdb\u7a0b\u662f\u4e3b\u52a8\u7684\uff0c \u800c\u6587\u4ef6\u662f\u88ab\u52a8\u7684\u3002 \u6240\u4ee5\uff0c\u6709\u5bf9\u5e94\u7684\u8fdb\u7a0b\u89c4\u5219\u548c\u6587\u4ef6\u89c4\u5219\uff0c \u5206\u522b\u5b9a\u4e49\u8fdb\u7a0b\u7684\u5408\u6cd5\u884c\u4e3a\u548c\u6587\u4ef6\u88ab\u8bbf\u95ee\u7684\u6743\u9650\u3002\n\n\nSELinux\u4e2d\uff0c \u6bcf\u4e2a\u5bf9\u8c61\uff08\u8fdb\u7a0b\u548c\u6587\u4ef6\uff09\u88ab\u8d4b\u4e88\u5b89\u5168\u5c5e\u6027\uff0c\u5b98\u65b9\u8bf4\u6cd5\u662f Security Context(\u4ee5\u4e0b\u7b80\u79f0SContext)\u3002 SContext\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c \u5bf9\u4e8e\u8fdb\u7a0b\u7684SContext\uff0cSContext\u7684\u683c\u5f0f\u662f\u201du:r:type[:range]\u201c. \u53ef\u4ee5\u4f7f\u7528 \nps -Z\n \u83b7\u5f97\uff0c \u5bf9\u4e8e\u6587\u4ef6\u7684SContext\uff0c \u53ef\u4ee5\u901a\u8fc7 \nls -Z\n \u83b7\u5f97\u3002 \u5982\u4e0b\u4e3a\u76f8\u5e94\u547d\u4ee4\u7684\u8f93\u51fa\u3002\n\n\n# ps -Z\nu:r:logd:s0                    logd      198   1     /system/bin/logd\nu:r:healthd:s0                 root      199   1     /sbin/healthd\nu:r:lmkd:s0                    root      200   1     /system/bin/lmkd\nu:r:servicemanager:s0          system    201   1     /system/bin/servicemanager\nu:r:vold:s0                    root      202   1     /system/bin/vold\nu:r:surfaceflinger:s0          system    203   1     /system/bin/surfaceflinger\nu:r:common_time:s0             root      204   1     /system/bin/common_time\nu:r:shell:s0                   shell     205   1     /system/bin/sh\nu:r:kernel:s0                  root      206   2     kworker/1:1H\nu:r:netd:s0                    root      207   1     /system/bin/netd\nu:r:debuggerd:s0               root      208   1     /system/bin/debuggerd\nu:r:drmserver:s0               drm       209   1     /system/bin/drmserver\nu:r:mediaserver:s0             media     210   1     /system/bin/mediaserver\nu:r:installd:s0                install   211   1     /system/bin/installd\nu:r:keystore:s0                keystore  213   1     /system/bin/keystore\nu:r:zygote:s0                  root      214   1     zygote\nu:r:sdcardd:s0                 media_rw  215   1     /system/bin/sdcard\nu:r:adbd:s0                    shell     216   1     /sbin/adbd\nu:r:kernel:s0                  root      228   2     kauditd\n\n\n\n\n\n\u5de6\u8fb9\u4e00\u5217\u662f\u8fdb\u7a0b\u7684 SContext\uff0c \u4ee5sdcard\u8fdb\u7a0b\u4e3a\u4f8b\u5b50\uff0c \u5176\u503c\u4e3a u:r:sdcardd:s0\uff0c \u5176\u4e2d\uff1a\n\n\n\n\n\n\nu \u4e3a user \u7684\u610f\u601d\u3002 SEAndroid\uff08\u6307\u4fee\u6539\u4e86\u7684SELinux\uff09 \u4e2d\u53ea\u5b9a\u4e49\u4e86\u4e00\u4e2aSELinux\u7528\u6237\uff0c \u503c\u4e3au\n\n\n\n\n\n\nr \u4e3a role \u7684\u610f\u601d\u3002 role \u662f\u89d2\u8272\u610f\u601d\uff0c \u5b83\u662f SELinux\u603b\u4e00\u79cd\u6bd4\u8f83\u9ad8\u5c42\u6b21\uff0c \u66f4\u65b9\u4fbf\u7684\u6743\u5229\u7ba1\u7406\u601d\u8def\uff0c \u5373 Role Based Access Control\uff08\u57fa\u4e8e\u89d2\u8272\u8bbf\u95ee\u63a7\u5236\uff0c \u7b80\u79f0\u4e3aRBAC\uff0c \u5728\u540e\u6587\u4f1a\u8be6\u7ec6\u8ba8\u8bba\uff09\u3002user\u4e0erole\u7684\u6743\u9650\uff0c \u7b80\u5355\u70b9\u8bf4\uff0c \u5c31\u662f u \u53ef\u4ee5\u5c5e\u4e8e\u591a\u4e2a role\uff0c \u7136\u540e\u4e0d\u540c\u7684 role \u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u6743\u9650\uff0c \u5c31\u8ddf\u4e00\u4e2a\u4eba\u53ef\u4ee5\u517c\u804c\u591a\u4efd\u5de5\u4f5c\u4e00\u6837\u3002\n\n\n\n\n\n\nsdcardd\uff0c \u4ee3\u8868\u8fdb\u7a0b sdcard \u6240\u5c5e\u7684 Domain \u4e3a sdcardd\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u8fd9\u662f\u4e00\u4e2a\u8fdb\u7a0b\u7ec4\u7684\u540d\u5b57\uff0c \u8be5\u5b57\u7b26\u4e32\u7684\u540d\u5b57\u53ef\u4ee5\u968f\u610f\uff0c \u53ea\u8981\u5728\u89c4\u5219\u6587\u4ef6\u4e2d\u5b9a\u4e49\u597d\u6620\u5c04\u5173\u7cfb\uff0c \u89c4\u5219\u6587\u4ef6\u7684\u8bf4\u660e\u5728\u7a0d\u540e\u8ba8\u8bba\u3002\u5bf9\u4e8e\u8fdb\u7a0b\u8bbf\u95ee\u7684\u6743\u9650\u63a7\u5236\uff0c \u5728linux\u4e0a\uff0c \u6211\u4eec\u719f\u77e5\u7684\u662f\uff0c \u5982\u679c\u4ee5root\u6743\u9650\u542f\u52a8\u4e00\u4e2a\u8fdb\u7a0b\uff0c \u5219\u8be5\u8fdb\u7a0b\u5177\u6709root\u6743\u9650\uff0c \u8fd9\u5c31\u662froot\u7684\u539f\u56e0\uff0c \u8be5\u5b89\u5168\u6a21\u578b\u53eb\u505aDAC\uff08Discretionary Access Control\uff09\u3002 \u800cSELinux\u5bf9\u4e8e\u8fdb\u7a0b\u8bbf\u95ee\u7684\u63a7\u5236\uff0c \u7c7b\u4f3c\u767d\u540d\u5355\u673a\u5236\uff0c \u53ea\u6709\u5199\u5165\u89c4\u5219\u7684\u8fdb\u7a0b\u624d\u6709\u5bf9\u5e94\u7684\u8bbf\u95ee\u6743\u9650\uff0c \u6240\u4ee5\uff0c \u5728\u8fd9\u79cd\u673a\u5236\u4e0b\uff0c \u5373\u4f7f\u662froot\u6743\u9650\u7684sdcardd\uff0c \u4e5f\u65e0\u6cd5\u8bbf\u95ee\u89c4\u5219\uff0c \u8be5\u5b89\u5168\u6a21\u578b\u53ebMAC\uff08Mandatory Access Control\uff09\u3002\u800cMAC\u7684\u57fa\u672c\u7ba1\u7406\u5355\u4f4d\u662f Type Enforcement Access Control (\u57fa\u4e8e\u7c7b\u578b\u7684\u5f3a\u5236\u8bbf\u95ee\u63a7\u5236\uff0c\u7b80\u79f0TEAC\uff0c \u4e5f\u53ebTE)\uff0c \u8fd9\u4e9b\u53ea\u662f\u6982\u5ff5\u540d\u5b57\u800c\u5df2\u3002\n\n\n\n\n\n\nS0 \u662f SELinux\u4e3a\u4e86\u6ee1\u8db3\u519b\u7528\u548c\u6559\u80b2\u884c\u4e1a\u8bbe\u8ba1\u7684 Multi-Level Security(MLS)\u673a\u5236\u6709\u5173\u3002MLS\u5c06\u8fdb\u7a0b\u548c\u6587\u4ef6\u8fdb\u884c\u4e86\u5206\u7ea7\uff0c \u4e0d\u540c\u7ea7\u522b\u7684\u8d44\u6e90\u9700\u8981\u4e0d\u540c\u7ea7\u522b\u7684\u8fdb\u7a0b\u8bbf\u95ee\uff0c \u540e\u6587\u4f1a\u4ecb\u7ecd\u3002\n\n\n\n\n\n\n # ls -Z\n\n # /\n-rw-r--r-- root     root              u:object_r:rootfs:s0 property_contexts\ndrwxr-xr-x root     root              u:object_r:rootfs:s0 res\ndrwx------ root     root              u:object_r:rootfs:s0 root\n-rw-r--r-- root     root              u:object_r:rootfs:s0 s3g.ko\n-rw-r--r-- root     root              u:object_r:rootfs:s0 s3g_core.ko\ndrwxr-x--- root     root              u:object_r:rootfs:s0 sbin\nlrwxrwxrwx root     root              u:object_r:rootfs:s0 sdcard -\n /storage/emulated/legacy\n-rw-r--r-- root     root              u:object_r:rootfs:s0 seapp_contexts\n-rw-r--r-- root     root              u:object_r:rootfs:s0 selinux_version\n-rw-r--r-- root     root              u:object_r:rootfs:s0 sepolicy\n-rw-r--r-- root     root              u:object_r:rootfs:s0 service_contexts\ndrwxr-x--x root     sdcard_r          u:object_r:rootfs:s0 storage\ndr-xr-xr-x root     root              u:object_r:sysfs:s0 sys\ndrwxr-xr-x root     root              u:object_r:system_file:s0 system\n-rw-r--r-- root     root              u:object_r:rootfs:s0 ueventd.rc\n-rw-r--r-- root     root              u:object_r:rootfs:s0 ueventd.zx2000.rc\nlrwxrwxrwx root     root              u:object_r:rootfs:s0 vendor -\n /system/vendo\n\n# system/bin/\n-rwxr-xr-x root     shell             u:object_r:system_file:s0 screenrecord\n-rwxr-xr-x root     shell             u:object_r:sdcardd_exec:s0 sdcard\nlrwxr-xr-x root     shell             u:object_r:system_file:s0 sendevent -\n toolbox\n-rwxr-xr-x root     shell             u:object_r:system_file:s0 sensorservice\n-rwxr-xr-x root     shell             u:object_r:system_file:s0 service\n\n\n\n\n\n\u4e0a\u9762\u662fzx2000\u4e0a\uff0c\u6211\u4eec\u4ee5 storage \u76ee\u5f55\u4e3a\u4f8b\u5b50\u7b80\u5355\u770b\u4e0b\uff0c\u4fe1\u606f\u4e3a u:object_r:rootfs:s0.\n\n\n\n\n\n\nu \u540c\u6837\u662fuser\u610f\u601d\uff0c \u4ee3\u8868\u521b\u5efa\u8be5\u6587\u4ef6\u7684SELinux user\n\n\n\n\n\n\nobject_r: \u8be5\u5b57\u6bb5\u4e0e ps -Z \u7684\u4e00\u6837\uff0c\u8868\u793a role\uff0c\u4f46\u662f\u6587\u4ef6\u662f\u88ab\u52a8\u8bbf\u95ee\u7684\uff0c \u65e0\u6cd5\u79f0\u4e3a\u4e00\u4e2a\u89d2\u8272\uff0c \u6240\u4ee5\uff0c \u6240\u6709\u6587\u4ef6\u7684role\u90fd\u7528object_r\u8868\u793a\n\n\n\n\n\n\nrootfs: type, \u548c domain \u4e00\u4e2a\u610f\u601d\uff0c \u5c31\u662f\u4e00\u4e2a\u5206\u7c7b\u7684\u6807\u7b7e\u3002 \u6240\u6709\u7684\u6587\u4ef6\uff08\u5305\u62ec\u6587\u4ef6\u7cfb\u7edf\uff09\u90fd\u8981\u4e48\u6709\u6807\u7b7e\uff0c\u8981\u4e48\u5c31\u662funlabeled\u3002\n\n\n\n\n\n\ns0\uff1a MLS\u7684\u7ea7\u522b\u3002\n\n\n\n\n\n\n\u6240\u4ee5\uff0c\u540e\u9762\u4f1a\u4ecb\u7ecdTE\uff0c RBAC, MLS \u7b49\u7684\u89c4\u5219\u3002\n\n\nLabeling\u4ecb\u7ecd\uff08\u4e00\uff09\n\n\n\u57fa\u4e8e\u4e0a\u9762\u7684SContext\u4fe1\u606f\uff0c\u5148\u4ecb\u7ecd\u4e0b\u6253\u6807\u7b7e\uff0c \u4e5f\u5c31\u662f\u4e3b\u52a8\u5355\u5143\u7684domain\u548c\u88ab\u52a8\u5355\u5143\u7684type\u521d\u59cb\u5316\u7684\u52a8\u4f5c\u3002\u5bf9\u4e8e\u65b0\u521b\u5efa\u7684\u8fdb\u7a0b\u548c\u65b0\u521b\u5efa\u7684\u6587\u4ef6\u7684SContext\uff0c\u6211\u4eec\u4f1a\u5728\u4ecb\u7ecd\u4e86TE\u89c4\u5219\u540e\uff0c\u518d\u5728Labeling\u4ecb\u7ecd\uff08\u4e8c\uff09\u4ecb\u7ecd\u3002\n\n\ndomain\u521d\u59cb\u5316\n\n\ndomain\u8ddf\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e00\u6837\uff0c\u53ef\u4ee5\u88ab\u7ee7\u627f\uff0c\u4e5f\u53ef\u4ee5\u88ab\u6539\u53d8\u3002\u6240\u4ee5\uff0c\u5b83\u4e0e\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u4e00\u6837\uff0c\u5728\u9700\u8981\u6539\u53d8\u7684\u65f6\u5019\uff0c\u663e\u793a\u5730\u5207\u6362\uff0c\u800c\u8fd9\u4e2a\u5207\u6362\u52a8\u4f5c\u5728sepolicy\u4e2d\u5b9a\u4e49\u3002\u6240\u4ee5\uff0c \u53ea\u6709init\u8fdb\u7a0b\u6709\u521d\u59cb\u7684domain\uff0c\u5176\u4ed6\u8fdb\u7a0b\u90fd\u662f\u6839\u636eDT(Domain Transition)\u89c4\u5219\u5207\u6362\u7684\uff0c\u540e\u6587\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u3002\n\n\n# init.rc\non early-init    \n   # Set the security context for the init process.    \n   # This should occur before anything else (e.g. ueventd) is started.\n   setcon u:r:init:s0\n\n\n\n\n\n\u8fd9\u91cc\u5c31\u5c06init\u7684domain\u8bbe\u7f6e\u4e3ainit\u3002\n\n\nFilesystem/File \u7684\u521d\u59cb\u5316\n\n\n\u4e0a\u9762\u901a\u8fc7\nls -Z\n\u770b\u5230\u7684SContext\uff0c\u6587\u4ef6\u90e8\u5206\u662f\u5728\nexternal/sepolicy/file_contexts\n\u4e2d\u5b9a\u4e49\u7684.\u8fd9\u4e2a\u6587\u4ef6\u6700\u7ec8\u4f1a\u4f5c\u4e3amkext4fs\u5de5\u5177\u7684\u53c2\u6570,\u88ab\u8bbe\u7f6e\u5230system.img\u4e2d.\n\n\n# \u683c\u5f0f: regexp \n-type\n ( \nfile_label\n | \nnone\n )\n\n\n# \n-type\n \u4e2d\u7684type\u4e0e ls -la \u7684\u8f93\u51fa\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5339\u914d.\u6bd4\u5982:\n\n\n# -rw-r--r-- 1 root    root    11208 Mar 11 11:13 te_macros\n\n\n# drwxr-xr-x 3 root    root     4096 Mar 11 11:13 tools\n\n\n# \u5219 -- \u8868\u793a\u5339\u914d\u6587\u4ef6\uff0c -d \u8868\u793a\u5339\u914d\u76ee\u5f55\uff0e\n\n\n# \u56e0\u4e3a\u524d\u9762\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u3000\u6240\u4ee5\u3000\n-type\n\u3000\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8fc7\u6ee4\u9700\u8981\u7684\u6587\u4ef6\u7c7b\u578b\uff0c\u3000\u5c06\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\u548c\u6587\u4ef6\u7c7b\u578b\u6253\u4e0a\u6807\u7b7e\uff0e\n\n\n/\n           u\n:\nobject_r\n:\nrootfs\n:\ns0 \n\n\n# Data files\n\n\n/\nadb_keys       u\n:\nobject_r\n:\nadb_keys_file\n:\ns0\n\n/\ndefault\\\n.\nprop      u\n:\nobject_r\n:\nrootfs\n:\ns0\n\n\n\n/\nsystem\n(\n/\n.\n*\n)\n?\n       u\n:\nobject_r\n:\nsystem_file\n:\ns0\n\n# \u8fd9\u91cc\u7684--, \u4e2a\u4eba\u7406\u89e3\u662f\uff0c\u3000\u901a\u8fc7\u900f\u8fc7\u8f6f\u94fe\u63a5\uff0c\u5c06\u6807\u7b7e\u6253\u5728\u5b9e\u9645\u7684\u6587\u4ef6\u4e0a\uff0e\n\n\n/\nsystem\n/\nbin\n/\nsh      \n--\n  u\n:\nobject_r\n:\nshell_exec\n:\ns0\n\n/\nsystem\n/\nbin\n/\nrun\n-\nas  \n--\n  u\n:\nobject_r\n:\nrunas_exec\n:\ns0\n\n\n/\nsystem\n/\nbin\n/\nsdcard      u\n:\nobject_r\n:\nsdcardd_exec\n:\ns0\n\n\n\n\n\n\u6240\u6709\u65b0\u6dfb\u52a0\u7684\u6587\u4ef6\uff0c\u5efa\u8bae\u5728\u8fd9\u8fb9\u67e5\u770b\u4e0b\uff0c\u662f\u5426\u9700\u8981\u8bbe\u7f6e\u65b0\u7684\u6807\u7b7e\uff0e\u3000\u4e00\u822c\u65b0\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u4f1a\u9700\u8981\u8bbe\u7f6e\u989d\u5916\u7684type\uff0c\u5e76\u4e14\u6709xx.te\u3000\u5bf9\u5e94\u7684\u89c4\u5219\u6587\u4ef6\u548c\u4e0etype\u5bf9\u5e94\u7684domain\uff0e\n\n\n\u518d\u6765\u770b\n\u6587\u4ef6\u7cfb\u7edf\u7684\u6807\u7b7e\u521d\u59cb\u5316\n\uff0c\u8fd9\u4e2a\u4e0d\u597d\u7406\u89e3\uff0c\u611f\u89c9\u8ddf\u5185\u6838selinux\u6a21\u5757\u7684\u5b9a\u4e49\u4e5f\u626f\u4e0a\u5173\u7cfb\u4e86\uff0c\u4ee5\u4e0b\u53ea\u662f\u4e2a\u4eba\u7406\u89e3\uff1a\n\n\n#\n \nThe\n \nfs_use_xattr\n \nstatement\n \nis\n \nused\n \nto\n \nallocate\n \na\n \nsecurity\n \ncontext\n \nto\n \nfilesystems\n\n\n#\n \n\u7ed9\u6587\u4ef6\u7cfb\u7edf\u6253\u6807\u7b7e\uff0c\u3000\u8be5\u6807\u7b7e\u662f\u4f5c\u4e3a\n \ntarget_type\n,\n \n\u4f1a\u5728\u89c4\u5219\u91cc\u88ab\u4f7f\u7528\uff0e\n\n\n#\n \n\u6bd4\u5982\uff1a\nvold\n.\nte\n:\n \nallow\n \nvold\n \nlabeledfs\n:\nfilesystem\n \n{\n \nmount\n \nunmount\n \nremount\n \n}\n;\n\n\n#\n      \nfile\n.\nte\n:\n \nallow\n \nfile_type\n \nlabeledfs\n:\nfilesystem\n \nassociate\n;\n \n\n#\n               \n\u5141\u8bb8\n \nfile_type\n \n\u5c5e\u6027\u7684\u6587\u4ef6\u5728\nlabeledfs\n\u7c7b\u578b\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u521b\u5efa\n\n\n#\n \n\u4e2a\u4eba\u7406\u89e3\uff0c\u8fd9\u7c7b\u6587\u4ef6\u7cfb\u7edf\u4e0a\u6240\u521b\u5efa\u7684\u6587\u4ef6\n/\n\u76ee\u5f55\uff0c\u4f1a\u7ee7\u627f\u81ea\u7236\u76ee\u5f55\u89c4\u5219\uff0c\u540c\u65f6\u53d7\nTT\n\u89c4\u5219\u5f71\u54cd\u3002\n\n \nfs_use_xattr\n \nyaffs2\n \nu\n:\nobject_r\n:\nlabeledfs\n:\ns0\n;\n\n \nfs_use_xattr\n \njffs2\n \nu\n:\nobject_r\n:\nlabeledfs\n:\ns0\n;\n\n \nfs_use_xattr\n \next2\n \nu\n:\nobject_r\n:\nlabeledfs\n:\ns0\n;\n\n \nfs_use_xattr\n \next3\n \nu\n:\nobject_r\n:\nlabeledfs\n:\ns0\n;\n\n \nfs_use_xattr\n \next4\n \nu\n:\nobject_r\n:\nlabeledfs\n:\ns0\n;\n\n \nfs_use_xattr\n \nxfs\n \nu\n:\nobject_r\n:\nlabeledfs\n:\ns0\n;\n\n \nfs_use_xattr\n \nbtrfs\n \nu\n:\nobject_r\n:\nlabeledfs\n:\ns0\n;\n\n \nfs_use_xattr\n \nf2fs\n \nu\n:\nobject_r\n:\nlabeledfs\n:\ns0\n;\n\n\n \n#\u3000\nThe\n \nfs_use_task\n \nstatement\n \nis\n \nused\n \nto\n \nallocate\n \na\n \nsecurity\n \ncontext\n \nto\n \npseudo\n \nfilesystems\n \n \n#\u3000\nthat\n \nsupport\n \ntask\n \nrelated\n \nservices\n \nsuch\n \nas\n \npipes\n \nand\n \nsockets\n.\n\n \n#\n \n\u4f7f\u7528\nfs_use_task\n\u63cf\u8ff0\u7684\u5b57\u6bb5\u53ea\u6709\u4e0b\u9762\u4e24\u6761\uff0c\u3000\u5177\u4f53\u7684\u542b\u4e49\u8fd8\u6ca1\u7406\u89e3\uff0e\n\n \nfs_use_task\n \npipefs\n \nu\n:\nobject_r\n:\npipefs\n:\ns0\n;\n\n \nfs_use_task\n \nsockfs\n \nu\n:\nobject_r\n:\nsockfs\n:\ns0\n;\n\n\n \n#\u3000\nThe\n \nfs_use_trans\n \nstatement\n \nis\n \nused\n \nto\n \nallocate\n \na\n \nsecurity\n \ncontext\n \nto\n \npseudo\n \nfilesystems\n \n \n#\u3000\nsuch\n \nas\n \npseudo\n \nterminals\n \nand\n \ntemporary\n \nobjects\n.\n \nThe\n \nassigned\n \ncontext\n \nis\n \nderived\n \nfrom\n \n \n#\u3000\nthe\n \ncreating\n \nprocess\n \nand\n \nthat\n \nof\n \nthe\n \nfilesystem\n \ntype\n \nbased\n \non\n \ntransition\n \nrules\n.\n\n \n#\n \n\u4ece\u63cf\u8ff0\u662f\u7ed9\u4f2a\u6587\u4ef6\u7cfb\u7edf\u7684\uff0c\u3000\u6bd4\u5982\uff0f\ndev\n/\n\u7b49\uff0e\n\n \n#\n \n\u8be5\u89c4\u5219\u63cf\u8ff0\u4e86\u5728\u5b9a\u4e49\u7684\u6587\u4ef6\u7cfb\u7edf\u4e0b\u9762\u6240\u521b\u5efa\u7684\u6587\u4ef6\u7684\nSContext\n\uff0c\u3000\u4f46\u8be5\u89c4\u5219\u53c8\u53ef\u4ee5\u88ab\uff34\uff34\u89c4\u5219\u5f71\u54cd\uff0e\u6bd4\u5982\uff1a\n\n \n#\n \ntype_transition\n \nsdcardd\n \ndevpts\n:\n{\n \nchr_file\n \n}\n \nmedia_rw_data_file\n;\n \n\u5982\u679c\u6709\u8fd9\u6761\u8bed\u53e5\uff0c\u3000\u5219\nsdcardd\n\n \n#\n \n\u7c7b\u578b\u7684\u8fdb\u7a0b\u7684\ndevpts\n\u4e0b\u521b\u5efa\u7684\u5b57\u7b26\u8bbe\u5907\u6587\u4ef6\u7684\nSContext\n\u4e3a\nmedia_rw_data_file\n\uff1b\u3000\u5982\u679c\u6ca1\u6709\u8fd9\u53e5\uff0c\u5219\nSContext\n\u4e3a\n\n \n#\n \ndevpts\n.\n \n\u8fd9\u91cc\u7684\u89c4\u5219\u548c\u524d\u9762\u76ee\u5f55\u7684\u89c4\u5219\u7c7b\u4f3c\uff0c\u3000\u4f46\u8fd9\u91cc\u662f\u57fa\u4e8e\u6587\u4ef6\u7cfb\u7edf\u7684\uff0c\u3000\u89c4\u5219\u7ee7\u627f\u81ea\u6587\u4ef6\u7cfb\u7edf\uff0c\u800c\u4e0d\u662f\u76ee\u5f55\uff0e\u6bd4\u5982\uff1a\n\n \n#\n \n\u5982\u679c\u6709\u4fee\u6539\u4ee5\u4e0a\nTT\n\u7684\nobject\n \nclass\n \n\u4e3a\n \ndir\n,\n \n\u53e6\u4e00\u8fdb\u7a0b\u5728\nsdcardd\n\u8fdb\u7a0b\u6240\u521b\u5efa\u7684\u76ee\u5f55\u91cc\u9762\u6240\u521b\u5efa\u7684\u6587\u4ef6\uff0c\u4e0d\u4f1a\u7ee7\u627f\nmedia_rw_data_file\n,\n\n \n#\n \n\u5176\nSContext\n\u4f9d\u7136\u4e3a\ndevpts\n\uff0e\n\n \nfs_use_trans\n \ndevpts\n \nu\n:\nobject_r\n:\ndevpts\n:\ns0\n;\n\n \nfs_use_trans\n \ntmpfs\n \nu\n:\nobject_r\n:\ntmpfs\n:\ns0\n;\n\n \nfs_use_trans\n \ndevtmpfs\n \nu\n:\nobject_r\n:\ndevice\n:\ns0\n;\n\n \nfs_use_trans\n \nshm\n \nu\n:\nobject_r\n:\nshm\n:\ns0\n;\n\n \nfs_use_trans\n \nmqueue\n \nu\n:\nobject_r\n:\nmqueue\n:\ns0\n;\n\n\n\n\n\n\n\u4e0a\u9762\u5173\u4e8e\nTT\n\u7684\u89c4\u5219\uff0c\u8fd8\u6709\ntarget_type\n\u7684\u6982\u5ff5\uff0c\u53ef\u4ee5\u5728\u540e\u9762\u4ecb\u7ecd\u4e86TE\u8bed\u6cd5\u540e\uff0c\u518d\u56de\u8fc7\u5934\u7406\u89e3\u4e0b\u3002\u4ee5\u4e0a\u4ecb\u7ecd\u4e86\u6587\u4ef6\uff0c\u6587\u4ef6\u7cfb\u7edf\u6253\u6807\u7b7e\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u6587\u4ef6\u7cfb\u7edf\u4e0d\u5b8c\u6574\uff0c\u8d77\u7801rootfs\u548cproc\u90fd\u6ca1\u4ecb\u7ecd\u5230\uff0c\u4e0b\u9762\u6211\u4eec\u4ecb\u7ecd\u4e0b\uff0c \u56e0\u4e3arootfs\u548cproc\u65e0\u6cd5\u7528\u4e0a\u9762\u51fd\u6570\u6253\u6807\u7b7e(\u4e0d\u77e5\u9053\u4e3a\u5565)... \u5176\u4e2d\u4e00\u4e2a\u53ef\u80fd\u539f\u56e0\u662f\uff0c \u8fd9\u4e9b\u6587\u4ef6\u7cfb\u7edf\u7684SContext\u662f\u88ab\u5b9a\u6b7b\u7684\uff0c\u4e0d\u5e0c\u671b\u88abTT\u89c4\u5219\u6539\u53d8\u3002\u4f7f\u7528\u7684\u5173\u952e\u5b57\u662f\ngenfscon\n\n\n#\u3000\u683c\u5f0f\uff1a\u3000genfscon\u3000fstype partial_path fs_context\n# \u5728fstype\u4e3aproc\u65f6\uff0c\u3000partial_path\u3000\u6307\u5b9a\u4e3aproc\u4e0b\u7684\u8def\u5f84\uff0c\u5176\u4ed6\u6587\u4ef6\u7cfb\u7edf\u7edf\u4e00\u4e3a / \uff0e\n # Label inodes with the fs label.\n genfscon rootfs / u:object_r:rootfs:s0\n\n # proc labeling can be further refined (longest matching prefix).\n genfscon proc / u:object_r:proc:s0\n genfscon proc /net u:object_r:proc_net:s0\n\n\n\n\n\n\u7f51\u7edc\u7aef\u53e3/\u6570\u636e\u5305\u521d\u59cb\u5316\n\n\nSEAndroid\u4e2d\u6ca1\u6709\u4e2a\u6570\u636e\u5305\u548c\u7aef\u53e3\u6253\u6807\u7b7e\uff0e\nselinux-network.sh\n\u548c\nport_contexts\n\u90fd\u5b58\u5728\uff0c\u4f46\u89c4\u5219\u90fd\u6ce8\u91ca\u4e86\uff0c\u3000\u4e0d\u786e\u5b9a\u662f\u5426\u652f\u6301\uff0e\u6709\u9700\u6c42\u7684\u7ae5\u978b\u9a8c\u8bc1\u4e0b\uff0e\uff0e\uff0e\n\n\nTE\u4ecb\u7ecd\n\n\nTE\u5c31\u662f\u7ed9\u4e0a\u9762\u7684domain\u548ctype\u5b9a\u4e49\u8bbf\u95ee\u89c4\u5219\u3002\n\n\n\u5148\u6765\u770b\u4e0bTE\u7684\u57fa\u672c\u683c\u5f0f\uff1a\n\n\nrule_name source_type target_type : object_class perm_set;\n\n\n\n\n\n\u6765\u6bb5\nselinux wiki\n\u7684\u89e3\u91ca\u3002\n\n\n\n\n\n\n\n\n\u57df\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\nrule_name\n\n\nThe applicable allow, dontaudit, auditallow, and neverallow rule keyword.\n\n\n\n\n\n\nsource_type / target_type\n\n\nOne or more source / target type, typealias or attribute identifiers. Multiple entries consist of a space separated list enclosed in braces ({}).\nEntries can be excluded from the list by using the negative operator (-).\nThe target_type can have the self keyword instead of type, typealias or attribute identifiers. This means that the target_type is the same as the source_type.\nThe neverallow rule also supports the wildcard operator (*) to specify that all types are to be included and the complement operator (~) to specify all types are to be included except those explicitly listed.\n\n\n\n\n\n\nclass_object\n\n\nOne or more object classes. Multiple entries consist of a space separated list enclosed in braces ({}).\n\n\n\n\n\n\nperm_set\n\n\nThe access permissions the source is allowed to access for the target object (also known as the Acess Vector). Multiple entries consist of a space separated list enclosed in braces ({}).\nThe optional wildcard operator (*) specifies that all permissions for the object class can be used.\nThe complement operator (~) is used to specify all permissions except those explicitly listed (although the compiler issues a warning if the dontaudit rule has '~').\n\n\n\n\n\n\n\n\n\u4e0b\u9762\u6765\u51e0\u4e2a\u4f8b\u5b50\u6765\u719f\u6089\u683c\u5f0f\u548c\u6982\u5ff5\u3002\n\n\nallow\n \nsdcardd\n \nrootfs\n:\ndir\n \nmounton\n;\n\n\n\n\n\n\n\n\n\n\nallow\uff1a TE\u7684allow\u8bed\u53e5\uff0c \u8868\u793a\u6388\u6743\u3002\u9664\u4e86allow\u4e4b\u5916\uff0c \u8fd8\u6709allowaudit\u3001dontaudit\u3001neverallow\u7b49\u3002\n\n\n\n\n\n\nsdcardd\uff1a source type\u3002 \u4e5f\u53eb domain\u3002 \u4e0e\u4e0a\u9762\u8fdb\u7a0b\u663e\u793a\u7684domain\u4e00\u81f4\u3002\n\n\n\n\n\n\nrootfs\uff1a target type\u3002 \u4e5f\u5c31\u662f\u6587\u4ef6\u7684\u6807\u7b7e\uff0c \u4e0e\u4e0a\u9762\u6587\u4ef6\u663e\u793a\u7684type\u4e00\u81f4\u3002\n\n\n\n\n\n\ndir\uff1a \u4ee3\u8868 Ojbect Class. \u5b83\u8868\u793a\u80fd\u591f\u7ed9domain\u64cd\u4f5c\u7684\u4e00\u7c7b\u4e1c\u897f\u3002\u6bcf\u4e2a\u6587\u4ef6\u5206\u7c7b\u91cc\u9762\u53ef\u4ee5\u5305\u542b\u5404\u79cd\u4e0d\u540c\u5c5e\u6027\u7684\uff0c\u6bd4\u5982\u6587\u4ef6\uff0c\u7ba1\u9053\uff0c\u76ee\u5f55\u7b49\uff0c \u8fd9\u4e9b\u662f\u7531Object Class\u5b9a\u4e49\u548c\u533a\u5206\u3002\u5728android\u91cc\uff0c\u8fd8\u800c\u5916\u5b9a\u4e49\u4e86\u4e00\u4e2aObject Class\uff0c \u53eb\u505aBinder\u3002\n\n\n\n\n\n\nmounton\uff1a \u5728\u8be5\u7c7b Object Class \u4e2d\u6240\u5b9a\u4e49\u7684\u64cd\u4f5c\u3002\n\n\n\n\n\n\n\u4ee5\u4e0a\u7684\u6574\u53e5\u542b\u4e49\u662f\uff0c \u5141\u8bb8sdcardd\u5c06\u6240\u6709rootfs\u6807\u7b7e\u4e0b\u7684\u76ee\u5f55\u4f5c\u4e3a\u6302\u8f7d\u70b9\u3002\n\n\n \nallow\n \nvold\n \nsystem_file\n:\nfile\n \nx_file_perms\n;\n\n\n#\n \n\u5141\u8bb8\nvold\n\u57df\u4e2d\u7684\u8fdb\u7a0b\u6267\u884c\nsystem_file\n\uff08\u6240\u6709\n/\nsystem\n/\n \n\u548c\n \n/\nvendor\n/\n \n\u76ee\u5f55\u4e0b\uff09\u7c7b\u578b\u7684\u6587\u4ef6\u3002\n\n\n\nallow\n \nvdc\n \ndumpstate\n:\nunix_stream_socket\n \n{\n \nread\n \nwrite\n \ngetattr\n \n}\n;\n\n\n#\n \n\u5141\u8bb8\nvdc\n\u57df\u4e2d\u7684\u8fdb\u7a0b\nread\n \nwrite\n \n\u548c\n \ngetattr\n \ndumpstate\n\u6807\u7b7e\u4e2d\nunix\n\u57df\u7684\nsocket\n\u3002\n\n\n\nneverallow\n \nnetd\n \ndev_type\n:\nblk_file\n \n{\n \nread\n \nwrite\n \n}\n;\n\n\n#\n \n\u4e0d\u5141\u8bb8\nnetd\n\u57df\u7684\u8fdb\u7a0b\u8bfb\u5199\n/\ndev\n/\n\u5e95\u4e0b\u7684\u5757\u8bbe\u5907\u6587\u4ef6\u3002\n\n\n\n\n\n\n\u4e4b\u524d\u6211\u4eec\u63d0\u5230\uff0c TE\u662f\u7c7b\u4f3c\u767d\u540d\u5355\u5f62\u5f0f\u7684\uff0c\u53ea\u6709\u88ab\u8bb0\u5f55\u7684\u89c4\u5219\u624d\u88ab\u5141\u8bb8\uff0c \u672a\u88ab\u8bb0\u5f55\u7684\u884c\u4e3a\u90fd\u662f\u62d2\u7edd\u7684\uff0c \u90a3\u4e48neverallow\u5176\u5b9e\u662f\u6ca1\u6709\u610f\u4e49\u7684\u4e86\u3002 \u5176\u5b9eneverallow\u7684\u5b58\u5728\u662f\u5728\u751f\u6210\uff08\u7f16\u8bd1\uff09\u5b89\u5168\u7b56\u7565\u6587\u4ef6\u65f6\u68c0\u67e5allow\u8bed\u53e5\u662f\u5426\u8fdd\u53cd\u4e86neverallow\uff0c\u9632\u6b62\u7531\u4e8e\u5f00\u53d1\u4eba\u5458\u7684\u5931\u8bef\u5bfc\u81f4\u67d0\u4e9b\u57df\u6743\u9650\u8fc7\u9ad8\u3002\u8be5\u9519\u8bef\u4f1a\u5728\u7f16\u8bd1\u9636\u6bb5\u51fa\u9519\u3002\n\n\nObject class \u548c\u5176 Perm_set\n\n\nThe object classes have matching declarations in the kernel, meaning that it is not trivial to add or change object class details. The same is true for permissions. Development work is ongoing to make it possible to dynamically register and unregister classes and permissions.\n\n\n\n\n\n\u8fd9\u91cc\u662f\u6458\u6284\u4e00\u6bb5CentOS\u91cc\u7684\u4ecb\u7ecd\uff0c \u5bf9\u4e8eobject class\u548cpermission\u7684\u5b9a\u4e49\u7684\u8bf4\u660e\uff0c \u8fd9\u4e24\u8005\u90fd\u662f\u5728kernel\u4e2d\u5b9a\u4e49\u4e0e\u6620\u5c04\u7684\uff0c \u4e5f\u5c31\u662f\u8bf4\uff0c \u8fd9\u4e24\u4e2a\u662f\u8ddf\u8bbe\u5907\u76f8\u5173\u7684\uff0c \u4e0d\u5141\u8bb8\u968f\u610f\u66f4\u6539\u3002\n\n\n\u9996\u5148\uff0c Object class \u5b9a\u4e49\u5728\u6587\u4ef6external/sepolicy/security_classes\uff0c \u7b80\u5355\u6458\u53d6\u5982\u4e0b\u3002\u8be5\u6587\u4ef6\u4e2d\u53ea\u662f\u4e00\u5806\u5b9a\u4e49\uff0c \u81f3\u4e8e\u600e\u4e48\u8ddflinux\u4e2d\u5b9e\u9645\u7684\u6587\u4ef6\u6620\u5c04\u7684\u5462\uff1f\uff08\u8bf7\u53c2\u8003\uff1a\u5185\u6838\u4ee3\u7801\uff09\n\n\n#\n \nfile\n-\nrelated\n \nclasses\n\n\nclass\n \nfilesystem\n\n\nclass\n \nfile\n\n\nclass\n \ndir\n\n\nclass\n \nfd\n\n\nclass\n \nlnk_file\n\n\nclass\n \nchr_file\n\n\nclass\n \nblk_file\n\n\nclass\n \nsock_file\n\n\nclass\n \nfifo_file\n\n\n\n#\n \nProperty\n \nservice\n\n\nclass\n \nproperty_service\n          \n#\n \nuserspace\n\n\n\n#\n \nService\n \nmanager\n\n\nclass\n \nservice_manager\n           \n#\n \nuserspace\n\n\n\n\n\n\n\u6240\u6709\u7684 Object class \u9700\u8981\u901a\u8fc7class\u8bed\u53e5\u7533\u660e\u3002\n\n\n\u8fd9\u91ccuserspace\uff0c\u6ce8\u610f\u4e0b\uff0c \u540e\u6587\u4f1a\u63d0\u5230android\u91cc\u7279\u6b8a\u5b9a\u4e49\u7684\u8fd9\u4e9buserspace\u7684object class\uff0c\u6240\u6709\u6807\u6ce8\u4e86userspace\u7684\uff0c\u90fd\u662f\u8fdb\u7a0b\u8fd0\u884c\u65f6\u901a\u8fc7selinux\u7684\u6807\u51c6API\u52a8\u6001\u68c0\u67e5\uff0c\u8ddfandroid\u7684xml\u4e2dpermission\u68c0\u67e5\u7c7b\u4f3c\u3002\n\n\n\u4e0b\u9762\u770b\u4e0b \nperm_set\n\u3002 \u6240\u8c13\nperm_set\n\u4e5f\u53eb\u505a access vectors\uff0c \u6307\u67d0\u4e2aobject class\u6240\u652f\u6301\u7684\u64cd\u4f5c\u3002 \u8be5\u64cd\u4f5c\u90fd\u662f\u5728kernel\u91cc\u9884\u5b9a\u4e49\u7684\uff0c \u4e5f\u662f\u65e0\u6cd5\u589e\u52a0\u6216\u6539\u53d8\u5176\u884c\u4e3a\uff0c \u4f46\u53ef\u4ee5\u5c06\u5b83\u4eec\u4e0e\u5bf9\u5e94\u7684object class \u7ed1\u5b9a\u3002\u6ce8\u610f\uff1a\u4e00\u4e9bobject class\u4f1a\u4e0d\u652f\u6301\u67d0\u4e9bpermission\uff0c \u6bd4\u5982 file \u4e0d\u652f\u6301 mounton\u3002\n\n\n\u8fd9\u4e9b\u6620\u5c04\u5b9a\u4e49\u5728external/sepolicy/access_vectors\uff0c \u7b80\u5355\u6458\u53d6\u5982\u4e0b\u3002\n\n\n \ncommon\n \nfile\n\n \n{\n\n     \nioctl\n\n     \nread\n\n     \nwrite\n\n     \ncreate\n\n     \ngetattr\n\n     \nsetattr\n\n     \nlock\n\n     \nrelabelfrom\n\n     \nrelabelto\n\n     \nappend\n\n     \nunlink\n\n     \nlink\n\n     \nrename\n\n     \nexecute\n\n     \nswapon\n\n     \nquotaon\n\n     \nmounton\n\n \n}\n\n\n\nclass\n \ndir\n\n \ninherits\n \nfile\n\n \n{\n   \n     \nadd_name\n\n     \nremove_name\n\n     \nreparent\n\n     \nsearch\n\n     \nrmdir\n\n     \nopen\n\n     \naudit_access\n\n     \nexecmod\n\n \n}\n \n\n\n\n\n\nperm_set\n\u7684\u5b9a\u4e49\u67092\u79cd\uff0c \u5982\u4e0a\uff0c \u4e00\u79cd\u662fcommon\u5b9a\u4e49\u7684\uff0c \u7c7b\u4f3c\u9762\u5411\u5bf9\u8c61\u7684\u57fa\u7c7b\uff0c \u53e6\u4e00\u79cd\u662fclass\u5b9a\u4e49\u7684\uff0c \u53ef\u4ee5\u7ee7\u627fcommen\u5b9a\u4e49\u7684\u96c6\u5408\u3002\n\n\ntype\uff0c attribute \u548c allow \u7b49\u5173\u952e\u5b57\u8bf4\u660e\n\n\n\u9996\u5148\uff0c \u6211\u4eec\u770btype\u7684\u5b9a\u4e49\uff1a\n\n\ntype type_id [,attribute_id]\n\n\n\n\n\n\u4e0a\u9762\u662ftype\u7684\u5b8c\u6574\u547d\u4ee4\u683c\u5f0f\uff0c \u6307\u5b9a\ntype_id\n, \u5e76\u5173\u8054\u5230\nattribute_id\n\uff0c \nattribute_id\n\u53ef\u4ee5\u591a\u4e2a\u3002\n\n\n\u800cSEAndroid\u7684\u5c5e\u6027\u5b9a\u4e49\u5982\u4e0b\uff1a\n\n\nattribute domain\nattribute file_type\n\n\n\n\n\n\u9664\u4e86\u901a\u8fc7type\u5b9a\u4e49\u65f6\u7ed1\u5b9a\u5c5e\u6027\uff0c \u8fd8\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\uff0c \u5c06vold\u7c7b\u578b\u4e0emlstrustedsubject\u5c5e\u6027\u5173\u8054\u8d77\u6765\n\n\ntypeattribute vold mlstrustedsubject;\n\n\n\n\n\ntype\u548cattribute\u5173\u8054\u8d77\u6765\u5177\u4f53\u662f\u4ec0\u4e48\u542b\u4e49\u5462\uff1f \u5176\u5b9e\uff0c attribute \u53ef\u4ee5\u7406\u89e3\u4e3a\u5206\u7ec4\u7684\u610f\u601d\uff0c \u4e5f\u5c31\u662f\u5c06\u4e00\u5806\u7684\ntype_id\n \u5f52\u5230\u4e0d\u540c\u7684\u7ec4\uff0c \ntype_id\n \u548c \nattribute_id\n \u4f4d\u4e8e\u540c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\uff0c \u4e5f\u5c31\u662f\u8bf4\uff0c \u4e0d\u80fd\u7528type\u5b9a\u4e49\u5728attribute\u4e2d\u5df2\u6709\u7684\u540d\u5b57\uff0c \u4e5f\u4e0d\u80fd\u7528attribute\u5b9a\u4e49type\u4e2d\u5df2\u6709\u7684\u540d\u5b57\u3002 \u4e0b\u9762\u770b\u4e2a\u4f8b\u5b50\uff0c \u6765\u66f4\u6df1\u5165\u7406\u89e3\ntype_id\n\u548c\nattribute_id\n\u7684\u5173\u7cfb\uff0c\u8bfb\u8005\u53ef\u4ee5\u7ed3\u5408\u4e0b\u9762\u7684\u4f8b\u5b50\u548c\u5f00\u5934\u7684\u6811\u5f62\u4f8b\u5b50\u6765\u7406\u89e3\u3002\n\n\n#\n \n\u5185\u5bb9\u6765\u81ea\n \ndhcp\n.\nte\n \n\nnet_domain\n(\ndhcp\n)\n\n\n\n#\n \n\u5185\u5bb9\u6765\u81ea\n \nnetd\n.\nte\n\n\nnet_domain\n(\nnetd\n)\n\n\n\n#\n \n\u5185\u5bb9\u6765\u81ea\n \nte_macros\n,\n \n\u610f\u601d\u662f\u5b9a\u4e49\u4e00\u4e2a\u5b8f\u51fd\u6570\nnet_domain\n\uff0c\n \n\u901a\u8fc7\ntypeattribute\n \n\u5c06\u53c2\u6570\n \n\u4e0e\n \nnetdomain\n \n\u5173\u8054\u3002\n\n\n#####################################\n\n\n#\n \nnet_domain\n(\ndomain\n)\n\n\n#\n \nAllow\n \na\n \nbase\n \nset\n \nof\n \npermissions\n \nrequired\n \nfor\n \nnetwork\n \naccess\n.\n\n\ndefine\n(\n`\nnet_domain\n, `\n\n\ntypeattribute $1 netdomain;\n\n\n)\n\n\n\n#\n \n\u5185\u5bb9\u6765\u81ea\n \nnet\n.\nte\n,\n \n\u5b9a\u4e49\u4e86\n \nnetdomain\n \n\u8fd9\u4e2a\nattribute\n\u6240\u6709\npermissions\n\uff0c\n \n\u4ee5\u4e0b\u7b80\u5355\u5217\u51fa\u3002\n\n\nallow\n \nnetdomain\n \nself\n:\ntcp_socket\n \ncreate_stream_socket_perms\n;\n\n\n\n\n\n\n\u4ee5\u4e0a\u4f8b\u5b50\u7684\u542b\u4e49\u662f\uff0c \u5c06 dhcp \u4e0e netdomain\u5173\u8054\uff0c \u5c06netd\u4e0enetdomain\u5173\u8054\u3002 \u7136\u540e\u53ea\u8981\u901a\u8fc7\u5141\u8bb8netdomain\u6267\u884c\u67d0\u4e9b\u6743\u9650\uff0c \u5c31\u53ef\u4ee5\u505a\u5230\u8ba9dhcp\u548cnetd\u540c\u65f6\u5177\u5907\u67d0\u4e9b\u6743\u9650\u3002\u6240\u4ee5\uff0c attribute \u5c5e\u6027\u5728\u7528\u4e8e source_type \u65f6\uff0c \u662f\u6307\u8d4b\u4e88\u67d0\u4e00\u7ec4\u7684\ntype_id\n \u6743\u9650\u3002 \u901a\u8fc7m4\u8bed\u6cd5\uff0c \u4ee5\u4e0a\u4f8b\u5b50\u5c55\u5f00\u7684\u7ed3\u679c\u662f\uff1a\n\n\n#\n \n\u8fd9\u91cc\u7684\n \ncreate_stream_socket_perms\n \n\u662f\u5728\nglobal_macros\n\u4e2d\u5b9a\u4e49\u7684\u5b8f\uff0c\n \n\u88ab\u5c55\u5f00\u5c31\u662f\u5177\u4f53\u7684\ntcp_socket\n\u7684\npermissions\n\n\n#\n \n\u8fd9\u91cc\u7684\n \nself\n \n\u5c31\u662f\u6307\u4e0e\n \nsource_type\n \n\u4e00\u81f4\u3002\n\n\nallow\n \ndhcp\n \ndhcp\n:\ntcp_socket\n \n{\n \ncreate\n \nlisten\n \naccept\n \nioctl\n \nread\n \ngetattr\n \nwrite\n \nsetattr\n \nlock\n \nappend\n \nbind\n \nconnect\n \ngetopt\n \nsetopt\n \nshutdown\n \n}\n;\n\n\nallow\n \nnetd\n \nnetd\n:\ntcp_socket\n \n{\n \ncreate\n \nlisten\n \naccept\n \nioctl\n \nread\n \ngetattr\n \nwrite\n \nsetattr\n \nlock\n \nappend\n \nbind\n \nconnect\n \ngetopt\n \nsetopt\n \nshutdown\n \n}\n;\n\n\n\n\n\n\n\u518d\u6765\u770b\u4e00\u4e2a\uff0c\u540c\u6837\u662fnetdomain\uff0c \u4f46\u662f\u4f5c\u4e3a\ntarget_type\n\u7684\u4f8b\u5b50\n\n\nallow netd netdomain\n:{\ntcp_socket udp_socket rawip_socket dccp_socket tun_socket\n}\n \n{\nread write getattr setattr getopt setopt\n};\n\n\n\n# m4 \u5c55\u5f00\uff0c \u8fd9\u91cc\u53ea\u5b9a\u4e49\u4e86dhcp\u548cnetd\u5c5e\u4e8enetdomain\uff0c \u5b9e\u9645\u4e0aandroid\u4e2d\u8fd8\u6709\u597d\u591a\u7f51\u7edc\u670d\u52a1\u5c5e\u4e8e\u8be5domain\n\nallow netd \n{\ndhcp netd\n}:{\ntcp_socket udp_socket rawip_socket dccp_socket tun_socket\n}\n \n{\nread write getattr setattr getopt setopt\n};\n\n\n\n\n\n\n\u8fd9\u53e5\u7684\u610f\u601d\u662f\uff0c \u5141\u8bb8netd\u5bf9\u6240\u6709netdomain\u5c5e\u6027\u6210\u5458\u7684{tcp_socket udp_socket rawip_socket dccp_socket tun_socket} \u6267\u884c {read write getattr setattr getopt setopt}. \u8fd9\u91cc\u7684{}\u662f\u96c6\u5408\u7684\u610f\u601d\u3002\nsource_type\n, \ntarget_type\n, \nobject class\n\u548c\nperm_set\n \u90fd\u53ef\u4ee5\u7528\u96c6\u5408\u8868\u793a\uff0c \u800cattribute\uff0c\u5176\u5b9e\u662f\u7ed9\u67d0\u4e2a\u96c6\u5408\u5b9a\u4e49\u4e86\u4e2a\u5b8f\u522b\u540d\u3002\n\n\n\u6240\u4ee5\uff0c attribute \u662f\u4fbf\u5229\u5f00\u53d1\u4eba\u5458\u5199sepolicy\u7684\u5de5\u5177\u3002\u5bf9\u4e8e\u6240\u4ee5SEAndroid\u4e2d\u5b9a\u4e49\u7684attribute\uff0c \u53ef\u4ee5\u53c2\u8003 external/sepolicy/attribute \u8fd9\u4e2a\u6587\u4ef6\u3002\n\n\n\u6700\u540e\uff0c \u6211\u4eec\u770bTE\u4e2d\u7684\nrule_name\n\uff0c \u4e00\u5171\u6709\u5982\u4e0b4\u79cd\uff1a\n\n\n\n\n\n\nallow: \u8d4b\u4e88\u67d0\u9879\u6743\u9650\n\n\n\n\n\n\nallowaudit\uff1a audit\u542b\u4e49\u5c31\u662f\u8bb0\u5f55\u67d0\u9879\u64cd\u4f5c\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f SELinux \u53ea\u8bb0\u5f55\u54ea\u4e9b\u6743\u9650\u68c0\u67e5\u5931\u8d25\u7684\u64cd\u4f5c\uff0c \u4e5f\u5c31\u662f\u7ec8\u7aef\u548clogcat\u4e2d\u6253\u5370\u7684\u6240\u6709deny\u7684\u6253\u5370\u3002\u800c\u8be5\u5b57\u6bb5\u5c31\u662f\u5728allow\u7684\u57fa\u7840\u4e0a\uff0c \u518d\u5c06\u4fe1\u606f\u6253\u5370\u51fa\u6765\u3002\n\n\n\n\n\n\ndontaudit\uff1a \u5bf9\u90a3\u4e9b\u68c0\u67e5\u5931\u8d25\u7684\u4e0d\u505a\u8bb0\u5f55\uff0c \u9759\u9ed8\u5730\u62d2\u7edd\u8bbf\u95ee\uff0c \u5e76\u4e14\u4e0d\u5e94\u8be5\u5f15\u8d77\u7a0b\u5e8f\u9000\u51fa\u3002\u8be5\u5b57\u6bb5\u5728SEAndroid\u4e2d\u5e76\u672a\u4f7f\u7528\u3002\u57fa\u4e8eSELinux\u7684\u767d\u540d\u5355\u539f\u5219\uff0c \u53ea\u8981\u4e0d\u5728\u89c4\u5219\u5185\u7684\u64cd\u4f5c\u90fd\u62d2\u7edd\uff0c \u6240\u4ee5\u8be5\u5b57\u6bb5\u7684\u5b9e\u9645\u6548\u679c\u5c31\u662f\uff0c\u5bf9\u5176\u540e\u5931\u8d25\u7684\u6743\u9650\u4e0d\u505a\u8bb0\u5f55\u3002\n\n\n\n\n\n\nneverallow\uff1a \u7528\u6765\u68c0\u67e5\u5b89\u5168\u7b56\u7565\u4e2d\u662f\u5426\u8fdd\u53cd\u8be5\u89c4\u5219\u7684allow\u8bed\u53e5\uff0c \u907f\u514dsepolicy\u7684\u4e66\u5199\u5f02\u5e38\u3002 \u5728\u7f16\u8bd1\u9636\u6bb5\u62a5\u9519\uff0c \u4e0d\u4f1a\u7f16\u8bd1\u8fdb\u6700\u7ec8\u7684\u7b56\u7565\u6587\u4ef6\u4e2d\u3002\n\n\n\n\n\n\nRBAC \u548c constrain\n\n\n\u524d\u6587\u6211\u4eec\u63d0\u5230\u7684\u90fd\u662fTEAC\u3002\u5728\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\nps -Z\n \u770b\u5230\u4e86user\u548crole\uff0c \u5728SEAndroid\u4e2d\uff0c \u53ea\u67091\u4e2auser\u548c1\u4e2arole\u3002\u800c\u57fa\u4e8erole\u7684\u5b89\u5168\u7b56\u7565\uff0c \u5c31\u53eb\u505aRBAC\uff08Role Based Access Control\uff09\u3002\u6211\u4eec\u5148\u6765\u770b\u4e0bandroid\u5b9a\u4e49\u7684user\u548crole\u3002\n\n\n# external/sepolicy/roles\n\n\n# \u5b9a\u4e49\u4e00\u4e2arole\n\n\n\nrole\n \nr\n;\n\n# \u5c06role\u548cattribute domain \u5173\u8054\u3002\n\n\nrole\n \nr\n \ntypes\n \ndomain\n;\n\n\n\n\n\n# external/sepolicy/users\nuser u roles { r } level s0 range s0 - mls_systemhigh;\n\n\n\n\n\n\u4ee5\u4e0a\u662f\u652f\u6301MLS\uff08Multi-Leve Security\uff09\u7684user\u5b9a\u4e49\u3002\u4e0a\u9762\u8fd9\u4e2a\u5b9a\u4e49\u7684\u610f\u601d\u662f\uff0c \u5c06user u\u548c roles r\u5173\u8054\uff0c \u5e76\u4e14\u5176\u5b89\u5168\u7ea7\u522b\u662fs0\uff0c \u6700\u9ad8\u662fmls_systemhigh\u3002 \u8fd9\u91ccu\u53ef\u4ee5\u8ddf\u591a\u4e2arole\u5173\u8054\u3002\n\n\n\u7136\u540e\uff0c \u6211\u4eec\u770b\u4e0buser\u548crole\u6709\u600e\u6837\u7684\u6743\u9650\u63a7\u5236\u3002 \u5176\u5b9e\u901a\u4fd7\u5730\u8bb2\uff0c user\u548crole\u7684\u5173\u7cfb\uff0c \u5c31\u8ddf\u4eba\u4e0e\u5de5\u4f5c\u7684\u5173\u7cfb\uff0c role\u51b3\u5b9a\u4e86\u804c\u80fd\u5206\u7c7b\u3002\u56e0\u4e3aandroid\u53ea\u6709\u4e00\u4e2arole\uff0c \u6240\u4ee5\uff0c\u540e\u6587\u63d0\u5230\u7684role\u8f6c\u6362\u548c\u63a7\u5236\u5173\u7cfb\uff0c \u6211\u4eec\u53ea\u662f\u7b80\u5355\u8bf4\u660e\u4e0b\uff0c \u6211\u4e5f\u4e0d\u662f\u5f88\u61c2\u3002\n\n\n\u9996\u5148\uff0c \u6211\u4eec\u770b\u5982\u4f55\u4ece\u4e00\u4e2arole\u5207\u6362\u5230\u53e6\u4e00\u4e2arole\u3002\n\n\n# \u8fd9\u91cc\u7684allow\u548cTE\u7684allow\u4e0d\u540c\nallow from_role_id to_role_id\n\n\n\n\n\n\u89d2\u8272\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c \u5728SELinux\u4e2d\uff0c Role\u548cRole\u7684\u5173\u7cfb\u8ddf\u804c\u573a\u7684\u7ba1\u7406\u4eba\u5458\u5c42\u7ea7\u4e00\u81f4\u3002\u4f8b\u5982\n\n\n# \u8fd9\u53e5\u7684\u610f\u601d\u662f\uff0c super_r dominate sysadm_r \u548c secadm_r \u8fd9\u4e24\u4e2a\u89d2\u8272\n# \u4ece type \u89d2\u5ea6\u6765\u770b\uff0c super_r \u5c06\u81ea\u52a8\u7ee7\u627f sysadm_r \u548c secadm_r \u6240\u5173\u8054\u7684type(\u6216attribute)\ndominance { role super_r {role sysadm_r; role secadm_r; }}\n\n\n\n\n\n\u63a5\u4e0b\u6765\uff0c \u6211\u4eec\u770b\u4e0b\uff0c \u662f\u5982\u4f55\u5b9e\u73b0\u57fa\u4e8eRole\u6216User\u7684\u6743\u9650\u63a7\u5236\u7684\u3002\u5728selinux\u4e2d\u6709\u65b0\u5173\u952e\u8bcdconstrain\u3002\n\n\nconstrain file write (u1 == u2 and r1 == r2);\n# \u683c\u5f0f\uff1a\n# constrain object_class perm_set expression\uff1b\n\n\n\n\n\n\u91cd\u70b9\u662fexpression\u3002\u5b83\u5305\u542b\u5982\u4e0b\u5173\u952e\u5b57\uff1a\n\n\n\n\n\n\nu1,r1,t1: \u4ee3\u8868source\u7684user\uff0c role \u548c type\n\n\n\n\n\n\nu2, r2, t2: \u4ee3\u8868target\u7684user\uff0c role \u548c type\n\n\n\n\n\n\n== \u548c \uff01= \uff1a \u5bf9\u4e8e u\uff0cr \u6765\u8bf4\uff0c == \u548c \uff01= \u5206\u522b\u8868\u793a\u76f8\u7b49\u6216\u8005\u4e0d\u7b49\u3002 \u800c\u5bf9\u4e8e t \u6765\u8bf4\uff0c == \u548c \uff01= \u5206\u522b\u8868\u793a\u6e90type\u5c5e\u4e8e\u6216\u4e0d\u5c5e\u4e8e\u76ee\u6807attribute\u3002\n\n\n\n\n\n\n\u5728SEAndroid\uff0c \u5e76\u6ca1\u6709\u4f7f\u7528constrain\u5173\u952e\u5b57\uff0c \u800c\u662fmlsconstrain\u3002\u540e\u6587\u5728\u4ecb\u7ecdmls\u65f6\u4f1a\u8be6\u7ec6\u63d0\u5230\u3002\n\n\nconstrain\u662f\u5bf9TE\u7684\u52a0\u5f3a\u3002\u56e0\u4e3aTE\u4ec5\u9488\u5bf9type\u548cdomain\uff0c\u5e76\u6ca1\u6709\u9488\u5bf9user\u548crole\u3002\u5728selinux\u68c0\u67e5\u6743\u9650\u65f6\uff0c \u5148\u68c0\u67e5TE\uff0c \u518d\u68c0\u67e5RBAC\u3002\n\n\nLabeling \u4ecb\u7ecd\uff08\u4e8c\uff09\n\n\ndomain/type Transition  \u5b8f \u548c \u65b0\u6dfb\u52a0\u8fdb\u7a0b\n\n\n\u5728Android/Linux\u7cfb\u7edf\u4e2d\uff0c \u8fdb\u7a0b\u90fd\u662f\u7531\u7236\u8fdb\u7a0bfork\u751f\u6210\u7684\u3002\u5728Android\u4e2d\uff0c \u6240\u6709\u7684\u5e94\u7528\u90fd\u662f\u901a\u8fc7zygote\u521b\u5efa\uff0c\u5e76\u6267\u884c\u76f8\u540c\u7684\u7a0b\u5e8f\uff0c \u53ea\u662f\u6700\u540e\u52a0\u8f7d\u7684java\u5305\u4e0d\u540c\u800c\u5df2\u3002\u800cfork\u7cfb\u7edf\u8c03\u7528\uff0c\u4f1a\u4f7f\u5b50\u8fdb\u7a0b\u7ee7\u627f\u7236\u8fdb\u7a0b\u7684domain\uff0c \u4e5f\u5c31\u662f\u8bf4SContext\u4f1a\u88ab\u7ee7\u627f\u3002\u6240\u4ee5\uff0c \u5bf9\u4e8einit\u8fdb\u7a0b\u800c\u8a00\uff0c\u5fc5\u987b\u5b8c\u6210type/domain\u7684\u8f6c\u6362\uff0c\u4ece\u800c\u964d\u4f4e\u5b50\u8fdb\u7a0b\u7684\u6743\u9650\u3002\u800c\u5bf9\u4e8ezygote\u800c\u8a00\uff0c \u7531\u4e8e\u4e0d\u540c\u5e94\u7528\u53ea\u662f\u8d44\u6e90\u4e0d\u540c\uff0c\u5bf9\u4e8e\u5185\u6838\u800c\u8a00\u662f\u540c\u4e00\u79cd\u8fdb\u7a0b\uff0c \u6240\u4ee5\u9700\u8981\u663e\u793a\u8c03\u7528selinux\u7684\u51fd\u6570\u8fdb\u884ctype/domain\u8f6c\u6362\u3002\u4e0b\u9762\u9488\u5bf9init\u8fdb\u7a0b\u7684fork\u548czygote\u8fdb\u7a0b\u7684fork\u8bf4\u660e\u4e0b\u57df\u662f\u5982\u4f55\u8f6c\u6362\u7684\u3002\n\n\n\n\ninit \u542f\u52a8\u8fdb\u7a0b\u5e76\u5207\u6362domain\n\n\ninit\u6709\u81ea\u5df1\u7684scontext\uff0c \u5e76\u4e14\u67e5\u770binit.te\uff0c \u4f1a\u53d1\u73b0\u5176\u6743\u9650\u975e\u5e38\u9ad8\u3002 \u800c\u7531init.rc\u4e2d\u542f\u52a8\u7684\u8fdb\u7a0b\uff0c\u5177\u6709\u5404\u81ea\u4e0d\u540c\u7684\u6743\u9650\uff0c\u5e94\u8be5\u8fd0\u884c\u5728\u5404\u81ea\u7684scontext\u4e2d\uff0c\u964d\u4f4e\u6743\u9650\u3002\n\n\ninit\u542f\u52a8\u5b50\u8fdb\u7a0b\u7ecf\u5386\u7684\u7cfb\u7edf\u8c03\u7528\u4e3a\uff0c fork\uff0c execv\uff0c \u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c \u5185\u6838\u4f1a\u67093\u4e2aSecurity\u68c0\u67e5\u70b9\uff0c \u5206\u522b\u662f\uff0c \u5141\u8bb8init\u6267\u884c\u76ee\u6807\u7a0b\u5e8f\uff0c \u5141\u8bb8init\u6267\u884cDT\uff08Domain Transition\uff09\u8f6c\u6362\uff0c \u901a\u77e5selinux\u9488\u5bf9\u7684\u5207\u6362\u6587\u4ef6\u3002\u5373\u5982\u4e0b3\u6761\u6307\u4ee4\uff1a\n\n\n#\n \n\u6765\u6e90\n \nexternal\n/\nsepolicy\n/\ninit\n.\nte\n\n\n#\n \n\u683c\u5f0f\n \ndomain_trans\n(\nolddomain\n,\n \ntype\n,\n \nnewdomain\n)\n\n\n#\n \nshell\n \n\u7684\n \ntype\n \n\u548c\ndomain\n\uff0c\n \n\u53ef\u4ee5\u770b\n \nshell\n.\nte\n\n\n#\n \n\n\n# type shell, domain, mlstrustedsubject;  # shell\u662fdomain\u8fd9\u4e2aattribute\u7684\u6210\u5458\u3002\n\n\n# type shell_exec, exec_type, file_type;  # type \u662f shell_exec\n\n\n# \n\n\ndomain_trans\n(\ninit\n,\n \nshell_exec\n,\n \nshell\n)\n\n\n\n#\n \n\u6765\u6e90\n \nexternal\n/\nsepolicy\n/\nte_macros\n\n\ndefine\n(\n`\ndomain_trans\n, `\n\n\n# $1 \u4e3ainit\uff0c $2 \u4e3a shell_exec\uff0c $3\u4e3ashell\n\n\nallow $1 $2:file { getattr open read execute };\n\n\nallow $1 $3:process transition;\n\n\nallow $3 $2:file { entrypoint open read execute getattr };\n\n\n...\n\n\n)\n\n\n\n#\n \ndomain_trans\n \n\u5c55\u5f00\u6765\u5982\u4e0b\uff0c\u53bb\u9664\u65e0\u5173\npermissions\n\uff0c\n \ndomain\n \n\u5207\u6362\u76f8\u5173\u7684\u5982\u4e0b\uff1a\n\n\n#\n \n\u5141\u8bb8\n \ninit\n\u57df\u8fdb\u7a0b\n \n\u6267\u884c\n \nshell_exec\n \n\u7c7b\u578b\u7684\u8fdb\u7a0b\n\n\nallow\n \ninit\n \nshell_exec\n:\nfile\n \n{\n \nexecute\n \n}\n;\n\n\n\u5141\u8bb8\ninit\n\u57df\u8fdb\u7a0b\u5bf9\nshell\n\u57df\u7684\u8fdb\u7a0b\u6267\u884c\nDT\n\n\nallow\n \ninit\n \nshell\n:\nprocess\n \ntransition\n;\n\n\n#\n \n\u8bbe\u7f6e\u65b0\ndomain\n \nshell\n\u7684\u5165\u53e3\u4e3a\u7c7b\u578b\n \nshell_exec\n \n\u7684\u6587\u4ef6\u3002\n\n\nallow\n \nshell\n \nshell_exec\n:\nfile\n \n{\n \nentrypoint\n \nexecute\n \n}\n;\n\n\n\n\n\n\n\u5bf9\u5e94\u7684type\u53ef\u4ee5\u5728file_contexts \u4e2d\u67e5\u627e\uff0c \u5f53\u7136\uff0c\u5982\u679c\u662f\u65b0\u6dfb\u52a0\u8fdb\u7a0b\uff0c\u5219\u9700\u8981\u5728\u8be5\u6587\u4ef6\u4e2d\u7ed1\u5b9a\u53ef\u6267\u884c\u7a0b\u5e8f\u4e0etype\u3002\n\u4ee5\u4e0a(domain_trans\u5b8f)\u53ea\u662f\u7533\u660e\u4e86\u53ef\u4ee5\u8fdb\u884cDT\u7684\u6743\u9650\uff0c\u4f46\u5e76\u6ca1\u6709\u771f\u6b63\u6267\u884c\u8f6c\u6362\u3002\n\n\n# external/sepolicy/file_contests\n# \u7ed1\u5b9asystem\u5e95\u4e0b\u6240\u6709\u6587\u4ef6\u4e3a system_file\n/system(/.*)?       u:object_r:system_file:s0\n# \u7ed1\u5b9avold\u53ef\u6267\u884c\u7a0b\u5e8f\u7684type\u4e3avold_exec\u3002\n/system/bin/vold    u:object_r:vold_exec:s0\n\n\n\n\n\n\u4e00\u822c\u6d89\u53ca\u5230\u65b0\u542f\u8fdb\u7a0b\uff0c\u548cdomain\u8f6c\u6362\u7684\u8bdd\uff0c \u7528\u5230\u7684\u5b8f\u5982\u4e0b\uff1a\n\n\n#\n \n\u4ece\u975e\ninit\n\u8fdb\u7a0b\u542f\u52a8\u4e00\u4e2a\u65b0\u8fdb\u7a0b\uff0c\n \n\u5728\u7236\u8fdb\u7a0b\u7684\nsepolicy\n\u4e2d\u8c03\u7528\uff0c\n \n\u8fd9\u91cc\u7684\nolddomain\n\u4e3a\u7236\u8fdb\u7a0b\u7684\ndomain\n\uff0c\n \ntype\n\u4e3a\u5b50\u8fdb\u7a0b\u7684\ntype\n\uff0c\n \nnewdomain\n\u4e3a\u5b50\u8fdb\u7a0b\u7684\ndomain\n\u3002\n\n\n#\n \nexternal\n/\nsepolicy\n/\nte_macros\n\n\n#\n \ndomain_auto_trans\n(\nolddomain\n,\n \ntype\n,\n \nnewdomain\n)\n\n\ndefine\n(\n`\ndomain_auto_trans\n, `\n\n\n# Allow the necessary permissions.\n\n\ndomain_trans($1,$2,$3)\n\n\n# Make the transition occur by default.\n\n\n# \u8fd9\u53e5\u662f\u771f\u6b63\u8fdb\u884c\u8f6c\u6362\uff0c\u800c\u4e14\u662f\u81ea\u52a8\u7684...\n\n\ntype_transition $1 $2:process $3;\n\n\n\n\n\n#\n \n\u4ece\ninit\n\u8fdb\u7a0b\u542f\u52a8\u4e00\u4e2a\u65b0\u8fdb\u7a0b\uff0c\n \n\u5728\u5b50\u8fdb\u7a0b\u7684\nsepolicy\n\u4e2d\u8c03\u7528\u3002\u8fd9\u91cc\u7684\ndomain\n\u4e3a\u5b50\u8fdb\u7a0b\u7684\ndomain\n\n\n#\n \ninit_daemon_domain\n(\ndomain\n)\n\n\n\ndefine\n(\n`\ninit_daemon_domain\n, `\n\n\ndomain_auto_trans(init, $1_exec, $1)\n\n\ntmpfs_domain($1)\n\n\n)\n\n\n\n\n\n\n\u4ee5\u4e0a\u63d0\u5230\u7684\u5728\u54ea\u4e2asepolicy\u4e2d\u8c03\u7528\uff0c\u5176\u5b9e\u5bf9\u4e8e\u6700\u7ec8\u7684\u89c4\u5219\u6587\u4ef6\u6ca1\u6709\u5f71\u54cd\uff0c \u533a\u5206\u4e0d\u540c\u7684sepolicy\u6587\u4ef6\uff0c\u53ea\u662f\u5c5e\u4e8e\u5f00\u53d1\u4eba\u5458\u7684\u5206\u7c7b\u548c\u6613\u4e8e\u7ef4\u62a4\u3002 \u4f60\u5b8c\u5168\u53ef\u4ee5\u5728vold.te \u4e2d\u5199\u4e2a\u89c4\u5219\u5141\u8bb8sdcardd\u7c7b\u578b\u7684\u8fdb\u7a0b\u6267\u884c\u67d0\u4e2a\u64cd\u4f5c\uff0c \u8be5\u89c4\u5219\u4f9d\u7136\u4f1a\u751f\u6548\u3002\n\n\n\u53e6\u5916 \uff0c\u4ece\u4e0a\u9762\u8fd9\u4e2a\u5b8f\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230Android\u4e2d\u7684\u4e00\u4e2a\u547d\u540d\u4e60\u60ef\uff0c\u4e00\u822cdomain\u52a0\u4e0a\u540e\u7f00_exec\u5c31\u662f\u5173\u8054\u7684type\u3002\n\n\ntype  shell domain;\ntype  shell_exec exec_type file_type;\n\n\n\n\n\n\u7136\u540e\uff0c\u6211\u4eec\u770b\u4e0b\uff0c \u5728init.te\u4e2d\uff0c\u5b58\u5728domain_trans\u7684\u58f0\u660e\uff0c\u5982\u679c\u518d\u770binit_shell.te\u7684\u5185\u5bb9\u7684\u8bdd\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5b58\u5728DT\u7684\u51b2\u7a81\uff08\u7b2c\u4e00\u6b21\u770b\u7684\u65f6\u5019\uff09\uff1a\n\n\n# init_shell.te\n# \u81ea\u52a8\u4eceinit\u5207\u6362\u5230init_shell\u5f53\u6267\u884c\u7684\u7a0b\u5e8f\u662fshell_exec,\u56e0\u4e3a\u8be5\u5b8f\u5305\u542b\u4e86type_transition\n# \u8fd9\u4e2ate\u662f\u7ed9\u6240\u6709\u4eceinit.*.rc\u4e2d\u542f\u52a8\u7684\u811a\u672c\u5b9a\u4e49\u7684\ndomain_auto_trans(init, shell_exec, init_shell)\n\n\n\n\n\n# init.te\n# \u4e0e\u4e0a\u9762\u7c7b\u4f3c\uff0c\u5c11\u4e86type_transition, \u4e5f\u5c31\u662f\u8bf4\u4e0d\u662f\u81ea\u52a8\u5207\u6362, \u53ea\u662f\u7533\u660e\u4e86\u6743\u9650\u3002\n# \u8fd9\u4e2a\u662f\u7ed9init.rc\u4e2dconsole\u670d\u52a1\u5b9a\u4e49\u7684\ndomain_trans(init, shell_exec, shell)\n\n\n\n\n\n\u5728\u770binit.rc\uff0c\u6709\u5982\u4e0b\u5185\u5bb9\uff1a\n\n\nservice console /system/bin/sh\n    class core\n    console\n    disabled\n    user shell\n    group shell log\n    seclabel u:r:shell:s0\n\n\n\n\n\n\u4e5f\u5c31\u662f\u8bf4\uff0cinit\u663e\u793a\u5207\u6362\u4e86sh\u7684domain\u3002\n\u6240\u4ee5\uff0c\u4e2a\u4eba\u7406\u89e3\u662f\uff0csh\u542f\u52a8\u7684\u65f6\u5019\uff0c\u5148\u9ed8\u8ba4\u5207\u6362\u5230init_shell\uff0c\u7136\u540e\u88abinit\u8fdb\u7a0b\u5207\u6362\u5230shell\u3002 \n\u8fd9\u4e48\u7406\u89e3\u7684\u8bdd\uff0ctype_transition\u7684\u58f0\u660e\u4e0d\u80fd\u6709\u51b2\u7a81\u3002\uff08\u672a\u9a8c\u8bc1\uff09\n\n\n\n\nzygote \u542f\u52a8\u8fdb\u7a0b\u5e76\u5207\u6362domain\n\n\n\u9996\u5148\uff0c \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c \u6240\u6709\u7684app\u548cframework server\u90fd\u662fzygote\u901a\u8fc7fork\u7684\u5f62\u5f0f\u521b\u5efa\u7684\u3002\u4e0b\u9762\u7b80\u5355\u770b\u4e0b\u8fd9\u4e2a\u51fd\u6570\u3002\n\n\nstatic pid_t ForkAndSpecializeCommon(JNIEnv* env, uid_t uid, gid_t gid, jintArray javaGids,\n                                     jint debug_flags, jobjectArray javaRlimits,\n                                     jlong permittedCapabilities, jlong effectiveCapabilities,\n                                     jint mount_external, \n                                     jstring java_se_info, jstring java_se_name,\n                                     bool is_system_server, jintArray fdsToClose, \n                                     jstring instructionSet, jstring dataDir) { \n pid_t pid = fork();\n if (pid == 0) {\n  // ....\n   rc = selinux_android_setcontext(uid, is_system_server, se_info_c_str, se_name_c_str);\n  // ....\n}                               \n\n\n\n\n\n\u8fd9\u6bb5\u4ee3\u7801\u8bbe\u7f6e\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u7684\u6838\u5fc3\u53c2\u6570\u662f \nis_system_server\n \u548c \nse_info_xxx\n\u3002\n\n\nint selinux_android_setcontext(uid_t uid,\n       int isSystemServer,\n       const char *seinfo, \n       const char *pkgname)\n{\n// ....\nrc = seapp_context_lookup(SEAPP_DOMAIN, uid, isSystemServer, seinfo, pkgname, NULL, ctx); // seinfo is se_info_c_str and pkgname is se_name_c_str\n// ....\n}\n\n\n\n\n\nseapp_context_lookup\n \u8fd9\u4e2a\u51fd\u6570\u7684\u4efb\u52a1\u5c31\u662f\u6839\u636e\u53c2\u6570\u627e\u5230\u5bf9\u5e94\u8be5app/server\u7684\u89c4\u5219\uff0c\u7136\u540e\u8bbe\u7f6e\u5b89\u5168\u4e0a\u4e0b\u6587\u3002\u5982\u679c\u60f3\u8be6\u7ec6\u4e86\u89e3\u67e5\u627e\u89c4\u5219\uff0c \u53ef\u4ee5\u770b\u4e0b\u5177\u4f53\u5b9e\u73b0\u3002\u4e0b\u9762\u7b80\u5355\u4ecb\u7ecd\u4e0b\uff0c\u5bf9\u4e8e\u7531zygote\u521b\u5efa\u7684app/server\u7684\u89c4\u5219\u6587\u4ef6\u3002\n\n\n\u8be5\u51fd\u6570\u662f\u57fa\u4e8e\u6587\u4ef6 external/sepolicy/seapp_contexts \u67e5\u627e\u5bf9\u5e94\u5e94\u7528\u7684\u8fdb\u7a0b\u57df\u548c\u6587\u4ef6type\u3002\n\n\n isSystemServer=true domain=system_server\n user=system domain=system_app type=system_app_data_file\n user=bluetooth domain=bluetooth type=bluetooth_data_file\n user=nfc domain=nfc type=nfc_data_file\n user=radio domain=radio type=radio_data_file\n user=shared_relro domain=shared_relro\n user=shell domain=shell type=shell_data_file\n user=_isolated domain=isolated_app\n user=_app seinfo=platform domain=platform_app type=app_data_file\n user=_app domain=untrusted_app type=app_data_file\n\n\n\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c \u5982\u679c isSystemServer \u4e3a true\uff0c \u5219domain\u4e3a\nsystem_server\n\u3002 \u5982\u679cuser\u662f\n_app\n\uff0c \u5e76\u4e14\u7b7e\u540d\u662fplatform\uff08\u4ece\u6e90\u7801\u7f16\u8bd1\u7684\u5e94\u7528\uff09\uff0c \u5219domain\u662f\nplatform_app\n\uff0c \u5bf9\u5e94\u7684\u6587\u4ef6type\u4e3a\napp_data_file\n\u3002 \u5982\u679c\u662f\u7b2c\u4e09\u65b9\u5e94\u7528\uff0c user\u4e5f\u4e3a\n_app\n\uff0c \u4f46\u56e0\u4e3a\u4e0d\u6ee1\u8db3platform\u7b7e\u540d\uff0c\u6240\u4ee5\uff0c \u57df\u662f\nuntrusted_app\n\u3002\u9664\u4e86user\u56fa\u5b9a\uff0c\u5176\u4f59\u7684\u5b57\u6bb5\u90fd\u662f\u5b57\u7b26\u4e32\uff0c\u53ea\u8981\u5339\u914d\u5c31\u884c\u3002\u6bd4\u5982domain\u8981\u8ddfxx.te\u4e2d\u7684\u5339\u914d\uff0c type\u540c\u7406\u3002seinfo\u53ea\u8981\u8ddf\u540e\u6587\u7684\nmac_permissions.xml\n\u5339\u914d\u3002\n\n\n\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u51fa\u73b0\u4e86seinfo\uff0c \u8fd9\u4e2a\u4fe1\u606f\u662f\u5b58\u653e\u5728external/sepolicy/mac_permissions.xml, \u5185\u5bb9\u5982\u4e0b\u3002\u5b9a\u4e49\u4e86\u7b7e\u540d\u7684key\u4e0eseinfo\u503c\u7684\u5173\u7cfb\u3002\n\n\npolicy\n\n    \n!-- Platform dev key in AOSP --\n\n    \nsigner\n \nsignature=\n@PLATFORM\n\n      \nseinfo\n \nvalue=\nplatform\n/\n\n    \n/signer\n\n    \n!-- All other keys --\n\n    \ndefault\n\n      \nseinfo\n \nvalue=\ndefault\n/\n\n    \n/default\n\n\n/policy\n\n\n\n\n\n\n\u8be5\u6587\u4ef6\u662f\u7531pkms\u8bfb\u53d6\uff0c\u5e76\u5728\u5b89\u88c5\u5e94\u7528\u65f6\uff0c\u7acb\u5373\u7ed9\u88ab\u5b89\u88c5\u7684\u5e94\u7528\u5206\u914dseinfo\u4fe1\u606f\u3002\u4e0a\u9762\u7684\u53ea\u662f\u4e00\u4e2a\u7248\u672c\uff0c\u7b80\u5355\u770b\u4e86\u4e0bpkms\u7684\u5b9e\u73b0\uff0c \u53ef\u4ee5\u505a\u5230\u5982\u4e0b\u7684\u65b9\u5f0f\uff1a\n\n\npolicy\n\n    \n!-- Platform dev key in AOSP --\n\n    \nsigner\n \nsignature=\n@PLATFORM\n\n       \npackage\n \nname=\ncom.abc.d\n\n         \nseinfo\n \nvalue=\nplatform\n/\n\n       \n/package\n\n    \n/signer\n\n    \n!-- All other keys --\n\n    \ndefault\n\n      \nseinfo\n \nvalue=\ndefault\n/\n\n    \n/default\n\n\n/policy\n\n\n\n\n\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c \u65e2\u53ef\u4ee5\u57fa\u4e8e\u7b7e\u540d\uff0c \u4e5f\u53ef\u4ee5\u66f4\u8be6\u7ec6\u7684\u6839\u636e\u5305\u540d\uff0c\u518d\u6307\u5b9a\u66f4\u7ec6\u81f4\u7684seinfo\u5206\u7c7b\u3002\u5f53\u7136\u5fc5\u987b\u5728\nseapp_contexts\n\u4e2d\u6dfb\u52a0\u76f8\u5e94\u7684\u89c4\u5219\uff0c\u5e76\u4e14\u53c2\u8003\nsystem_server.te\n\u6dfb\u52a0\u5bf9\u5e94\u57df\u7684\u6743\u9650\u63a7\u5236\u3002\n\n\n\u4ee5\u4e0a\nseapp_contexts\n\u4e2ddomain\u7684\u503c\uff0c\u90fd\u53ef\u4ee5\u5728external/sepolicy/xxx.te \u4e2d\u627e\u5230\uff0c \u8be6\u7ec6\u7684\u53ef\u4ee5\u81ea\u884c\u67e5\u770b\u3002\n\n\n\u5bf9\u4e8e\u65b0\u6dfb\u52a0\u7684\u4e00\u4e2a\u5e94\u7528\uff0c\u5c31\u53ef\u4ee5\u57fa\u4e8e\u4ee5\u4e0a\u4fe1\u606f\uff0c\u901a\u8fc7pkms\u6dfb\u52a0\u76f8\u5e94\u89c4\u5219\u3002\n\n\n\u4f46\u662f\u5bf9\u4e8e\u65b0\u6dfb\u52a0\u4e00\u4e2a\u670d\u52a1\uff0c \u5219\u9700\u8981\u5728external/sepolicy/service_context.te \u6216\u8005 external/sepolicy/service.te \u4e2d\u6dfb\u52a0\u5728\nservice_manager\n\u6ce8\u518c\u7684\u540d\u5b57\u548c\u5bf9\u5e94\u7684\u57df/\u7c7b\u578b\uff0c \u5426\u5219\nservice_manager\n\u4f1a\u62d2\u7edd\u6ce8\u518c\u3002\u540c\u6837\uff0c\u5982\u679c\u4e0d\u5c06\u65b0\u6dfb\u52a0\u7684\u670d\u52a1\u5173\u8054\u5230\nservice_manager_type\n\u4e2d\uff0c \u5c31\u65e0\u6cd5\u88ab\u67e5\u627e\u548c\u83b7\u53d6\u3002\n\n\n# external/sepolicy/service.te\n\n type surfaceflinger_service,    service_manager_type;\n type system_app_service,        service_manager_type;\n type system_server_service,     service_manager_type;\n\n\n\n\n\n\u5c06\u4e0d\u540c\u7684type\u90fd\u8ddf\nservice_manager_type\n\u5c5e\u6027\u5173\u8054\uff0c \u540e\u9762\u4f1a\u4f7f\u7528\u8be5\u5c5e\u6027\u8fdb\u884c\u6743\u9650\u63a7\u5236\u3002\n\n\n# external/sepolicy/service_contexts\nSurfaceFlinger                            u:object_r:surfaceflinger_service:s0\ndisplay.qservice                          u:object_r:surfaceflinger_service:s0\nwindow                                    u:object_r:system_server_service:s0\n*                                         u:object_r:default_android_service:s0\n\n\n\n\n\n\u8fd9\u4e2a\u6587\u4ef6\u7684\u89c4\u5219\u4e0efile_contexts\u7c7b\u4f3c\uff0c\u5173\u8054\u4e86\u670d\u52a1\u4e0e{user\uff0c role\uff0c type\uff0c level}\u3002\u6700\u540e * \u662f\u5339\u914d\u6240\u6709\u4ee5\u4e0a\u89c4\u5219\u65e0\u6cd5\u5339\u914d\u7684\u670d\u52a1\uff0c \u5176type\u4e3a default_android_service\u3002\n\n\n\u4e0b\u9762\u6211\u4eec\u770b\u4e0b\uff0c\nservice_manager\n\u7684\u6743\u9650\u63a7\u5236\u3002\n\n\n#\n \ndomain\n.\nte\n\n\n#\n \n\u4e0d\u5141\u8bb8\nservice_manager\n\u5bf9\ndefault_android_service\n\u5c5e\u6027\u7684\u670d\u52a1\u6267\u884c\nadd\n\u64cd\u4f5c\u3002\u975e\u89c4\u5219\uff0c\u7f16\u8bd1\u4fdd\u62a4\u3002\n\n\nneverallow\n \ndomain\n \ndefault_android_service\n:\nservice_manager\n \nadd\n;\n\n\n\n#\n \n\u5141\u8bb8\ndomain\n\u57df\u7684\u8fdb\u7a0b\u8bf7\u6c42\nservice_manager\n\u6267\u884c\nfind\n\u64cd\u4f5c\u3002\n\n\nallow\n \ndomain\n \nservice_manager_type\n:\nservice_manager\n \nfind\n;\n\n\n\n\n\n\n\u6211\u4eec\u524d\u9762\u7684\u4f8b\u5b50\u770b\u5230\uff0c \u6bcf\u4e2ate\u89c4\u5219\u6587\u4ef6\u5f00\u5934\u90fd\u4f1a\u628a\u8be5\u7c7b\u578b\u4e0edomain\u57df\u5173\u8054\uff0c\u6240\u4ee5\uff0c\u5b9e\u9645\u4e0a\uff0c\u8fd9\u91cc\u662f\u5141\u8bb8\u4e86\u6240\u6709\u6709\u89c4\u5219\u7684\u8fdb\u7a0b\u8bf7\u6c42\nservice_manager\n\u64cd\u4f5c\u3002\u8be5object class \u548c \nperm_set\n\uff0c \u662fandroid\u65b0\u6dfb\u52a0\u7684\uff0c\u5728\u524d\u6587\u63d0\u5230\u5c5e\u4e8euserspace\uff0c \u5728service manager\u7684\u4ee3\u7801\u4e2d\uff0c \nsvc_can_xxx\n \u51fd\u6570\u5c31\u662f\u5728\u7528\u6237\u5c42\u68c0\u67e5\u8be5\u89c4\u5219\u662f\u5426\u6ee1\u8db3\u3002\u672a\u4ed4\u7ec6\u7814\u7a76\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u770b\u4e0b\u3002\n\n\n\u4e0a\u9762\u4ecb\u7ecd\u4e86\u521b\u5efa\u8fdb\u7a0b\u548cDT, \u662f\u9488\u5bf9\u8fdb\u7a0b\u7684,\u4e0b\u9762\u4ecb\u7ecd\u4e0b\nTT\n,\u9488\u5bf9\u6587\u4ef6\u7684,\u540c\u6837\u5728\u521b\u5efa\u6587\u4ef6\u7684\u65f6\u5019,\u9700\u8981\u6307\u5b9atype.\u540c\u6837\u7528\u5230\u7684\u4e5f\u662f\ntype_transition\n.\n\n\ndefine\n(\n`\nfile_type_trans\n, `\n\n\n# Allow the domain to add entries to the directory.\n\n\nallow $1 $2:dir ra_dir_perms;\n\n\n# Allow the domain to create the file.\n\n\nallow $1 $3:notdevfile_class_set create_file_perms;\n\n\nallow $1 $3:dir create_dir_perms;\n\n\n)\n\n\n\n \n#####################################\n\n \n#\n \nfile_type_auto_trans\n(\ndomain\n,\n \ndir_type\n,\n \nfile_type\n)\n\n \n#\n \nAutomatically\n \nlabel\n \nnew\n \nfiles\n \nwith\n \nfile_type\n \nwhen\n\n \n#\n \nthey\n \nare\n \ncreated\n \nby\n \ndomain\n \nin\n \ndirectories\n \nlabeled\n \ndir_type\n.\n\n \n#\n\n \ndefine\n(\n`\nfile_type_auto_trans\n, `\n\n\n # Allow the necessary permissions.\n\n\n file_type_trans($1, $2, $3)\n\n\n # Make the transition occur by default.\n\n\n type_transition $1 $2:dir $3;\n\n\n type_transition $1 $2:notdevfile_class_set $3;\n\n\n \n)\n\n\n\n\n\n\n\u5339\u914d\u8fdb\u7a0b\u7684domain\u548c\u76ee\u5f55\u7684type\u7684\u60c5\u51b5\u4e0b\u6240\u521b\u5efa\u7684\u6587\u4ef6,\u5176SContext(\u5b89\u5168\u4e0a\u4e0b\u6587)\u5c31\u4f1a\u88ab\u6307\u5b9a\u4e3a\nfile_type\n. android\u4e2d\u5e76\u6ca1\u6709\u5728\u4f7f\u7528\u8fd9\u4e24\u4e2a\u5b8f,\u4e5f\u5c31\u662f\u8bf4\u4f7f\u7528\u4e86\u9ed8\u8ba4\u7684\u89c4\u5219, \u4e5f\u5c31\u662f\u7ee7\u627f\u7236\u76ee\u5f55\u7684SContext.\u4e0a\u6587\u7684filesystem\u6253\u6807\u7b7e\u4e2d\u63d0\u5230\u8fc7TT\uff0c\ngenfscon\n\u80fd\u591f\u7981\u5236TT\u89c4\u5219\uff0c\u5f3a\u5236\u5c06\u6240\u6709\u6587\u4ef6\u7684SContext\u6307\u5b9a\u4e3a\u9700\u8981\u7684\u3002\u8fd8\u6709\u4e00\u4e2a\nfs_use_trans\n\uff0c \u5176\u9ed8\u8ba4\u89c4\u5219\u4e0d\u662f\u7ee7\u627f\u7236\u76ee\u5f55\u7684\u89c4\u5219\uff0c\u800c\u662f\u7ee7\u627f\u6587\u4ef6\u7cfb\u7edf\u7684\u89c4\u5219\u3002\n\u6587\u4ef6\u7cfb\u7edf\u6807\u7b7e\u521d\u59cb\u5316\n.\n\n\nMLS(Multi-level Security)\n\n\n\u8fd9\u4e1c\u897f\u4e0d\u597d\u7406\u89e3\uff0c\u3000\u5728android\u4e2d\uff0c\u57fa\u672c\u4e5f\u4e0d\u4f1a\u6539\uff0c\u3000\u628a\u6211\u7684\u7406\u89e3\u7b80\u5355\u4ecb\u7ecd\u4e0b\uff0e\u5b89\u5168\u5206\u7ea7\u5c31\u8ddf\u4fdd\u5bc6\u5206\u7ea7\u4e00\u6837\uff0c\u5bf9\u4e3b\u52a8\u5355\u5143\u548c\u88ab\u52a8\u5355\u5143\u90fd\u6709\u76f8\u540c\u7684\u5206\u7ea7\uff0e\u800c\u9ad8\u7ea7\u522b\u7684\u4e3b\u52a8\u5355\u5143\u53ef\u4ee5\u8bfb\u53d6\u4f4e\u7ea7\u522b\u7684\u88ab\u52a8\u5355\u5143\uff0c\u4f46\u4e0d\u5141\u8bb8\u5f80\u5730\u7ea7\u522b\u7684\u88ab\u52a8\u5355\u5143\u5199\u6570\u636e\uff0c\u9632\u6b62\u6cc4\u5bc6\uff0e\u800c\u4f4e\u7ea7\u522b\u7684\u4e3b\u52a8\u5355\u5143\u53ef\u4ee5\u5f80\u9ad8\u7ea7\u522b\u7684\u88ab\u52a8\u5355\u5143\u5199\u6570\u636e\u4f46\u4e0d\u80fd\u8bfb\u53d6\u9ad8\u7ea7\u522b\u88ab\u52a8\u5355\u5143\uff0e\u5f62\u8c61\u70b9\u63cf\u8ff0\u5c31\u662f no write down \u548c\u3000no read up.\n\n\n\u6211\u4eec\u6765\u770b\u4e2a\u683c\u5f0f\uff0c\u5728\u672a\u542f\u7528MLS\u548c\u542f\u7528\u4e86MLS\u7684SContext\u683c\u5f0f\u5dee\u5f02\uff1a\n\n\n# \u672a\u542f\u7528MLS\nuser_u:role_r:type_t\n\n# \u542f\u7528\u4e86MLS\n# - \u8868\u793a\u8303\u56f4\n# \u5de6\u4fa7\uff0c\u6211\u4eec\u79f0\u4e3a\u6700\u4f4e\u5b89\u5168\u7ea7\u522b\uff0c\u4e5f\u662f\u5f53\u524d\u4e3b\u52a8\u5355\u5143\uff0f\u88ab\u52a8\u5355\u5143\u7684\u7ea7\u522b\n# \u53f3\u4fa7\uff0c\u6211\u4eec\u79f0\u4e3a\u6700\u9ad8\u5b89\u5168\u7ea7\u522b\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u4e3b\u52a8\u5355\u5143\uff0f\u88ab\u52a8\u5355\u5143\u53ef\u80fd\u83b7\u5f97\u7684\u6700\u9ad8\u7ea7\u522b\nuser_u:role_r:type_t:sensitivity[:category...]-sensitivity[:category...]\n\n\n\n\n\n\u7ed3\u5408\u5f00\u5934\u7684\u4f8b\u5b50\uff0candroid\u662f\u542f\u7528\u4e86MLS\uff0c\u4f46\u662f\uff0c\u5982\u679c\u628a\u6240\u6709\u7684\u89c4\u5219\u8fc7\u4e00\u904d\uff0c\u5c31\u4f1a\u53d1\u73b0\u6240\u6709\u7684sensitivity\u90fd\u4e3as0,\u3000\u6240\u4ee5\uff0c\u867d\u7136\u542f\u7528\u4e86\uff0c\u4f46\u5e76\u6ca1\u6709\u5206\u7ea7, \u4e5f\u6ca1\u6709\u5206\u7c7b(category)\uff0e\u3000\u6240\u4ee5\uff0c\u3000\u5173\u4e8e\u8fd9\u5757\uff0c\u6211\u4eec\u4e5f\u662f\u7b80\u5355\u4ecb\u7ecd\u4e0b\uff0c\u53ef\u80fd\u6709\u7406\u89e3\u4e0d\u5230\u4f4d\uff0e\n\n\n\u5982\u679c\u51fa\u73b0\u5206\u7ea7\u548c\u5206\u7c7b\uff0c\u3000\u4f1a\u4f7f\u7528 level\u3000\u5173\u952e\u5b57\u5b9a\u4e49:\n\n\nlevel s0:c0.c255  #\u8868\u793as0, category\u4ecec0\u4e00\u76f4\u5230c255\n\n\n\n\n\n\u5206\u7ea7\u6709\u9ad8\u4f4e\uff0c s0 \n s1\uff0c\u3000\u5206\u7c7b\u6ca1\u6709\u9ad8\u4f4e\uff0c\u53ea\u6709\u5305\u542b\uff0c\u3000\u6bd4\u5982 c0.c255\u3000\u5305\u542b c10.c25. \u4e2a\u4eba\u611f\u89c9\u8fd9\u5757\u7684\u529f\u80fd\u662f\u5bf9Role\u7684\u5f3a\u5316\uff0c\u3000\u66f4\u7ec6\u81f4\u7684\u9636\u7ea7\u5173\u7cfb\uff0e\n\n\n\u4e0b\u9762\u770b\u4e2a\u4f8b\u5b50\u6765\u8f85\u52a9\u7406\u89e3\uff0e\n\n\n # Datagram send: Sender must be dominated by receiver unless one of them is\n # trusted.\n mlsconstrain unix_dgram_socket { sendto }\n          (l1 domby l2 or t1 == mlstrustedsubject or t2 == mlstrustedsubject);\n# mlstrustedsubject \u662fattribute\n\n\n\n\n\n\u9996\u5148\uff0candroid\u4e2d\u4e3b\u8981\u7528\u5230\u4e86mlsconstrain, \u5176\u8bed\u6cd5\u5982\u4e0b\uff0c\u3000\u4e0econstrain\u4e00\u6837\uff1a\n\n\nmlsconstrain object_class perm_set expression\n\n\n\n\n\nexpression\u6709u1, u2, r1, r2, t1, t2, l1, l2, h1, h2 \u8ddfRole\u7684\u6743\u9650\u63a7\u5236\u5f88\u50cf, \u53ea\u662f\u591a\u4e86l1, l2, h1, h2\uff1a\n\n\n\n\n\n\nl1, h1, \u8868\u793asource\u7684low sensitivity level, high sensitivity level\n\n\n\n\n\n\nl2, h2, \u8868\u793atarget\u7684low sensitivity level, high sensitivity level\n\n\n\n\n\n\n\u5173\u7cfb\uff1a\n\n\n\n\n\n\ndom: l1 dom l2, \u8868\u793al1 sensitivity \n= l2 sensitivity, l1\u7684category\u5305\u542bl2\u7684category\n\n\n\n\n\n\ndomby: \u8ddfdom\u76f8\u53cd\n\n\n\n\n\n\neq: sensitivity \u76f8\u7b49\uff0c\u3000category\u3000\u76f8\u7b49\n\n\n\n\n\n\nincomp: \u4e0d\u53ef\u6bd4\uff0e\u5177\u4f53\u542b\u4e49\u672a\u77e5...\n\n\n\n\n\n\n\u89c4\u5219\u6587\u4ef6\u5173\u7cfb\u603b\u7ed3\n\n\nfile_contexts\n: \u5173\u8054\u6587\u4ef6\u7cfb\u7edf\u4e0a\u6587\u4ef6\u4e0etype\uff0c \u6216\u8005\u8bf4\uff0c\u6307\u5b9a\u6587\u4ef6\u5c5e\u4e8e\u67d0\u4e2atype\u3002\u88ab\u52a8\u5355\u5143\u7684scontext\u3002\u6bd4\u5982\uff1a\n\n\n# netd\u5c5e\u4e8enetd_exec\u3002\u6240\u6709\u8981\u6267\u884cnetd\u8fdb\u7a0b\u7684\u7a0b\u5e8f\u5fc5\u987b\u7533\u8bf7 netd_exec \u7684 execute \u6743\u9650\u3002\n\n/system/bin/netd    u:object_r:netd_exec:s0\n\n\n\n\n\n*.te\n: TE\u6743\u9650\u89c4\u5219\u6587\u4ef6\u3002\u6307\u5b9a\u4e86\u6bcf\u4e2adomain\u7684\u6743\u9650\uff0c\u540c\u65f6\u4e5f\u6307\u5b9a\u4e86\u4e0d\u540cdomain\u7684\u5165\u53e3\u3002\u6bd4\u5982\u4e0a\u6587\u63d0\u5230\u7684\ninit_daemon_domain\n, \u5c31\u6307\u5b9a\u4e86\u5bf9\u5e94domain\u7684\u5165\u53e3\u4e3a\u67d0\u4e2atype\u3002\u51e0\u4e4e\u6240\u6709\u8be5\u6587\u4ef6\u7684\u5f00\u5934\u90fd\u4f1a\u4e0edomain\u5173\u8054\uff0c \u4e5f\u5c31\u662f\u8bf4\u90fd\u5c5e\u4e8edomain\u8fd9\u4e2a\u5c5e\u6027\u3002\n\n\n#\n \n\u6307\u5b9a\u4e86\ndomain\n\u4e3a\nshell\n\u7684\u5165\u53e3\u662f\nshell_exec\n\uff0c\n \n\u4e5f\u5c31\u662f\u7ed1\u5b9a\u4e86\ntype\n\u548c\ndomain\n\u7684\u5173\u7cfb\u3002\n\n\nallow\n \nshell\n \nshell_exec\n:\nfile\n \n{\n \nentrypoint\n \nexecute\n \n}\n;\n\n\n\n\n\n\n\n\n\u4ece\u4e0a\u9762\u4e24\u7c7b\u6587\u4ef6\uff0c\u5c31\u8bf4\u660e\u4e86\u6307\u5b9a\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u548c\u5bf9\u5e94\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\u662f\u5982\u4f55\u5173\u8054\u7684\u3002\u6240\u4ee5\uff0c \u5982\u679c\u65b0\u6dfb\u52a0\u8fdb\u7a0b\uff0c \u5fc5\u987b\u52a8\u4e0a\u9762\u63d0\u5230\u7684\u6587\u4ef6\uff0c \u624d\u80fd\u6b63\u786e\u8bbe\u7f6e\u6307\u5b9a\u8fdb\u7a0b\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\u3002\n\n\n\n\nmac_permissions.xml\n\uff1a pkms\u89e3\u6790\u7684\u6587\u4ef6\uff0c\u63cf\u8ff0\u4e86seinfo\u5b57\u6bb5\u4e0e\u7b7e\u540d/\u5305\u540d\u7684\u5173\u7cfb\u3002\n\n\nseapp_contexts\n\uff1a zygote\u89e3\u6790\uff0c \u7528\u4e8e\u6839\u636euser\u548cseinfo\uff0c \u786e\u5b9a\u5e94\u7528\u6216\u7cfb\u7edf\u670d\u52a1\u7684domain\u548ctype\u3002\n\n\n\u6240\u4ee5\uff0c \u5bf9\u4e8e\u6709\u7279\u6b8a\u6743\u9650\u9700\u6c42\u7684\u5e94\u7528\uff0c \u9700\u8981\u540c\u65f6\u589e\u52a0\u4e0a\u9762\u4e24\u4e2a\u6587\u4ef6\uff0c\u5f53\u7136TE\u7684\u89c4\u5219\uff0c\u9700\u8981\u4fee\u6539\u6216\u589e\u52a0te\u6587\u4ef6\u3002\n\n\n\n\nservice_contexts\n\uff1a \u7c7b\u4f3c\nfile_contexts\n\u6587\u4ef6\uff0c \u5173\u8054\u4e86android\u7cfb\u7edf\u7684\u670d\u52a1\u4e0etype\u3002 \u8be5\u6587\u4ef6\u7684\u5185\u5bb9\u7531service manager\u5728\u8fd0\u884c\u65f6\u901a\u8fc7selinux\u7684\u63a5\u53e3\u52a8\u6001\u68c0\u67e5\u6743\u9650\u3002\n\n\nservice.te\n: \u5c06\u4e0d\u540c\u7c7b\u578b\u7684\u670d\u52a1\u4e0e\nservice_manager_type\n \u5173\u8054\u3002\n\n\n\u5982\u679c\u65b0\u6dfb\u52a0framework\u7684\u670d\u52a1\uff0c \u5fc5\u987b\u4fee\u6539\u8fd9\u4e24\u4e2a\u6587\u4ef6\uff0c\u5426\u5219\u65e0\u6cd5\u6ce8\u518cservice manager\uff0c \u65e0\u6cd5\u88ab\u83b7\u53d6bp\u3002\n\n\n\n\nfile.te\n\u3000\u6240\u6709\u8ddf\u6587\u4ef6\u548c\u6587\u4ef6\u7cfb\u7edf\u76f8\u5173\u7684\u5206\u7ec4\u7684\u6807\u7b7e(type).\u5982\u679c\u6d89\u53ca\u5230\u65b0\u6dfb\u52a0\u6587\u4ef6\u7cfb\u7edf\u6216\u8005\u65b0\u7684/data/\u5e95\u4e0b\u76ee\u5f55\u6743\u9650\uff0c\u5efa\u8bae\u5728\u8fd9\u4e2a\u6587\u4ef6\u91cc\u5c06\u5176\u4e0e\u76f8\u5173\u7684type\u5173\u8054\uff0c\u5426\u5219\u53ef\u80fd\u5bfc\u81f4\u67d0\u4e9b\u7cfb\u7edf\u670d\u52a1\u65e0\u6cd5\u8bbf\u95ee\u6216\u8005\u6587\u4ef6\u65e0\u6cd5\u521b\u5efa\u3002\n\n\n\n\ntools/\n \u4e00\u4e9b\u68c0\u67e5\u548c\u5206\u6790\u5de5\u5177\uff0c \u90fd\u662f\u57fa\u4e8e\u8bed\u6cd5\u7c7b\u7684\uff0c\u8fd8\u6709\u51e0\u4e2a\u662f\u9488\u5bf9\u5e94\u7528\u7684\u89c4\u5219\u751f\u6210\u548c\u7f16\u8f91\u5de5\u5177\uff0c\u672a\u7814\u7a76\u4ee3\u7801\u3002\n\n\ndevice \u76f8\u5173sepolicy\u4fee\u6539\u7684\u65b9\u6cd5\n\n\n\u8def\u5f84\uff1a \u7531 BoardConfig.mk \u4e2d\u7684 BOARD_SEPOLICY_DIRS \u5b9a\u4e49\n\n\n\u6587\u4ef6\uff1a \u7531 BoardConfig.mk \u4e2d\u7684 BOARD_SEPOLICY_UNION\n\n\ndevice\u5e95\u4e0b\u7684sepolicy\u4e0d\u662foverlay\uff0c \u800c\u662f\u4f1a\u4e0eexternal/sepolicy\u7684\u89c4\u5219\u5408\u5e76\u3002 \u6240\u4ee5\uff0c \u53ef\u4ee5\u5728device\u5e95\u4e0b\u521b\u5efa\u540c\u540d\u6587\u4ef6\uff0c\u6dfb\u52a0\u8bbe\u5907\u76f8\u5173\u7684\u89c4\u5219\u3002\n\n\n\u6bd4\u5982\uff0c \u6dfb\u52a0vold.te\uff0c \u5185\u5bb9\u5982\u4e0b\uff0c \u8d4b\u4e88vold\u7c7b\u578b\u7684\u8fdb\u7a0b\u6267\u884cntfs3g_exec\u7c7b\u578b\u7684\u7a0b\u5e8f\uff0c\u5e76\u81ea\u52a8\u5207\u6362domain\u3002\uff08ntfs3g_exec\u7c7b\u578b\u548cdomain\u5728\u540e\u9762\u4ecb\u7ecd\uff09\n\n\n \ndomain_auto_trans\n(\nvold\n,\n \nntfs3g_exec\n,\n \nntfs3g\n)\n\n \nallow\n \nvold\n \nntfs3g_exec\n:\nfile\n \nrx_file_perms\n;\n\n\n\n\n\n\n\u5982\u679c\u662f\u65b0\u6dfb\u52a0\u8fdb\u7a0b\u548csepolicy\uff0c \u5219\u989d\u5916\u9700\u8981\u5728file_context\u4e2d\u5c06\u53ef\u6267\u884c\u7a0b\u5e8f\u548ctype\u7ed1\u5b9a\u3002\n\n\n# device/s3graphics/zx2000/sepolicy/file_contexts\n/system/bin/ntfs-3g u:object_r:ntfs3g_exec:s0\n\n\n\n\n\nSELinux \u7684\u8c03\u8bd5\u548c\u9519\u8bef\u5206\u6790\u8bf4\u660e\n\n\n\u7b2c\u4e09\u65b9\u5de5\u5177\uff1a \napol\n , \u7528\u4e8e\u5206\u6790\u6700\u7ec8\u751f\u6210\u7684sepolicy\u3002\n\n\n\n\nexternal/sepolicy/tools \u4e0b\u9762\u6709\u4e00\u4e9b\u5de5\u5177\uff0c\u4f46\u7f3a\u5c11\u4f7f\u7528\u6587\u6863\uff0c\u53ef\u4ee5\u770b\u6e90\u7801\u7814\u7a76\u3002\n\n\n\n\n\u5bf9\u4e8e\u7531\u4e8eselinux\u7684\u6743\u9650\u95ee\u9898\u5bfc\u81f4\u8fd0\u884c\u5f02\u5e38\uff0c\u53ef\u4ee5\u5728\u5bf9\u5e94\u7684te\u6587\u4ef6\u4e2d\u52a0\u5165\u5982\u4e0b\u5185\u5bb9, \u5c06\u5bf9\u5e94\u8fdb\u7a0b\u8bbe\u7f6e\u4e3apermissive\uff0c\u5728\u8fd0\u884c\u540e\uff0c\u7ec8\u7aef\u4f1a\u8f93\u51fa\u6240\u6709selinux\u7684\u8b66\u544a\uff0c\u4f46\u7a0b\u5e8f\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002\u57fa\u4e8e\u9501\u8f93\u51fa\u7684\u8b66\u544a\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u89c4\u5219\u3002\n\n\npermissive $domain;\n\n\n\n\n\ntype=1400 audit(946684810.610:4): avc: denied { write } for pid=707 comm=\nm.coship.hotkey\n name=\nproperty_service\n dev=\ntmpfs\n ino=7244 scontext=u:r:platform_app:s0 tcontext=u:object_r:property_socket:s0 tclass=sock_file permissive=1\n\n\n\n\n\nperm_set\n \u4e3a \n{ write }\n\uff0c \u7a0b\u5e8f\u4e3a\nm.coship.hotkey\n\uff0c \ntarget class\n\u4e3a \nsock_file\n\uff0c\nsource context\n\u4e3a \nu:r:platform_app:s0\n\uff0c \ntarget context\n\u4e3a \nu:object_r:property_socket:s0\n\n\n\u4e0a\u9762\u5c06TE\u89c4\u5219\u76844\u4e2a\u76f8\u5173\u5b57\u6bb5\u90fd\u5206\u6790\u4e86\uff0c \u53ea\u8981\u6dfb\u52a0\u76f8\u5e94\u7684\u89c4\u5219\u5c31\u884c\u3002\u770b\u4e0b\u9762te\u89c4\u5219\u3002\n\n\n#\n \n-\n \n\u662f\u6392\u9664\u7684\u610f\u601d\n\n\n#\n \n\u4e0d\u5408\u9002\u7684\u6539\u6cd5\uff1a\n \n\u6dfb\u52a0\n \n-platform_app\n\u3002\n \n\u7136\u540e\u518d\u6dfb\u52a0\n \nallow\n \nplatfor_app\n \nproperty_socket\n:\nsock_file\n \nwrite\n\uff1b\n\n \nneverallow\n \n{\n \nappdomain\n \n-bluetooth\n \n-radio\n \n-shell\n \n-system_app\n \n-nfc\n \n}\n\n     \nproperty_socket\n:\nsock_file\n \nwrite\n;\n\n\n\n\n\n\n\u4e0d\u8fc7\uff0c\u8fd9\u4e2a\u9519\u8bef\u7531\u4e8e\u662fapp\uff0c \u6240\u4ee5\uff0c\u4e0d\u9002\u5408\u76f4\u63a5\u6dfb\u52a0\u5230\nplatform_app\n\u8fd9\u4e2a\u57df\uff0c \u56e0\u4e3a\u4f1a\u5bf9\u6240\u6709\u4ece\u6e90\u7801\u7f16\u8bd1\u7684\u5e94\u7528\u4ea7\u751f\u5f71\u54cd\u3002\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u989d\u5916\u8bbe\u7f6e\u4e00\u4e2aseinfo\u3002\n\n\n\n\n\u5982\u679cSContext\u4e2d\u51fa\u73b0\nunlabeled\n\uff0c \u5219\u8868\u9762\u8be5\u6587\u4ef6/\u76ee\u5f55/\u6587\u4ef6\u7cfb\u7edf\u672a\u6253\u6807\u7b7e\uff0c\u53c2\u8003\u4ee5\u4e0a\u4ecb\u7ecd\u5728\u5bf9\u5e94\u6587\u4ef6\u5185\u6dfb\u52a0\u6807\u7b7e\u3002\n\n\n\n\n\u5982\u679c\u662f\u4fee\u6539\u6253\u6807\u7b7e\u7684\u6587\u4ef6\uff0c\u7f16\u8bd1\u540e\uff0csystem.img\u9700\u8981\u91cd\u65b0\u5237\uff0c\u5982\u679c\u662f\u4fee\u6539TE\u7684\u89c4\u5219\u6587\u4ef6\uff0c\u7f16\u8bd1\u540e\uff0c\u53ea\u9700\u8981\u91cd\u65b0\u5237boot.img\n\n\n\u5b9e\u9645\u9879\u76ee\u4e2d\u9047\u5230\u7684\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848\n\n\n\n\n\u5728Android\u4e2d, \u7406\u8bba\u4e0a\u683c\u5f0f\u5316\u5206\u533a\u4f1a\u5bfc\u81f4\u6240\u6709\u6587\u4ef6\u7684scontex\u76f8\u5173\u4fe1\u606f\u4e22\u5931, \u800c\u5982\u679c\u9700\u6062\u590d(\u6bd4\u5982\u683c\u5f0f\u5316userdata\u540e), \u9700\u8981\u5728init.rc\u4e2d\u663e\u793a\u8c03\u7528\nrestorecon_recursive\n, \u4ee5\u6062\u590d\u6307\u5b9a\u76ee\u5f55\u7684secontext.\n\n\n\u4e0a\u6587\u53ea\u63d0\u5230\u4e86Android\u4e2d\u7684\u5e38\u89c1labeling\u65b9\u6cd5, \u5728\u5b9e\u9645\u9879\u76ee\u4e2d, \u51fa\u73b0\u4e86\u9700\u8981\u5bf9ext4\u6587\u4ef6\u7cfb\u7edf\u7b49\u7684\u5916\u90e8\u5b58\u50a8\u6302\u8f7d\u5e76\u63a7\u5236\u6743\u9650. \u9700\u8981\u52a8\u6001\u5730\u6307\u5b9asecontex, \u8fd9\u91cc\u5c31\u4f7f\u7528\u4e86 mountpoint labeling \u65b9\u6cd5(\u76f4\u63a5google\u8be5\u5173\u952e\u5b57). \u5176\u4f7f\u7528\u573a\u666f\u662f\u540c\u4e00\u6587\u4ef6\u7cfb\u7edf\u5728\u4e0d\u540c\u6302\u8f7d\u70b9\u53ef\u4ee5\u6709\u4e0d\u540c\u7684secontext.\u76f8\u5173\u4ee3\u7801\u5982\u4e0b:\n\n\n\n\nint\n \nExt\n::\ndoMount\n(\nconst\n \nchar\n \n*\nfsPath\n,\n \nconst\n \nchar\n \n*\nfstype\n,\n \nconst\n \nchar\n \n*\nmountPoint\n,\n\n                 \nunsigned\n \nlong\n \nfsFlags\n,\n \nint\n \nownerUid\n,\n \nint\n \nownerGid\n,\n \nint\n \npermMask\n)\n\n\n{\n\n    \nint\n \nrc\n;\n\n    \n//\n \nlabeling\n \nmountpoint\n \nfor\n \next\n \nfs\n \nwhen\n \nmounting\n \nudisk.\n \nman\n \n8\n \nmount\n \nfor\n \nmore\n \noptions\n\n    \nconst\n \nchar\n \n*mountoption\n \n=\n \ncontext=\nu\n:\nobject_r\n:\nextfs\n:\ns0\n;\n\n\n    unsigned long mountflags = MS_NOATIME | MS_NODEV | MS_NOSUID | MS_DIRSYNC;\n\n\n    unsigned long remountflags = mountflags | fsFlags;\n\n\n    mountflags |= fsFlags;\n\n\n\n    if (mountflags \n MS_RDONLY) {  // readonly\n\n\n        // Mount as writable so that we can update the Uid/Gid and permission\n\n\n        mountflags \n= ~MS_RDONLY;\n\n\n    }\n\n\n\n    rc = mount(fsPath, mountPoint, fstype, mountflags, mountoption);\n\n\n    if (rc \n errno == EROFS) {\n\n\n        SLOGE(\n%\ns\n \nappers\n \nto\n \nbe\n \na\n \nread\n \nonly\n \nfilesystem\n \n-\n \nretrying\n \nmount\n \nRO\n, fsPath);\n\n\n        mountflags |= MS_RDONLY;\n\n\n        rc = mount(fsPath, mountPoint, fstype, mountflags, mountoption);\n\n\n    }\n\n\n\n    if (rc == 0) {\n\n\n        // mount success, remount to the mount flags we want\n\n\n        chmod(mountPoint, 0770);\n\n\n        chown(mountPoint, ownerUid, ownerGid);\n\n\n        SLOGI(\nremount\n \nas\n \nuser\n \noption\n);\n\n\n        rc = Ext::remount(mountPoint, remountflags);\n\n\n    }\n\n\n\n    if (rc) {\n\n\n        SLOGE(\n%\ns\n \nremount\n \nto\n \nuser\n \noption\n \nfailed\n \n-\n \nretrying\n \nmount\n \nwith\n \ndefault\n \noption\n\\\nn\n,\n \nfsPath\n);\n\n        \nrc\n \n=\n \nmount(fsPath,\n \nmountPoint,\n \nfstype,\n \nmountflags,\n \nmountoption)\n;\n\n    \n}\n\n\n    \n//\n \nDirty\n \nPatch\n \n:\n \nfix\n \npermission\n \nof\n \npvr\n \nfiles\n\n    \nfixPermission\n(\nmountPoint\n);\n\n    \n//\n \nDirty\n \nPatch\n \nend\n\n\n    \nreturn\n \nrc\n;\n\n\n}\n\n\n\n\n\n\n\n\n\u9884\u7559", 
            "title": "Android SELinux \u89c4\u5219\u4ecb\u7ecd"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#seandroid", 
            "text": "\u6765\u6e90: https://pengzhangdev.github.io/SEAndroid%E8%A7%84%E5%88%99%E4%BB%8B%E7%BB%8D/  history:   version 1.0 by werther zhang @2016-12-12  version 1.1 by werther zhang @2017-06-27 \u603b\u7ed3\u9879\u76ee\u4e2d\u9047\u5230\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848", 
            "title": "SEAndroid\u89c4\u5219\u4ecb\u7ecd"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#_1", 
            "text": "sepolicy\u7684\u8bed\u6cd5\u662fgnu m4, \u662funix\u7cfb\u7edf\u7684\u5b8f\u5904\u7406\u5668\uff0c \u8ddfC\u7684\u5b8f\u7c7b\u4f3c\u3002  \u4ee5\u4e0b\u51fa\u73b0\u7684\u6240\u6709\u4e0e\u7cfb\u7edf\u8fdb\u7a0b\u540d\u5b57\u4e00\u6837\u7684\uff0c \u9664\u975e\u7279\u522b\u6307\u51fa\u8fdb\u7a0b\uff0c \u5426\u5219\u90fd\u53ea\u662f\u540d\u5b57\uff0c \u4e0d\u4e0e\u7279\u5b9a\u8fdb\u7a0b\u5173\u8054\u3002  \u4e0b\u9762\uff0c \u5148\u6574\u7406\u4e0b\u6982\u5ff5.. \u77e5\u9053\u8fd9\u4e48\u4e2a\u4e1c\u897f\u5c31\u884c\uff0c\u4e0d\u7528\u7406\u89e3\uff0c\u540e\u9762\u4f1a\u8be6\u7ec6\u63d0\u5230\u3002  \u5728linux\u7cfb\u7edf\u4e2d\uff0c\u3000\u6240\u6709\u5355\u5143(\u6587\u4ef6\uff0c\u76ee\u5f55\uff0c\u6587\u4ef6\u7cfb\u7edf\uff0c\u8fdb\u7a0b\u7b49),\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e3b\u52a8\u5355\u5143\u548c\u88ab\u52a8\u5355\u5143\uff0e\u8fdb\u7a0b\u5c5e\u4e8e\u4e3b\u52a8\u5355\u5143\uff08\u4e0d\u5b8c\u5168\uff0c\u8fdb\u7a0b\u7684\u8d44\u6e90\u5728\u88ab\u8bbf\u95ee\u65f6\uff0c\u5c5e\u4e8e\u88ab\u52a8\u5355\u5143\u7684\u6982\u5ff5\uff09\uff0c\u3000\u800c\u5176\u4ed6\u7684\u65e0\u6cd5\u53d1\u8d77\u52a8\u4f5c\u7684\u90fd\u5c5e\u4e8e\u88ab\u52a8\u5355\u5143\uff0e\u800csepolicy\u5b9a\u4e49\u7684\u5206\u522b\u662f\u4e3b\u52a8\u5355\u5143\u7684\u884c\u4e3a\u89c4\u5219\u548c\u88ab\u52a8\u5355\u5143\u7684\u7ee7\u627f\u89c4\u5219(\u8fd8\u662f\u7531\u4e3b\u52a8\u5355\u5143\u53d1\u8d77)\uff0e  \u5728\u63d0\u5230domain\u8fd9\u4e2a\u6982\u5ff5\u65f6\uff0c\u4e00\u5219\u8868\u793a\u4e3b\u52a8\u5355\u5143scontext\u4e2d\u7b2c\u4e09\u4e2a\u5b57\u6bb5\uff0c\u6bd4\u5982\uff0c\u4e0b\u4e00\u4e2a\u4f8b\u5b50\u4e2dsdcard\u8fdb\u7a0b\u7684domain\u5c31\u662fsdcardd\uff1b\u4e00\u5219\u6307\u7684\u662f\u5c5e\u6027\uff0c\u5177\u4f53\u51fa\u73b0\u5728\u89c4\u5219\u8bed\u53e5\u4e2d\uff0c\u6bd4\u5982\u540e\u6587\u7684 type sdcardd domain  \u662f\u6307\u8bb2sdcardd\u4e0e\u5c5e\u6027domain\u5173\u8054\uff0c\u800c\u5c5e\u6027domain\u5c31\u53ef\u4ee5\u8868\u793a\u6240\u6709\u7684\u4e0e\u4e4b\u5173\u8054\u7684\u7c7b\u578b\uff0c\u56e0\u4e3a\u6240\u6709\u88ab\u89c4\u5219\u4e86\u7684\u8fdb\u7a0b\u90fd\u4f1a\u4e0edomain\u5c5e\u6027\u5173\u8054\uff0c\u6240\u4ee5domain\u5728\u89c4\u5219\u8bed\u53e5\u4e2d\u6709\u65f6\u5019\u6307\u4ee3\u6240\u6709\u8fdb\u7a0b\u3002  \u5728\u63d0\u5230type\u8fd9\u4e2a\u6982\u5ff5\u65f6\uff0c\u4e00\u5219\u662f\u8868\u793a\u88ab\u52a8\u5355\u5143scontext\u4e2d\u7b2c\u4e09\u4e2a\u5b57\u6bb5\uff0c\u6bd4\u5982\u4e0b\u4e00\u4e2a\u4f8b\u5b50\u4e2dsdcard\u8fd9\u4e2a\u6587\u4ef6\u7684type\u4e3asdcard_exec\u3002\u4e00\u5219\uff0c\u6307\u7684\u662f\u6253\u6807\u7b7e\u7684\u5173\u952e\u5b57\uff0c\u5b9a\u4e49domain/type\u7684\u5173\u952e\u5b57\uff0c\u6bd4\u5982\u4e0a\u9762\u7684sdcardd\u7684\u4f8b\u5b50\u3002  attribute:  domain/type \u7684\u96c6\u5408\uff0c\u4e0etype/domain \u76f8\u540c\u547d\u540d\u7a7a\u95f4\uff0c\u56e0\u4e3am4\u5c31\u662f\u4e2a\u5b8f\u89e3\u91ca\u5668\uff0cattribute\u5c31\u662f\u4e3a\u4e00\u7fa4\u76f8\u540c\u6743\u9650\u6216\u8005\u89c4\u5219\u7684\u4e3b\u52a8\u5355\u5143\u6216\u88ab\u52a8\u5355\u5143\u96c6\u5408\u5b9a\u4e49\u4e86\u4e2a\u65b0\u540d\u5b57\uff0c\u8fd9\u4e2a\u65b0\u540d\u5b57\u5728sepolicy\u4e2d\u88ab\u5b9a\u4e49\u4e3aattribute. \u5728m4\u7f16\u8bd1\u8fc7\u7a0b\u4e2dattribute\u90fd\u4f1a\u88ab\u5206\u89e3\u6210\u5b9e\u9645\u7684type/domain\uff0c\u540e\u6587\u4f1a\u5728\u4f8b\u5b50\u4e2d\u63d0\u5230\u3002  # \u88ab\u52a8\u5355\u5143\u5206\u7ec4\nsdcard_type -|\n             |-|- fuse  -|-|\n             |-|- vfat  -|-|\n               |- sysfs -|-|\n               |- tmpfs -|-|\n                           |- fs_type\n\n# \u4e3b\u52a8\u5355\u5143\u5206\u7ec4\uff0c\u3000\u4e5f\u4f1a\u505a\u88ab\u52a8\u5355\u5143\uff0c\u6bd4\u5982\u88ab\u8bbf\u95ee\uff0c\u88abkill\nnetdomain -|\n           |-|- netd -|-|\n           |-|- dhcp -|-|\n             |- vold -|-|\n             |- logd -|-|\n                        |- domain  \u6253\u6807\u7b7e: \u5c31\u662f\u7ed9\u88ab\u52a8\u5355\u5143\u5b9a\u4e49type\uff0c\u3000\u7ed9\u4e3b\u52a8\u5355\u5143\u5b9a\u4e49domain\uff0e domain\u53ea\u6709init\u662f\u5b9a\u4e49\u7684\u5176\u4ed6\u90fd\u662ffork\u4e4b\u540e\u901a\u8fc7DT\u8f6c\u6362\u7684\uff0e\u800ctype\u53ea\u6709\u5df2\u77e5\u662f\u5b9a\u4e49\u7684\uff0c\u7531\u8fdb\u7a0b\u521b\u5efa\u7684\u90fd\u662f\u901a\u8fc7TT\u8f6c\u6362\u7684\uff0e DT\u548cTT\u5728\u540e\u9762\u4f1a\u4ecb\u7ecd\uff0e", 
            "title": "\u524d\u8a00"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#sepolicy", 
            "text": "sepolicy\u7684\u89c4\u5219\u9488\u5bf9\u7684\u662flinux\u7cfb\u7edf\u4e2d\u7684\u8fdb\u7a0b\u548c\u6587\u4ef6\u3002\u8fdb\u7a0b\u662f\u4e3b\u52a8\u7684\uff0c \u800c\u6587\u4ef6\u662f\u88ab\u52a8\u7684\u3002 \u6240\u4ee5\uff0c\u6709\u5bf9\u5e94\u7684\u8fdb\u7a0b\u89c4\u5219\u548c\u6587\u4ef6\u89c4\u5219\uff0c \u5206\u522b\u5b9a\u4e49\u8fdb\u7a0b\u7684\u5408\u6cd5\u884c\u4e3a\u548c\u6587\u4ef6\u88ab\u8bbf\u95ee\u7684\u6743\u9650\u3002  SELinux\u4e2d\uff0c \u6bcf\u4e2a\u5bf9\u8c61\uff08\u8fdb\u7a0b\u548c\u6587\u4ef6\uff09\u88ab\u8d4b\u4e88\u5b89\u5168\u5c5e\u6027\uff0c\u5b98\u65b9\u8bf4\u6cd5\u662f Security Context(\u4ee5\u4e0b\u7b80\u79f0SContext)\u3002 SContext\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c \u5bf9\u4e8e\u8fdb\u7a0b\u7684SContext\uff0cSContext\u7684\u683c\u5f0f\u662f\u201du:r:type[:range]\u201c. \u53ef\u4ee5\u4f7f\u7528  ps -Z  \u83b7\u5f97\uff0c \u5bf9\u4e8e\u6587\u4ef6\u7684SContext\uff0c \u53ef\u4ee5\u901a\u8fc7  ls -Z  \u83b7\u5f97\u3002 \u5982\u4e0b\u4e3a\u76f8\u5e94\u547d\u4ee4\u7684\u8f93\u51fa\u3002  # ps -Z\nu:r:logd:s0                    logd      198   1     /system/bin/logd\nu:r:healthd:s0                 root      199   1     /sbin/healthd\nu:r:lmkd:s0                    root      200   1     /system/bin/lmkd\nu:r:servicemanager:s0          system    201   1     /system/bin/servicemanager\nu:r:vold:s0                    root      202   1     /system/bin/vold\nu:r:surfaceflinger:s0          system    203   1     /system/bin/surfaceflinger\nu:r:common_time:s0             root      204   1     /system/bin/common_time\nu:r:shell:s0                   shell     205   1     /system/bin/sh\nu:r:kernel:s0                  root      206   2     kworker/1:1H\nu:r:netd:s0                    root      207   1     /system/bin/netd\nu:r:debuggerd:s0               root      208   1     /system/bin/debuggerd\nu:r:drmserver:s0               drm       209   1     /system/bin/drmserver\nu:r:mediaserver:s0             media     210   1     /system/bin/mediaserver\nu:r:installd:s0                install   211   1     /system/bin/installd\nu:r:keystore:s0                keystore  213   1     /system/bin/keystore\nu:r:zygote:s0                  root      214   1     zygote\nu:r:sdcardd:s0                 media_rw  215   1     /system/bin/sdcard\nu:r:adbd:s0                    shell     216   1     /sbin/adbd\nu:r:kernel:s0                  root      228   2     kauditd  \u5de6\u8fb9\u4e00\u5217\u662f\u8fdb\u7a0b\u7684 SContext\uff0c \u4ee5sdcard\u8fdb\u7a0b\u4e3a\u4f8b\u5b50\uff0c \u5176\u503c\u4e3a u:r:sdcardd:s0\uff0c \u5176\u4e2d\uff1a    u \u4e3a user \u7684\u610f\u601d\u3002 SEAndroid\uff08\u6307\u4fee\u6539\u4e86\u7684SELinux\uff09 \u4e2d\u53ea\u5b9a\u4e49\u4e86\u4e00\u4e2aSELinux\u7528\u6237\uff0c \u503c\u4e3au    r \u4e3a role \u7684\u610f\u601d\u3002 role \u662f\u89d2\u8272\u610f\u601d\uff0c \u5b83\u662f SELinux\u603b\u4e00\u79cd\u6bd4\u8f83\u9ad8\u5c42\u6b21\uff0c \u66f4\u65b9\u4fbf\u7684\u6743\u5229\u7ba1\u7406\u601d\u8def\uff0c \u5373 Role Based Access Control\uff08\u57fa\u4e8e\u89d2\u8272\u8bbf\u95ee\u63a7\u5236\uff0c \u7b80\u79f0\u4e3aRBAC\uff0c \u5728\u540e\u6587\u4f1a\u8be6\u7ec6\u8ba8\u8bba\uff09\u3002user\u4e0erole\u7684\u6743\u9650\uff0c \u7b80\u5355\u70b9\u8bf4\uff0c \u5c31\u662f u \u53ef\u4ee5\u5c5e\u4e8e\u591a\u4e2a role\uff0c \u7136\u540e\u4e0d\u540c\u7684 role \u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u6743\u9650\uff0c \u5c31\u8ddf\u4e00\u4e2a\u4eba\u53ef\u4ee5\u517c\u804c\u591a\u4efd\u5de5\u4f5c\u4e00\u6837\u3002    sdcardd\uff0c \u4ee3\u8868\u8fdb\u7a0b sdcard \u6240\u5c5e\u7684 Domain \u4e3a sdcardd\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u8fd9\u662f\u4e00\u4e2a\u8fdb\u7a0b\u7ec4\u7684\u540d\u5b57\uff0c \u8be5\u5b57\u7b26\u4e32\u7684\u540d\u5b57\u53ef\u4ee5\u968f\u610f\uff0c \u53ea\u8981\u5728\u89c4\u5219\u6587\u4ef6\u4e2d\u5b9a\u4e49\u597d\u6620\u5c04\u5173\u7cfb\uff0c \u89c4\u5219\u6587\u4ef6\u7684\u8bf4\u660e\u5728\u7a0d\u540e\u8ba8\u8bba\u3002\u5bf9\u4e8e\u8fdb\u7a0b\u8bbf\u95ee\u7684\u6743\u9650\u63a7\u5236\uff0c \u5728linux\u4e0a\uff0c \u6211\u4eec\u719f\u77e5\u7684\u662f\uff0c \u5982\u679c\u4ee5root\u6743\u9650\u542f\u52a8\u4e00\u4e2a\u8fdb\u7a0b\uff0c \u5219\u8be5\u8fdb\u7a0b\u5177\u6709root\u6743\u9650\uff0c \u8fd9\u5c31\u662froot\u7684\u539f\u56e0\uff0c \u8be5\u5b89\u5168\u6a21\u578b\u53eb\u505aDAC\uff08Discretionary Access Control\uff09\u3002 \u800cSELinux\u5bf9\u4e8e\u8fdb\u7a0b\u8bbf\u95ee\u7684\u63a7\u5236\uff0c \u7c7b\u4f3c\u767d\u540d\u5355\u673a\u5236\uff0c \u53ea\u6709\u5199\u5165\u89c4\u5219\u7684\u8fdb\u7a0b\u624d\u6709\u5bf9\u5e94\u7684\u8bbf\u95ee\u6743\u9650\uff0c \u6240\u4ee5\uff0c \u5728\u8fd9\u79cd\u673a\u5236\u4e0b\uff0c \u5373\u4f7f\u662froot\u6743\u9650\u7684sdcardd\uff0c \u4e5f\u65e0\u6cd5\u8bbf\u95ee\u89c4\u5219\uff0c \u8be5\u5b89\u5168\u6a21\u578b\u53ebMAC\uff08Mandatory Access Control\uff09\u3002\u800cMAC\u7684\u57fa\u672c\u7ba1\u7406\u5355\u4f4d\u662f Type Enforcement Access Control (\u57fa\u4e8e\u7c7b\u578b\u7684\u5f3a\u5236\u8bbf\u95ee\u63a7\u5236\uff0c\u7b80\u79f0TEAC\uff0c \u4e5f\u53ebTE)\uff0c \u8fd9\u4e9b\u53ea\u662f\u6982\u5ff5\u540d\u5b57\u800c\u5df2\u3002    S0 \u662f SELinux\u4e3a\u4e86\u6ee1\u8db3\u519b\u7528\u548c\u6559\u80b2\u884c\u4e1a\u8bbe\u8ba1\u7684 Multi-Level Security(MLS)\u673a\u5236\u6709\u5173\u3002MLS\u5c06\u8fdb\u7a0b\u548c\u6587\u4ef6\u8fdb\u884c\u4e86\u5206\u7ea7\uff0c \u4e0d\u540c\u7ea7\u522b\u7684\u8d44\u6e90\u9700\u8981\u4e0d\u540c\u7ea7\u522b\u7684\u8fdb\u7a0b\u8bbf\u95ee\uff0c \u540e\u6587\u4f1a\u4ecb\u7ecd\u3002     # ls -Z\n\n # /\n-rw-r--r-- root     root              u:object_r:rootfs:s0 property_contexts\ndrwxr-xr-x root     root              u:object_r:rootfs:s0 res\ndrwx------ root     root              u:object_r:rootfs:s0 root\n-rw-r--r-- root     root              u:object_r:rootfs:s0 s3g.ko\n-rw-r--r-- root     root              u:object_r:rootfs:s0 s3g_core.ko\ndrwxr-x--- root     root              u:object_r:rootfs:s0 sbin\nlrwxrwxrwx root     root              u:object_r:rootfs:s0 sdcard -  /storage/emulated/legacy\n-rw-r--r-- root     root              u:object_r:rootfs:s0 seapp_contexts\n-rw-r--r-- root     root              u:object_r:rootfs:s0 selinux_version\n-rw-r--r-- root     root              u:object_r:rootfs:s0 sepolicy\n-rw-r--r-- root     root              u:object_r:rootfs:s0 service_contexts\ndrwxr-x--x root     sdcard_r          u:object_r:rootfs:s0 storage\ndr-xr-xr-x root     root              u:object_r:sysfs:s0 sys\ndrwxr-xr-x root     root              u:object_r:system_file:s0 system\n-rw-r--r-- root     root              u:object_r:rootfs:s0 ueventd.rc\n-rw-r--r-- root     root              u:object_r:rootfs:s0 ueventd.zx2000.rc\nlrwxrwxrwx root     root              u:object_r:rootfs:s0 vendor -  /system/vendo\n\n# system/bin/\n-rwxr-xr-x root     shell             u:object_r:system_file:s0 screenrecord\n-rwxr-xr-x root     shell             u:object_r:sdcardd_exec:s0 sdcard\nlrwxr-xr-x root     shell             u:object_r:system_file:s0 sendevent -  toolbox\n-rwxr-xr-x root     shell             u:object_r:system_file:s0 sensorservice\n-rwxr-xr-x root     shell             u:object_r:system_file:s0 service  \u4e0a\u9762\u662fzx2000\u4e0a\uff0c\u6211\u4eec\u4ee5 storage \u76ee\u5f55\u4e3a\u4f8b\u5b50\u7b80\u5355\u770b\u4e0b\uff0c\u4fe1\u606f\u4e3a u:object_r:rootfs:s0.    u \u540c\u6837\u662fuser\u610f\u601d\uff0c \u4ee3\u8868\u521b\u5efa\u8be5\u6587\u4ef6\u7684SELinux user    object_r: \u8be5\u5b57\u6bb5\u4e0e ps -Z \u7684\u4e00\u6837\uff0c\u8868\u793a role\uff0c\u4f46\u662f\u6587\u4ef6\u662f\u88ab\u52a8\u8bbf\u95ee\u7684\uff0c \u65e0\u6cd5\u79f0\u4e3a\u4e00\u4e2a\u89d2\u8272\uff0c \u6240\u4ee5\uff0c \u6240\u6709\u6587\u4ef6\u7684role\u90fd\u7528object_r\u8868\u793a    rootfs: type, \u548c domain \u4e00\u4e2a\u610f\u601d\uff0c \u5c31\u662f\u4e00\u4e2a\u5206\u7c7b\u7684\u6807\u7b7e\u3002 \u6240\u6709\u7684\u6587\u4ef6\uff08\u5305\u62ec\u6587\u4ef6\u7cfb\u7edf\uff09\u90fd\u8981\u4e48\u6709\u6807\u7b7e\uff0c\u8981\u4e48\u5c31\u662funlabeled\u3002    s0\uff1a MLS\u7684\u7ea7\u522b\u3002    \u6240\u4ee5\uff0c\u540e\u9762\u4f1a\u4ecb\u7ecdTE\uff0c RBAC, MLS \u7b49\u7684\u89c4\u5219\u3002", 
            "title": "sepolicy\u89c4\u5219\u4ecb\u7ecd"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#labeling", 
            "text": "\u57fa\u4e8e\u4e0a\u9762\u7684SContext\u4fe1\u606f\uff0c\u5148\u4ecb\u7ecd\u4e0b\u6253\u6807\u7b7e\uff0c \u4e5f\u5c31\u662f\u4e3b\u52a8\u5355\u5143\u7684domain\u548c\u88ab\u52a8\u5355\u5143\u7684type\u521d\u59cb\u5316\u7684\u52a8\u4f5c\u3002\u5bf9\u4e8e\u65b0\u521b\u5efa\u7684\u8fdb\u7a0b\u548c\u65b0\u521b\u5efa\u7684\u6587\u4ef6\u7684SContext\uff0c\u6211\u4eec\u4f1a\u5728\u4ecb\u7ecd\u4e86TE\u89c4\u5219\u540e\uff0c\u518d\u5728Labeling\u4ecb\u7ecd\uff08\u4e8c\uff09\u4ecb\u7ecd\u3002", 
            "title": "Labeling\u4ecb\u7ecd\uff08\u4e00\uff09"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#domain", 
            "text": "domain\u8ddf\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e00\u6837\uff0c\u53ef\u4ee5\u88ab\u7ee7\u627f\uff0c\u4e5f\u53ef\u4ee5\u88ab\u6539\u53d8\u3002\u6240\u4ee5\uff0c\u5b83\u4e0e\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u4e00\u6837\uff0c\u5728\u9700\u8981\u6539\u53d8\u7684\u65f6\u5019\uff0c\u663e\u793a\u5730\u5207\u6362\uff0c\u800c\u8fd9\u4e2a\u5207\u6362\u52a8\u4f5c\u5728sepolicy\u4e2d\u5b9a\u4e49\u3002\u6240\u4ee5\uff0c \u53ea\u6709init\u8fdb\u7a0b\u6709\u521d\u59cb\u7684domain\uff0c\u5176\u4ed6\u8fdb\u7a0b\u90fd\u662f\u6839\u636eDT(Domain Transition)\u89c4\u5219\u5207\u6362\u7684\uff0c\u540e\u6587\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u3002  # init.rc\non early-init    \n   # Set the security context for the init process.    \n   # This should occur before anything else (e.g. ueventd) is started.\n   setcon u:r:init:s0  \u8fd9\u91cc\u5c31\u5c06init\u7684domain\u8bbe\u7f6e\u4e3ainit\u3002", 
            "title": "domain\u521d\u59cb\u5316"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#filesystemfile", 
            "text": "\u4e0a\u9762\u901a\u8fc7 ls -Z \u770b\u5230\u7684SContext\uff0c\u6587\u4ef6\u90e8\u5206\u662f\u5728 external/sepolicy/file_contexts \u4e2d\u5b9a\u4e49\u7684.\u8fd9\u4e2a\u6587\u4ef6\u6700\u7ec8\u4f1a\u4f5c\u4e3amkext4fs\u5de5\u5177\u7684\u53c2\u6570,\u88ab\u8bbe\u7f6e\u5230system.img\u4e2d.  # \u683c\u5f0f: regexp  -type  (  file_label  |  none  )  #  -type  \u4e2d\u7684type\u4e0e ls -la \u7684\u8f93\u51fa\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5339\u914d.\u6bd4\u5982:  # -rw-r--r-- 1 root    root    11208 Mar 11 11:13 te_macros  # drwxr-xr-x 3 root    root     4096 Mar 11 11:13 tools  # \u5219 -- \u8868\u793a\u5339\u914d\u6587\u4ef6\uff0c -d \u8868\u793a\u5339\u914d\u76ee\u5f55\uff0e  # \u56e0\u4e3a\u524d\u9762\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u3000\u6240\u4ee5\u3000 -type \u3000\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8fc7\u6ee4\u9700\u8981\u7684\u6587\u4ef6\u7c7b\u578b\uff0c\u3000\u5c06\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\u548c\u6587\u4ef6\u7c7b\u578b\u6253\u4e0a\u6807\u7b7e\uff0e  /            u : object_r : rootfs : s0  # Data files  / adb_keys       u : object_r : adb_keys_file : s0 / default\\ . prop      u : object_r : rootfs : s0 / system ( / . * ) ?        u : object_r : system_file : s0 # \u8fd9\u91cc\u7684--, \u4e2a\u4eba\u7406\u89e3\u662f\uff0c\u3000\u901a\u8fc7\u900f\u8fc7\u8f6f\u94fe\u63a5\uff0c\u5c06\u6807\u7b7e\u6253\u5728\u5b9e\u9645\u7684\u6587\u4ef6\u4e0a\uff0e  / system / bin / sh       --   u : object_r : shell_exec : s0 / system / bin / run - as   --   u : object_r : runas_exec : s0 / system / bin / sdcard      u : object_r : sdcardd_exec : s0  \u6240\u6709\u65b0\u6dfb\u52a0\u7684\u6587\u4ef6\uff0c\u5efa\u8bae\u5728\u8fd9\u8fb9\u67e5\u770b\u4e0b\uff0c\u662f\u5426\u9700\u8981\u8bbe\u7f6e\u65b0\u7684\u6807\u7b7e\uff0e\u3000\u4e00\u822c\u65b0\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u4f1a\u9700\u8981\u8bbe\u7f6e\u989d\u5916\u7684type\uff0c\u5e76\u4e14\u6709xx.te\u3000\u5bf9\u5e94\u7684\u89c4\u5219\u6587\u4ef6\u548c\u4e0etype\u5bf9\u5e94\u7684domain\uff0e  \u518d\u6765\u770b \u6587\u4ef6\u7cfb\u7edf\u7684\u6807\u7b7e\u521d\u59cb\u5316 \uff0c\u8fd9\u4e2a\u4e0d\u597d\u7406\u89e3\uff0c\u611f\u89c9\u8ddf\u5185\u6838selinux\u6a21\u5757\u7684\u5b9a\u4e49\u4e5f\u626f\u4e0a\u5173\u7cfb\u4e86\uff0c\u4ee5\u4e0b\u53ea\u662f\u4e2a\u4eba\u7406\u89e3\uff1a  #   The   fs_use_xattr   statement   is   used   to   allocate   a   security   context   to   filesystems  #   \u7ed9\u6587\u4ef6\u7cfb\u7edf\u6253\u6807\u7b7e\uff0c\u3000\u8be5\u6807\u7b7e\u662f\u4f5c\u4e3a   target_type ,   \u4f1a\u5728\u89c4\u5219\u91cc\u88ab\u4f7f\u7528\uff0e  #   \u6bd4\u5982\uff1a vold . te :   allow   vold   labeledfs : filesystem   {   mount   unmount   remount   } ;  #        file . te :   allow   file_type   labeledfs : filesystem   associate ;   #                 \u5141\u8bb8   file_type   \u5c5e\u6027\u7684\u6587\u4ef6\u5728 labeledfs \u7c7b\u578b\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u521b\u5efa  #   \u4e2a\u4eba\u7406\u89e3\uff0c\u8fd9\u7c7b\u6587\u4ef6\u7cfb\u7edf\u4e0a\u6240\u521b\u5efa\u7684\u6587\u4ef6 / \u76ee\u5f55\uff0c\u4f1a\u7ee7\u627f\u81ea\u7236\u76ee\u5f55\u89c4\u5219\uff0c\u540c\u65f6\u53d7 TT \u89c4\u5219\u5f71\u54cd\u3002 \n  fs_use_xattr   yaffs2   u : object_r : labeledfs : s0 ; \n  fs_use_xattr   jffs2   u : object_r : labeledfs : s0 ; \n  fs_use_xattr   ext2   u : object_r : labeledfs : s0 ; \n  fs_use_xattr   ext3   u : object_r : labeledfs : s0 ; \n  fs_use_xattr   ext4   u : object_r : labeledfs : s0 ; \n  fs_use_xattr   xfs   u : object_r : labeledfs : s0 ; \n  fs_use_xattr   btrfs   u : object_r : labeledfs : s0 ; \n  fs_use_xattr   f2fs   u : object_r : labeledfs : s0 ; \n\n  #\u3000 The   fs_use_task   statement   is   used   to   allocate   a   security   context   to   pseudo   filesystems  \n  #\u3000 that   support   task   related   services   such   as   pipes   and   sockets . \n  #   \u4f7f\u7528 fs_use_task \u63cf\u8ff0\u7684\u5b57\u6bb5\u53ea\u6709\u4e0b\u9762\u4e24\u6761\uff0c\u3000\u5177\u4f53\u7684\u542b\u4e49\u8fd8\u6ca1\u7406\u89e3\uff0e \n  fs_use_task   pipefs   u : object_r : pipefs : s0 ; \n  fs_use_task   sockfs   u : object_r : sockfs : s0 ; \n\n  #\u3000 The   fs_use_trans   statement   is   used   to   allocate   a   security   context   to   pseudo   filesystems  \n  #\u3000 such   as   pseudo   terminals   and   temporary   objects .   The   assigned   context   is   derived   from  \n  #\u3000 the   creating   process   and   that   of   the   filesystem   type   based   on   transition   rules . \n  #   \u4ece\u63cf\u8ff0\u662f\u7ed9\u4f2a\u6587\u4ef6\u7cfb\u7edf\u7684\uff0c\u3000\u6bd4\u5982\uff0f dev / \u7b49\uff0e \n  #   \u8be5\u89c4\u5219\u63cf\u8ff0\u4e86\u5728\u5b9a\u4e49\u7684\u6587\u4ef6\u7cfb\u7edf\u4e0b\u9762\u6240\u521b\u5efa\u7684\u6587\u4ef6\u7684 SContext \uff0c\u3000\u4f46\u8be5\u89c4\u5219\u53c8\u53ef\u4ee5\u88ab\uff34\uff34\u89c4\u5219\u5f71\u54cd\uff0e\u6bd4\u5982\uff1a \n  #   type_transition   sdcardd   devpts : {   chr_file   }   media_rw_data_file ;   \u5982\u679c\u6709\u8fd9\u6761\u8bed\u53e5\uff0c\u3000\u5219 sdcardd \n  #   \u7c7b\u578b\u7684\u8fdb\u7a0b\u7684 devpts \u4e0b\u521b\u5efa\u7684\u5b57\u7b26\u8bbe\u5907\u6587\u4ef6\u7684 SContext \u4e3a media_rw_data_file \uff1b\u3000\u5982\u679c\u6ca1\u6709\u8fd9\u53e5\uff0c\u5219 SContext \u4e3a \n  #   devpts .   \u8fd9\u91cc\u7684\u89c4\u5219\u548c\u524d\u9762\u76ee\u5f55\u7684\u89c4\u5219\u7c7b\u4f3c\uff0c\u3000\u4f46\u8fd9\u91cc\u662f\u57fa\u4e8e\u6587\u4ef6\u7cfb\u7edf\u7684\uff0c\u3000\u89c4\u5219\u7ee7\u627f\u81ea\u6587\u4ef6\u7cfb\u7edf\uff0c\u800c\u4e0d\u662f\u76ee\u5f55\uff0e\u6bd4\u5982\uff1a \n  #   \u5982\u679c\u6709\u4fee\u6539\u4ee5\u4e0a TT \u7684 object   class   \u4e3a   dir ,   \u53e6\u4e00\u8fdb\u7a0b\u5728 sdcardd \u8fdb\u7a0b\u6240\u521b\u5efa\u7684\u76ee\u5f55\u91cc\u9762\u6240\u521b\u5efa\u7684\u6587\u4ef6\uff0c\u4e0d\u4f1a\u7ee7\u627f media_rw_data_file , \n  #   \u5176 SContext \u4f9d\u7136\u4e3a devpts \uff0e \n  fs_use_trans   devpts   u : object_r : devpts : s0 ; \n  fs_use_trans   tmpfs   u : object_r : tmpfs : s0 ; \n  fs_use_trans   devtmpfs   u : object_r : device : s0 ; \n  fs_use_trans   shm   u : object_r : shm : s0 ; \n  fs_use_trans   mqueue   u : object_r : mqueue : s0 ;   \u4e0a\u9762\u5173\u4e8e TT \u7684\u89c4\u5219\uff0c\u8fd8\u6709 target_type \u7684\u6982\u5ff5\uff0c\u53ef\u4ee5\u5728\u540e\u9762\u4ecb\u7ecd\u4e86TE\u8bed\u6cd5\u540e\uff0c\u518d\u56de\u8fc7\u5934\u7406\u89e3\u4e0b\u3002\u4ee5\u4e0a\u4ecb\u7ecd\u4e86\u6587\u4ef6\uff0c\u6587\u4ef6\u7cfb\u7edf\u6253\u6807\u7b7e\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u6587\u4ef6\u7cfb\u7edf\u4e0d\u5b8c\u6574\uff0c\u8d77\u7801rootfs\u548cproc\u90fd\u6ca1\u4ecb\u7ecd\u5230\uff0c\u4e0b\u9762\u6211\u4eec\u4ecb\u7ecd\u4e0b\uff0c \u56e0\u4e3arootfs\u548cproc\u65e0\u6cd5\u7528\u4e0a\u9762\u51fd\u6570\u6253\u6807\u7b7e(\u4e0d\u77e5\u9053\u4e3a\u5565)... \u5176\u4e2d\u4e00\u4e2a\u53ef\u80fd\u539f\u56e0\u662f\uff0c \u8fd9\u4e9b\u6587\u4ef6\u7cfb\u7edf\u7684SContext\u662f\u88ab\u5b9a\u6b7b\u7684\uff0c\u4e0d\u5e0c\u671b\u88abTT\u89c4\u5219\u6539\u53d8\u3002\u4f7f\u7528\u7684\u5173\u952e\u5b57\u662f genfscon  #\u3000\u683c\u5f0f\uff1a\u3000genfscon\u3000fstype partial_path fs_context\n# \u5728fstype\u4e3aproc\u65f6\uff0c\u3000partial_path\u3000\u6307\u5b9a\u4e3aproc\u4e0b\u7684\u8def\u5f84\uff0c\u5176\u4ed6\u6587\u4ef6\u7cfb\u7edf\u7edf\u4e00\u4e3a / \uff0e\n # Label inodes with the fs label.\n genfscon rootfs / u:object_r:rootfs:s0\n\n # proc labeling can be further refined (longest matching prefix).\n genfscon proc / u:object_r:proc:s0\n genfscon proc /net u:object_r:proc_net:s0", 
            "title": "Filesystem/File \u7684\u521d\u59cb\u5316"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#_2", 
            "text": "SEAndroid\u4e2d\u6ca1\u6709\u4e2a\u6570\u636e\u5305\u548c\u7aef\u53e3\u6253\u6807\u7b7e\uff0e selinux-network.sh \u548c port_contexts \u90fd\u5b58\u5728\uff0c\u4f46\u89c4\u5219\u90fd\u6ce8\u91ca\u4e86\uff0c\u3000\u4e0d\u786e\u5b9a\u662f\u5426\u652f\u6301\uff0e\u6709\u9700\u6c42\u7684\u7ae5\u978b\u9a8c\u8bc1\u4e0b\uff0e\uff0e\uff0e", 
            "title": "\u7f51\u7edc\u7aef\u53e3/\u6570\u636e\u5305\u521d\u59cb\u5316"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#te", 
            "text": "TE\u5c31\u662f\u7ed9\u4e0a\u9762\u7684domain\u548ctype\u5b9a\u4e49\u8bbf\u95ee\u89c4\u5219\u3002  \u5148\u6765\u770b\u4e0bTE\u7684\u57fa\u672c\u683c\u5f0f\uff1a  rule_name source_type target_type : object_class perm_set;  \u6765\u6bb5 selinux wiki \u7684\u89e3\u91ca\u3002     \u57df  \u8bf4\u660e      rule_name  The applicable allow, dontaudit, auditallow, and neverallow rule keyword.    source_type / target_type  One or more source / target type, typealias or attribute identifiers. Multiple entries consist of a space separated list enclosed in braces ({}). Entries can be excluded from the list by using the negative operator (-). The target_type can have the self keyword instead of type, typealias or attribute identifiers. This means that the target_type is the same as the source_type. The neverallow rule also supports the wildcard operator (*) to specify that all types are to be included and the complement operator (~) to specify all types are to be included except those explicitly listed.    class_object  One or more object classes. Multiple entries consist of a space separated list enclosed in braces ({}).    perm_set  The access permissions the source is allowed to access for the target object (also known as the Acess Vector). Multiple entries consist of a space separated list enclosed in braces ({}). The optional wildcard operator (*) specifies that all permissions for the object class can be used. The complement operator (~) is used to specify all permissions except those explicitly listed (although the compiler issues a warning if the dontaudit rule has '~').     \u4e0b\u9762\u6765\u51e0\u4e2a\u4f8b\u5b50\u6765\u719f\u6089\u683c\u5f0f\u548c\u6982\u5ff5\u3002  allow   sdcardd   rootfs : dir   mounton ;     allow\uff1a TE\u7684allow\u8bed\u53e5\uff0c \u8868\u793a\u6388\u6743\u3002\u9664\u4e86allow\u4e4b\u5916\uff0c \u8fd8\u6709allowaudit\u3001dontaudit\u3001neverallow\u7b49\u3002    sdcardd\uff1a source type\u3002 \u4e5f\u53eb domain\u3002 \u4e0e\u4e0a\u9762\u8fdb\u7a0b\u663e\u793a\u7684domain\u4e00\u81f4\u3002    rootfs\uff1a target type\u3002 \u4e5f\u5c31\u662f\u6587\u4ef6\u7684\u6807\u7b7e\uff0c \u4e0e\u4e0a\u9762\u6587\u4ef6\u663e\u793a\u7684type\u4e00\u81f4\u3002    dir\uff1a \u4ee3\u8868 Ojbect Class. \u5b83\u8868\u793a\u80fd\u591f\u7ed9domain\u64cd\u4f5c\u7684\u4e00\u7c7b\u4e1c\u897f\u3002\u6bcf\u4e2a\u6587\u4ef6\u5206\u7c7b\u91cc\u9762\u53ef\u4ee5\u5305\u542b\u5404\u79cd\u4e0d\u540c\u5c5e\u6027\u7684\uff0c\u6bd4\u5982\u6587\u4ef6\uff0c\u7ba1\u9053\uff0c\u76ee\u5f55\u7b49\uff0c \u8fd9\u4e9b\u662f\u7531Object Class\u5b9a\u4e49\u548c\u533a\u5206\u3002\u5728android\u91cc\uff0c\u8fd8\u800c\u5916\u5b9a\u4e49\u4e86\u4e00\u4e2aObject Class\uff0c \u53eb\u505aBinder\u3002    mounton\uff1a \u5728\u8be5\u7c7b Object Class \u4e2d\u6240\u5b9a\u4e49\u7684\u64cd\u4f5c\u3002    \u4ee5\u4e0a\u7684\u6574\u53e5\u542b\u4e49\u662f\uff0c \u5141\u8bb8sdcardd\u5c06\u6240\u6709rootfs\u6807\u7b7e\u4e0b\u7684\u76ee\u5f55\u4f5c\u4e3a\u6302\u8f7d\u70b9\u3002    allow   vold   system_file : file   x_file_perms ;  #   \u5141\u8bb8 vold \u57df\u4e2d\u7684\u8fdb\u7a0b\u6267\u884c system_file \uff08\u6240\u6709 / system /   \u548c   / vendor /   \u76ee\u5f55\u4e0b\uff09\u7c7b\u578b\u7684\u6587\u4ef6\u3002  allow   vdc   dumpstate : unix_stream_socket   {   read   write   getattr   } ;  #   \u5141\u8bb8 vdc \u57df\u4e2d\u7684\u8fdb\u7a0b read   write   \u548c   getattr   dumpstate \u6807\u7b7e\u4e2d unix \u57df\u7684 socket \u3002  neverallow   netd   dev_type : blk_file   {   read   write   } ;  #   \u4e0d\u5141\u8bb8 netd \u57df\u7684\u8fdb\u7a0b\u8bfb\u5199 / dev / \u5e95\u4e0b\u7684\u5757\u8bbe\u5907\u6587\u4ef6\u3002   \u4e4b\u524d\u6211\u4eec\u63d0\u5230\uff0c TE\u662f\u7c7b\u4f3c\u767d\u540d\u5355\u5f62\u5f0f\u7684\uff0c\u53ea\u6709\u88ab\u8bb0\u5f55\u7684\u89c4\u5219\u624d\u88ab\u5141\u8bb8\uff0c \u672a\u88ab\u8bb0\u5f55\u7684\u884c\u4e3a\u90fd\u662f\u62d2\u7edd\u7684\uff0c \u90a3\u4e48neverallow\u5176\u5b9e\u662f\u6ca1\u6709\u610f\u4e49\u7684\u4e86\u3002 \u5176\u5b9eneverallow\u7684\u5b58\u5728\u662f\u5728\u751f\u6210\uff08\u7f16\u8bd1\uff09\u5b89\u5168\u7b56\u7565\u6587\u4ef6\u65f6\u68c0\u67e5allow\u8bed\u53e5\u662f\u5426\u8fdd\u53cd\u4e86neverallow\uff0c\u9632\u6b62\u7531\u4e8e\u5f00\u53d1\u4eba\u5458\u7684\u5931\u8bef\u5bfc\u81f4\u67d0\u4e9b\u57df\u6743\u9650\u8fc7\u9ad8\u3002\u8be5\u9519\u8bef\u4f1a\u5728\u7f16\u8bd1\u9636\u6bb5\u51fa\u9519\u3002", 
            "title": "TE\u4ecb\u7ecd"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#object-class-perm95set", 
            "text": "The object classes have matching declarations in the kernel, meaning that it is not trivial to add or change object class details. The same is true for permissions. Development work is ongoing to make it possible to dynamically register and unregister classes and permissions.  \u8fd9\u91cc\u662f\u6458\u6284\u4e00\u6bb5CentOS\u91cc\u7684\u4ecb\u7ecd\uff0c \u5bf9\u4e8eobject class\u548cpermission\u7684\u5b9a\u4e49\u7684\u8bf4\u660e\uff0c \u8fd9\u4e24\u8005\u90fd\u662f\u5728kernel\u4e2d\u5b9a\u4e49\u4e0e\u6620\u5c04\u7684\uff0c \u4e5f\u5c31\u662f\u8bf4\uff0c \u8fd9\u4e24\u4e2a\u662f\u8ddf\u8bbe\u5907\u76f8\u5173\u7684\uff0c \u4e0d\u5141\u8bb8\u968f\u610f\u66f4\u6539\u3002  \u9996\u5148\uff0c Object class \u5b9a\u4e49\u5728\u6587\u4ef6external/sepolicy/security_classes\uff0c \u7b80\u5355\u6458\u53d6\u5982\u4e0b\u3002\u8be5\u6587\u4ef6\u4e2d\u53ea\u662f\u4e00\u5806\u5b9a\u4e49\uff0c \u81f3\u4e8e\u600e\u4e48\u8ddflinux\u4e2d\u5b9e\u9645\u7684\u6587\u4ef6\u6620\u5c04\u7684\u5462\uff1f\uff08\u8bf7\u53c2\u8003\uff1a\u5185\u6838\u4ee3\u7801\uff09  #   file - related   classes  class   filesystem  class   file  class   dir  class   fd  class   lnk_file  class   chr_file  class   blk_file  class   sock_file  class   fifo_file  #   Property   service  class   property_service            #   userspace  #   Service   manager  class   service_manager             #   userspace   \u6240\u6709\u7684 Object class \u9700\u8981\u901a\u8fc7class\u8bed\u53e5\u7533\u660e\u3002  \u8fd9\u91ccuserspace\uff0c\u6ce8\u610f\u4e0b\uff0c \u540e\u6587\u4f1a\u63d0\u5230android\u91cc\u7279\u6b8a\u5b9a\u4e49\u7684\u8fd9\u4e9buserspace\u7684object class\uff0c\u6240\u6709\u6807\u6ce8\u4e86userspace\u7684\uff0c\u90fd\u662f\u8fdb\u7a0b\u8fd0\u884c\u65f6\u901a\u8fc7selinux\u7684\u6807\u51c6API\u52a8\u6001\u68c0\u67e5\uff0c\u8ddfandroid\u7684xml\u4e2dpermission\u68c0\u67e5\u7c7b\u4f3c\u3002  \u4e0b\u9762\u770b\u4e0b  perm_set \u3002 \u6240\u8c13 perm_set \u4e5f\u53eb\u505a access vectors\uff0c \u6307\u67d0\u4e2aobject class\u6240\u652f\u6301\u7684\u64cd\u4f5c\u3002 \u8be5\u64cd\u4f5c\u90fd\u662f\u5728kernel\u91cc\u9884\u5b9a\u4e49\u7684\uff0c \u4e5f\u662f\u65e0\u6cd5\u589e\u52a0\u6216\u6539\u53d8\u5176\u884c\u4e3a\uff0c \u4f46\u53ef\u4ee5\u5c06\u5b83\u4eec\u4e0e\u5bf9\u5e94\u7684object class \u7ed1\u5b9a\u3002\u6ce8\u610f\uff1a\u4e00\u4e9bobject class\u4f1a\u4e0d\u652f\u6301\u67d0\u4e9bpermission\uff0c \u6bd4\u5982 file \u4e0d\u652f\u6301 mounton\u3002  \u8fd9\u4e9b\u6620\u5c04\u5b9a\u4e49\u5728external/sepolicy/access_vectors\uff0c \u7b80\u5355\u6458\u53d6\u5982\u4e0b\u3002    common   file \n  { \n      ioctl \n      read \n      write \n      create \n      getattr \n      setattr \n      lock \n      relabelfrom \n      relabelto \n      append \n      unlink \n      link \n      rename \n      execute \n      swapon \n      quotaon \n      mounton \n  }  class   dir \n  inherits   file \n  {    \n      add_name \n      remove_name \n      reparent \n      search \n      rmdir \n      open \n      audit_access \n      execmod \n  }    perm_set \u7684\u5b9a\u4e49\u67092\u79cd\uff0c \u5982\u4e0a\uff0c \u4e00\u79cd\u662fcommon\u5b9a\u4e49\u7684\uff0c \u7c7b\u4f3c\u9762\u5411\u5bf9\u8c61\u7684\u57fa\u7c7b\uff0c \u53e6\u4e00\u79cd\u662fclass\u5b9a\u4e49\u7684\uff0c \u53ef\u4ee5\u7ee7\u627fcommen\u5b9a\u4e49\u7684\u96c6\u5408\u3002", 
            "title": "Object class \u548c\u5176 Perm_set"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#type-attribute-allow", 
            "text": "\u9996\u5148\uff0c \u6211\u4eec\u770btype\u7684\u5b9a\u4e49\uff1a  type type_id [,attribute_id]  \u4e0a\u9762\u662ftype\u7684\u5b8c\u6574\u547d\u4ee4\u683c\u5f0f\uff0c \u6307\u5b9a type_id , \u5e76\u5173\u8054\u5230 attribute_id \uff0c  attribute_id \u53ef\u4ee5\u591a\u4e2a\u3002  \u800cSEAndroid\u7684\u5c5e\u6027\u5b9a\u4e49\u5982\u4e0b\uff1a  attribute domain\nattribute file_type  \u9664\u4e86\u901a\u8fc7type\u5b9a\u4e49\u65f6\u7ed1\u5b9a\u5c5e\u6027\uff0c \u8fd8\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\uff0c \u5c06vold\u7c7b\u578b\u4e0emlstrustedsubject\u5c5e\u6027\u5173\u8054\u8d77\u6765  typeattribute vold mlstrustedsubject;  type\u548cattribute\u5173\u8054\u8d77\u6765\u5177\u4f53\u662f\u4ec0\u4e48\u542b\u4e49\u5462\uff1f \u5176\u5b9e\uff0c attribute \u53ef\u4ee5\u7406\u89e3\u4e3a\u5206\u7ec4\u7684\u610f\u601d\uff0c \u4e5f\u5c31\u662f\u5c06\u4e00\u5806\u7684 type_id  \u5f52\u5230\u4e0d\u540c\u7684\u7ec4\uff0c  type_id  \u548c  attribute_id  \u4f4d\u4e8e\u540c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\uff0c \u4e5f\u5c31\u662f\u8bf4\uff0c \u4e0d\u80fd\u7528type\u5b9a\u4e49\u5728attribute\u4e2d\u5df2\u6709\u7684\u540d\u5b57\uff0c \u4e5f\u4e0d\u80fd\u7528attribute\u5b9a\u4e49type\u4e2d\u5df2\u6709\u7684\u540d\u5b57\u3002 \u4e0b\u9762\u770b\u4e2a\u4f8b\u5b50\uff0c \u6765\u66f4\u6df1\u5165\u7406\u89e3 type_id \u548c attribute_id \u7684\u5173\u7cfb\uff0c\u8bfb\u8005\u53ef\u4ee5\u7ed3\u5408\u4e0b\u9762\u7684\u4f8b\u5b50\u548c\u5f00\u5934\u7684\u6811\u5f62\u4f8b\u5b50\u6765\u7406\u89e3\u3002  #   \u5185\u5bb9\u6765\u81ea   dhcp . te   net_domain ( dhcp )  #   \u5185\u5bb9\u6765\u81ea   netd . te  net_domain ( netd )  #   \u5185\u5bb9\u6765\u81ea   te_macros ,   \u610f\u601d\u662f\u5b9a\u4e49\u4e00\u4e2a\u5b8f\u51fd\u6570 net_domain \uff0c   \u901a\u8fc7 typeattribute   \u5c06\u53c2\u6570   \u4e0e   netdomain   \u5173\u8054\u3002  #####################################  #   net_domain ( domain )  #   Allow   a   base   set   of   permissions   required   for   network   access .  define ( ` net_domain , `  typeattribute $1 netdomain;  )  #   \u5185\u5bb9\u6765\u81ea   net . te ,   \u5b9a\u4e49\u4e86   netdomain   \u8fd9\u4e2a attribute \u6240\u6709 permissions \uff0c   \u4ee5\u4e0b\u7b80\u5355\u5217\u51fa\u3002  allow   netdomain   self : tcp_socket   create_stream_socket_perms ;   \u4ee5\u4e0a\u4f8b\u5b50\u7684\u542b\u4e49\u662f\uff0c \u5c06 dhcp \u4e0e netdomain\u5173\u8054\uff0c \u5c06netd\u4e0enetdomain\u5173\u8054\u3002 \u7136\u540e\u53ea\u8981\u901a\u8fc7\u5141\u8bb8netdomain\u6267\u884c\u67d0\u4e9b\u6743\u9650\uff0c \u5c31\u53ef\u4ee5\u505a\u5230\u8ba9dhcp\u548cnetd\u540c\u65f6\u5177\u5907\u67d0\u4e9b\u6743\u9650\u3002\u6240\u4ee5\uff0c attribute \u5c5e\u6027\u5728\u7528\u4e8e source_type \u65f6\uff0c \u662f\u6307\u8d4b\u4e88\u67d0\u4e00\u7ec4\u7684 type_id  \u6743\u9650\u3002 \u901a\u8fc7m4\u8bed\u6cd5\uff0c \u4ee5\u4e0a\u4f8b\u5b50\u5c55\u5f00\u7684\u7ed3\u679c\u662f\uff1a  #   \u8fd9\u91cc\u7684   create_stream_socket_perms   \u662f\u5728 global_macros \u4e2d\u5b9a\u4e49\u7684\u5b8f\uff0c   \u88ab\u5c55\u5f00\u5c31\u662f\u5177\u4f53\u7684 tcp_socket \u7684 permissions  #   \u8fd9\u91cc\u7684   self   \u5c31\u662f\u6307\u4e0e   source_type   \u4e00\u81f4\u3002  allow   dhcp   dhcp : tcp_socket   {   create   listen   accept   ioctl   read   getattr   write   setattr   lock   append   bind   connect   getopt   setopt   shutdown   } ;  allow   netd   netd : tcp_socket   {   create   listen   accept   ioctl   read   getattr   write   setattr   lock   append   bind   connect   getopt   setopt   shutdown   } ;   \u518d\u6765\u770b\u4e00\u4e2a\uff0c\u540c\u6837\u662fnetdomain\uff0c \u4f46\u662f\u4f5c\u4e3a target_type \u7684\u4f8b\u5b50  allow netd netdomain :{ tcp_socket udp_socket rawip_socket dccp_socket tun_socket }   { read write getattr setattr getopt setopt };  # m4 \u5c55\u5f00\uff0c \u8fd9\u91cc\u53ea\u5b9a\u4e49\u4e86dhcp\u548cnetd\u5c5e\u4e8enetdomain\uff0c \u5b9e\u9645\u4e0aandroid\u4e2d\u8fd8\u6709\u597d\u591a\u7f51\u7edc\u670d\u52a1\u5c5e\u4e8e\u8be5domain \nallow netd  { dhcp netd }:{ tcp_socket udp_socket rawip_socket dccp_socket tun_socket }   { read write getattr setattr getopt setopt };   \u8fd9\u53e5\u7684\u610f\u601d\u662f\uff0c \u5141\u8bb8netd\u5bf9\u6240\u6709netdomain\u5c5e\u6027\u6210\u5458\u7684{tcp_socket udp_socket rawip_socket dccp_socket tun_socket} \u6267\u884c {read write getattr setattr getopt setopt}. \u8fd9\u91cc\u7684{}\u662f\u96c6\u5408\u7684\u610f\u601d\u3002 source_type ,  target_type ,  object class \u548c perm_set  \u90fd\u53ef\u4ee5\u7528\u96c6\u5408\u8868\u793a\uff0c \u800cattribute\uff0c\u5176\u5b9e\u662f\u7ed9\u67d0\u4e2a\u96c6\u5408\u5b9a\u4e49\u4e86\u4e2a\u5b8f\u522b\u540d\u3002  \u6240\u4ee5\uff0c attribute \u662f\u4fbf\u5229\u5f00\u53d1\u4eba\u5458\u5199sepolicy\u7684\u5de5\u5177\u3002\u5bf9\u4e8e\u6240\u4ee5SEAndroid\u4e2d\u5b9a\u4e49\u7684attribute\uff0c \u53ef\u4ee5\u53c2\u8003 external/sepolicy/attribute \u8fd9\u4e2a\u6587\u4ef6\u3002  \u6700\u540e\uff0c \u6211\u4eec\u770bTE\u4e2d\u7684 rule_name \uff0c \u4e00\u5171\u6709\u5982\u4e0b4\u79cd\uff1a    allow: \u8d4b\u4e88\u67d0\u9879\u6743\u9650    allowaudit\uff1a audit\u542b\u4e49\u5c31\u662f\u8bb0\u5f55\u67d0\u9879\u64cd\u4f5c\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f SELinux \u53ea\u8bb0\u5f55\u54ea\u4e9b\u6743\u9650\u68c0\u67e5\u5931\u8d25\u7684\u64cd\u4f5c\uff0c \u4e5f\u5c31\u662f\u7ec8\u7aef\u548clogcat\u4e2d\u6253\u5370\u7684\u6240\u6709deny\u7684\u6253\u5370\u3002\u800c\u8be5\u5b57\u6bb5\u5c31\u662f\u5728allow\u7684\u57fa\u7840\u4e0a\uff0c \u518d\u5c06\u4fe1\u606f\u6253\u5370\u51fa\u6765\u3002    dontaudit\uff1a \u5bf9\u90a3\u4e9b\u68c0\u67e5\u5931\u8d25\u7684\u4e0d\u505a\u8bb0\u5f55\uff0c \u9759\u9ed8\u5730\u62d2\u7edd\u8bbf\u95ee\uff0c \u5e76\u4e14\u4e0d\u5e94\u8be5\u5f15\u8d77\u7a0b\u5e8f\u9000\u51fa\u3002\u8be5\u5b57\u6bb5\u5728SEAndroid\u4e2d\u5e76\u672a\u4f7f\u7528\u3002\u57fa\u4e8eSELinux\u7684\u767d\u540d\u5355\u539f\u5219\uff0c \u53ea\u8981\u4e0d\u5728\u89c4\u5219\u5185\u7684\u64cd\u4f5c\u90fd\u62d2\u7edd\uff0c \u6240\u4ee5\u8be5\u5b57\u6bb5\u7684\u5b9e\u9645\u6548\u679c\u5c31\u662f\uff0c\u5bf9\u5176\u540e\u5931\u8d25\u7684\u6743\u9650\u4e0d\u505a\u8bb0\u5f55\u3002    neverallow\uff1a \u7528\u6765\u68c0\u67e5\u5b89\u5168\u7b56\u7565\u4e2d\u662f\u5426\u8fdd\u53cd\u8be5\u89c4\u5219\u7684allow\u8bed\u53e5\uff0c \u907f\u514dsepolicy\u7684\u4e66\u5199\u5f02\u5e38\u3002 \u5728\u7f16\u8bd1\u9636\u6bb5\u62a5\u9519\uff0c \u4e0d\u4f1a\u7f16\u8bd1\u8fdb\u6700\u7ec8\u7684\u7b56\u7565\u6587\u4ef6\u4e2d\u3002", 
            "title": "type\uff0c attribute \u548c allow \u7b49\u5173\u952e\u5b57\u8bf4\u660e"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#rbac-constrain", 
            "text": "\u524d\u6587\u6211\u4eec\u63d0\u5230\u7684\u90fd\u662fTEAC\u3002\u5728\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7 ps -Z  \u770b\u5230\u4e86user\u548crole\uff0c \u5728SEAndroid\u4e2d\uff0c \u53ea\u67091\u4e2auser\u548c1\u4e2arole\u3002\u800c\u57fa\u4e8erole\u7684\u5b89\u5168\u7b56\u7565\uff0c \u5c31\u53eb\u505aRBAC\uff08Role Based Access Control\uff09\u3002\u6211\u4eec\u5148\u6765\u770b\u4e0bandroid\u5b9a\u4e49\u7684user\u548crole\u3002  # external/sepolicy/roles  # \u5b9a\u4e49\u4e00\u4e2arole  role   r ; # \u5c06role\u548cattribute domain \u5173\u8054\u3002  role   r   types   domain ;  # external/sepolicy/users\nuser u roles { r } level s0 range s0 - mls_systemhigh;  \u4ee5\u4e0a\u662f\u652f\u6301MLS\uff08Multi-Leve Security\uff09\u7684user\u5b9a\u4e49\u3002\u4e0a\u9762\u8fd9\u4e2a\u5b9a\u4e49\u7684\u610f\u601d\u662f\uff0c \u5c06user u\u548c roles r\u5173\u8054\uff0c \u5e76\u4e14\u5176\u5b89\u5168\u7ea7\u522b\u662fs0\uff0c \u6700\u9ad8\u662fmls_systemhigh\u3002 \u8fd9\u91ccu\u53ef\u4ee5\u8ddf\u591a\u4e2arole\u5173\u8054\u3002  \u7136\u540e\uff0c \u6211\u4eec\u770b\u4e0buser\u548crole\u6709\u600e\u6837\u7684\u6743\u9650\u63a7\u5236\u3002 \u5176\u5b9e\u901a\u4fd7\u5730\u8bb2\uff0c user\u548crole\u7684\u5173\u7cfb\uff0c \u5c31\u8ddf\u4eba\u4e0e\u5de5\u4f5c\u7684\u5173\u7cfb\uff0c role\u51b3\u5b9a\u4e86\u804c\u80fd\u5206\u7c7b\u3002\u56e0\u4e3aandroid\u53ea\u6709\u4e00\u4e2arole\uff0c \u6240\u4ee5\uff0c\u540e\u6587\u63d0\u5230\u7684role\u8f6c\u6362\u548c\u63a7\u5236\u5173\u7cfb\uff0c \u6211\u4eec\u53ea\u662f\u7b80\u5355\u8bf4\u660e\u4e0b\uff0c \u6211\u4e5f\u4e0d\u662f\u5f88\u61c2\u3002  \u9996\u5148\uff0c \u6211\u4eec\u770b\u5982\u4f55\u4ece\u4e00\u4e2arole\u5207\u6362\u5230\u53e6\u4e00\u4e2arole\u3002  # \u8fd9\u91cc\u7684allow\u548cTE\u7684allow\u4e0d\u540c\nallow from_role_id to_role_id  \u89d2\u8272\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c \u5728SELinux\u4e2d\uff0c Role\u548cRole\u7684\u5173\u7cfb\u8ddf\u804c\u573a\u7684\u7ba1\u7406\u4eba\u5458\u5c42\u7ea7\u4e00\u81f4\u3002\u4f8b\u5982  # \u8fd9\u53e5\u7684\u610f\u601d\u662f\uff0c super_r dominate sysadm_r \u548c secadm_r \u8fd9\u4e24\u4e2a\u89d2\u8272\n# \u4ece type \u89d2\u5ea6\u6765\u770b\uff0c super_r \u5c06\u81ea\u52a8\u7ee7\u627f sysadm_r \u548c secadm_r \u6240\u5173\u8054\u7684type(\u6216attribute)\ndominance { role super_r {role sysadm_r; role secadm_r; }}  \u63a5\u4e0b\u6765\uff0c \u6211\u4eec\u770b\u4e0b\uff0c \u662f\u5982\u4f55\u5b9e\u73b0\u57fa\u4e8eRole\u6216User\u7684\u6743\u9650\u63a7\u5236\u7684\u3002\u5728selinux\u4e2d\u6709\u65b0\u5173\u952e\u8bcdconstrain\u3002  constrain file write (u1 == u2 and r1 == r2);\n# \u683c\u5f0f\uff1a\n# constrain object_class perm_set expression\uff1b  \u91cd\u70b9\u662fexpression\u3002\u5b83\u5305\u542b\u5982\u4e0b\u5173\u952e\u5b57\uff1a    u1,r1,t1: \u4ee3\u8868source\u7684user\uff0c role \u548c type    u2, r2, t2: \u4ee3\u8868target\u7684user\uff0c role \u548c type    == \u548c \uff01= \uff1a \u5bf9\u4e8e u\uff0cr \u6765\u8bf4\uff0c == \u548c \uff01= \u5206\u522b\u8868\u793a\u76f8\u7b49\u6216\u8005\u4e0d\u7b49\u3002 \u800c\u5bf9\u4e8e t \u6765\u8bf4\uff0c == \u548c \uff01= \u5206\u522b\u8868\u793a\u6e90type\u5c5e\u4e8e\u6216\u4e0d\u5c5e\u4e8e\u76ee\u6807attribute\u3002    \u5728SEAndroid\uff0c \u5e76\u6ca1\u6709\u4f7f\u7528constrain\u5173\u952e\u5b57\uff0c \u800c\u662fmlsconstrain\u3002\u540e\u6587\u5728\u4ecb\u7ecdmls\u65f6\u4f1a\u8be6\u7ec6\u63d0\u5230\u3002  constrain\u662f\u5bf9TE\u7684\u52a0\u5f3a\u3002\u56e0\u4e3aTE\u4ec5\u9488\u5bf9type\u548cdomain\uff0c\u5e76\u6ca1\u6709\u9488\u5bf9user\u548crole\u3002\u5728selinux\u68c0\u67e5\u6743\u9650\u65f6\uff0c \u5148\u68c0\u67e5TE\uff0c \u518d\u68c0\u67e5RBAC\u3002", 
            "title": "RBAC \u548c constrain"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#labeling_1", 
            "text": "", 
            "title": "Labeling \u4ecb\u7ecd\uff08\u4e8c\uff09"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#domaintype-transition", 
            "text": "\u5728Android/Linux\u7cfb\u7edf\u4e2d\uff0c \u8fdb\u7a0b\u90fd\u662f\u7531\u7236\u8fdb\u7a0bfork\u751f\u6210\u7684\u3002\u5728Android\u4e2d\uff0c \u6240\u6709\u7684\u5e94\u7528\u90fd\u662f\u901a\u8fc7zygote\u521b\u5efa\uff0c\u5e76\u6267\u884c\u76f8\u540c\u7684\u7a0b\u5e8f\uff0c \u53ea\u662f\u6700\u540e\u52a0\u8f7d\u7684java\u5305\u4e0d\u540c\u800c\u5df2\u3002\u800cfork\u7cfb\u7edf\u8c03\u7528\uff0c\u4f1a\u4f7f\u5b50\u8fdb\u7a0b\u7ee7\u627f\u7236\u8fdb\u7a0b\u7684domain\uff0c \u4e5f\u5c31\u662f\u8bf4SContext\u4f1a\u88ab\u7ee7\u627f\u3002\u6240\u4ee5\uff0c \u5bf9\u4e8einit\u8fdb\u7a0b\u800c\u8a00\uff0c\u5fc5\u987b\u5b8c\u6210type/domain\u7684\u8f6c\u6362\uff0c\u4ece\u800c\u964d\u4f4e\u5b50\u8fdb\u7a0b\u7684\u6743\u9650\u3002\u800c\u5bf9\u4e8ezygote\u800c\u8a00\uff0c \u7531\u4e8e\u4e0d\u540c\u5e94\u7528\u53ea\u662f\u8d44\u6e90\u4e0d\u540c\uff0c\u5bf9\u4e8e\u5185\u6838\u800c\u8a00\u662f\u540c\u4e00\u79cd\u8fdb\u7a0b\uff0c \u6240\u4ee5\u9700\u8981\u663e\u793a\u8c03\u7528selinux\u7684\u51fd\u6570\u8fdb\u884ctype/domain\u8f6c\u6362\u3002\u4e0b\u9762\u9488\u5bf9init\u8fdb\u7a0b\u7684fork\u548czygote\u8fdb\u7a0b\u7684fork\u8bf4\u660e\u4e0b\u57df\u662f\u5982\u4f55\u8f6c\u6362\u7684\u3002", 
            "title": "domain/type Transition  \u5b8f \u548c \u65b0\u6dfb\u52a0\u8fdb\u7a0b"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#init-domain", 
            "text": "init\u6709\u81ea\u5df1\u7684scontext\uff0c \u5e76\u4e14\u67e5\u770binit.te\uff0c \u4f1a\u53d1\u73b0\u5176\u6743\u9650\u975e\u5e38\u9ad8\u3002 \u800c\u7531init.rc\u4e2d\u542f\u52a8\u7684\u8fdb\u7a0b\uff0c\u5177\u6709\u5404\u81ea\u4e0d\u540c\u7684\u6743\u9650\uff0c\u5e94\u8be5\u8fd0\u884c\u5728\u5404\u81ea\u7684scontext\u4e2d\uff0c\u964d\u4f4e\u6743\u9650\u3002  init\u542f\u52a8\u5b50\u8fdb\u7a0b\u7ecf\u5386\u7684\u7cfb\u7edf\u8c03\u7528\u4e3a\uff0c fork\uff0c execv\uff0c \u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c \u5185\u6838\u4f1a\u67093\u4e2aSecurity\u68c0\u67e5\u70b9\uff0c \u5206\u522b\u662f\uff0c \u5141\u8bb8init\u6267\u884c\u76ee\u6807\u7a0b\u5e8f\uff0c \u5141\u8bb8init\u6267\u884cDT\uff08Domain Transition\uff09\u8f6c\u6362\uff0c \u901a\u77e5selinux\u9488\u5bf9\u7684\u5207\u6362\u6587\u4ef6\u3002\u5373\u5982\u4e0b3\u6761\u6307\u4ee4\uff1a  #   \u6765\u6e90   external / sepolicy / init . te  #   \u683c\u5f0f   domain_trans ( olddomain ,   type ,   newdomain )  #   shell   \u7684   type   \u548c domain \uff0c   \u53ef\u4ee5\u770b   shell . te  #    # type shell, domain, mlstrustedsubject;  # shell\u662fdomain\u8fd9\u4e2aattribute\u7684\u6210\u5458\u3002  # type shell_exec, exec_type, file_type;  # type \u662f shell_exec  #   domain_trans ( init ,   shell_exec ,   shell )  #   \u6765\u6e90   external / sepolicy / te_macros  define ( ` domain_trans , `  # $1 \u4e3ainit\uff0c $2 \u4e3a shell_exec\uff0c $3\u4e3ashell  allow $1 $2:file { getattr open read execute };  allow $1 $3:process transition;  allow $3 $2:file { entrypoint open read execute getattr };  ...  )  #   domain_trans   \u5c55\u5f00\u6765\u5982\u4e0b\uff0c\u53bb\u9664\u65e0\u5173 permissions \uff0c   domain   \u5207\u6362\u76f8\u5173\u7684\u5982\u4e0b\uff1a  #   \u5141\u8bb8   init \u57df\u8fdb\u7a0b   \u6267\u884c   shell_exec   \u7c7b\u578b\u7684\u8fdb\u7a0b  allow   init   shell_exec : file   {   execute   } ;  \u5141\u8bb8 init \u57df\u8fdb\u7a0b\u5bf9 shell \u57df\u7684\u8fdb\u7a0b\u6267\u884c DT  allow   init   shell : process   transition ;  #   \u8bbe\u7f6e\u65b0 domain   shell \u7684\u5165\u53e3\u4e3a\u7c7b\u578b   shell_exec   \u7684\u6587\u4ef6\u3002  allow   shell   shell_exec : file   {   entrypoint   execute   } ;   \u5bf9\u5e94\u7684type\u53ef\u4ee5\u5728file_contexts \u4e2d\u67e5\u627e\uff0c \u5f53\u7136\uff0c\u5982\u679c\u662f\u65b0\u6dfb\u52a0\u8fdb\u7a0b\uff0c\u5219\u9700\u8981\u5728\u8be5\u6587\u4ef6\u4e2d\u7ed1\u5b9a\u53ef\u6267\u884c\u7a0b\u5e8f\u4e0etype\u3002\n\u4ee5\u4e0a(domain_trans\u5b8f)\u53ea\u662f\u7533\u660e\u4e86\u53ef\u4ee5\u8fdb\u884cDT\u7684\u6743\u9650\uff0c\u4f46\u5e76\u6ca1\u6709\u771f\u6b63\u6267\u884c\u8f6c\u6362\u3002  # external/sepolicy/file_contests\n# \u7ed1\u5b9asystem\u5e95\u4e0b\u6240\u6709\u6587\u4ef6\u4e3a system_file\n/system(/.*)?       u:object_r:system_file:s0\n# \u7ed1\u5b9avold\u53ef\u6267\u884c\u7a0b\u5e8f\u7684type\u4e3avold_exec\u3002\n/system/bin/vold    u:object_r:vold_exec:s0  \u4e00\u822c\u6d89\u53ca\u5230\u65b0\u542f\u8fdb\u7a0b\uff0c\u548cdomain\u8f6c\u6362\u7684\u8bdd\uff0c \u7528\u5230\u7684\u5b8f\u5982\u4e0b\uff1a  #   \u4ece\u975e init \u8fdb\u7a0b\u542f\u52a8\u4e00\u4e2a\u65b0\u8fdb\u7a0b\uff0c   \u5728\u7236\u8fdb\u7a0b\u7684 sepolicy \u4e2d\u8c03\u7528\uff0c   \u8fd9\u91cc\u7684 olddomain \u4e3a\u7236\u8fdb\u7a0b\u7684 domain \uff0c   type \u4e3a\u5b50\u8fdb\u7a0b\u7684 type \uff0c   newdomain \u4e3a\u5b50\u8fdb\u7a0b\u7684 domain \u3002  #   external / sepolicy / te_macros  #   domain_auto_trans ( olddomain ,   type ,   newdomain )  define ( ` domain_auto_trans , `  # Allow the necessary permissions.  domain_trans($1,$2,$3)  # Make the transition occur by default.  # \u8fd9\u53e5\u662f\u771f\u6b63\u8fdb\u884c\u8f6c\u6362\uff0c\u800c\u4e14\u662f\u81ea\u52a8\u7684...  type_transition $1 $2:process $3;   #   \u4ece init \u8fdb\u7a0b\u542f\u52a8\u4e00\u4e2a\u65b0\u8fdb\u7a0b\uff0c   \u5728\u5b50\u8fdb\u7a0b\u7684 sepolicy \u4e2d\u8c03\u7528\u3002\u8fd9\u91cc\u7684 domain \u4e3a\u5b50\u8fdb\u7a0b\u7684 domain  #   init_daemon_domain ( domain )  define ( ` init_daemon_domain , `  domain_auto_trans(init, $1_exec, $1)  tmpfs_domain($1)  )   \u4ee5\u4e0a\u63d0\u5230\u7684\u5728\u54ea\u4e2asepolicy\u4e2d\u8c03\u7528\uff0c\u5176\u5b9e\u5bf9\u4e8e\u6700\u7ec8\u7684\u89c4\u5219\u6587\u4ef6\u6ca1\u6709\u5f71\u54cd\uff0c \u533a\u5206\u4e0d\u540c\u7684sepolicy\u6587\u4ef6\uff0c\u53ea\u662f\u5c5e\u4e8e\u5f00\u53d1\u4eba\u5458\u7684\u5206\u7c7b\u548c\u6613\u4e8e\u7ef4\u62a4\u3002 \u4f60\u5b8c\u5168\u53ef\u4ee5\u5728vold.te \u4e2d\u5199\u4e2a\u89c4\u5219\u5141\u8bb8sdcardd\u7c7b\u578b\u7684\u8fdb\u7a0b\u6267\u884c\u67d0\u4e2a\u64cd\u4f5c\uff0c \u8be5\u89c4\u5219\u4f9d\u7136\u4f1a\u751f\u6548\u3002  \u53e6\u5916 \uff0c\u4ece\u4e0a\u9762\u8fd9\u4e2a\u5b8f\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230Android\u4e2d\u7684\u4e00\u4e2a\u547d\u540d\u4e60\u60ef\uff0c\u4e00\u822cdomain\u52a0\u4e0a\u540e\u7f00_exec\u5c31\u662f\u5173\u8054\u7684type\u3002  type  shell domain;\ntype  shell_exec exec_type file_type;  \u7136\u540e\uff0c\u6211\u4eec\u770b\u4e0b\uff0c \u5728init.te\u4e2d\uff0c\u5b58\u5728domain_trans\u7684\u58f0\u660e\uff0c\u5982\u679c\u518d\u770binit_shell.te\u7684\u5185\u5bb9\u7684\u8bdd\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5b58\u5728DT\u7684\u51b2\u7a81\uff08\u7b2c\u4e00\u6b21\u770b\u7684\u65f6\u5019\uff09\uff1a  # init_shell.te\n# \u81ea\u52a8\u4eceinit\u5207\u6362\u5230init_shell\u5f53\u6267\u884c\u7684\u7a0b\u5e8f\u662fshell_exec,\u56e0\u4e3a\u8be5\u5b8f\u5305\u542b\u4e86type_transition\n# \u8fd9\u4e2ate\u662f\u7ed9\u6240\u6709\u4eceinit.*.rc\u4e2d\u542f\u52a8\u7684\u811a\u672c\u5b9a\u4e49\u7684\ndomain_auto_trans(init, shell_exec, init_shell)  # init.te\n# \u4e0e\u4e0a\u9762\u7c7b\u4f3c\uff0c\u5c11\u4e86type_transition, \u4e5f\u5c31\u662f\u8bf4\u4e0d\u662f\u81ea\u52a8\u5207\u6362, \u53ea\u662f\u7533\u660e\u4e86\u6743\u9650\u3002\n# \u8fd9\u4e2a\u662f\u7ed9init.rc\u4e2dconsole\u670d\u52a1\u5b9a\u4e49\u7684\ndomain_trans(init, shell_exec, shell)  \u5728\u770binit.rc\uff0c\u6709\u5982\u4e0b\u5185\u5bb9\uff1a  service console /system/bin/sh\n    class core\n    console\n    disabled\n    user shell\n    group shell log\n    seclabel u:r:shell:s0  \u4e5f\u5c31\u662f\u8bf4\uff0cinit\u663e\u793a\u5207\u6362\u4e86sh\u7684domain\u3002\n\u6240\u4ee5\uff0c\u4e2a\u4eba\u7406\u89e3\u662f\uff0csh\u542f\u52a8\u7684\u65f6\u5019\uff0c\u5148\u9ed8\u8ba4\u5207\u6362\u5230init_shell\uff0c\u7136\u540e\u88abinit\u8fdb\u7a0b\u5207\u6362\u5230shell\u3002 \n\u8fd9\u4e48\u7406\u89e3\u7684\u8bdd\uff0ctype_transition\u7684\u58f0\u660e\u4e0d\u80fd\u6709\u51b2\u7a81\u3002\uff08\u672a\u9a8c\u8bc1\uff09", 
            "title": "init \u542f\u52a8\u8fdb\u7a0b\u5e76\u5207\u6362domain"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#zygote-domain", 
            "text": "\u9996\u5148\uff0c \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c \u6240\u6709\u7684app\u548cframework server\u90fd\u662fzygote\u901a\u8fc7fork\u7684\u5f62\u5f0f\u521b\u5efa\u7684\u3002\u4e0b\u9762\u7b80\u5355\u770b\u4e0b\u8fd9\u4e2a\u51fd\u6570\u3002  static pid_t ForkAndSpecializeCommon(JNIEnv* env, uid_t uid, gid_t gid, jintArray javaGids,\n                                     jint debug_flags, jobjectArray javaRlimits,\n                                     jlong permittedCapabilities, jlong effectiveCapabilities,\n                                     jint mount_external, \n                                     jstring java_se_info, jstring java_se_name,\n                                     bool is_system_server, jintArray fdsToClose, \n                                     jstring instructionSet, jstring dataDir) { \n pid_t pid = fork();\n if (pid == 0) {\n  // ....\n   rc = selinux_android_setcontext(uid, is_system_server, se_info_c_str, se_name_c_str);\n  // ....\n}                                 \u8fd9\u6bb5\u4ee3\u7801\u8bbe\u7f6e\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u7684\u6838\u5fc3\u53c2\u6570\u662f  is_system_server  \u548c  se_info_xxx \u3002  int selinux_android_setcontext(uid_t uid,\n       int isSystemServer,\n       const char *seinfo, \n       const char *pkgname)\n{\n// ....\nrc = seapp_context_lookup(SEAPP_DOMAIN, uid, isSystemServer, seinfo, pkgname, NULL, ctx); // seinfo is se_info_c_str and pkgname is se_name_c_str\n// ....\n}  seapp_context_lookup  \u8fd9\u4e2a\u51fd\u6570\u7684\u4efb\u52a1\u5c31\u662f\u6839\u636e\u53c2\u6570\u627e\u5230\u5bf9\u5e94\u8be5app/server\u7684\u89c4\u5219\uff0c\u7136\u540e\u8bbe\u7f6e\u5b89\u5168\u4e0a\u4e0b\u6587\u3002\u5982\u679c\u60f3\u8be6\u7ec6\u4e86\u89e3\u67e5\u627e\u89c4\u5219\uff0c \u53ef\u4ee5\u770b\u4e0b\u5177\u4f53\u5b9e\u73b0\u3002\u4e0b\u9762\u7b80\u5355\u4ecb\u7ecd\u4e0b\uff0c\u5bf9\u4e8e\u7531zygote\u521b\u5efa\u7684app/server\u7684\u89c4\u5219\u6587\u4ef6\u3002  \u8be5\u51fd\u6570\u662f\u57fa\u4e8e\u6587\u4ef6 external/sepolicy/seapp_contexts \u67e5\u627e\u5bf9\u5e94\u5e94\u7528\u7684\u8fdb\u7a0b\u57df\u548c\u6587\u4ef6type\u3002   isSystemServer=true domain=system_server\n user=system domain=system_app type=system_app_data_file\n user=bluetooth domain=bluetooth type=bluetooth_data_file\n user=nfc domain=nfc type=nfc_data_file\n user=radio domain=radio type=radio_data_file\n user=shared_relro domain=shared_relro\n user=shell domain=shell type=shell_data_file\n user=_isolated domain=isolated_app\n user=_app seinfo=platform domain=platform_app type=app_data_file\n user=_app domain=untrusted_app type=app_data_file  \u4e3e\u4e2a\u4f8b\u5b50\uff0c \u5982\u679c isSystemServer \u4e3a true\uff0c \u5219domain\u4e3a system_server \u3002 \u5982\u679cuser\u662f _app \uff0c \u5e76\u4e14\u7b7e\u540d\u662fplatform\uff08\u4ece\u6e90\u7801\u7f16\u8bd1\u7684\u5e94\u7528\uff09\uff0c \u5219domain\u662f platform_app \uff0c \u5bf9\u5e94\u7684\u6587\u4ef6type\u4e3a app_data_file \u3002 \u5982\u679c\u662f\u7b2c\u4e09\u65b9\u5e94\u7528\uff0c user\u4e5f\u4e3a _app \uff0c \u4f46\u56e0\u4e3a\u4e0d\u6ee1\u8db3platform\u7b7e\u540d\uff0c\u6240\u4ee5\uff0c \u57df\u662f untrusted_app \u3002\u9664\u4e86user\u56fa\u5b9a\uff0c\u5176\u4f59\u7684\u5b57\u6bb5\u90fd\u662f\u5b57\u7b26\u4e32\uff0c\u53ea\u8981\u5339\u914d\u5c31\u884c\u3002\u6bd4\u5982domain\u8981\u8ddfxx.te\u4e2d\u7684\u5339\u914d\uff0c type\u540c\u7406\u3002seinfo\u53ea\u8981\u8ddf\u540e\u6587\u7684 mac_permissions.xml \u5339\u914d\u3002  \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u51fa\u73b0\u4e86seinfo\uff0c \u8fd9\u4e2a\u4fe1\u606f\u662f\u5b58\u653e\u5728external/sepolicy/mac_permissions.xml, \u5185\u5bb9\u5982\u4e0b\u3002\u5b9a\u4e49\u4e86\u7b7e\u540d\u7684key\u4e0eseinfo\u503c\u7684\u5173\u7cfb\u3002  policy \n     !-- Platform dev key in AOSP -- \n     signer   signature= @PLATFORM \n       seinfo   value= platform / \n     /signer \n     !-- All other keys -- \n     default \n       seinfo   value= default / \n     /default  /policy   \u8be5\u6587\u4ef6\u662f\u7531pkms\u8bfb\u53d6\uff0c\u5e76\u5728\u5b89\u88c5\u5e94\u7528\u65f6\uff0c\u7acb\u5373\u7ed9\u88ab\u5b89\u88c5\u7684\u5e94\u7528\u5206\u914dseinfo\u4fe1\u606f\u3002\u4e0a\u9762\u7684\u53ea\u662f\u4e00\u4e2a\u7248\u672c\uff0c\u7b80\u5355\u770b\u4e86\u4e0bpkms\u7684\u5b9e\u73b0\uff0c \u53ef\u4ee5\u505a\u5230\u5982\u4e0b\u7684\u65b9\u5f0f\uff1a  policy \n     !-- Platform dev key in AOSP -- \n     signer   signature= @PLATFORM \n        package   name= com.abc.d \n          seinfo   value= platform / \n        /package \n     /signer \n     !-- All other keys -- \n     default \n       seinfo   value= default / \n     /default  /policy   \u4e5f\u5c31\u662f\u8bf4\uff0c \u65e2\u53ef\u4ee5\u57fa\u4e8e\u7b7e\u540d\uff0c \u4e5f\u53ef\u4ee5\u66f4\u8be6\u7ec6\u7684\u6839\u636e\u5305\u540d\uff0c\u518d\u6307\u5b9a\u66f4\u7ec6\u81f4\u7684seinfo\u5206\u7c7b\u3002\u5f53\u7136\u5fc5\u987b\u5728 seapp_contexts \u4e2d\u6dfb\u52a0\u76f8\u5e94\u7684\u89c4\u5219\uff0c\u5e76\u4e14\u53c2\u8003 system_server.te \u6dfb\u52a0\u5bf9\u5e94\u57df\u7684\u6743\u9650\u63a7\u5236\u3002  \u4ee5\u4e0a seapp_contexts \u4e2ddomain\u7684\u503c\uff0c\u90fd\u53ef\u4ee5\u5728external/sepolicy/xxx.te \u4e2d\u627e\u5230\uff0c \u8be6\u7ec6\u7684\u53ef\u4ee5\u81ea\u884c\u67e5\u770b\u3002  \u5bf9\u4e8e\u65b0\u6dfb\u52a0\u7684\u4e00\u4e2a\u5e94\u7528\uff0c\u5c31\u53ef\u4ee5\u57fa\u4e8e\u4ee5\u4e0a\u4fe1\u606f\uff0c\u901a\u8fc7pkms\u6dfb\u52a0\u76f8\u5e94\u89c4\u5219\u3002  \u4f46\u662f\u5bf9\u4e8e\u65b0\u6dfb\u52a0\u4e00\u4e2a\u670d\u52a1\uff0c \u5219\u9700\u8981\u5728external/sepolicy/service_context.te \u6216\u8005 external/sepolicy/service.te \u4e2d\u6dfb\u52a0\u5728 service_manager \u6ce8\u518c\u7684\u540d\u5b57\u548c\u5bf9\u5e94\u7684\u57df/\u7c7b\u578b\uff0c \u5426\u5219 service_manager \u4f1a\u62d2\u7edd\u6ce8\u518c\u3002\u540c\u6837\uff0c\u5982\u679c\u4e0d\u5c06\u65b0\u6dfb\u52a0\u7684\u670d\u52a1\u5173\u8054\u5230 service_manager_type \u4e2d\uff0c \u5c31\u65e0\u6cd5\u88ab\u67e5\u627e\u548c\u83b7\u53d6\u3002  # external/sepolicy/service.te\n\n type surfaceflinger_service,    service_manager_type;\n type system_app_service,        service_manager_type;\n type system_server_service,     service_manager_type;  \u5c06\u4e0d\u540c\u7684type\u90fd\u8ddf service_manager_type \u5c5e\u6027\u5173\u8054\uff0c \u540e\u9762\u4f1a\u4f7f\u7528\u8be5\u5c5e\u6027\u8fdb\u884c\u6743\u9650\u63a7\u5236\u3002  # external/sepolicy/service_contexts\nSurfaceFlinger                            u:object_r:surfaceflinger_service:s0\ndisplay.qservice                          u:object_r:surfaceflinger_service:s0\nwindow                                    u:object_r:system_server_service:s0\n*                                         u:object_r:default_android_service:s0  \u8fd9\u4e2a\u6587\u4ef6\u7684\u89c4\u5219\u4e0efile_contexts\u7c7b\u4f3c\uff0c\u5173\u8054\u4e86\u670d\u52a1\u4e0e{user\uff0c role\uff0c type\uff0c level}\u3002\u6700\u540e * \u662f\u5339\u914d\u6240\u6709\u4ee5\u4e0a\u89c4\u5219\u65e0\u6cd5\u5339\u914d\u7684\u670d\u52a1\uff0c \u5176type\u4e3a default_android_service\u3002  \u4e0b\u9762\u6211\u4eec\u770b\u4e0b\uff0c service_manager \u7684\u6743\u9650\u63a7\u5236\u3002  #   domain . te  #   \u4e0d\u5141\u8bb8 service_manager \u5bf9 default_android_service \u5c5e\u6027\u7684\u670d\u52a1\u6267\u884c add \u64cd\u4f5c\u3002\u975e\u89c4\u5219\uff0c\u7f16\u8bd1\u4fdd\u62a4\u3002  neverallow   domain   default_android_service : service_manager   add ;  #   \u5141\u8bb8 domain \u57df\u7684\u8fdb\u7a0b\u8bf7\u6c42 service_manager \u6267\u884c find \u64cd\u4f5c\u3002  allow   domain   service_manager_type : service_manager   find ;   \u6211\u4eec\u524d\u9762\u7684\u4f8b\u5b50\u770b\u5230\uff0c \u6bcf\u4e2ate\u89c4\u5219\u6587\u4ef6\u5f00\u5934\u90fd\u4f1a\u628a\u8be5\u7c7b\u578b\u4e0edomain\u57df\u5173\u8054\uff0c\u6240\u4ee5\uff0c\u5b9e\u9645\u4e0a\uff0c\u8fd9\u91cc\u662f\u5141\u8bb8\u4e86\u6240\u6709\u6709\u89c4\u5219\u7684\u8fdb\u7a0b\u8bf7\u6c42 service_manager \u64cd\u4f5c\u3002\u8be5object class \u548c  perm_set \uff0c \u662fandroid\u65b0\u6dfb\u52a0\u7684\uff0c\u5728\u524d\u6587\u63d0\u5230\u5c5e\u4e8euserspace\uff0c \u5728service manager\u7684\u4ee3\u7801\u4e2d\uff0c  svc_can_xxx  \u51fd\u6570\u5c31\u662f\u5728\u7528\u6237\u5c42\u68c0\u67e5\u8be5\u89c4\u5219\u662f\u5426\u6ee1\u8db3\u3002\u672a\u4ed4\u7ec6\u7814\u7a76\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u770b\u4e0b\u3002  \u4e0a\u9762\u4ecb\u7ecd\u4e86\u521b\u5efa\u8fdb\u7a0b\u548cDT, \u662f\u9488\u5bf9\u8fdb\u7a0b\u7684,\u4e0b\u9762\u4ecb\u7ecd\u4e0b TT ,\u9488\u5bf9\u6587\u4ef6\u7684,\u540c\u6837\u5728\u521b\u5efa\u6587\u4ef6\u7684\u65f6\u5019,\u9700\u8981\u6307\u5b9atype.\u540c\u6837\u7528\u5230\u7684\u4e5f\u662f type_transition .  define ( ` file_type_trans , `  # Allow the domain to add entries to the directory.  allow $1 $2:dir ra_dir_perms;  # Allow the domain to create the file.  allow $1 $3:notdevfile_class_set create_file_perms;  allow $1 $3:dir create_dir_perms;  ) \n\n\n  ##################################### \n  #   file_type_auto_trans ( domain ,   dir_type ,   file_type ) \n  #   Automatically   label   new   files   with   file_type   when \n  #   they   are   created   by   domain   in   directories   labeled   dir_type . \n  # \n  define ( ` file_type_auto_trans , `   # Allow the necessary permissions.   file_type_trans($1, $2, $3)   # Make the transition occur by default.   type_transition $1 $2:dir $3;   type_transition $1 $2:notdevfile_class_set $3;    )   \u5339\u914d\u8fdb\u7a0b\u7684domain\u548c\u76ee\u5f55\u7684type\u7684\u60c5\u51b5\u4e0b\u6240\u521b\u5efa\u7684\u6587\u4ef6,\u5176SContext(\u5b89\u5168\u4e0a\u4e0b\u6587)\u5c31\u4f1a\u88ab\u6307\u5b9a\u4e3a file_type . android\u4e2d\u5e76\u6ca1\u6709\u5728\u4f7f\u7528\u8fd9\u4e24\u4e2a\u5b8f,\u4e5f\u5c31\u662f\u8bf4\u4f7f\u7528\u4e86\u9ed8\u8ba4\u7684\u89c4\u5219, \u4e5f\u5c31\u662f\u7ee7\u627f\u7236\u76ee\u5f55\u7684SContext.\u4e0a\u6587\u7684filesystem\u6253\u6807\u7b7e\u4e2d\u63d0\u5230\u8fc7TT\uff0c genfscon \u80fd\u591f\u7981\u5236TT\u89c4\u5219\uff0c\u5f3a\u5236\u5c06\u6240\u6709\u6587\u4ef6\u7684SContext\u6307\u5b9a\u4e3a\u9700\u8981\u7684\u3002\u8fd8\u6709\u4e00\u4e2a fs_use_trans \uff0c \u5176\u9ed8\u8ba4\u89c4\u5219\u4e0d\u662f\u7ee7\u627f\u7236\u76ee\u5f55\u7684\u89c4\u5219\uff0c\u800c\u662f\u7ee7\u627f\u6587\u4ef6\u7cfb\u7edf\u7684\u89c4\u5219\u3002 \u6587\u4ef6\u7cfb\u7edf\u6807\u7b7e\u521d\u59cb\u5316 .", 
            "title": "zygote \u542f\u52a8\u8fdb\u7a0b\u5e76\u5207\u6362domain"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#mlsmulti-level-security", 
            "text": "\u8fd9\u4e1c\u897f\u4e0d\u597d\u7406\u89e3\uff0c\u3000\u5728android\u4e2d\uff0c\u57fa\u672c\u4e5f\u4e0d\u4f1a\u6539\uff0c\u3000\u628a\u6211\u7684\u7406\u89e3\u7b80\u5355\u4ecb\u7ecd\u4e0b\uff0e\u5b89\u5168\u5206\u7ea7\u5c31\u8ddf\u4fdd\u5bc6\u5206\u7ea7\u4e00\u6837\uff0c\u5bf9\u4e3b\u52a8\u5355\u5143\u548c\u88ab\u52a8\u5355\u5143\u90fd\u6709\u76f8\u540c\u7684\u5206\u7ea7\uff0e\u800c\u9ad8\u7ea7\u522b\u7684\u4e3b\u52a8\u5355\u5143\u53ef\u4ee5\u8bfb\u53d6\u4f4e\u7ea7\u522b\u7684\u88ab\u52a8\u5355\u5143\uff0c\u4f46\u4e0d\u5141\u8bb8\u5f80\u5730\u7ea7\u522b\u7684\u88ab\u52a8\u5355\u5143\u5199\u6570\u636e\uff0c\u9632\u6b62\u6cc4\u5bc6\uff0e\u800c\u4f4e\u7ea7\u522b\u7684\u4e3b\u52a8\u5355\u5143\u53ef\u4ee5\u5f80\u9ad8\u7ea7\u522b\u7684\u88ab\u52a8\u5355\u5143\u5199\u6570\u636e\u4f46\u4e0d\u80fd\u8bfb\u53d6\u9ad8\u7ea7\u522b\u88ab\u52a8\u5355\u5143\uff0e\u5f62\u8c61\u70b9\u63cf\u8ff0\u5c31\u662f no write down \u548c\u3000no read up.  \u6211\u4eec\u6765\u770b\u4e2a\u683c\u5f0f\uff0c\u5728\u672a\u542f\u7528MLS\u548c\u542f\u7528\u4e86MLS\u7684SContext\u683c\u5f0f\u5dee\u5f02\uff1a  # \u672a\u542f\u7528MLS\nuser_u:role_r:type_t\n\n# \u542f\u7528\u4e86MLS\n# - \u8868\u793a\u8303\u56f4\n# \u5de6\u4fa7\uff0c\u6211\u4eec\u79f0\u4e3a\u6700\u4f4e\u5b89\u5168\u7ea7\u522b\uff0c\u4e5f\u662f\u5f53\u524d\u4e3b\u52a8\u5355\u5143\uff0f\u88ab\u52a8\u5355\u5143\u7684\u7ea7\u522b\n# \u53f3\u4fa7\uff0c\u6211\u4eec\u79f0\u4e3a\u6700\u9ad8\u5b89\u5168\u7ea7\u522b\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u4e3b\u52a8\u5355\u5143\uff0f\u88ab\u52a8\u5355\u5143\u53ef\u80fd\u83b7\u5f97\u7684\u6700\u9ad8\u7ea7\u522b\nuser_u:role_r:type_t:sensitivity[:category...]-sensitivity[:category...]  \u7ed3\u5408\u5f00\u5934\u7684\u4f8b\u5b50\uff0candroid\u662f\u542f\u7528\u4e86MLS\uff0c\u4f46\u662f\uff0c\u5982\u679c\u628a\u6240\u6709\u7684\u89c4\u5219\u8fc7\u4e00\u904d\uff0c\u5c31\u4f1a\u53d1\u73b0\u6240\u6709\u7684sensitivity\u90fd\u4e3as0,\u3000\u6240\u4ee5\uff0c\u867d\u7136\u542f\u7528\u4e86\uff0c\u4f46\u5e76\u6ca1\u6709\u5206\u7ea7, \u4e5f\u6ca1\u6709\u5206\u7c7b(category)\uff0e\u3000\u6240\u4ee5\uff0c\u3000\u5173\u4e8e\u8fd9\u5757\uff0c\u6211\u4eec\u4e5f\u662f\u7b80\u5355\u4ecb\u7ecd\u4e0b\uff0c\u53ef\u80fd\u6709\u7406\u89e3\u4e0d\u5230\u4f4d\uff0e  \u5982\u679c\u51fa\u73b0\u5206\u7ea7\u548c\u5206\u7c7b\uff0c\u3000\u4f1a\u4f7f\u7528 level\u3000\u5173\u952e\u5b57\u5b9a\u4e49:  level s0:c0.c255  #\u8868\u793as0, category\u4ecec0\u4e00\u76f4\u5230c255  \u5206\u7ea7\u6709\u9ad8\u4f4e\uff0c s0   s1\uff0c\u3000\u5206\u7c7b\u6ca1\u6709\u9ad8\u4f4e\uff0c\u53ea\u6709\u5305\u542b\uff0c\u3000\u6bd4\u5982 c0.c255\u3000\u5305\u542b c10.c25. \u4e2a\u4eba\u611f\u89c9\u8fd9\u5757\u7684\u529f\u80fd\u662f\u5bf9Role\u7684\u5f3a\u5316\uff0c\u3000\u66f4\u7ec6\u81f4\u7684\u9636\u7ea7\u5173\u7cfb\uff0e  \u4e0b\u9762\u770b\u4e2a\u4f8b\u5b50\u6765\u8f85\u52a9\u7406\u89e3\uff0e   # Datagram send: Sender must be dominated by receiver unless one of them is\n # trusted.\n mlsconstrain unix_dgram_socket { sendto }\n          (l1 domby l2 or t1 == mlstrustedsubject or t2 == mlstrustedsubject);\n# mlstrustedsubject \u662fattribute  \u9996\u5148\uff0candroid\u4e2d\u4e3b\u8981\u7528\u5230\u4e86mlsconstrain, \u5176\u8bed\u6cd5\u5982\u4e0b\uff0c\u3000\u4e0econstrain\u4e00\u6837\uff1a  mlsconstrain object_class perm_set expression  expression\u6709u1, u2, r1, r2, t1, t2, l1, l2, h1, h2 \u8ddfRole\u7684\u6743\u9650\u63a7\u5236\u5f88\u50cf, \u53ea\u662f\u591a\u4e86l1, l2, h1, h2\uff1a    l1, h1, \u8868\u793asource\u7684low sensitivity level, high sensitivity level    l2, h2, \u8868\u793atarget\u7684low sensitivity level, high sensitivity level    \u5173\u7cfb\uff1a    dom: l1 dom l2, \u8868\u793al1 sensitivity  = l2 sensitivity, l1\u7684category\u5305\u542bl2\u7684category    domby: \u8ddfdom\u76f8\u53cd    eq: sensitivity \u76f8\u7b49\uff0c\u3000category\u3000\u76f8\u7b49    incomp: \u4e0d\u53ef\u6bd4\uff0e\u5177\u4f53\u542b\u4e49\u672a\u77e5...", 
            "title": "MLS(Multi-level Security)"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#_3", 
            "text": "file_contexts : \u5173\u8054\u6587\u4ef6\u7cfb\u7edf\u4e0a\u6587\u4ef6\u4e0etype\uff0c \u6216\u8005\u8bf4\uff0c\u6307\u5b9a\u6587\u4ef6\u5c5e\u4e8e\u67d0\u4e2atype\u3002\u88ab\u52a8\u5355\u5143\u7684scontext\u3002\u6bd4\u5982\uff1a  # netd\u5c5e\u4e8enetd_exec\u3002\u6240\u6709\u8981\u6267\u884cnetd\u8fdb\u7a0b\u7684\u7a0b\u5e8f\u5fc5\u987b\u7533\u8bf7 netd_exec \u7684 execute \u6743\u9650\u3002\n\n/system/bin/netd    u:object_r:netd_exec:s0  *.te : TE\u6743\u9650\u89c4\u5219\u6587\u4ef6\u3002\u6307\u5b9a\u4e86\u6bcf\u4e2adomain\u7684\u6743\u9650\uff0c\u540c\u65f6\u4e5f\u6307\u5b9a\u4e86\u4e0d\u540cdomain\u7684\u5165\u53e3\u3002\u6bd4\u5982\u4e0a\u6587\u63d0\u5230\u7684 init_daemon_domain , \u5c31\u6307\u5b9a\u4e86\u5bf9\u5e94domain\u7684\u5165\u53e3\u4e3a\u67d0\u4e2atype\u3002\u51e0\u4e4e\u6240\u6709\u8be5\u6587\u4ef6\u7684\u5f00\u5934\u90fd\u4f1a\u4e0edomain\u5173\u8054\uff0c \u4e5f\u5c31\u662f\u8bf4\u90fd\u5c5e\u4e8edomain\u8fd9\u4e2a\u5c5e\u6027\u3002  #   \u6307\u5b9a\u4e86 domain \u4e3a shell \u7684\u5165\u53e3\u662f shell_exec \uff0c   \u4e5f\u5c31\u662f\u7ed1\u5b9a\u4e86 type \u548c domain \u7684\u5173\u7cfb\u3002  allow   shell   shell_exec : file   {   entrypoint   execute   } ;    \u4ece\u4e0a\u9762\u4e24\u7c7b\u6587\u4ef6\uff0c\u5c31\u8bf4\u660e\u4e86\u6307\u5b9a\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u548c\u5bf9\u5e94\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\u662f\u5982\u4f55\u5173\u8054\u7684\u3002\u6240\u4ee5\uff0c \u5982\u679c\u65b0\u6dfb\u52a0\u8fdb\u7a0b\uff0c \u5fc5\u987b\u52a8\u4e0a\u9762\u63d0\u5230\u7684\u6587\u4ef6\uff0c \u624d\u80fd\u6b63\u786e\u8bbe\u7f6e\u6307\u5b9a\u8fdb\u7a0b\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\u3002   mac_permissions.xml \uff1a pkms\u89e3\u6790\u7684\u6587\u4ef6\uff0c\u63cf\u8ff0\u4e86seinfo\u5b57\u6bb5\u4e0e\u7b7e\u540d/\u5305\u540d\u7684\u5173\u7cfb\u3002  seapp_contexts \uff1a zygote\u89e3\u6790\uff0c \u7528\u4e8e\u6839\u636euser\u548cseinfo\uff0c \u786e\u5b9a\u5e94\u7528\u6216\u7cfb\u7edf\u670d\u52a1\u7684domain\u548ctype\u3002  \u6240\u4ee5\uff0c \u5bf9\u4e8e\u6709\u7279\u6b8a\u6743\u9650\u9700\u6c42\u7684\u5e94\u7528\uff0c \u9700\u8981\u540c\u65f6\u589e\u52a0\u4e0a\u9762\u4e24\u4e2a\u6587\u4ef6\uff0c\u5f53\u7136TE\u7684\u89c4\u5219\uff0c\u9700\u8981\u4fee\u6539\u6216\u589e\u52a0te\u6587\u4ef6\u3002   service_contexts \uff1a \u7c7b\u4f3c file_contexts \u6587\u4ef6\uff0c \u5173\u8054\u4e86android\u7cfb\u7edf\u7684\u670d\u52a1\u4e0etype\u3002 \u8be5\u6587\u4ef6\u7684\u5185\u5bb9\u7531service manager\u5728\u8fd0\u884c\u65f6\u901a\u8fc7selinux\u7684\u63a5\u53e3\u52a8\u6001\u68c0\u67e5\u6743\u9650\u3002  service.te : \u5c06\u4e0d\u540c\u7c7b\u578b\u7684\u670d\u52a1\u4e0e service_manager_type  \u5173\u8054\u3002  \u5982\u679c\u65b0\u6dfb\u52a0framework\u7684\u670d\u52a1\uff0c \u5fc5\u987b\u4fee\u6539\u8fd9\u4e24\u4e2a\u6587\u4ef6\uff0c\u5426\u5219\u65e0\u6cd5\u6ce8\u518cservice manager\uff0c \u65e0\u6cd5\u88ab\u83b7\u53d6bp\u3002   file.te \u3000\u6240\u6709\u8ddf\u6587\u4ef6\u548c\u6587\u4ef6\u7cfb\u7edf\u76f8\u5173\u7684\u5206\u7ec4\u7684\u6807\u7b7e(type).\u5982\u679c\u6d89\u53ca\u5230\u65b0\u6dfb\u52a0\u6587\u4ef6\u7cfb\u7edf\u6216\u8005\u65b0\u7684/data/\u5e95\u4e0b\u76ee\u5f55\u6743\u9650\uff0c\u5efa\u8bae\u5728\u8fd9\u4e2a\u6587\u4ef6\u91cc\u5c06\u5176\u4e0e\u76f8\u5173\u7684type\u5173\u8054\uff0c\u5426\u5219\u53ef\u80fd\u5bfc\u81f4\u67d0\u4e9b\u7cfb\u7edf\u670d\u52a1\u65e0\u6cd5\u8bbf\u95ee\u6216\u8005\u6587\u4ef6\u65e0\u6cd5\u521b\u5efa\u3002   tools/  \u4e00\u4e9b\u68c0\u67e5\u548c\u5206\u6790\u5de5\u5177\uff0c \u90fd\u662f\u57fa\u4e8e\u8bed\u6cd5\u7c7b\u7684\uff0c\u8fd8\u6709\u51e0\u4e2a\u662f\u9488\u5bf9\u5e94\u7528\u7684\u89c4\u5219\u751f\u6210\u548c\u7f16\u8f91\u5de5\u5177\uff0c\u672a\u7814\u7a76\u4ee3\u7801\u3002", 
            "title": "\u89c4\u5219\u6587\u4ef6\u5173\u7cfb\u603b\u7ed3"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#device-sepolicy", 
            "text": "\u8def\u5f84\uff1a \u7531 BoardConfig.mk \u4e2d\u7684 BOARD_SEPOLICY_DIRS \u5b9a\u4e49  \u6587\u4ef6\uff1a \u7531 BoardConfig.mk \u4e2d\u7684 BOARD_SEPOLICY_UNION  device\u5e95\u4e0b\u7684sepolicy\u4e0d\u662foverlay\uff0c \u800c\u662f\u4f1a\u4e0eexternal/sepolicy\u7684\u89c4\u5219\u5408\u5e76\u3002 \u6240\u4ee5\uff0c \u53ef\u4ee5\u5728device\u5e95\u4e0b\u521b\u5efa\u540c\u540d\u6587\u4ef6\uff0c\u6dfb\u52a0\u8bbe\u5907\u76f8\u5173\u7684\u89c4\u5219\u3002  \u6bd4\u5982\uff0c \u6dfb\u52a0vold.te\uff0c \u5185\u5bb9\u5982\u4e0b\uff0c \u8d4b\u4e88vold\u7c7b\u578b\u7684\u8fdb\u7a0b\u6267\u884cntfs3g_exec\u7c7b\u578b\u7684\u7a0b\u5e8f\uff0c\u5e76\u81ea\u52a8\u5207\u6362domain\u3002\uff08ntfs3g_exec\u7c7b\u578b\u548cdomain\u5728\u540e\u9762\u4ecb\u7ecd\uff09    domain_auto_trans ( vold ,   ntfs3g_exec ,   ntfs3g ) \n  allow   vold   ntfs3g_exec : file   rx_file_perms ;   \u5982\u679c\u662f\u65b0\u6dfb\u52a0\u8fdb\u7a0b\u548csepolicy\uff0c \u5219\u989d\u5916\u9700\u8981\u5728file_context\u4e2d\u5c06\u53ef\u6267\u884c\u7a0b\u5e8f\u548ctype\u7ed1\u5b9a\u3002  # device/s3graphics/zx2000/sepolicy/file_contexts\n/system/bin/ntfs-3g u:object_r:ntfs3g_exec:s0", 
            "title": "device \u76f8\u5173sepolicy\u4fee\u6539\u7684\u65b9\u6cd5"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#selinux", 
            "text": "\u7b2c\u4e09\u65b9\u5de5\u5177\uff1a  apol  , \u7528\u4e8e\u5206\u6790\u6700\u7ec8\u751f\u6210\u7684sepolicy\u3002   external/sepolicy/tools \u4e0b\u9762\u6709\u4e00\u4e9b\u5de5\u5177\uff0c\u4f46\u7f3a\u5c11\u4f7f\u7528\u6587\u6863\uff0c\u53ef\u4ee5\u770b\u6e90\u7801\u7814\u7a76\u3002   \u5bf9\u4e8e\u7531\u4e8eselinux\u7684\u6743\u9650\u95ee\u9898\u5bfc\u81f4\u8fd0\u884c\u5f02\u5e38\uff0c\u53ef\u4ee5\u5728\u5bf9\u5e94\u7684te\u6587\u4ef6\u4e2d\u52a0\u5165\u5982\u4e0b\u5185\u5bb9, \u5c06\u5bf9\u5e94\u8fdb\u7a0b\u8bbe\u7f6e\u4e3apermissive\uff0c\u5728\u8fd0\u884c\u540e\uff0c\u7ec8\u7aef\u4f1a\u8f93\u51fa\u6240\u6709selinux\u7684\u8b66\u544a\uff0c\u4f46\u7a0b\u5e8f\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002\u57fa\u4e8e\u9501\u8f93\u51fa\u7684\u8b66\u544a\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u89c4\u5219\u3002  permissive $domain;  type=1400 audit(946684810.610:4): avc: denied { write } for pid=707 comm= m.coship.hotkey  name= property_service  dev= tmpfs  ino=7244 scontext=u:r:platform_app:s0 tcontext=u:object_r:property_socket:s0 tclass=sock_file permissive=1  perm_set  \u4e3a  { write } \uff0c \u7a0b\u5e8f\u4e3a m.coship.hotkey \uff0c  target class \u4e3a  sock_file \uff0c source context \u4e3a  u:r:platform_app:s0 \uff0c  target context \u4e3a  u:object_r:property_socket:s0  \u4e0a\u9762\u5c06TE\u89c4\u5219\u76844\u4e2a\u76f8\u5173\u5b57\u6bb5\u90fd\u5206\u6790\u4e86\uff0c \u53ea\u8981\u6dfb\u52a0\u76f8\u5e94\u7684\u89c4\u5219\u5c31\u884c\u3002\u770b\u4e0b\u9762te\u89c4\u5219\u3002  #   -   \u662f\u6392\u9664\u7684\u610f\u601d  #   \u4e0d\u5408\u9002\u7684\u6539\u6cd5\uff1a   \u6dfb\u52a0   -platform_app \u3002   \u7136\u540e\u518d\u6dfb\u52a0   allow   platfor_app   property_socket : sock_file   write \uff1b \n  neverallow   {   appdomain   -bluetooth   -radio   -shell   -system_app   -nfc   } \n      property_socket : sock_file   write ;   \u4e0d\u8fc7\uff0c\u8fd9\u4e2a\u9519\u8bef\u7531\u4e8e\u662fapp\uff0c \u6240\u4ee5\uff0c\u4e0d\u9002\u5408\u76f4\u63a5\u6dfb\u52a0\u5230 platform_app \u8fd9\u4e2a\u57df\uff0c \u56e0\u4e3a\u4f1a\u5bf9\u6240\u6709\u4ece\u6e90\u7801\u7f16\u8bd1\u7684\u5e94\u7528\u4ea7\u751f\u5f71\u54cd\u3002\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u989d\u5916\u8bbe\u7f6e\u4e00\u4e2aseinfo\u3002   \u5982\u679cSContext\u4e2d\u51fa\u73b0 unlabeled \uff0c \u5219\u8868\u9762\u8be5\u6587\u4ef6/\u76ee\u5f55/\u6587\u4ef6\u7cfb\u7edf\u672a\u6253\u6807\u7b7e\uff0c\u53c2\u8003\u4ee5\u4e0a\u4ecb\u7ecd\u5728\u5bf9\u5e94\u6587\u4ef6\u5185\u6dfb\u52a0\u6807\u7b7e\u3002   \u5982\u679c\u662f\u4fee\u6539\u6253\u6807\u7b7e\u7684\u6587\u4ef6\uff0c\u7f16\u8bd1\u540e\uff0csystem.img\u9700\u8981\u91cd\u65b0\u5237\uff0c\u5982\u679c\u662f\u4fee\u6539TE\u7684\u89c4\u5219\u6587\u4ef6\uff0c\u7f16\u8bd1\u540e\uff0c\u53ea\u9700\u8981\u91cd\u65b0\u5237boot.img", 
            "title": "SELinux \u7684\u8c03\u8bd5\u548c\u9519\u8bef\u5206\u6790\u8bf4\u660e"
        }, 
        {
            "location": "/2016-12-12-SEAndroid\u89c4\u5219\u4ecb\u7ecd/#_4", 
            "text": "\u5728Android\u4e2d, \u7406\u8bba\u4e0a\u683c\u5f0f\u5316\u5206\u533a\u4f1a\u5bfc\u81f4\u6240\u6709\u6587\u4ef6\u7684scontex\u76f8\u5173\u4fe1\u606f\u4e22\u5931, \u800c\u5982\u679c\u9700\u6062\u590d(\u6bd4\u5982\u683c\u5f0f\u5316userdata\u540e), \u9700\u8981\u5728init.rc\u4e2d\u663e\u793a\u8c03\u7528 restorecon_recursive , \u4ee5\u6062\u590d\u6307\u5b9a\u76ee\u5f55\u7684secontext.  \u4e0a\u6587\u53ea\u63d0\u5230\u4e86Android\u4e2d\u7684\u5e38\u89c1labeling\u65b9\u6cd5, \u5728\u5b9e\u9645\u9879\u76ee\u4e2d, \u51fa\u73b0\u4e86\u9700\u8981\u5bf9ext4\u6587\u4ef6\u7cfb\u7edf\u7b49\u7684\u5916\u90e8\u5b58\u50a8\u6302\u8f7d\u5e76\u63a7\u5236\u6743\u9650. \u9700\u8981\u52a8\u6001\u5730\u6307\u5b9asecontex, \u8fd9\u91cc\u5c31\u4f7f\u7528\u4e86 mountpoint labeling \u65b9\u6cd5(\u76f4\u63a5google\u8be5\u5173\u952e\u5b57). \u5176\u4f7f\u7528\u573a\u666f\u662f\u540c\u4e00\u6587\u4ef6\u7cfb\u7edf\u5728\u4e0d\u540c\u6302\u8f7d\u70b9\u53ef\u4ee5\u6709\u4e0d\u540c\u7684secontext.\u76f8\u5173\u4ee3\u7801\u5982\u4e0b:   int   Ext :: doMount ( const   char   * fsPath ,   const   char   * fstype ,   const   char   * mountPoint , \n                  unsigned   long   fsFlags ,   int   ownerUid ,   int   ownerGid ,   int   permMask )  { \n     int   rc ; \n     //   labeling   mountpoint   for   ext   fs   when   mounting   udisk.   man   8   mount   for   more   options \n     const   char   *mountoption   =   context= u : object_r : extfs : s0 ;      unsigned long mountflags = MS_NOATIME | MS_NODEV | MS_NOSUID | MS_DIRSYNC;      unsigned long remountflags = mountflags | fsFlags;      mountflags |= fsFlags;      if (mountflags   MS_RDONLY) {  // readonly          // Mount as writable so that we can update the Uid/Gid and permission          mountflags  = ~MS_RDONLY;      }      rc = mount(fsPath, mountPoint, fstype, mountflags, mountoption);      if (rc   errno == EROFS) {          SLOGE( % s   appers   to   be   a   read   only   filesystem   -   retrying   mount   RO , fsPath);          mountflags |= MS_RDONLY;          rc = mount(fsPath, mountPoint, fstype, mountflags, mountoption);      }      if (rc == 0) {          // mount success, remount to the mount flags we want          chmod(mountPoint, 0770);          chown(mountPoint, ownerUid, ownerGid);          SLOGI( remount   as   user   option );          rc = Ext::remount(mountPoint, remountflags);      }      if (rc) {          SLOGE( % s   remount   to   user   option   failed   -   retrying   mount   with   default   option \\ n ,   fsPath ); \n         rc   =   mount(fsPath,   mountPoint,   fstype,   mountflags,   mountoption) ; \n     } \n\n     //   Dirty   Patch   :   fix   permission   of   pvr   files \n     fixPermission ( mountPoint ); \n     //   Dirty   Patch   end \n\n     return   rc ;  }    \u9884\u7559", 
            "title": "\u5b9e\u9645\u9879\u76ee\u4e2d\u9047\u5230\u7684\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848"
        }, 
        {
            "location": "/2014-05-12-tcmalloc2.1\u6d45\u6790/", 
            "text": "version 1.0 done by wertherzhang @2014-05-12 write done with emacs org\n\n\nversion 1.1 done by wertherzhang @2017-03-16 moved to leanote\n\n\n\n\ntcmalloc2.1 \u6d45\u6790\n\n\n\u6765\u6e90: https://pengzhangdev.github.io/tcmalloc2.1%E6%B5%85%E6%9E%90/\n\n\n\u7b80\u4ecb\n\n\ntcmalloc(thread cached malloc) \u662f\u7531google\u4e3a\u5e76\u53d1\u7a0b\u5e8f\u800c\u5f00\u53d1\u7684\u5185\u5b58\u5206\u914d\u7ba1\u7406\u5668.tcmalloc\u81f4\u529b\u4e8e\u51cf\u5c11\u591a\u7ebf\u7a0b\u5185\u5b58\u8bf7\u6c42\u65f6\u5bf9\u9501\u7684\u7ade\u4e89, \u5728\u5bf9\u5c0f\u5185\u5b58\u7684\u7533\u8bf7\u65f6,\u53ef\u4ee5\u5728\u65e0\u9700\u9501\u7684\u60c5\u51b5\u4e0b\u9ad8\u6548\u83b7\u53d6\u5185\u5b58;\u800c\u5728\u83b7\u53d6\u5927\u5185\u5b58\u65f6,\u4f7f\u7528\u9ad8\u6821\u7684spinlocks.\u6b63\u56e0\u4e3atcmalloc\u662f\u5728\u7ebf\u7a0b\u5c40\u90e8\u7a7a\u95f4(TLS)\u9884\u5148\u5b58\u50a8\u90e8\u5206\u7a7a\u95f2\u5185\u5b58\u7528\u4e8e\u5206\u914d, \u5728\u7a0b\u5e8f\u521a\u542f\u52a8\u65f6,\u5176\u6240\u5360\u7528\u7684\u5185\u5b58\u4f1a\u6bd4dlmalloc\u6216\u5176\u4ed6\u7684\u5185\u5b58\u7ba1\u7406\u5668\u66f4\u5927,\u4f46\u5176\u589e\u957f\u901f\u5e45\u5ea6\u6bd4\u5176\u4ed6\u7ba1\u7406\u5668\u5c0f,\u6240\u4ee5,\u5728\u540e\u671f,\u5b9e\u9645\u5360\u7528\u5185\u5b58\u7a7a\u95f4\u4f1a\u76f8\u63a5\u8fd1.\n\n\n\u539f\u7406\u7b80\u6790\n\n\noverview\n\n\n\n\ntcmalloc\u4e3a\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u5206\u914d\u4e00\u4e2a\u7ebf\u7a0b\u672c\u5730\u7f13\u5b58(Thread Cache, \u4ee5\u4e0b\u7b80\u79f0TC)\uff0e\u6240\u6709\u5c0f\u5bf9\u8c61(\n256K)\u90fd\u4f1a\u4f18\u5148\u4eceThreadCache\u5206\u914d\uff0e\u800c\u5f53ThreadCache\u6ca1\u6709\u8db3\u591f\u7a7a\u95f2\u5185\u5b58\u65f6\uff0c\u5c31\u4f1a\u4eceCentralCache(\u4ee5\u4e0b\u7b80\u79f0CC)\u7533\u8bf7\u5185\u5b58.\u800c\u5f53Thread Cache\u5185\u5b58\u5bcc\u88d5\u65f6,\u4f1a\u5c06\u5185\u5b58\u8fd4\u56de\u7ed9Central Cache. Central Cache\u662f\u4ee5\u8fdb\u7a0b\u4e3a\u5355\u4f4d\u5b58\u5728,ThreadCache\u662f\u4ee5\u7ebf\u7a0b\u4e3a\u5355\u4f4d\u5b58\u5728.\u5bf9\u4e8e\u5927\u5185\u5b58(\n256K), \u76f4\u63a5\u4ecePage Heap(\u4ee5\u4e0b\u7b80\u79f0PH)\u6309\u9875\u5bf9\u9f50(4K)\u7533\u8bf7.\u901a\u5e38\u60c5\u51b5\u4e0b,\u4e00\u8fde\u4e32\u7684\u9875\u9762(4k)\u53ef\u4ee5\u591a\u4e2a\u5c0f\u5185\u5b58\u5e8f\u5217,\u6bcf\u4e2a\u5e8f\u5217\u5143\u7d20\u7b49\u5927\u5c0f.TC, CC, PH \u7684\u5173\u7cfb\u662f, TC \u5411CC\u7533\u8bf7\u5185\u5b58\u5e76GC\u7ed9CC. CC \u5411PH \u7533\u8bf7\u5185\u5b58\u5e76GC\u7ed9PH.\u5728TC\u4e2d\u7684\u6570\u636e\u5355\u4f4d\u65f6\u5b57\u8282,\u6309\u5927\u5c0f\u4e3a\u5355\u4f4d\u5206\u7c7b,\u6bcf\u4e2a\u7c7b\u4e2d\u65f6\u94fe\u8868.\u5728PH\u4e2d\u7684\u6570\u636e\u5355\u4f4d\u65f6Page(4K),\u6309PageNum\u5206\u7c7b,\u6bcf\u4e2a\u5206\u7c7b\u5185\u90e8\u7528\u94fe\u8868\u7ba1\u7406,\u7b2cPageNum\u7c7b\u7684\u94fe\u8868\u7ed3\u70b9\u4e3aPageNum\u4e2aPage.\u5728CC\u4e2d\u5b58\u5728\u6700\u591a\u7684\u6570\u636e\u7ed3\u6784,\u5b83\u8fde\u63a5\u7740TC\u548cPH.\u5176\u5b58\u653e\u4e86\u6765\u81eaCC\u7684slot\u7ed3\u6784,\u548c\u6765\u81eaPH\u7684PH\u7684span\u7ed3\u6784.\u6570\u636e\u7684\u79fb\u52a8. \u6240\u6709\u7684\u6570\u636e\u4eceTC\n-\nCC\n-\nPH\u90fd\u662f\u6279\u91cf(batch)\u79fb\u52a8.\u4eceTC\u7533\u8bf7\u6216\u91ca\u653e\u7684\u5185\u5b58\u90fd\u4f1a\u4f18\u5148\u4eceCC\u7684slots\u6570\u7ec4\u5904\u7406.slots\u5b58\u653e\u7684\u5c31\u662f\u6700\u8fd1\u4eceTC\u91ca\u653e\u7684\u5185\u5b58,\u7528\u4e8e\u5feb\u901f\u7684TC\u5185\u5b58\u7533\u8bf7.\u5982\u679cslots\u6761\u4ef6\u4e0d\u6ee1\u8db3,\u5c31\u4f1a\u64cd\u4f5cCC\u4e2d\u7684spans\u5bf9\u8c61.\u6240\u6709\u79fb\u52a8\u7684\u6570\u636e\u7684\u5927\u5c0f\u548cTC\u4e2d\u7684\u6700\u5927\u5927\u5c0f\u90fd\u662f\u5728\u52a8\u6001\u8c03\u6574\u7684.\n\n\n\u5c0f\u5bf9\u8c61\u5185\u5b58\u5206\u914d\n\n\n\n\n\u4e0a\u56fe\u4e3a\u5c0f\u5185\u5b58\u7ba1\u7406\u65f6\u7684sizemap\u5206\u7c7b\u7684\u793a\u610f\u56fe.\u5c0f\u5185\u5b58\u7684\u7ba1\u7406\u90fd\u5904\u4e8eThreadCache\u4e2d.\u6240\u6709\u5bf9\u4e8e256k\u4ee5\u4e0b\u7684\u5185\u5b58\u7533\u8bf7\u90fd\u662f\u4eceTC\u4e2d\u83b7\u53d6.\u4e2a\u4eba\u628a\u5c0f\u5185\u5b58\u5206\u914d,\u7406\u89e3\u4e3a3\u7ea7\u5185\u5b58\u8bf7\u6c42.\u8fdb\u7a0b\u5411TC\u8bf7\u6c42\u5185\u5b58, TC\u5411CC\u8bf7\u6c42\u5185\u5b58,CC\u5411PH\u8bf7\u6c42\u5185\u5b58.\n\n\n\n\n\n\n\u8fdb\u7a0b\u5411TC\u8bf7\u6c42\u548c\u91ca\u653e\u5185\u5b58\u5185\u5b58\n\n\n\n\nTC\u5185\u5b58\u7ba1\u7406\n  \u9996\u5148, \u5728\u8fdb\u7a0b\u7a7a\u95f4\u4e2d,\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7ebf\u7a0b,\u5b58\u5728\u4e0e\u5176\u5bf9\u5e94\u7684TC, \u6240\u6709\u7684TC\u88ab\u7528\u94fe\u8868\u4e32\u8054,\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u4e2a\u7ebf\u7a0b\u72ec\u6709.\u901a\u8fc7\u8fd9\u79cd,\u6bcf\u4e00\u4e2aTC\u90fd\u53ef\u4ee5\u770b\u5230\u4efb\u4f55\u4e00\u4e2aTC.\u5982\u4e0a\u56fe,\u5728TC\u4e2d\u5bf9\u5185\u5b58\u8fdb\u884c\u4e86\u5206\u7c7b\u7ba1\u7406,\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u7684\u5185\u5b58\u5927\u5c0f\u90fd\u4f1a\u5411\u4e0a\u53d6\u6574\u5230\u5bf9\u5e94\u5206\u7c7b,\u7136\u540e\u76f4\u63a5\u4ece\u5bf9\u5e94\u7684\u94fe\u8868\u4e2d\u53d6\u51fa\u4e00\u9879.\n\n\n\n\n\u8fdb\u7a0b\u5411TC\u7533\u8bf7\u5185\u5b58\n\n\n\n\n\u5c06\u8bf7\u6c42\u5185\u5b58\u5411\u4e0a\u5bf9\u5176\u5230size class.\n\n\n\u4ece\u5bf9\u5e94size class\u4e2d\u67e5\u627e\u7a7a\u95f2\u5185\u5b58, \u5982\u679c\u5b58\u5728,\u76f4\u63a5\u8fd4\u56de.\n\n\n\u5982\u679csize class\u4e2d\u65e0\u7a7a\u95f2\u5185\u5b58,\u5219\u89e6\u53d1\u5411CC\u8bf7\u6c42\u5185\u5b58\u7684\u673a\u5236.\n\n\n\n\n\n\n\n\n\u8fdb\u7a0b\u5411TC\u91ca\u653e\u5185\u5b58\n\n\n\n\n\u4ece\u91ca\u653e\u5185\u5b58\u7684\u5730\u5740,\u67e5\u627e\u5bf9\u5e94\u7684pageID.\n\n\n\u5982\u679cpage ID \u5c5e\u4e8eTC, \u5e76\u4e14TC\u7684Heap\u5b58\u5728,\u5219\u91ca\u653e\u5230TC\u4e2d\n\n\n\u5982\u679cPageID\u5c5e\u4e8eTC,\u800cTC\u7684Heap\u4e0d\u5b58\u5728(\u8de8\u7ebf\u7a0b\u5185\u5b58\u7533\u8bf7\u548c\u91ca\u653e, \u7533\u8bf7\u7ebf\u7a0b\u88ab\u9500\u6bc1\u7684\u60c5\u51b5\u4e0b),\u5219\u91ca\u653e\u5230CC\u4e2d,\u53c2\u8003TC\u5411CC\u91ca\u653e\u5185\u5b58\n\n\n\u5982\u679cpageID\u5c5e\u4e8ePH\u4e2d(\u5927\u5185\u5b58), \u5219\u76f4\u63a5\u91ca\u653e\u5230PH\u4e2d.\n\n\n\n\n\n\n\n\n\n\n\n\nTC\u5411CC\u8bf7\u6c42\u548c\u91ca\u653e\u5185\u5b58\n\n\n\n\n\n\nCC\u7684\u5185\u5b58\u7ba1\u7406.\n    \u5728CC\u4e2d\u540c\u6837\u7ef4\u62a4\u4e86\u4e0eTC\u4e2d\u5bf9\u5e94\u7684\u5206\u7c7b\u7bb1\u5b50.\u6bcf\u4e2a\u7c7b\u522b\u4e2d\u662f\u4e00\u4e2aCentralFreeList\u7c7b. \u8be5\u7c7b\u4e2d\u7ef4\u62a4\u4e86\u4e00\u4e2aslots\u53cc\u5411\u94fe\u8868,\u7528\u4e8e\u5feb\u901f\u5206\u914d\u5185\u5b58\u7ed9CC\u5e76\u63a5\u6536\u91ca\u653e\u7684\u5185\u5b58, \u5176\u5185\u5b58\u7c92\u5ea6\u4e0eTC\u4e2d\u76f8\u540c.\u540c\u6837,\u8be5\u7c7b\u4e2d\u4e5f\u7ef4\u62a4\u4e86\u4e24\u4e2aspan\u53cc\u5411\u94fe\u8868,empty(\u4e0d\u5305\u542b\u7a7a\u95f2\u5757)\u548cnonempty(\u5305\u542b\u7a7a\u95f2\u5757).span\u4f1a\u5728\u8fd9\u4e24\u4e2a\u94fe\u8868\u4e2d\u79fb\u52a8.Span\u662f\u4e2a\u4ec0\u4e48\u4e1c\u897f\u5462?\u5b83\u662fPH\u5185\u5b58\u7ba1\u7406\u7684\u4e00\u4e2a\u7c92\u5ea6,\u5176\u8868\u793a\u7684\u5185\u5b58\u5927\u5c0f\u4e3apage(4K)\u7684\u500d\u6570.\u540c\u65f6,\u5b83\u5305\u542b\u4e86\u66f4\u5c0f\u7684\u7c92\u5ea6\u5355\u4f4dobjects. \u6240\u4ee5,\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u662fCC\u548cPH\u4e4b\u95f4\u79fb\u52a8\u7684\u5185\u5b58\u5355\u5143.\u6240\u4ee5,Span\u548cslots\u7684\u5173\u7cfb\u662f,spans\u53ef\u4ee5\u62c6\u5206\u6210slots\n\n\n\u8fd9\u91cc,\u6211\u4eec\u8ba4\u4e3aspan\u5c5e\u4e8ePH\u7684,\u6240\u4ee5,\u8ddfspan\u7684\u76f8\u5173\u64cd\u4f5c\u6211\u4eec\u5728PH\u8bb2\u89e3.\n\n\n``` \n\n    class CentralFreeList {\n       // ...\n\n\nprivate\n:\n\n   \n//...\n\n\n  \n// We keep linked lists of empty and non-empty spans.\n\n  \nsize_t\n   \nsize_class_\n;\n     \n// My size class\n\n  \nSpan\n     \nempty_\n;\n          \n// Dummy header for list of empty spans\n\n  \nSpan\n     \nnonempty_\n;\n       \n// Dummy header for list of non-empty spans\n\n  \nsize_t\n   \nnum_spans_\n;\n      \n// Number of spans in empty_ plus nonempty_\n\n  \nsize_t\n   \ncounter_\n;\n        \n// Number of free objects in cache entry\n\n\n  \n// Here we reserve space for TCEntry cache slots.  Space is preallocated\n\n  \n// for the largest possible number of entries than any one size class may\n\n  \n// accumulate.  Not all size classes are allowed to accumulate\n\n  \n// kMaxNumTransferEntries, so there is some wasted space for those size\n\n  \n// classes.\n\n  \nTCEntry\n \ntc_slots_\n[\nkMaxNumTransferEntries\n];\n\n\n  \n// ...\n\n\n};\n\n\n\n// Information kept for a span (a contiguous run of pages).\n\n\nstruct\n \nSpan\n \n{\n\n  \nPageID\n        \nstart\n;\n          \n// Starting page number\n\n  \nLength\n        \nlength\n;\n         \n// Number of pages in span\n\n  \nSpan\n*\n         \nnext\n;\n           \n// Used when in link list\n\n  \nSpan\n*\n         \nprev\n;\n           \n// Used when in link list\n\n  \nvoid\n*\n         \nobjects\n;\n        \n// Linked list of free objects\n\n  \nunsigned\n \nint\n  \nrefcount\n \n:\n \n16\n;\n  \n// Number of non-free objects // \u5f53refcount\u4e3a0, \u5219\u91ca\u653e\u7ed9PageHeap.\n\n  \nunsigned\n \nint\n  \nsizeclass\n \n:\n \n8\n;\n  \n// Size-class for small objects (or 0)  // \u8fd9\u4e2a\u662fTC\u7684 SizeClass \u5206\u7c7b.\u56e0\u4e3a\u6bcf\u4e2a\u5206\u7c7b\u5bf9\u5e94\u4e00\u4e2aCentralFreeList,\u6bcf\u4e2aList\u5bf9\u5e941\u4e2aslots\u548c2\u4e2aspans. \u6240\u4ee5,spans\u4e2d\u7684objects\u90fd\u7edf\u4e00\u5c5e\u4e8e\u67d0\u4e2aSizeClass, \u8fd9\u91cc\u9700\u8981\u7ef4\u62a4\u8fd9\u4e2a\u6570\u636e\u5bf9object\u7684.\n\n  \nunsigned\n \nint\n  \nlocation\n \n:\n \n2\n;\n   \n// Is the span on a freelist, and if so, which?  // \u5728empty/nonempty list?\n\n  \nunsigned\n \nint\n  \nsample\n \n:\n \n1\n;\n     \n// Sampled object?\n\n\n\n#undef SPAN_HISTORY\n\n\n#ifdef SPAN_HISTORY\n\n  \n// For debugging, we can keep a log events per span\n\n  \nint\n \nnexthistory\n;\n\n  \nchar\n \nhistory\n[\n64\n];\n\n  \nint\n \nvalue\n[\n64\n];\n\n\n#endif\n\n\n  \n// What freelist the span is on: IN_USE if on none, or normal or returned\n\n  \nenum\n \n{\n \nIN_USE\n,\n \nON_NORMAL_FREELIST\n,\n \nON_RETURNED_FREELIST\n \n};\n\n\n};\n\n\n\n\n\n\n```\n\n\n\n\n\n\nTC\u5411CC\u8bf7\u6c42\u5185\u5b58\n    TC\u53ea\u6709\u5728\u5176\u5bf9\u5e94\u7684\u5206\u7c7b\u4e2d,\u4e0d\u5b58\u5728\u7a7a\u95f2\u5757\u65f6,\u624d\u4f1a\u5411CC\u7684\u5bf9\u5e94\u5206\u7c7b\u7533\u8bf7batch_size\u7684\u7a7a\u95f2\u5757.\n\n\n\n\n\u6839\u636e\u5f53\u524d\u8bf7\u6c42\u7684\u5185\u5b58,\u627e\u5230\u5bf9\u5e94\u7684\u5206\u7c7b,\u548c\u8be5\u5206\u7c7b\u4e0b\u7684\u9ed8\u8ba4CC\u8bf7\u6c42\u7684\u5bf9\u8c61\u4e2a\u6570(\nbatch_size\n). \u5728\u8be5\u5206\u7c7bfree list\u7684\u6700\u5927\u957f\u5ea6\u548c\nbatch_size\n\u4e2d\u53d6\u6700\u5c0f\u503c\u4e3a\u9700\u8981\u7533\u8bf7\u7684\u5bf9\u8c61\u4e2a\u6570(\nnum_to_move\n).\n\n\n\u57fa\u4e8e\u6162\u542f\u52a8\u7b97\u6cd5,\u7f13\u6162\u589e\u52a0\u5f53\u524d\u5206\u7c7b\u7684free list\u5bb9\u91cf.\n\n\n\u4eceCC\u7684\u5bf9\u5e94\u5206\u7c7b\u4e2d\u7684slots\u5bf9\u50cf,\u83b7\u53d6\u76f8\u5e94\u6570\u91cf\u7684objects.\n\n\n\u5982\u679cslots\u4e0d\u6ee1\u8db3,\u5219\u4ecespans\u5bf9\u8c61\u4e2d\u83b7\u53d6\u76f8\u5e94\u7684objects.\n\n\n\u5982\u679cspans\u4e0d\u6ee1\u8db3(nonempty\u4e3aNULL),\u5219\u89e6\u53d1CC\u5411PH\u8bf7\u6c42\u5185\u5b58.\n\n\n\n\n```\n    inline void* ThreadCache::Allocate(size_t size, size_t cl) {\n      // size \u5df2\u7ecf\u88ab\u5411\u4e0a\u5bf9\u9f50, cl\u4e3a\u5206\u7c7b\u7684\u7bb1\u53f7\n      ASSERT(size \n= kMaxSize);\n      // kMaxSzie == 256 * 1024\n      ASSERT(size == Static::sizemap()-\nByteSizeForClass(cl));\n      // sizemap() \u4e3a\u5206\u7c7b\u7684\u6570\u7ec4.\u6bcf\u4e2a\u6210\u5458\u4e3a\u94fe\u8868.\n      // ByteSizeForClass\u662f\u53d6\u51fa\u5bf9\u5e94\u7bb1\u53f7\u5185\u7684\u7406\u8bba\u5185\u5b58\u5927\u5c0f.\n\n\n  // \u4ee5\u4e0aassert \u68c0\u67e5,\u7406\u5e94\u5728\u8c03\u7528\u8be5\u51fd\u6570\u4e4b\u524d\u4fdd\u8bc1.\n\n  FreeList* list = \nlist_[cl];\n  if (list-\nempty()) {\n    return FetchFromCentralCache(cl, size);\n  }\n  size_ -= size;\n  return list-\nPop();\n}\n\n\n\n\n\n```\n\n\n\u6211\u4eec\u91cd\u70b9\u63cf\u8ff0\u4e0b,TC\u5411CC\u7533\u8bf7\u5185\u5b58\u7684\u8fc7\u7a0b.\u9996\u5148,\u6211\u4eec\u9700\u8981\u77e5\u9053,CC\u4e5f\u6309\u7167TC\u7684\u5185\u5b58\u5206\u7c7b\u65b9\u5f0f,\u5b58\u5728\u5404\u4e2a\u5206\u7c7b\u7684\u7bb1\u5b50.\u6240\u4ee5,\u5b9e\u9645\u4e0a\u662f\u5411CC\u4e2d\u7684\u5bf9\u5e94\u5206\u7c7b\u83b7\u53d6\u4e00\u8fde\u4e32\u7684\u7a7a\u95f2\u5185\u5b58.\u9996\u5148,\u6211\u4eec\u5f97\u786e\u5b9a,\u79fb\u52a8\u7684\u5185\u5b58\u6570\u91cf,\u4e5f\u5c31\u662f\u5bf9\u5e94\u5206\u7c7b\u7684\u5185\u5b58\u5757\u4e2a\u6570.\u9ed8\u8ba4\u60c5\u51b5\u4e0b, \u6709\u4e00\u4e2a\u89c4\u5219\u786e\u5b9a\u6bcf\u4e2a\u5206\u7c7b\u5bf9\u5e94\u7684\u8be5\u79fb\u52a8\u7684\u5185\u5b58\u6570\u91cf.\u4ee564K\u4e3a\u57fa\u51c6,\u9664\u4ee5\u5bf9\u5e94\u5206\u7c7b\u7684\u5185\u5b58\u5927\u5c0f,\u7b97\u51fa\u6765\u7684\u4e3a\u79fb\u52a8\u7684\u5185\u5b58\u6570\u91cf.\u4f46\u662f,\u5bf9\u4e8e\u4e00\u4e9b\u6781\u5c0f\u5185\u5b58,\u8fd9\u4e2a\u503c\u5c06\u5f88\u5927,\u6240\u4ee5,\u6211\u4eec\u9650\u5236\u6700\u5927\u4e3a32768\u4e2a,\u540c\u7406,\u5bf9\u4e8e\u6781\u5927\u5185\u5b58,\u8fd9\u4e2a\u503c\n=1,\u4f1a\u5bfc\u81f4\u8fd9\u4e2a\u5206\u7c7b\u7684\u5185\u5b58\u8bf7\u6c42\u6bcf\u6b21\u90fd\u5411CC\u8bf7\u6c42,\u6240\u4ee5,\u6211\u4eec\u8fd9\u53ea\u6700\u5c0f\u4e3a2,\u4fdd\u8bc1\u6700\u591a\u6bcf2\u6b21\u5411CC\u8bf7\u6c42\u4e00\u6b21\u5185\u5b58.\u4e0b\u9762\u4e3a,\u9ed8\u8ba4\u7684\u5206\u7c7b\u548c\u5bf9\u5e94\u7684\u79fb\u52a8\u6570\u91cf.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nidx\n\n\nclass_size\n\n\nnum_to_move_objs\n\n\nnum_to_move_pages\n\n\n\n\n\n\n\n\n\n\n1\n\n\n8\n\n\n8192\n\n\n2\n\n\n\n\n\n\n2\n\n\n16\n\n\n4096\n\n\n2\n\n\n\n\n\n\n3\n\n\n32\n\n\n2048\n\n\n2\n\n\n\n\n\n\n4\n\n\n48\n\n\n1365\n\n\n2\n\n\n\n\n\n\n5\n\n\n64\n\n\n1024\n\n\n2\n\n\n\n\n\n\n6\n\n\n80\n\n\n819\n\n\n2\n\n\n\n\n\n\n7\n\n\n96\n\n\n682\n\n\n2\n\n\n\n\n\n\n8\n\n\n112\n\n\n585\n\n\n2\n\n\n\n\n\n\n9\n\n\n128\n\n\n512\n\n\n2\n\n\n\n\n\n\n10\n\n\n144\n\n\n455\n\n\n2\n\n\n\n\n\n\n11\n\n\n160\n\n\n409\n\n\n2\n\n\n\n\n\n\n12\n\n\n176\n\n\n372\n\n\n2\n\n\n\n\n\n\n13\n\n\n192\n\n\n341\n\n\n2\n\n\n\n\n\n\n14\n\n\n208\n\n\n315\n\n\n2\n\n\n\n\n\n\n15\n\n\n224\n\n\n292\n\n\n2\n\n\n\n\n\n\n16\n\n\n240\n\n\n273\n\n\n2\n\n\n\n\n\n\n17\n\n\n256\n\n\n256\n\n\n2\n\n\n\n\n\n\n18\n\n\n288\n\n\n227\n\n\n2\n\n\n\n\n\n\n19\n\n\n320\n\n\n204\n\n\n2\n\n\n\n\n\n\n20\n\n\n352\n\n\n186\n\n\n2\n\n\n\n\n\n\n21\n\n\n384\n\n\n170\n\n\n2\n\n\n\n\n\n\n22\n\n\n416\n\n\n157\n\n\n2\n\n\n\n\n\n\n23\n\n\n448\n\n\n146\n\n\n2\n\n\n\n\n\n\n24\n\n\n480\n\n\n136\n\n\n2\n\n\n\n\n\n\n25\n\n\n512\n\n\n128\n\n\n2\n\n\n\n\n\n\n26\n\n\n576\n\n\n113\n\n\n2\n\n\n\n\n\n\n27\n\n\n640\n\n\n102\n\n\n2\n\n\n\n\n\n\n28\n\n\n704\n\n\n93\n\n\n2\n\n\n\n\n\n\n29\n\n\n768\n\n\n85\n\n\n2\n\n\n\n\n\n\n30\n\n\n832\n\n\n78\n\n\n2\n\n\n\n\n\n\n31\n\n\n896\n\n\n73\n\n\n2\n\n\n\n\n\n\n32\n\n\n960\n\n\n68\n\n\n2\n\n\n\n\n\n\n33\n\n\n1024\n\n\n64\n\n\n2\n\n\n\n\n\n\n34\n\n\n1152\n\n\n56\n\n\n2\n\n\n\n\n\n\n35\n\n\n1280\n\n\n51\n\n\n2\n\n\n\n\n\n\n36\n\n\n1408\n\n\n46\n\n\n2\n\n\n\n\n\n\n37\n\n\n1536\n\n\n42\n\n\n2\n\n\n\n\n\n\n38\n\n\n1792\n\n\n36\n\n\n2\n\n\n\n\n\n\n39\n\n\n2048\n\n\n32\n\n\n2\n\n\n\n\n\n\n40\n\n\n2304\n\n\n28\n\n\n2\n\n\n\n\n\n\n41\n\n\n2560\n\n\n25\n\n\n2\n\n\n\n\n\n\n42\n\n\n2816\n\n\n23\n\n\n3\n\n\n\n\n\n\n43\n\n\n3072\n\n\n21\n\n\n2\n\n\n\n\n\n\n44\n\n\n3328\n\n\n19\n\n\n3\n\n\n\n\n\n\n45\n\n\n4096\n\n\n16\n\n\n2\n\n\n\n\n\n\n46\n\n\n4608\n\n\n14\n\n\n3\n\n\n\n\n\n\n47\n\n\n5120\n\n\n12\n\n\n2\n\n\n\n\n\n\n48\n\n\n6144\n\n\n10\n\n\n3\n\n\n\n\n\n\n49\n\n\n6656\n\n\n9\n\n\n5\n\n\n\n\n\n\n50\n\n\n8192\n\n\n8\n\n\n2\n\n\n\n\n\n\n51\n\n\n9216\n\n\n7\n\n\n5\n\n\n\n\n\n\n52\n\n\n10240\n\n\n6\n\n\n4\n\n\n\n\n\n\n53\n\n\n12288\n\n\n5\n\n\n3\n\n\n\n\n\n\n54\n\n\n13312\n\n\n4\n\n\n5\n\n\n\n\n\n\n55\n\n\n16384\n\n\n4\n\n\n2\n\n\n\n\n\n\n56\n\n\n20480\n\n\n3\n\n\n5\n\n\n\n\n\n\n57\n\n\n24576\n\n\n2\n\n\n3\n\n\n\n\n\n\n58\n\n\n26624\n\n\n2\n\n\n7\n\n\n\n\n\n\n59\n\n\n32768\n\n\n2\n\n\n4\n\n\n\n\n\n\n60\n\n\n40960\n\n\n2\n\n\n5\n\n\n\n\n\n\n61\n\n\n49152\n\n\n2\n\n\n6\n\n\n\n\n\n\n62\n\n\n57344\n\n\n2\n\n\n7\n\n\n\n\n\n\n63\n\n\n65536\n\n\n2\n\n\n8\n\n\n\n\n\n\n64\n\n\n73728\n\n\n2\n\n\n9\n\n\n\n\n\n\n65\n\n\n81920\n\n\n2\n\n\n10\n\n\n\n\n\n\n66\n\n\n90112\n\n\n2\n\n\n11\n\n\n\n\n\n\n67\n\n\n98304\n\n\n2\n\n\n12\n\n\n\n\n\n\n68\n\n\n106496\n\n\n2\n\n\n13\n\n\n\n\n\n\n69\n\n\n114688\n\n\n2\n\n\n14\n\n\n\n\n\n\n70\n\n\n122880\n\n\n2\n\n\n15\n\n\n\n\n\n\n71\n\n\n131072\n\n\n2\n\n\n16\n\n\n\n\n\n\n72\n\n\n139264\n\n\n2\n\n\n17\n\n\n\n\n\n\n73\n\n\n147456\n\n\n2\n\n\n18\n\n\n\n\n\n\n74\n\n\n155648\n\n\n2\n\n\n19\n\n\n\n\n\n\n75\n\n\n163840\n\n\n2\n\n\n20\n\n\n\n\n\n\n76\n\n\n172032\n\n\n2\n\n\n21\n\n\n\n\n\n\n77\n\n\n180224\n\n\n2\n\n\n22\n\n\n\n\n\n\n78\n\n\n188416\n\n\n2\n\n\n23\n\n\n\n\n\n\n79\n\n\n196608\n\n\n2\n\n\n24\n\n\n\n\n\n\n80\n\n\n204800\n\n\n2\n\n\n25\n\n\n\n\n\n\n81\n\n\n212992\n\n\n2\n\n\n26\n\n\n\n\n\n\n82\n\n\n221184\n\n\n2\n\n\n27\n\n\n\n\n\n\n83\n\n\n229376\n\n\n2\n\n\n28\n\n\n\n\n\n\n84\n\n\n237568\n\n\n2\n\n\n29\n\n\n\n\n\n\n85\n\n\n245760\n\n\n2\n\n\n30\n\n\n\n\n\n\n86\n\n\n253952\n\n\n2\n\n\n31\n\n\n\n\n\n\n87\n\n\n262144\n\n\n2\n\n\n32\n\n\n\n\n\n\n\n\n    \n\u4ee5\u4e0a\u53ea\u662f\u9ed8\u8ba4\u503c\n,\n\u8fd9\u4e2a\u503c\u662f\u4f1a\u968f\u7740\u5185\u5b58\u7533\u8bf7\u6b21\u6570\u7684\u589e\u52a0\u800c\u8c03\u6574\n,\n \ngoogle\n\u7ed9\u8fd9\u4e2a\u7b97\u6cd5\u53d6\u540d\u4e3a\u6162\u542f\u52a8\n(\nslow-start\n)\n\u7b97\u6cd5\n.\n \n\u6211\u4eec\u6765\u770b\u4e0b\n.\n\u9996\u5148\n,\n \nlist\n\u6709\u4e2a\u6700\u5927\u503c\n,\n\u6211\u4eec\u80fd\u79fb\u52a8\u7684\u5927\u5c0f\u4e3a\nlist\n\u6700\u5927\u957f\u5ea6\u548c\u9ed8\u8ba4\u4e2d\u7684\u6700\u5c0f\u503c\n.\n \n\u4e3a\u4e86\u4fdd\u8bc1\n,\n\u5728\u5927\u91cf\u7533\u8bf7\u65f6\u7684\u6548\u7387\n,\n \n\u5728\nmax\n \nlength\n \n \n\u9ed8\u8ba4\u503c\u65f6\n,\n\u6211\u4eec\u6162\u6162\u589e\u957f\nmax\n \nlength\n,\n \n\u9632\u6b62\u6d6a\u8d39\u7a7a\u95f4\n,\n\u53c8\u80fd\u6709\u6548\u5730\u9010\u6e10\u63d0\u9ad8\u6548\u7387\n.\n \n\u5728\nmax\n \nlength\n \n \n\u9ed8\u8ba4\u503c\u65f6\n,\n\u8981\u4e48\u65f6\u5927\u91cf\u8bf7\u6c42\n,\n\u8981\u4e48\u662f\u7531\u4e8e\u8bf7\u6c42\u7684\u5185\u5b58\u5f88\u5927\n,\n\u5bfc\u81f4\u9ed8\u8ba4\u503c\u5c0f\n,\n\u6240\u4ee5\n,\n\u8fd9\u4e2a\u65f6\u5019\n,\n\u53ef\u4ee5\u6bcf\u6b21\u589e\u52a0\u9ed8\u8ba4\u503c\u5927\u5c0f\n.\n\u4f46\u6700\u5927\u79fb\u52a8\u6570\u4f9d\u7136\u65f6\u9ed8\u8ba4\u7684\u79fb\u52a8\u6570\n.\n\n\n    \n```\n\n        \n//\n \nslow-start\n\n                \n(\nsetq\n \nbatch_size\n \nnum_to_move\n)\n\n                \n(\nsetq\n \nlist_length\n \nget_list_length_max_length\n)\n\n                \n(\nfetch-mem\n \n(\nmin\n \nbatch_size\n \nlist_length\n))\n\n                \n(\nset-list-max-length\n \n                        \n(\nif\n \n(\n \nlist_length\n \nbatch_size\n)\n\n                               \n(+\n \nlist_length\n \n1\n)\n\n                              \n(+\n \nlist_length\n \nbatch_size\n)))\n\n\n        \n//\n \nRemove\n \nsome\n \nobjects\n \nof\n \nclass\n \ncl\n \nfrom\n \ncentral\n \ncache\n \nand\n \nadd\n \nto\n \nthread\n \nheap\n.\n\n        \n//\n \nOn\n \nsuccess\n,\n \nreturn\n \nthe\n \nfirst\n \nobject\n \nfor\n \nimmediate\n \nuse\n;\n \notherwise\n \nreturn\n \nNULL\n.\n\n        \nvoid\n*\n \nThreadCache\n::\nFetchFromCentralCache\n(\nsize_t\n \ncl\n,\n \nsize_t\n \nbyte_size\n)\n \n{\n\n          \nFreeList*\n \nlist\n \n=\n \nlist_\n[\ncl\n]\n;\n\n          \nASSERT(list-\nempty())\n;\n\n          \n//\n \nbatch_size\n \n\u4e3a\u9ed8\u8ba4\u7684\u79fb\u52a8\u6570\u91cf\n\n          \nconst\n \nint\n \nbatch_size\n \n=\n \nStatic\n:\n:\nsizemap\n()\n-\nnum_objects_to_move\n(\ncl\n);\n\n\n          \n//\n \n\u8003\u8651\u5230list\u7684\u5927\u5c0f,\u6211\u4eec\u53d6list\u6700\u5927\u957f\u5ea6\u548cbatch_size\u4e2d\u7684\u6700\u5c0f\u503c.\n\n          \nconst\n \nint\n \nnum_to_move\n \n=\n \nmin\nint\n(list-\nmax_length(),\n \nbatch_size)\n;\n\n          \nvoid\n \n*start,\n \n*end\n;\n\n          \n//\n \n\u4eceCC\u83b7\u53d6\u5185\u5b58,\n \n\u53ea\u662f\u7b80\u5355\u7684\u94fe\u8868\u5220\u9664\u64cd\u4f5c\n\n          \nint\n \nfetch_count\n \n=\n \nStatic\n:\n:\ncentral_cache\n()\n[\ncl\n]\n.\nRemoveRange\n(\n\n              \nstart\n,\n \nend\n,\n \nnum_to_move\n);\n\n\n          \nASSERT((start\n \n==\n \nNULL)\n \n==\n \n(fetch_count\n \n==\n \n0))\n;\n\n          \nif\n \n(--fetch_count\n \n=\n \n0)\n \n{\n\n            \n//\n \nsize_\u4e3a\u83b7\u53d6\u5230\u7684\u5185\u5b58\u5927\u5c0f\n\n            \nsize_\n \n+=\n \nbyte_size\n \n*\n \nfetch_count\n;\n\n            \n//\n \n\u6dfb\u52a0\u5230\u5355\u5411\u94fe\u8868\u4e2d.\u94fe\u8868\u63d2\u5165\u64cd\u4f5c.\n\n            \nlist-\nPushRange(fetch_count,\n \nSLL_Next(start),\n \nend)\n;\n\n          \n}\n\n\n          \n//\n \n\u5982\u679c\nlist\n\u7684\u6700\u5927\u957f\u5ea6\n \n \n\u9ed8\u8ba4\u79fb\u52a8\u957f\u5ea6\n,\n \n\u5219\nlist\n\u6700\u5927\u957f\u5ea6\n+\n1\n,\n \n\u6162\u6162\u9760\u8fd1\u9ed8\u8ba4\u79fb\u52a8\u957f\u5ea6\n.\n\n          \nif\n \n(\nlist-\nmax_length\n()\n \n \nbatch_size\n)\n \n{\n\n            \nlist-\nset_max_length(list-\nmax_length()\n \n+\n \n1)\n;\n\n          \n}\n \nelse\n \n{\n\n            \n//\n \n\u5426\u5219,\u6211\u4eec\u76f4\u63a5\u589e\u957fbatch_size\n \n\u957f\u5ea6,\n \n\u5f53\u7136\u4e0d\u5141\u8bb8\u65e0\u9650\u589e\u957f.\n\n            \nint\n \nnew_length\n \n=\n \nmin\nint\n(list-\nmax_length()\n \n+\n \nbatch_size,\n\n                                      \nkMaxDynamicFreeListLength)\n;\n\n            \n//\n \n\u5fc5\u987b\u4fdd\u8bc1max_length\n \n\u65f6batch_size\u7684\u6574\u6570\u500d,\u8fd9\u6837\u624d\u80fd\u505a\u5230\u5728N\u6b21batch_size\u7684\u79fb\u52a8\u6b63\u597d\u91ca\u653e\u5b8clist,\n \n\u800c\u4e0d\u9700\u8981\u5206\u5272.\n\n            \nnew_length\n \n-=\n \nnew_length\n \n%\n \nbatch_size\n;\n\n            \nASSERT(new_length\n \n%\n \nbatch_size\n \n==\n \n0)\n;\n\n            \nlist-\nset_max_length(new_length)\n;\n\n          \n}\n\n          \nreturn\n \nstart\n;\n\n        \n}\n\n    \n```\n\n\n    \n\u8fd9\u91cc\u5b9e\u9645\u4ece\nCC\n\u83b7\u53d6\u7a7a\u95f2\u7a7a\u95f4\u7684\u51fd\u6570\u662f\nRemoveRange\n\u51fd\u6570\n.\n\u9996\u5148\u5e38\u8bd5\u76f4\u63a5\u4ece\nslots\n\u4e2d\u83b7\u53d6\n,\n\u5982\u679c\nslots\n\u4e0d\u591f\n,\n\u5219\u518d\u4ece\nspans\n\u83b7\u53d6\n.\n\n\n    \n```\n\n        \nint\n \nCentralFreeList\n::\nRemoveRange\n(\nvoid\n \n**\nstart\n,\n \nvoid\n \n**\nend\n,\n \nint\n \nN\n)\n \n{\n\n          \nASSERT(N\n \n \n0)\n;\n\n          \nlock_.Lock()\n;\n\n          \nif\n \n(N\n \n==\n \nStatic\n:\n:\nsizemap\n()\n-\nnum_objects_to_move\n(\nsize_class_\n)\n \n\n              \nused_slots_\n \n \n0\n)\n \n{\n\n            \nint\n \nslot\n \n=\n \n--\nused_slots_\n;\n\n            \nASSERT(slot\n \n=\n \n0)\n;\n\n            \nTCEntry\n \n*entry\n \n=\n \ntc_slots_\n[\nslot\n]\n;\n\n            \n*start\n \n=\n \nentry-\nhead\n;\n\n            \n*end\n \n=\n \nentry-\ntail\n;\n\n            \nlock_.Unlock()\n;\n\n            \nreturn\n \nN\n;\n\n          \n}\n\n\n          \nint\n \nresult\n \n=\n \n0\n;\n\n          \nvoid\n*\n \nhead\n \n=\n \nNULL\n;\n\n          \nvoid\n*\n \ntail\n \n=\n \nNULL\n;\n\n          \n//\n \nTODO\n:\n \nPrefetch\n \nmultiple\n \nTCEntries\n?\n\n          \ntail\n \n=\n \nFetchFromSpansSafe\n();\n\n          \nif\n \n(\ntail\n \n!=\n \nNULL\n)\n \n{\n\n            \nSLL_SetNext(tail,\n \nNULL)\n;\n\n            \nhead\n \n=\n \ntail\n;\n\n            \nresult\n \n=\n \n1\n;\n\n            \nwhile\n \n(result\n \n \nN)\n \n{\n\n              \nvoid\n \n*t\n \n=\n \nFetchFromSpans()\n;\n\n              \nif\n \n(!t)\n \nbreak\n;\n\n              \nSLL_Push(\nhead,\n \nt)\n;\n\n              \nresult++\n;\n\n            \n}\n\n          \n}\n\n          \nlock_\n.\nUnlock\n();\n\n          \n*\nstart\n \n=\n \nhead\n;\n\n          \n*\nend\n \n=\n \ntail\n;\n\n          \nreturn\n \nresult\n;\n\n        \n}\n\n\n        \nint\n \nSizeMap\n::\nNumMoveSize\n(\nsize_t\n \nsize\n)\n \n{\n\n          \nif\n \n(size\n \n==\n \n0)\n \nreturn\n \n0\n;\n\n\n          \nint\n \nnum\n \n=\n \nstatic_cast\nint\n(64.0\n \n*\n \n1024.0\n \n/\n \nsize)\n;\n\n          \nif\n \n(num\n \n \n2)\n \nnum\n \n=\n \n2\n;\n\n\n          \nif\n \n(num\n \n \nFLAGS_tcmalloc_transfer_num_objects)\n\n            \nnum\n \n=\n \nFLAGS_tcmalloc_transfer_num_objects\n;\n\n\n          \nreturn\n \nnum\n;\n\n        \n}\n\n\n```\n\n\n\n*\n \nTC\n\u5411\nCC\n\u91ca\u653e\u5185\u5b58\n\n    \nTC\n\u5411\nCC\n\u91ca\u653e\u5185\u5b58\u7684\u6761\u4ef6\u662f\n,\n\u5728\u8fdb\u7a0b\u5411\nTC\n\u91ca\u653e\u5185\u5b58\u65f6\n,\nTC\n\u5bf9\u5e94\u7684\u5206\u7c7b\nfree\n \nlist\n\u7684\n \n`\nlength\n \n \nmax_length\n`\n \n\u6216\u8005\n \nTC\n\u7684\u603b\n \n`\nsize\n \n \nmax_size\n`\n,\n \n\u5206\u522b\u89e6\u53d1\nListTooLong\n\u548c\nScavenge\n\u5185\u5b58\u56de\u6536\n.\n\n\n    \nListTooLong\n \n\u56de\u6536\u5185\u5b58\u89c4\u5219\n:\n\n\n        \n*\n \n\u5982\u679c\n \n`\nlist\n \nlength\n \n \nbatch_size\n`\n \n,\n\u5219\u6e05\u7a7a\u94fe\u8868\n.\n \n\u8fd9\u79cd\u60c5\u51b5\u4e0b\n,\n\u53ea\u6709\u975e\u9891\u7e41\u5185\u5b58\u8bf7\u6c42\n,\n\u624d\u4f1a\n \n`\nlength\n \n \nbatch_size\n`\n,\n \n\u6240\u4ee5\n,\n \n\u5728\u65f6\u95f4\u548c\u7a7a\u95f4\u4e0a\n,\n\u8003\u8651\u4f18\u5148\u7a7a\u95f4\n,\n\u91ca\u653e\u5185\u5b58\n.\n\n        \n*\n \n\u5982\u679c\n \n`\nlist\n \nlength\n \n \nbatch_size\n`\n,\n \n\u5219\u91ca\u653e\n \n`\nbatch_size\n`\n \n\u4e2a\nobject\n.\n\u5e76\u4e14\u51cf\u5c11\nlist\n\u7684\nmax\n \nlength\n,\n \n\u5c3d\u53ef\u80fd\u5229\u7528\u6162\u542f\u52a8\n,\n \n\u51cf\u5c11\u7a7a\u95f4\u6d6a\u8d39\u7684\u95ee\u9898\n.\n\n\n    \nScavenge\n\u56de\u6536\u5185\u5b58\u89c4\u5219\n:\n\n\n        \n*\n \n\u904d\u5386\nTC\n\u4e2d\u6240\u6709\u7684\nfree\n \nlist\n,\n \n\u5c06\n(\nlowwatermark\n \n \n0\n)\n\u7684\nlist\n \n\u91ca\u653e\n \n(\nlowwatermark\n \n/\n \n2\n \n)\n\u4e2a\nobjects\n.\n\n        \n*\n \n\u5982\u679c\nlowwatermark\n \n \n0\n\u7684\n \n`\nlist\n \nlength\n \n \nbatch_size\n`\n,\n \n\u5219\u66f4\u65b0`\nmax_length\n`\n \n\u4e3a\n \n`\nmax_length\n \n-\n \nbatch_size\n`\n,\n \n\u5229\u7528\u6162\u542f\u52a8\u7b97\u6cd5\n,\n\u51cf\u6162\u5185\u5b58\u589e\u957f\u7684\u901f\u5ea6\n.\n\n        \n*\n \n\u91cd\u7f6e\u6240\u6709\nlist\n\u7684\n \nlowwatermark\n\u4e3a\u5f53\u524d\u7684\nlength\n.(\nlowwatermark\n\u4f1a\u5728\nlist\n\u7684\nlength\n\u51cf\u5c0f\u65f6\u66f4\u65b0\n,\n\u59cb\u7ec8\u4fdd\u6301\u4e3a\nlist\n\u6700\u5c0f\u7684\nlength\n).\n\n        \n*\n \n\u5077\u53d6\u5176\u4ed6\nTC\n\u7684\n \n`\nmax_length\n`\n.\n\u7531\u4e8e\u5f53\u524d\nTC\n\u5bb9\u91cf\u4e0d\u591f\n,\n\u6240\u4ee5\n,\n\u5077\u53d6\u5176\u4ed6\nTC\n\u5bb9\n\n        \n\u91cf\n,\n\u4fdd\u8bc1\u65e0\u7528\u7ebf\u7a0b\u4e0d\u4f1a\u6d6a\u8d39\u8fc7\u591a\u7a7a\u95f4\n.\n\n\n    \nTC\n\u5bb9\u91cf\u5077\u53d6\n:\n\n\n        \n*\n \n\u5982\u679c\u5b58\u5728\u65e0\u4eba\u8ba4\u9886\u7684\u5185\u5b58\n(\n\u65e0\u4eba\u8ba4\u9886\u5185\u5b58\n:\n\u7ebf\u7a0b\u7ed3\u675f\u540e\n(\nTC\n\u7684\nHeap\n\u88ab\u91ca\u653e\n)\n\u7684\u5185\u5b58\n,\n \n\u6700\u5927\u4e3a\n \n8u\n \n*\n \n4\n \n \n20\n),\n\u5219\u4f18\u5148\u4ece\u5176\u9886\u53d6\u9700\u8981\u7684\u5185\u5b58\n,\n\u589e\u5927\u5f53\u524d\u7ebf\u7a0b\u7684\u5bb9\u91cf\n.\n\n        \n*\n \n\u4e0a\u8ff0\u6761\u4ef6\u4e0d\u6ee1\u8db3\n,\n\u5219\u904d\u5386\u6240\u6709\u7684\nTC\n,\n \n\u5982\u679c\u67d0\u4e2a\nTC\n\u7684\u5bb9\u91cf\n \n \nkMinThreadCacheSize\n \n(\nkMaxSize\n \n*\n \n2\n \n=\n \n512K\n)\n \n,\n \n\u5219\u5077\u53d6\u5176\u5bb9\u91cf\n.\n\n\n    \n```\ncpp\n        \n        \nvoid\n \nThreadCache\n::\nListTooLong\n(\nFreeList\n*\n \nlist\n,\n \nsize_t\n \ncl\n)\n \n{\n\n          \nconst\n \nint\n \nbatch_size\n \n=\n \nStatic\n:\n:\nsizemap\n()\n-\nnum_objects_to_move\n(\ncl\n);\n\n          \n//\n \n\u5982\u679clist\u957f\u5ea6\u5c0f\u4e8e\n \nbatch_size,\n \n\u91ca\u653e\u6240\u6709,\n \n\u5426\u5219,\n \n\u91ca\u653ebatch_size\u4e2a\u5757.\n\n          \nReleaseToCentralCache(list,\n \ncl,\n \nbatch_size)\n;\n\n\n          \nif\n \n(list-\nmax_length()\n \n \nbatch_size)\n \n{\n\n            \n//\n \nSlow\n \nstart\n \nthe\n \nmax_length\n \nso\n \nwe\n \ndon\nt\n \noverreserve.\n\n            \nlist-\nset_max_length(list-\nmax_length()\n \n+\n \n1)\n;\n\n          \n}\n \nelse\n \nif\n \n(\nlist-\nmax_length\n()\n \n \nbatch_size\n)\n \n{\n\n            \n//\n \nIf\n \nwe\n \nconsistently\n \ngo\n \nover\n \nmax_length,\n \nshrink\n \nmax_length.\n  \nIf\n \nwe\n \ndon\nt\n\n            \n//\n \nshrink\n \nit,\n \nsome\n \namount\n \nof\n \nmemory\n \nwill\n \nalways\n \nstay\n \nin\n \nthis\n \nfreelist.\n\n            \nlist-\nset_length_overages(list-\nlength_overages()\n \n+\n \n1)\n;\n\n            \nif\n \n(list-\nlength_overages()\n \n \nkMaxOverages)\n \n{\n\n              \nASSERT(list-\nmax_length()\n \n \nbatch_size)\n;\n\n              \nlist-\nset_max_length(list-\nmax_length()\n \n-\n \nbatch_size)\n;\n\n              \nlist-\nset_length_overages(0)\n;\n\n            \n}\n\n          \n}\n\n        \n}\n\n    \n```\n\n\n    \nReleaseToCentralCache\n\u4e2d\u6267\u884c\u4e86\n,\n\u5c06\u94fe\u8868\u8fd4\u56de\u7ed9\nCC\n\u7684\u52a8\u4f5c\n,\n\u91cc\u9762\u6d89\u53ca\u5230\u4e86\nslots\n\u7ed3\u6784\n,\n\u6211\u4eec\u6765\u770b\u4e0b\n.\n\n\n    \n```\n\n        \n//\n \nRemove\n \nsome\n \nobjects\n \nof\n \nclass\n \ncl\n \nfrom\n \nthread\n \nheap\n \nand\n \nadd\n \nto\n \ncentral\n \ncache\n\n        \nvoid\n \nThreadCache\n::\nReleaseToCentralCache\n(\nFreeList\n*\n \nsrc\n,\n \nsize_t\n \ncl\n,\n \nint\n \nN\n)\n \n{\n\n          \nASSERT(src\n \n==\n \nlist_\n[\ncl\n]\n)\n;\n\n          \nif\n \n(N\n \n \nsrc-\nlength())\n \nN\n \n=\n \nsrc-\nlength()\n;\n\n          \nsize_t\n \ndelta_bytes\n \n=\n \nN\n \n*\n \nStatic\n:\n:\nsizemap\n()\n-\nByteSizeForClass\n(\ncl\n);\n\n\n          \n//\n \nWe\n \nreturn\n \nprepackaged\n \nchains\n \nof\n \nthe\n \ncorrect\n \nsize\n \nto\n \nthe\n \ncentral\n \ncache.\n\n          \n//\n \nTODO\n:\n \nUse\n \nthe\n \nsame\n \nformat\n \ninternally\n \nin\n \nthe\n \nthread\n \ncaches\n?\n\n          \nint\n \nbatch_size\n \n=\n \nStatic\n::\nsizemap\n()\n-\nnum_objects_to_move\n(\ncl\n);\n\n          \nwhile\n \n(N\n \n \nbatch_size)\n \n{\n\n            \nvoid\n \n*tail,\n \n*head\n;\n\n            \nsrc-\nPopRange(batch_size,\n \nhead,\n \ntail)\n;\n\n            \nStatic\n:\n:\ncentral_cache\n()\n[\ncl\n]\n.\nInsertRange\n(\nhead\n,\n \ntail\n,\n \nbatch_size\n);\n\n            \nN\n \n-=\n \nbatch_size\n;\n\n          \n}\n\n          \nvoid\n \n*\ntail\n,\n \n*\nhead\n;\n\n          \nsrc-\nPopRange\n(\nN\n,\n \nhead\n,\n \ntail\n);\n\n          \nStatic\n::\ncentral_cache\n()\n[\ncl\n]\n.\nInsertRange\n(\nhead\n,\n \ntail\n,\n \nN\n);\n\n          \nsize_\n \n-\n=\n \ndelta_bytes\n;\n\n        \n}\n\n    \n```\n\n\n    \n\u8fd9\u4e2a\u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u4ece\nTC\n\u91ca\u653e\u5230\nCC\n\u65f6\u8c03\u7528\n.\n\n\n    \n```\n\n        \nvoid\n \nCentralFreeList\n::\nInsertRange\n(\nvoid\n \n*\nstart\n,\n \nvoid\n \n*\nend\n,\n \nint\n \nN\n)\n \n{\n\n          \nSpinLockHolder\n \nh(\nlock_)\n;\n\n          \nif\n \n(N\n \n==\n \nStatic\n:\n:\nsizemap\n()\n-\nnum_objects_to_move\n(\nsize_class_\n)\n \n\n            \nMakeCacheSpace\n())\n \n{\n\n            \n//\n \nslots\n \n\u662f\u5b58\u5728\nCC\n \n\u7684\u94fe\u8868\u4e2d\u7684\u7ed3\u6784\n.\n\n            \n//\n \n\u6bcf\u4e2a\nCC\n\u7684\u94fe\u8868\u8282\u70b9\u662f\nslots\n.\n\n            \n//\n \n\u6bcf\u4e2a\nslots\n\u4e2d\u7684\u6570\u636e\u6b63\u597d\u662f\nTC\n\u4e2d\u79fb\u52a8\u6570\u636e\u7684\u5927\u5c0f\n.\n\n            \nint\n \nslot\n \n=\n \nused_slots_\n++\n;\n\n            \nASSERT(slot\n \n=0)\n;\n\n            \nASSERT(slot\n \n \nmax_cache_size_)\n;\n\n            \nTCEntry\n \n*entry\n \n=\n \ntc_slots_\n[\nslot\n]\n;\n\n            \nentry-\nhead\n \n=\n \nstart\n;\n\n            \nentry-\ntail\n \n=\n \nend\n;\n\n            \nreturn\n;\n\n          \n}\n\n          \nReleaseListToSpans\n(\nstart\n);\n\n        \n}\n\n    \n```\n\n\n    \n```\n\n        \nvoid\n \nThreadCache\n::\nScavenge\n()\n \n{\n\n          \n//\n \nIf\n \nthe\n \nlow-water\n \nmark\n \nfor\n \nthe\n \nfree\n \nlist\n \nis\n \nL,\n \nit\n \nmeans\n \nwe\n \nwould\n\n          \n//\n \nnot\n \nhave\n \nhad\n \nto\n \nallocate\n \nanything\n \nfrom\n \nthe\n \ncentral\n \ncache\n \neven\n \nif\n\n          \n//\n \nwe\n \nhad\n \nreduced\n \nthe\n \nfree\n \nlist\n \nsize\n \nby\n \nL.\n  \nWe\n \naim\n \nto\n \nget\n \ncloser\n \nto\n\n          \n//\n \nthat\n \nsituation\n \nby\n \ndropping\n \nL/2\n \nnodes\n \nfrom\n \nthe\n \nfree\n \nlist.\n  \nThis\n\n          \n//\n \nmay\n \nnot\n \nrelease\n \nmuch\n \nmemory,\n \nbut\n \nif\n \nso\n \nwe\n \nwill\n \ncall\n \nscavenge\n \nagain\n\n          \n//\n \npretty\n \nsoon\n \nand\n \nthe\n \nlow-water\n \nmarks\n \nwill\n \nbe\n \nhigh\n \non\n \nthat\n \ncall.\n\n          \n//int64\n \nstart\n \n=\n \nCycleClock\n:\n:\nNow\n();\n\n          \nfor\n \n(int\n \ncl\n \n=\n \n0\n;\n \ncl\n \n \nkNumClasses\n;\n \ncl++)\n \n{\n\n            \nFreeList*\n \nlist\n \n=\n \nlist_\n[\ncl\n]\n;\n\n            \nconst\n \nint\n \nlowmark\n \n=\n \nlist-\nlowwatermark()\n;\n\n            \n//\n \n\u9996\u5148\u6e05\u7406\n \nlowmark\n \n \n0\n \n\u7684.\u5c31\u7b97\u67d0\u4e9blowmark\u503c\u4e0d\u5bf9,\n \n\u5728\u8be5\u8f6e\u7ed3\u675f\u540e,\u4f1a\u901a\u8fc7clear_lowwatermark()\u91cd\u7f6e,\u4e0b\u4e00\u6b21\u5c06\u4f1a\u6210\u529f\u91ca\u653e\u5927\u91cf\u5185\u5b58.\n\n            \nif\n \n(lowmark\n \n \n0)\n \n{\n\n              \nconst\n \nint\n \ndrop\n \n=\n \n(lowmark\n \n \n1)\n \n?\n \nlowmark/2\n \n:\n \n1\n;\n\n              \nReleaseToCentralCache(list,\n \ncl,\n \ndrop)\n;\n\n\n              \n//\n \nShrink\n \nthe\n \nmax\n \nlength\n \nif\n \nit\n \nisn\nt\n \nused.\n  \nOnly\n \nshrink\n \ndown\n \nto\n\n              \n//\n \nbatch_size\n \n--\n \nif\n \nthe\n \nthread\n \nwas\n \nactive\n \nenough\n \nto\n \nget\n \nthe\n \nmax_length\n\n              \n//\n \nabove\n \nbatch_size,\n \nit\n \nwill\n \nlikely\n \nbe\n \nthat\n \nactive\n \nagain.\n  \nIf\n\n              \n//\n \nmax_length\n \nshinks\n \nbelow\n \nbatch_size,\n \nthe\n \nthread\n \nwill\n \nhave\n \nto\n\n              \n//\n \ngo\n \nthrough\n \nthe\n \nslow-start\n \nbehavior\n \nagain.\n  \nThe\n \nslow-start\n \nis\n \nuseful\n\n              \n//\n \nmainly\n \nfor\n \nthreads\n \nthat\n \nstay\n \nrelatively\n \nidle\n \nfor\n \ntheir\n \nentire\n\n              \n//\n \nlifetime.\n\n              \n//\n \n\u7531\u4e8e\u8be5TC\u5185\u5b58\u5feb\u6ee1\u4e86,\u6240\u4ee5,\u6211\u4eec\u51cf\u5c11batch_size,\n \n\u51cf\u6162\u6162\u542f\u52a8\u7b97\u6cd5,\u4fdd\u8bc1\u7a7a\u95f4\u4e0d\u4f1a\u6d6a\u8d39\u592a\u591a.\n\n              \nconst\n \nint\n \nbatch_size\n \n=\n \nStatic\n:\n:\nsizemap\n()\n-\nnum_objects_to_move\n(\ncl\n);\n\n              \nif\n \n(list-\nmax_length()\n \n \nbatch_size)\n \n{\n\n                \nlist-\nset_max_length(\n\n                    \nmax\nint\n(list-\nmax_length()\n \n-\n \nbatch_size,\n \nbatch_size))\n;\n \n//\n \n\u51cf\u5c11\u540e\u548cbatch_size\u4e2d\u7684\u6700\u5927\u503c.\n\n              \n}\n\n            \n}\n\n            \nlist-\nclear_lowwatermark\n();\n  \n//\n\u6e05\u7406\u4f4e\u6c34\u5e73\u6807\u5fd7\u4f4d\n.\n\u5176\u5b9e\u5c31\u662f\u8bbe\u7f6e\u4e3a\u5f53\u524d\u957f\u5ea6\n...\n\n          \n}\n\n          \n//\n \n\u65e0\u803b\u5730\u5077\u53d6\u5176\u4ed6\u7ebf\u7a0b\u7684\u5bb9\u91cf\n.\n\n          \nIncreaseCacheLimit\n();\n\n        \n}\n\n    \n```\n\n\n    \n\u4ee5\u4e0a\u662f\u5185\u5b58\u91ca\u653e\u7684\u60c5\u51b5\n,\n\u8fd8\u6709\u4e2a\u4fdd\u8bc1\u81ea\u5df1\u7ebf\u7a0b\u5bb9\u91cf\u5145\u88d5\u7684\u65e0\u803b\u505a\u6cd5\u662f\n,\n\u5077\u53d6\u5176\u4ed6\u7ebf\u7a0b\u7684\u5bb9\u91cf\n.\n\u5077\u53d6\u4e34\u8fd1\n10\n\u4e2a\nTC\n\u7684\n \n1\n \n \n16\n\u5bb9\u91cf\n.\n \n\u5f53\u7136\n,\n\u5982\u679c\u5176\u5bb9\u91cf\u5c0f\u4e8e\u6700\u5c0f\u503c\n,\n\u5c31\u653e\u8fc7\u4e86\uff0e\u4e5f\u5c31\u662f\u8bf4\n,\n\u5bf9\u4e8e\u5f88\u5c11\u542f\u52a8\u6162\u542f\u52a8\u7684\u7ebf\u7a0b\n,\n\u5176\u7ebf\u7a0b\u5bb9\u91cf\u5c06\u4f1a\u7531\u4e8e\u88ab\u5077\u53d6\u800c\u6301\u7eed\u51cf\u5c11\n,\n \n\u6709\u6548\u63a7\u5236\u4e86\u8fd9\u79cd\u7ebf\u7a0b\u5185\u5b58\u7684\u6d6a\u8d39\n,\n\u901a\u8fc7\u8fd9\u79cd\u673a\u5236\n,\n\u6709\u6548\u5730\u4fdd\u8bc1\u8fdb\u7a0b\u95f4\u7a7a\u95f4\u4e0d\u4f1a\u6d6a\u8d39\u592a\u591a\n.\n \n\u9700\u6c42\u5927\u7684\u7ebf\u7a0b\u53ef\u4ee5\u83b7\u5f97\u66f4\u591a\u7684\u5bb9\u91cf\n,\n\u800c\u9700\u6c42\u5c0f\u7684\u7ebf\u7a0b\u83b7\u53d6\u5c11\u7684\u5bb9\u91cf\n.\n\u5982\u679c\u5b58\u5728\u65e0\u4eba\u8ba4\u9886\u7684\u5185\u5b58\n,\n\u54b1\u4eec\u5c31\u5077\u4e86\n!!\n\u6240\u8c13\u65e0\u4eba\u8ba4\u9886\u7684\u5185\u5b58\n,\n\u662f\u6307\u7ebf\u7a0b\u88ab\u91ca\u653e\u540e\n,\n \n\u5176\u91ca\u653e\u7684\u5185\u5b58\n.\n\n\n    \n```\ncpp\n\n        \nvoid\n \nThreadCache\n::\nIncreaseCacheLimitLocked\n()\n \n{\n\n          \nif\n \n(unclaimed_cache_space_\n \n \n0)\n \n{\n\n            \n//\n \nPossibly\n \nmake\n \nunclaimed_cache_space_\n \nnegative.\n\n            \nunclaimed_cache_space_\n \n-=\n \nkStealAmount\n;\n\n            \nmax_size_\n \n+=\n \nkStealAmount\n;\n\n            \nreturn\n;\n\n          \n}\n\n          \n//\n \nDon\nt\n \nhold\n \npageheap_lock\n \ntoo\n \nlong\n.\n  \nTry\n \nto\n \nsteal\n \nfrom\n \n10\n \nother\n\n          \n//\n \nthreads\n \nbefore\n \ngiving\n \nup\n.\n  \nThe\n \ni\n \n \n10\n \ncondition\n \nalso\n \nprevents\n \nan\n\n          \n//\n \ninfinite\n \nloop\n \nin\n \ncase\n \nnone\n \nof\n \nthe\n \nexisting\n \nthread\n \nheaps\n \nare\n\n          \n//\n \nsuitable\n \nplaces\n \nto\n \nsteal\n \nfrom\n.\n\n          \nfor\n \n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n \n10\n;\n\n               \n++\ni\n,\n \nnext_memory_steal_\n \n=\n \nnext_memory_steal_-\nnext_\n)\n \n{\n\n            \n//\n \nReached\n \nthe\n \nend\n \nof\n \nthe\n \nlinked\n \nlist.\n  \nStart\n \nat\n \nthe\n \nbeginning.\n\n            \nif\n \n(next_memory_steal_\n \n==\n \nNULL)\n \n{\n\n              \nASSERT(thread_heaps_\n \n!=\n \nNULL)\n;\n\n              \n//\n \nnext_memory_steal_\n \n\u5728\u521d\u59cb\u5316\u65f6\u9ed8\u8ba4\u4e3aTC\u7684Heap\u7684\u94fe\u8868\u5934.\n\n              \n//\n \n\u6240\u4ee5,\u8fd9\u4e2a\u5faa\u73af\u4f1a\u4e0d\u505c\u8f6e\u6d41\u5077\u53d6\u94fe\u8868\u91cc\u7684\u6240\u6709\u7ebf\u7a0b,\u5305\u62ec\u81ea\u5df1.\n\n              \nnext_memory_steal_\n \n=\n \nthread_heaps_\n;\n\n            \n}\n\n            \nif\n \n(\nnext_memory_steal_\n \n==\n \nthis\n \n||\n\n                \nnext_memory_steal_-\nmax_size_\n \n=\n \nkMinThreadCacheSize\n)\n \n{\n\n              \ncontinue\n;\n\n            \n}\n\n            \nnext_memory_steal_-\nmax_size_\n \n-\n=\n \nkStealAmount\n;\n\n            \nmax_size_\n \n+=\n \nkStealAmount\n;\n\n\n            \nnext_memory_steal_\n \n=\n \nnext_memory_steal_-\nnext_\n;\n\n            \nreturn\n;\n\n          \n}\n\n        \n}\n\n    \n```\n\n\n\n\n\n\n\n\n\n\nCC\u5411PH \u7533\u8bf7\u548c\u91ca\u653e\u5185\u5b58\n\n\n\n\n\n\nPH\u7684\u5185\u5b58\u7ba1\u7406\n\n\nPH\u7684\u7ba1\u7406,\u8ddfTC\u4e00\u6837\u4e5f\u662f\u8fdb\u884c\u4e86\u5206\u7c7b,\u633a\u590d\u6742\u7684.\u9996\u5148, \u6240\u6709\u7684\u5185\u5b58,\u6620\u5c04\u5230\u8fdb\u7a0b\u7a7a\u95f4\u7684\u5185\u5b58,\u90fd\u4f1a\u5360\u636e\u7740PH\u4e2d\u7684\u67d0\u4e2alist. PH\u7684\u5185\u5b58\u662f\u76f4\u63a5\u4ece\u7cfb\u7edf\u7684sbrk\u6216\u8005mmap\u5206\u914d\u7684.\u540c\u6837, \u5927\u5185\u5b58\u4e5f\u662f\u4ecePH\u5206\u914d\u7684,\u6240\u4ee5,\u5b83\u5f88\u590d\u6742!\n\n\nPH\u7684\u5206\u7c7b,\u662f\u6309page\u6570\u91cf\u8fdb\u884c. \nfree_\n \u4ece \n0 - kMaxPages\n, \u6bcf\u4e2a\u6570\u7ec4\u6210\u5458\u5305\u542b\u6570\u7ec4\u4e0b\u6807\u4e2apages, \u4e5f\u5c31\u662f \nfree_\n\u5305\u542b1\u4e2apage\u957f\u5ea6\u7684Spans.\u6bcf\u4e2a\u6570\u7ec4\u6210\u5458\u5305\u542b2\u4e2a\u53cc\u5411\u73af\u5f62\u94fe\u8868normal\u548creturned.\u800c\u5927\u4e8ekMaxPages\u7684\u5f52\u5c5e\u5230large\n\u4e2d.\n\n\nnormal: \u5b58\u653e\u7a7a\u95f2\u7684span list.\n\n\nreturned: \u5b58\u653e\u901a\u8fc7madvise\u7684 \nMADV_FREE\n \u65b9\u5f0f\u91ca\u653e\u7684span.\u524d\u63d0\u65f6\u7cfb\u7edf\u652f\u6301 \nMADV_FREE\n \u6216 \nMADV_DONTNEED\n \u5426\u5219\u5c31\u4e0d\u91ca\u653e\u5185\u5b58.\n\n\n\u6240\u8c13madvise\u7684\nMADV_FREE\n \u91ca\u653e\u5185\u5b58, \u662f\u5185\u6838\u5b9e\u73b0\u7684\u4e00\u79cdlazy free\u65b9\u5f0f.\u5728process\u901a\u8fc7 madvise\nMADV_FREE\n \u65b9\u5f0f\u901a\u77e5kernel, \u67d0\u6bb5pages\u4e2d\u7684\u6570\u636e\u4e0d\u518d\u4f7f\u7528\u4e86,\u5982\u679ckernel\u9700\u8981,\u53ef\u4ee5\u6e05\u695a.\u5982\u679cprocess\u5148\u4e8ekernel\u518d\u6b21\u8bbf\u95ee\u4e86\u8be5\u533a\u57df,process\u53ef\u4ee5\u5feb\u901f\u83b7\u53d6\u5230\u8be5\u4f4d\u7f6e\u7684\u539f\u5148\u6570\u636e. \u5982\u679ckernel\u5148\u4e8eprocess\u9700\u8981\u8be5pages,\u5219\u5f53process\u8bbf\u95ee\u65f6,\u4f1a\u83b7\u5f97\u88ab\u6e05\u7a7a\u7684pages.\n\n\n\u5982\u679c\u6211\u4eec\u7cfb\u7edf\u4e0d\u652f\u6301\nMADV_FREE\n, \u5219\u4f7f\u7528\nMADV_DONTNEED\n. \nMADV_DONTNEED\n\u4e0e\nMADV_FREE\n\u7684\u533a\u522b\u5728\u4e8e,\nMADV_DONTNEED\n\u7684\u60c5\u51b5\u4e0b,\u4e0d\u7ba1\u4ec0\u4e48\u60c5\u51b5\u4e0b\u518d\u6b21\u8bbf\u95ee\u8fd9\u6bb5pages, \u83b7\u5f97\u7684\u603b\u662f\u88ab\u6e050\u7684\u5185\u5b58\u533a\u57df.\n\n\nmore info about MADV_FREE and MADV_DONTNEED\n\n\n\u5bf9\u4e8espan, span\u4e2dobjects\u7684\u5730\u5740\u548c span\u7684PageID\u4e4b\u95f4, \u5728PH\u4e2d\u5b58\u5728\u76f8\u5e94\u7684\u7b97\u6cd5\u8fdb\u884c\u6620\u5c04. PageMap \u662f\u4e00\u4e2a\u57fa\u6570\u6811(radix tree), \u80fd\u5c06\u67d0\u4e2a\u5730\u5740\u6620\u5c04\u5230\u5bf9\u5e94\u7684span. \u800cPageMapCache\u662fHashTable\u80fd\u5c06\u5bf9\u5e94\u7684PageId\u6620\u5c04\u5230\u5176size class.\n\n\n```\n    // We segregate spans of a given size into two circular linked\n    // lists: one for normal spans, and one for spans whose memory\n    // has been returned to the system.\n    struct SpanList {\n      Span        normal;    // \u5b58\u653e\u88ab\u6620\u5c04\u5230\u8fdb\u7a0b\u7a7a\u95f4\u7684spans..\n      Span        returned;  // \u5b58\u653e\u5df2\u7ecf\u88ab\u91ca\u653e\u56de\u7cfb\u7edf\u7684spans..(?)\n    };\n\n\n// List of free spans of length \n= kMaxPages\nSpanList large_; // \u6240\u6709\n 128 pages\u7684spans, \u90fd\u5f52\u5c5e\u5230\u8be5list\n\n// Array mapping from span length to a doubly linked list of free spans\nSpanList free_[kMaxPages]; // kMaxPages = 1 \n (20 - kPageShift) (= 128); \u4e5f\u5c31\u662f\u8bf4\u6709128\u4e2a\u5206\u7c7b.\n\n\n\n\n\n```\n\n\n\n\n\n\nCC \u5411PH \u5185\u5b58\u7533\u8bf7\n\n\nCC\u5411PH\u7533\u8bf7\u5185\u5b58\u7684\u6761\u4ef6\u662f,\u5f53\u524dCentralFreeList\u4e2d\u7a7a\u95f2span\u4e0d\u591f.\u6240\u6709\u5411PH\u7533\u8bf7\u7684\u5185\u5b58\u90fd\u662fPage\u7684N\u500d,\u6240\u4ee5,\u53c2\u6570\u662fN. PageHeap::New(Length n).\n\n\n* \u9996\u5148, \u641c\u7d22\u6240\u6709 \n= N (N \n= kMaxPages)\u7684free list, \u67e5\u627e\u6700\u7b26\u5408\u8981\u6c42\u7684span.\u5982\u679c\u627e\u5230,\u5219\u76f4\u63a5\u4ece\u53cc\u5411\u94fe\u8868\u4e2d\u5220\u9664. \u5982\u679cspan\u6bd4\u8981\u6c42\u7684\u5927,\u5219\u5207\u5206(Carve),\u5c06\u5269\u4e0b\u7684\u65b0\u7533\u8bf7\u4e00\u4e2aspan,\u653e\u5165\u5bf9\u5e94\u7684size class\u4e2d.\u8fd9\u79cd\u7b97\u6cd5\u67e5\u627e\u6700\u9002\u5408\u7684,\u4f46\u4f1a\u5bfc\u81f4\u5730\u5740\u4e0d\u8fde\u7eed.\n* \u5982\u679c\u6240\u6709\u7684free list\u4e2d\u6ca1\u6709\u5339\u914d\u7684,\u5219\u904d\u5386large list.\u7531\u4e8elarge list\u4e2d\u662f\u672a\u6392\u5e8f\u7684, \u6240\u4ee5, \u5728\u641c\u7d22\u65f6, \u9700\u8981\u4e0d\u505c\u5730\u8bb0\u5f55\u6700\u63a5\u8fd1\u8bf7\u6c42\u5927\u5c0f\u7684span. \u6240\u4ee5\u8be5\u7b97\u6cd5\u662fO(n), \u8d39\u65f6.\n* \u5982\u679c\u4ee5\u4e0a\u67e5\u627e\u90fd\u5931\u8d25,\u5219PH\u5c31\u5411\u7cfb\u7edf\u7533\u8bf7N pages \u5e76\u5b58\u5165\u5bf9\u5e94\u7684size class.\u7136\u540e\u4ece\u5934\u5f00\u59cb.\u5982\u679c\u7533\u8bf7\u5931\u8d25,\u5219\u8fd4\u56deNULL.\n\n\n\n\n\n\u6211\u4eec\u5ef6\u7eed\u4e4b\u524dTC\u5411CC\u8bf7\u6c42\u5185\u5b58\u65f6\u7684\u60c5\u51b5,\u5728slots\u4e0d\u591f\u65f6,\u4f1a\u5411spans\u8bf7\u6c42.\u5982\u4e0b\u4ee3\u7801:\n\n\n```\n    void\n CentralFreeList::FetchFromSpansSafe() {\n      // \u7b2c\u4e00\u6b21\u5c1d\u8bd5,\u5982\u679c\u5931\u8d25,\u5219\u610f\u5473\u7740spans\u7a7a\u95f4\u4e0d\u591f,\u9700\u8981\u5411PH\u7533\u8bf7\u5185\u5b58.\n      void \nt = FetchFromSpans();\n      if (!t) {\n        // \u5411PH\u7533\u8bf7\u5185\u5b58,\u5e76\u5212\u5206\u83b7\u53d6\u7684spans,\u7528\u4e8e\u8be5\u5206\u7c7b\u7684slots.\n        Populate();\n        // \u518d\u6b21\u5c1d\u8bd5\u83b7\u53d6objects.\n        t = FetchFromSpans();\n      }\n      return t;\n    }\n\n\n//\n \nFetch\n \nmemory\n \nfrom\n \nthe\n \nsystem\n \nand\n \nadd\n \nto\n \nthe\n \ncentral\n \ncache\n \nfreelist\n.\n\n\nvoid\n \nCentralFreeList\n::\nPopulate\n()\n \n{\n\n  \n//\n \nRelease\n \ncentral\n \nlist\n \nlock\n \nwhile\n \noperating\n \non\n \npageheap\n\n  \nlock_.Unlock()\n;\n\n  \n//\n \n\u83b7\u53d6\u8be5\u7c7b\u522b\u5bf9\u5e94\u7684\u9700\u8981\u4ecePH\u83b7\u53d6\u7684page\u6570\u91cf.\u5177\u4f53\u6570\u503c\u53ef\u4ee5\u53c2\u8003\u4e0a\u9762slots\u5206\u7c7b\u7684\u6570\u636e.\n\n  \nconst\n \nsize_t\n \nnpages\n \n=\n \nStatic\n:\n:\nsizemap\n()\n-\nclass_to_pages\n(\nsize_class_\n);\n\n\n  \nSpan*\n \nspan\n;\n\n  \n{\n\n    \nSpinLockHolder\n \nh(\nStatic\n:\n:\npageheap_lock\n());\n\n    \n//\n \n\u4ecePH\n \n\u83b7\u53d6npages\n\n    \nspan\n \n=\n \nStatic\n:\n:\npageheap\n()\n-\nNew\n(\nnpages\n);\n\n    \n//\n \n\u5c06\u8fd9\u4e2aspan\u4e0e\u8be5\u7c7b\u522b\u5728PH\u4e2d\u5bf9\u5e94\u8d77\u6765.\n\n    \nif\n \n(span)\n \nStatic\n:\n:\npageheap\n()\n-\nRegisterSizeClass\n(\nspan\n,\n \nsize_class_\n);\n\n  \n}\n\n  \nif\n \n(\nspan\n \n==\n \nNULL\n)\n \n{\n\n    \nLog(kLog,\n \n__FILE__,\n \n__LINE__,\n\n        \ntcmalloc\n:\n \nallocation\n \nfailed\n,\n \nnpages\n \n \nkPageShift\n);\n\n    \nlock_.Lock()\n;\n\n    \nreturn\n;\n\n  \n}\n\n  \nASSERT\n(\nspan-\nlength\n \n==\n \nnpages\n);\n\n  \n//\n \nCache\n \nsizeclass\n \ninfo\n \neagerly\n.\n  \nLocking\n \nis\n \nnot\n \nnecessary\n.\n\n  \n//\n \n(\nInstead\n \nof\n \nbeing\n \neager\n,\n \nwe\n \ncould\n \njust\n \nreplace\n \nany\n \nstale\n \ninfo\n\n  \n//\n \nabout\n \nthis\n \nspan\n,\n \nbut\n \nthat\n \nseems\n \nto\n \nbe\n \nno\n \nbetter\n \nin\n \npractice\n.)\n\n  \nfor\n \n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n \nnpages\n;\n \ni\n++)\n \n{\n\n    \n//\n \n\u5c06pages\u7684\u4fe1\u606f\u548c\u5bf9\u5e94\u7684size_class\n \n\u6ce8\u518c\u5230PH\u4e2d\u7684hash\u8868\u4e2d,\n \n\u4e5f\u5c31\u662fPageMapCache\n\n    \nStatic\n:\n:\npageheap\n()\n-\nCacheSizeClass\n(\nspan\n-\nstart\n \n+\n \ni\n,\n \nsize_class_\n);\n\n  \n}\n\n\n  \n//\n \nSplit\n \nthe\n \nblock\n \ninto\n \npieces\n \nand\n \nadd\n \nto\n \nthe\n \nfree-list\n\n  \n//\n \nTODO\n:\n \ncoloring\n \nof\n \nobjects\n \nto\n \navoid\n \ncache\n \nconflicts\n?\n\n  \n//\n \n\u5206\u5272\u8be5\nspan\n\u4e2d\nobjects\n\u5230\u5f53\u524d\u7684\nfree-list\n\u4e2d\n.\n\n  \nvoid\n**\n \ntail\n \n=\n \nspan-\nobjects\n;\n\n  \nchar\n*\n \nptr\n \n=\n \nreinterpret_cast\nchar\n*\n(\nspan-\nstart\n \n \nkPageShift\n);\n\n  \nchar\n*\n \nlimit\n \n=\n \nptr\n \n+\n \n(\nnpages\n \n \nkPageShift\n);\n\n  \nconst\n \nsize_t\n \nsize\n \n=\n \nStatic\n::\nsizemap\n()\n-\nByteSizeForClass\n(\nsize_class_\n);\n\n  \nint\n \nnum\n \n=\n \n0\n;\n\n  \nwhile\n \n(\nptr\n \n+\n \nsize\n \n=\n \nlimit\n)\n \n{\n\n    \n*tail\n \n=\n \nptr\n;\n\n    \ntail\n \n=\n \nreinterpret_cast\nvoid**\n(ptr)\n;\n\n    \nptr\n \n+=\n \nsize\n;\n\n    \nnum++\n;\n\n  \n}\n\n  \nASSERT\n(\nptr\n \n=\n \nlimit\n);\n\n  \n*\ntail\n \n=\n \nNULL\n;\n\n  \nspan-\nrefcount\n \n=\n \n0\n;\n \n//\n \nNo\n \nsub-object\n \nin\n \nuse\n \nyet\n\n\n  \n//\n \nAdd\n \nspan\n \nto\n \nlist\n \nof\n \nnon-empty\n \nspans\n\n  \nlock_\n.\nLock\n();\n\n  \n//\n \n\u5c06\u8be5\nspan\n\u6dfb\u52a0\u5230\nnoneempty\n\u5217\u8868\u4e2d\n.\n\n  \ntcmalloc\n::\nDLL_Prepend\n(\nnonempty_\n,\n \nspan\n);\n\n  \n++\nnum_spans_\n;\n\n  \ncounter_\n \n+=\n \nnum\n;\n\n\n}\n\n\n\n\n\n\n```\n\n\n```\n    void\n CentralFreeList::FetchFromSpans() {\n      // \u68c0\u67e5nonempty list, \u5982\u679c\u4e3a\u7a7a,\u610f\u5473\u7740\u6ca1\u6709\u7a7a\u95f2\u7684span.\n      if (tcmalloc::DLL_IsEmpty(\nnonempty_)) return NULL;\n      Span\n span = nonempty_.next;\n\n\n  \nASSERT\n(\nspan-\nobjects\n \n!=\n \nNULL\n);\n\n  \n//\n \nspan\n\u7684\nrefcount\n \n\u6307\u5411\u88ab\u4f7f\u7528\u6b21\u6570\n.\n \n\u6bcf\u4e00\u6b21\u88ab\u5206\u914d\u5185\u5b58\n,\n\u5f15\u7528\n++,\n \n\u91ca\u653e\u65f6\u5f15\u7528\n--\n.\n \n  \n//\n \n\u5728\u91ca\u653e\u65f6\n,\n\u5982\u679c\nrefcount\n\u4e3a\n0\n,\n \n\u5c31\u4f1a\u91ca\u653e\u7ed9\nPH\n.\n\n  \nspan-\nrefcount\n++;\n\n  \nvoid\n*\n \nresult\n \n=\n \nspan-\nobjects\n;\n\n  \n//\n \n\u52a0\u5165\u5230\u94fe\u8868\n\n  \nspan-\nobjects\n \n=\n \n*(\nreinterpret_cast\nvoid\n**\n(\nresult\n));\n\n  \nif\n \n(\nspan-\nobjects\n \n==\n \nNULL\n)\n \n{\n\n    \n//\n \nMove\n \nto\n \nempty\n \nlist\n\n    \ntcmalloc\n:\n:\nDLL_Remove\n(\nspan\n);\n\n    \ntcmalloc\n:\n:\nDLL_Prepend\n(\nempty_\n,\n \nspan\n);\n\n    \nEvent(span,\n \nE\n,\n \n0)\n;\n\n  \n}\n\n  \ncounter_--\n;\n\n  \nreturn\n \nresult\n;\n\n\n}\n\n\n\n\n\n\n```\n\n\n\u4e0b\u9762,\u6211\u4eec\u770b\u4e0bPH\u7684\u5185\u5b58\u5206\u914d, \u4e5f\u5c31\u662fPageHeap::New(Length n)\u7684\u903b\u8f91.\n\n\n```\n    Span* PageHeap::New(Length n) {\n      ASSERT(Check());\n      ASSERT(n \n 0);\n\n\n  // \u641c\u7d22span\u89c4\u5219.\n  Span* result = SearchFreeAndLargeLists(n);\n  if (result != NULL)\n    return result;\n\n  // ...\n\n  // \u589e\u957f\u5185\u5b58, \u5b9e\u9645\u662f\u6267\u884c\u7cfb\u7edf\u8c03\u7528\n  // Grow the heap and try again.\n  if (!GrowHeap(n)) {\n    ASSERT(Check());\n    return NULL;\n  }\n  return SearchFreeAndLargeLists(n);\n}\n\n\n\n\n\n```\n\n\n```\n    Span* PageHeap::SearchFreeAndLargeLists(Length n) {\n      ASSERT(Check());\n      ASSERT(n \n 0);\n\n\n  \n//\n \nFind\n \nfirst\n \nsize\n \n=\n \nn\n \nthat\n \nhas\n \na\n \nnon-empty\n \nlist\n\n  \n//\n \n\u4ece\nn\n\u5f00\u59cb\u67e5\u627e\n,\n\u5bfb\u627e\u7b2c\u4e00\u4e2a\u975e\u7a7a\u7684\u94fe\u8868\n.\n\n  \nfor\n \n(\nLength\n \ns\n \n=\n \nn\n;\n \ns\n \n \nkMaxPages\n;\n \ns\n++)\n \n{\n\n    \nSpan*\n \nll\n \n=\n \nfree_\n[\ns\n]\n.normal\n;\n\n    \n//\n \nIf\n \nwe\nre\n \nlucky,\n \nll\n \nis\n \nnon-empty,\n \nmeaning\n \nit\n \nhas\n \na\n \nsuitable\n \nspan.\n\n    \nif\n \n(!DLL_IsEmpty(ll))\n \n{\n\n      \nASSERT(ll-\nnext-\nlocation\n \n==\n \nSpan\n:\n:\nON_NORMAL_FREELIST\n);\n\n      \n//\n \n\u627e\u5230,\n \n\u7136\u540e,\u6211\u4eec\u5c1d\u8bd5\u5206\u5272.\n\n      \nreturn\n \nCarve(ll-\nnext,\n \nn)\n;\n\n    \n}\n\n    \n//\n \nAlternatively\n,\n \nmaybe\n \nthere\ns\n \na\n \nusable\n \nreturned\n \nspan\n.\n\n    \n//\n \nreturned\n \n\u662f\u901a\u8fc7\nmadvice\n\u91ca\u653e\u7684\u5185\u5b58\n.\n\n    \nll\n \n=\n \nfree_\n[\ns\n]\n.\nreturned\n;\n\n    \nif\n \n(!\nDLL_IsEmpty\n(\nll\n))\n \n{\n\n      \n//\n \nWe\n \ndid\n \nnot\n \ncall\n \nEnsureLimit\n \nbefore,\n \nto\n \navoid\n \nreleasing\n \nthe\n \nspan\n\n      \n//\n \nthat\n \nwill\n \nbe\n \ntaken\n \nimmediately\n \nback.\n\n      \n//\n \nCalling\n \nEnsureLimit\n \nhere\n \nis\n \nnot\n \nvery\n \nexpensive,\n \nas\n \nit\n \nfails\n \nonly\n \nif\n\n      \n//\n \nthere\n \nis\n \nno\n \nmore\n \nnormal\n \nspans\n \n(and\n \nit\n \nfails\n \nefficiently)\n\n      \n//\n \nor\n \nSystemRelease\n \ndoes\n \nnot\n \nwork\n \n(there\n \nis\n \nprobably\n \nno\n \nreturned\n \nspans).\n\n      \nif\n \n(EnsureLimit(n))\n \n{\n\n        \n//\n \nll\n \nmay\n \nhave\n \nbecame\n \nempty\n \ndue\n \nto\n \ncoalescing\n\n        \nif\n \n(!DLL_IsEmpty(ll))\n \n{\n\n          \nASSERT(ll-\nnext-\nlocation\n \n==\n \nSpan\n:\n:\nON_RETURNED_FREELIST\n);\n\n          \nreturn\n \nCarve(ll-\nnext,\n \nn)\n;\n\n        \n}\n\n      \n}\n\n    \n}\n\n  \n}\n\n  \n//\n \nNo\n \nluck\n \nin\n \nfree\n \nlists\n,\n \nour\n \nlast\n \nchance\n \nis\n \nin\n \na\n \nlarger\n \nclass\n.\n\n  \n//\n \n\u8fd9\u662f\u4e2a\u4e0d\u5e78\u7684\u6d88\u606f\n,\n\u6211\u4eec\u53ea\u80fd\u641c\u7d22\u6700\u540e\u4e00\u4e2a\nlarge_\n \n\u94fe\u8868\n.\n\n  \nreturn\n \nAllocLarge\n(\nn\n);\n  \n//\n \nMay\n \nbe\n \nNULL\n\n\n}\n\n\n\n\n\n\n```\n\n\n\u7531\u4e8e\nlarge_\n \u4e2d\u7684\u5bf9\u8c61\u6ca1\u6709\u6392\u5e8f,\u6240\u4ee5,\u9700\u8981\u904d\u5386\u6240\u6709,\u4e0d\u505c\u5730\u5339\u914d. \u8fd9\u4e2a\u64cd\u4f5c\u8d39\u65f6, \u4f46\u57fa\u672c\u4e0a\u903b\u8f91\u8fdb\u5230\u8fd9\u91cc\u7684\u51e0\u7387\u4e0d\u9ad8.\u8fd9\u91cc\u4f1a\u68c0\u67e5PH\u7684\u5bb9\u91cf,\u5e76\u6267\u884c\u53ef\u80fd\u9700\u8981\u7684\u5185\u5b58\u91ca\u653e.\n\n\n```\n    Span\n PageHeap::AllocLarge(Length n) {\n      // find the best span (closest to n in size).\n      // The following loops implements address-ordered best-fit.\n      Span \nbest = NULL;\n\n\n  \n\u641c\u7d22\nnormal\n \nlist\n\n  \nfor\n \n(\nSpan\n*\n \nspan\n \n=\n \nlarge_\n.\nnormal\n.\nnext\n;\n\n       \nspan\n \n!=\n \nlarge_\n.\nnormal\n;\n\n       \nspan\n \n=\n \nspan-\nnext\n)\n \n{\n\n    \nif\n \n(span-\nlength\n \n=\n \nn)\n \n{\n\n      \nif\n \n((best\n \n==\n \nNULL)\n\n          \n||\n \n(span-\nlength\n \n \nbest-\nlength)\n\n          \n||\n \n((span-\nlength\n \n==\n \nbest-\nlength)\n \n \n(span-\nstart\n \n \nbest-\nstart)))\n \n{\n\n        \nbest\n \n=\n \nspan\n;\n\n        \nASSERT(best-\nlocation\n \n==\n \nSpan\n:\n:\nON_NORMAL_FREELIST\n);\n\n      \n}\n\n    \n}\n\n  \n}\n\n\n  \nSpan\n \n*\nbestNormal\n \n=\n \nbest\n;\n\n\n  \n//\n \n\u641c\u7d22\nreturned\n \nlist\n.\n\n  \nfor\n \n(\nSpan\n*\n \nspan\n \n=\n \nlarge_\n.\nreturned\n.\nnext\n;\n\n       \nspan\n \n!=\n \nlarge_\n.\nreturned\n;\n\n       \nspan\n \n=\n \nspan-\nnext\n)\n \n{\n\n    \nif\n \n(span-\nlength\n \n=\n \nn)\n \n{\n\n      \nif\n \n((best\n \n==\n \nNULL)\n\n          \n||\n \n(span-\nlength\n \n \nbest-\nlength)\n\n          \n||\n \n((span-\nlength\n \n==\n \nbest-\nlength)\n \n \n(span-\nstart\n \n \nbest-\nstart)))\n \n{\n\n        \nbest\n \n=\n \nspan\n;\n\n        \nASSERT(best-\nlocation\n \n==\n \nSpan\n:\n:\nON_RETURNED_FREELIST\n);\n\n      \n}\n\n    \n}\n\n  \n}\n\n\n  \n//\n \nbest\n\u6765\u81ea\nnormal\n\n  \nif\n \n(\nbest\n \n==\n \nbestNormal\n)\n \n{\n\n    \nreturn\n \nbest\n \n==\n \nNULL\n \n?\n \nNULL\n \n:\n \nCarve\n(\nbest\n,\n \nn\n);\n\n  \n}\n\n\n  \n//\n \nbest\n \n\u6765\u81ea\nreturned\n,\n \n\u6211\u4eec\u5982\u679c\u53d6\u56de\nbest\n,\n\u9700\u8981\u5224\u65ad\nPH\n\u662f\u5426\u8fbe\u5230\u5bb9\u91cf\u4e0a\u9650\n.\n\n  \n//\n \n\u53ea\u662f\u68c0\u67e5\n.\n\n  \n//\n \ntrue\n \n\u4e3a\u672a\u8fbe\u5230\u4e0a\u9650\n.\n\u53c2\u6570\nfalse\n\u8868\u793a\n,\n\u8fbe\u5230\u4e0a\u9650\n,\n\u4e0d\u91ca\u653e\u5185\u5b58\n.\n\n  \nif\n \n(\nEnsureLimit\n(\nn\n,\n \nfalse\n))\n \n{\n\n    \nreturn\n \nCarve(best,\n \nn)\n;\n\n  \n}\n\n\n  \n//\n \n\u5bb9\u91cf\u4e0a\u9650\n,\n\u91ca\u653e\u5185\u5b58\n.\n\n  \n//\n \n\u91ca\u653e\u5185\u5b58\u7684\u903b\u8f91\u4e0e\nTC\n\u7684\u7c7b\u4f3c\n,\n\u4ece\u6bcf\u4e2a\nlist\n\u4e2d\u91ca\u653e\u4e00\u90e8\u5206\n.\n\n  \n//\n \n\u6700\u540e\u8c03\u7528\nTCMalloc_SystemRelease\n \n\u8fdb\u884c\nmadvise\n\u91ca\u653e\n.\n\n  \n//\n \n\u7cfb\u7edf\u5fc5\u987b\u652f\u6301\nmadvise\n,\n \n\u5426\u5219\ntcmalloc\n\u65e0\u6cd5\u5de5\u4f5c\n.\n\n  \nif\n \n(\nEnsureLimit\n(\nn\n,\n \ntrue\n))\n \n{\n\n    \n//\n \nbest\n \ncould\n \nhave\n \nbeen\n \ndestroyed\n \nby\n \ncoalescing.\n\n    \n//\n \nbestNormal\n \nis\n \nnot\n \na\n \nbest-fit,\n \nand\n \nit\n \ncould\n \nbe\n \ndestroyed\n \nas\n \nwell.\n\n    \n//\n \nWe\n \nretry,\n \nthe\n \nlimit\n \nis\n \nalready\n \nensured\n:\n\n    \nreturn\n \nAllocLarge\n(\nn\n);\n\n  \n}\n\n\n  \n//\n \nIf\n \nbestNormal\n \nexisted\n,\n \nEnsureLimit\n \nwould\n \nsucceeded\n:\n\n  \nASSERT\n(\nbestNormal\n \n==\n \nNULL\n);\n\n  \n//\n \nWe\n \nare\n \nnot\n \nallowed\n \nto\n \ntake\n \nbest\n \nfrom\n \nreturned\n \nlist\n.\n\n  \nreturn\n \nNULL\n;\n\n\n}\n\n\n\n\n\n\n```\n\n\n\u6211\u4eec\u6765\u770b\u4e0b\u5206\u5272\u7684\u884c\u4e3a.\u8ddfdlmalloc\u5206\u5272\u5185\u5b58\u4e00\u6837\u7684. \u90fd\u662f\u5c06\u5269\u4e0b\u7684\u91cd\u65b0\u63d2\u5165\u5230\u5bf9\u5e94\u7684\u5206\u533a\u4e2d.\n\n\n```\n    Span\n PageHeap::Carve(Span\n span, Length n) {\n      ASSERT(n \n 0);\n      ASSERT(span-\nlocation != Span::IN_USE);\n      const int old_location = span-\nlocation;\n      // \u4ece\u94fe\u8868\u4e2d\u79fb\u9664.\n      RemoveFromFreeList(span);\n      span-\nlocation = Span::IN_USE;\n      Event(span, 'A', n);\n\n\n  const int extra = span-\nlength - n;\n  ASSERT(extra \n= 0);\n  if (extra \n 0) {\n    // \u5c06\u5269\u4f59\u90e8\u5206\u751f\u6210\u65b0\u7684span\n    Span* leftover = NewSpan(span-\nstart + n, extra);\n    leftover-\nlocation = old_location;\n    Event(leftover, \nS\n, extra);\n    RecordSpan(leftover);\n    // \u63d2\u5165\u5bf9\u5e94\u7684list\n    PrependToFreeList(leftover);\n    span-\nlength = n;\n    // \u5c06span\u7684\u5730\u5740\u533a\u57df\u548cspan\u7684\u5b88\u5730\u5740\u5728radix tree\u4e2d\u5bf9\u5e94\u8d77\u6765.\n    pagemap_.set(span-\nstart + n - 1, span);\n  }\n  ASSERT(Check());\n  return span;\n}\n\n\n\n\n\n```\n\n\n\u7136\u540e\u6211\u4eec\u770b\u4e0bGrowHeap, \u662f\u5982\u4f55\u4ece\u7cfb\u7edf\u83b7\u53d6\u5185\u5b58\u7684\n\n\n```\n    bool PageHeap::GrowHeap(Length n) {\n      ASSERT(kMaxPages \n= kMinSystemAlloc);\n      if (n \n kMaxValidPages) return false;\n      // \u5224\u65ad\u9700\u8981\u8bf7\u6c42\u7684page\u6570\u91cf.\n      Length ask = (n\nkMinSystemAlloc) ? n : static_cast\n(kMinSystemAlloc);\n      size_t actual_size;\n      void* ptr = NULL;\n\n\n  // \u786e\u5b9a\u6dfb\u52a0ask\u7684\u6570\u91cf\u540e,\u6ca1\u6709\u8fbe\u5230\u5bb9\u91cf\u8981\u6c42\n  if (EnsureLimit(ask)) {\n      ptr = TCMalloc_SystemAlloc(ask \n kPageShift, \nactual_size, kPageSize);\n  }\n  if (ptr == NULL) {\n    if (n \n ask) {\n      // Try growing just \nn\n pages\n      ask = n;\n      if (EnsureLimit(ask)) {\n        ptr = TCMalloc_SystemAlloc(ask \n kPageShift, \nactual_size, kPageSize);\n      }\n    }\n    if (ptr == NULL) return false;\n  }\n  ask = actual_size \n kPageShift;\n  RecordGrowth(ask \n kPageShift);\n\n  // \u8bb0\u5f55\u7cfb\u7edf\u5df2\u7ecf\u5206\u914d\u7684page\u6570\u91cf.\n  uint64_t old_system_bytes = stats_.system_bytes;\n  stats_.system_bytes += (ask \n kPageShift);\n  const PageID p = reinterpret_cast\nuintptr_t\n(ptr) \n kPageShift;\n  ASSERT(p \n 0);\n\n  // If we have already a lot of pages allocated, just pre allocate a bunch of\n  // memory for the page map. This prevents fragmentation by pagemap metadata\n  // when a program keeps allocating and freeing large blocks.\n  if (old_system_bytes \n kPageMapBigAllocationThreshold\n      \n stats_.system_bytes \n= kPageMapBigAllocationThreshold) {\n    pagemap_.PreallocateMoreMemory();\n  }\n\n  // Make sure pagemap_ has entries for all of the new pages.\n  // Plus ensure one before and one after so coalescing code\n  // does not need bounds-checking.\n  // \u4e0e\u524d\u4e00\u4e2a\u5408\u5e76,\u5982\u679c\u524d\u4e00\u4e2a\u662f\u7a7a\u95f2\u7684\u8bdd.\n  if (pagemap_.Ensure(p-1, ask+2)) {\n    // Pretend the new area is allocated and then Delete() it to cause\n    // any necessary coalescing to occur.\n    Span* span = NewSpan(p, ask);\n    RecordSpan(span);\n    Delete(span);\n    ASSERT(Check());\n    return true;\n  } else {\n    // We could not allocate memory within \npagemap_\n\n    // TODO: Once we can return memory to the system, return the new span\n    return false;\n  }\n}\n\n\n\n\n\n```\n\n\n\u7136\u540e,\u5c31\u662f\u8ddf\u7cfb\u7edf\u4e92\u52a8\u7684 \nTCMalloc::SystemAlloc\n.\u5176\u4e2d\u6709\u4e24\u4e2aallocator, mmap\u548c\nsbrk.\u5b83\u4f1a\u904d\u5386\u6240\u6709\u7684allocs, \u76f4\u5230\u80fd\u6210\u529f\u5206\u914d\u5185\u5b58.\u5728\u6211\u4eec\u7684\u7cfb\u7edf\u4e0a,\u5148\u5c1d\u8bd5sbrk,\u7136\u540e\u624d\u662fmmap.\n\n\nvoid* DefaultSysAllocator::Alloc(size_t size, size_t *actual_size,\n                                     size_t alignment) {\n      for (int i = 0; i \n kMaxAllocators; i++) {\n        if (!failed_[i] \n allocs_[i] != NULL) {\n          void* result = allocs_[i]-\nAlloc(size, actual_size, alignment);\n          if (result != NULL) {\n            return result;\n          }\n          failed_[i] = true;\n        }\n      }\n      // After both failed, reset \"failed_\" to false so that a single failed\n      // allocation won't make the allocator never work again.\n      for (int i = 0; i \n kMaxAllocators; i++) {\n        failed_[i] = false;\n      }\n      return NULL;\n    }\n\n\n\n\n\n\nCC \u5411PH \u91ca\u653e\u5185\u5b58\n\n\nCC\u5411PH\u91ca\u653e\u5185\u5b58\u7684\u6761\u4ef6\u662f, slots\u6ee1,\u5e76\u4e14span\u4e2dobjects\u5168\u90e8\u56de\u6536 (refcount\u4e3a0). \u524d\u6587\u63d0\u5230,CC\u548cPH\u4e4b\u95f4\u79fb\u52a8\u7684\u5355\u4f4d\u65f6span, \u6240\u4ee5, \u91ca\u653e\u65f6\u9700\u8981\u7684\u53c2\u6570\u5c31\u662f span. PageHeap::Delete(Span * span). \u8be5\u51fd\u6570\u7684\u4f5c\u7528\u5c31\u662f\u5c06\u91ca\u653e\u7684\u5185\u5b58\u4e0e\u5176\u524d\u540e\u7a7a\u95f2\u5185\u5b58\u5408\u5e76,\u63d2\u5165size class.\n\n\n* \u9996\u5148,\u4ecePageMap\u83b7\u53d6\u5230\u76f8\u8fde\u7684span, \u5982\u679c\u5b83\u4eec\u90fd\u662f\u7a7a\u95f2\u7684,\u5219\u8fdb\u884c\u5408\u5e76.\n* \u5c06\u5408\u5e76\u540e\u7684\u65b0span\u6216\u8005\u4e0d\u9700\u8981\u5408\u5e76\u7684span\u63d2\u5165\u5bf9\u5e94\u7684free list\u4e2d.\n* PageHeap\u68c0\u67e5\u662f\u5426\u9700\u8981\u91ca\u653e\u5185\u5b58\u5230\u7cfb\u7edf.\u8fd9\u91cc\u91ca\u653e\u7684\u673a\u5236\u4e0eTC\u91ca\u653e\u7684\u673a\u5236\u6709\u70b9\u4e0d\u540c,\u4e0d\u4f1a\u9488\u5bf9\u67d0\u4e2a\u5206\u7c7b\u5927\u5c0f\u8fdb\u884c\u91ca\u653e,\u800c\u662f\u9488\u5bf9\u6574\u4e2aPH\u8fdb\u884c\u91ca\u653e.\n\n\n\n\n\nvoid PageHeap::Delete(Span* span) {\n      ASSERT(Check());\n      ASSERT(span-\nlocation == Span::IN_USE);\n      ASSERT(span-\nlength \n 0);\n      ASSERT(GetDescriptor(span-\nstart) == span);\n      ASSERT(GetDescriptor(span-\nstart + span-\nlength - 1) == span);\n      const Length n = span-\nlength;\n      span-\nsizeclass = 0;\n      span-\nsample = 0;\n      // \u8bbe\u7f6e\u4e3a\u5728normal list\n      span-\nlocation = Span::ON_NORMAL_FREELIST;\n      Event(span, 'D', span-\nlength);\n      // \u4e0e\u524d\u540e\u5408\u5e76\n      MergeIntoFreeList(span);  // Coalesces if possible\n      // \u5185\u5b58\u91ca\u653e\u7684\u903b\u8f91.\n      IncrementalScavenge(n);\n      ASSERT(Check());\n    }\n\n\n\u9996\u5148\u6211\u4eec\u770b\u4e0b\u5408\u5e76\u7684\u903b\u8f91. \u8ddfdlmalloc\u5176\u5b9e\u6ca1\u5dee. \u5373\u4f7f\u6839\u636espan\u7684\u83b7\u53d6\u5230\u5bf9\u5e94\u7684 pageID,\u7136\u540e\u67e5\u627e(pageID - 1) \u7684page\u548c(pageID +\uff11)\u7684page,\u5982\u679c\u90fd\u4e3a\u7a7a\u95f2,\u5408\u5e76.\n\n\n```\n    void PageHeap::MergeIntoFreeList(Span* span) {\n      ASSERT(span-\nlocation != Span::IN_USE);\n\n\n  const PageID p = span-\nstart;\n  const Length n = span-\nlength;\n  // GetDescriptor \u5c31\u662f\u901a\u8fc7pagemap, \u5c06pageID\u6620\u5c04\u6210span\u7684\u5730\u5740.\n  Span* prev = GetDescriptor(p-1);\n  // \u8fd9\u91cc\u7684location, \u4e0d\u662f\u8ddf\u5730\u5740\u76f8\u5173\u7684,\u800c\u662f\u8868\u793a\u8fd9\u4e2aspan\u5b58\u5728\u7684list(normal or returned)\n  // \u8fd9\u91cc\u662f\u4fdd\u8bc1, normal\u4e2d\u7684span\u4e0d\u4f1a\u548creturned\u4e2d\u7684span\u8fdb\u884c\u5408\u5e76.\n  if (prev != NULL \n prev-\nlocation == span-\nlocation) {\n    // Merge preceding span into this span\n    ASSERT(prev-\nstart + prev-\nlength == p);\n    const Length len = prev-\nlength;\n    // \u5c06\u4e0a\u4e00\u4e2aspan\u4ece\u961f\u5217\u79fb\u9664\n    RemoveFromFreeList(prev);\n    // \u5220\u9664span\u5bf9\u8c61\n    DeleteSpan(prev);\n    // \u5408\u5e76\u9996\u5730\u5740\n    span-\nstart -= len;\n    // \u5408\u5e76\u957f\u5ea6\n    span-\nlength += len;\n    // \u5c06\u65b0span\u7684pageID\u548cspan\u7684\u5730\u5740\u5728pagemap\u4e2d\u8fdb\u884c\u6620\u5c04\n    pagemap_.set(span-\nstart, span);\n    Event(span, \nL\n, len);\n  }\n  // same as above\n  Span* next = GetDescriptor(p+n);\n  if (next != NULL \n next-\nlocation == span-\nlocation) {\n    // Merge next span into this span\n    ASSERT(next-\nstart == p+n);\n    const Length len = next-\nlength;\n    RemoveFromFreeList(next);\n    DeleteSpan(next);\n    span-\nlength += len;\n    pagemap_.set(span-\nstart + span-\nlength - 1, span);\n    Event(span, \nR\n, len);\n  }\n\n  // \u91cd\u65b0\u5c06\u751f\u6210\u7684span\u63d2\u5165\u76f8\u5e94\u7684list\u4e2d.\n  PrependToFreeList(span);\n}\n\n\n\n\n\n```\n\n\n\u4e0b\u9762,\u6211\u4eec\u770b\u4e0b\u589e\u91cf\u91ca\u653e\u51fd\u6570IncrementalScavenge.\u5b83\u4e0d\u662f\u6bcf\u6b21\u90fd\u8fdb\u884c\u5185\u5b58\u91ca\u653e.\u5f53\u67d0\u6b64\u5185\u5b58\u672a\u91ca\u653e\u7684\u60c5\u51b5\u4e0b,\u4f1a\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4. \u6240\u4ee5,PH\u7684\u5bb9\u91cf\u662f\u5141\u8bb8\u8d85\u8fc7\u7684.\n\n\n```\n    void PageHeap::IncrementalScavenge(Length n) {\n      // Fast path; not yet time to release memory\n      // scaveng_counter_ \u662f\u4e00\u4e2a\u8d85\u65f6\u8ba1\u6570,\u5355\u4f4d\u4e3apage\u6570.\n      scavenge_counter_ -= n;\n      if (scavenge_counter_ \n= 0) return;  // Not yet time to scavenge\n\n\n  // \u56de\u6536\u7387, \u5982\u679c\u8fc7\u4f4e,\u5219\u4e0d\u56de\u6536\n  const double rate = FLAGS_tcmalloc_release_rate;\n  if (rate \n= 1e-6) {\n    // Tiny release rate means that releasing is disabled.\n    scavenge_counter_ = kDefaultReleaseDelay;\n    return;\n  }\n\n  // \u5c1d\u8bd5\u91ca\u653e\u4e00\u4e2a\u9875\u9762, \u5b9e\u9645\u4e0a\u662f\u4ee5span\u4e3a\u5355\u4f4d\u91ca\u653e. \u4e5f\u5c31\u662f\u8bf4,\n  // \u9875\u9762\u6570\u4f1a\u5bf9\u9f50\u5230\u4e00\u4e2aspan\u4e2d,\u7136\u540e\u91ca\u653e\u8be5span.\n  Length released_pages = ReleaseAtLeastNPages(1);\n\n  // \u5b9e\u9645\u6ca1\u5f52\u8fd8,\u5219\u7b49\u5f85\u9ed8\u8ba4\u957f\u5ea6.\n  // \u6ca1\u5f52\u8fd8\u7684\u539f\u56e0\u662f, \u7cfb\u7edf\u4e0d\u652f\u6301madvise\u6216\u8005\u5185\u5b58\u91ca\u653e\u5931\u8d25.\n  if (released_pages == 0) {\n    // Nothing to scavenge, delay for a while.\n    // kDefaultReleaseDelay = 1 \n 18; \u57fa\u672c\u7b49\u4e8e\u662f\u4e0d\u518d\u91ca\u653e\u5185\u5b58.\n    scavenge_counter_ = kDefaultReleaseDelay;\n  } else {\n    // Compute how long to wait until we return memory.\n    // FLAGS_tcmalloc_release_rate==1 means wait for 1000 pages\n    // after releasing one page.\n    // \u91ca\u653e\u6210\u529f,\u5219\u8ba1\u7b97\u4e0b\u4e00\u6b21\u7b49\u5f85\u65f6\u95f4.\n    const double mult = 1000.0 / rate;\n    double wait = mult * static_cast\ndouble\n(released_pages);\n    if (wait \n kMaxReleaseDelay) {\n      // Avoid overflow and bound to reasonable range.\n      wait = kMaxReleaseDelay;\n    }\n    scavenge_counter_ = static_cast\nint64_t\n(wait);\n  }\n}\n\n\n\n\n\n```\n\n\n\u6211\u4eec\u770b\u4e0bReleaseAtLeastNPages, \u8fd9\u4e1c\u897f\u91ca\u653e\u7684\u5355\u4f4d\u4e3aspan, \u6240\u4ee5,\u4f20\u5165\u7684\u53c2\u6570, page\u6570\u91cf,\u5b9e\u9645\u4e0a\u662f\u6307\u6700\u5c0f\u9700\u8981\u91ca\u653e\u957f\u5ea6,\u8fbe\u5230\u4e86\u6216\u8005\u6ca1\u6709\u53ef\u91ca\u653e\u7684span,\u5219\u505c\u6b62, \u5426\u5219,\u6301\u7eed\u91ca\u653e.\n\n\n```\n    Length PageHeap::ReleaseAtLeastNPages(Length num_pages) {\n      Length released_pages = 0;\n\n\n  // Round robin through the lists of free spans, releasing the last\n  // span in each list.  Stop after releasing at least num_pages\n  // or when there is nothing more to release.\n  while (released_pages \n num_pages \n stats_.free_bytes \n 0) {\n    for (int i = 0; i \n kMaxPages+1 \n released_pages \n num_pages;\n         i++, release_index_++) {\n      if (release_index_ \n kMaxPages) release_index_ = 0;\n      SpanList* slist = (release_index_ == kMaxPages) ?\n          \nlarge_ : \nfree_[release_index_];\n      if (!DLL_IsEmpty(\nslist-\nnormal)) {\n        // \u83b7\u53d6normal\u975e\u7a7a\u7684list, \u91ca\u653e\u5176\u6700\u540e\u4e00\u4e2aspan.\n        Length released_len = ReleaseLastNormalSpan(slist);\n        // Some systems do not support release\n        if (released_len == 0) return released_pages;\n        released_pages += released_len;\n      }\n    }\n  }\n  return released_pages;\n}\n\n\n\n\n\n```\n\n\n\u5728ReleaseLastNormalSpan\u4e2d,\u5c31\u662f\u53d6\u51falist\u4e2d\u6700\u540e\u4e00\u4e2aspan, \u8c03\u7528 TCMalloc::SystemRelease,\u91ca\u653e.\u800c TCMalloc::SystemRelease\u4e2d,\u5b9e\u9645\u8c03\u7528\u7684\u662fmadvise\u5b9e\u73b0.\n\n\n\n\n\n\n\n\n\n\n\u5927\u5bf9\u8c61\u5185\u5b58\u5206\u914d\n\n\n\u5728\u5206\u6790\u5c0f\u5185\u5b58\u65f6,\u5728\u8bf7\u6c42\u5185\u5b58\u6570 \n kMaxSize(256k)\u65f6, \u5219\u6267\u884c\u5927\u5185\u5b58\u5206\u914d. \u5927\u5185\u5b58\u7684\u5206\u914d\u67d0\u4e9b\u89c4\u5219\u4e0eCC\u5411PH\u7533\u8bf7\u5185\u5b58\u4e00\u6837.\n\n\n\n\n\u6839\u636e\u8bf7\u6c42\u5927\u5c0f,\u5bf9\u9f50\u5230PH\u7684\u5206\u7c7b\u4e2d\u6700\u63a5\u8fd1\u7684\u5927\u5c0f, \u83b7\u53d6\u5230 \nnum_pages\n.\n\n\n\u6267\u884c \nPageHeap::New(Length n)\n, \u4e0eCC\u5411PH\u7533\u8bf7\u5185\u5b58\u4e00\u6837.\n\n\n\n\n\u800c\u5185\u5b58\u91ca\u653e, \u6211\u4eec\u5728\u5c0f\u5185\u5b58\u65f6,\u5df2\u7ecf\u63d0\u5230. \u5e76\u4e14,\u5176\u884c\u4e3a\u8ddfCC\u5411PH\u91ca\u653e\u5185\u5b58\u903b\u8f91\u4e00\u6837.\n\n\n\n\n\u6839\u636e\u88ab\u91ca\u653e\u7684\u5185\u5b58, \u83b7\u53d6\u5176pageID.\n\n\n\u5982\u679cpageID\u5c5e\u4e8espan, \u5219\u8c03\u7528 \nPageHeap::Delete(Span* span)\n .\n\n\n\n\n\u7b97\u6cd5\n\n\n\u4ee3\u7801review\n\n\n\u603b\u7ed3\n\n\ntcmalloc\u4f18\u52bf\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u5c06tcmalloc\u4e2d\u7684\u6a21\u5757\u4e0edlmalloc\u4e2d\u4f5c\u6620\u5c04. CC \u770b\u6210dlmalloc\u4e2d\u5c0f\u5185\u5b58\u6a21\u5757, PH\u770b\u6210dlmalloc\u4e2d\u7684\u5927\u5185\u5b58\u6a21\u5757.\u5219tcmalloc\u4e2d\u591a\u4e86\u4e00\u4e2a\u65e0\u9501\u7684TC\u6a21\u5757.\u6240\u4ee5,\u5728\u5c0f\u5185\u5b58\u4e0a\u5b58\u5728\u7684\u4e00\u4e2a\u4f18\u52bf\u662f,\u53ef\u4ee5\u5728\u4e00\u5b9a\u8303\u56f4\u5185\u65e0\u9501\u83b7\u53d6\u548c\u91ca\u653e\u5185\u5b58.\n\n\n\u7b2c\u4e00\u6761\u4f18\u52bf\u7684\u524d\u63d0\u662f,TC\u7a7a\u95f4\u8db3\u591f. \u4f46\u5c31\u7b97\u7a7a\u95f4\u4e0d\u591f\u7684\u60c5\u51b5\u4e0b, TC\u5411CC\u8bf7\u6c42\u5185\u5b58, \u6700\u591a\u4e5f\u662f\u6bcf2\u6b21TC\u8bf7\u6c42\u9700\u8981\u52a0\u89e3\u4e00\u6b21\u9501.\u800cCC\u5411PH\u8bf7\u6c42\u5185\u5b58,\u5728\u5c0f\u5185\u5b58\u7684\u60c5\u51b5\u4e0b,\u6c38\u8fdc\u4e0d\u53ef\u80fd\u51fa\u73b0\u6bcf\u4e00\u6b21CC\u8bf7\u6c42\u89e6\u53d1\u4e00\u6b21PH\u8bf7\u6c42.\n\n\n\n\ntcmalloc\u52a3\u52bf\n\n\n\n\ntcmalloc\u7684\u52a3\u52bf,\u5f88\u660e\u663e,\u7531\u4e8e\u5b58\u57283\u7ea7\u5185\u5b58\u8bf7\u6c42,\u548c\u5927\u91cf\u5185\u5b58\u7684\u9884\u5206\u914d, \u5176\u521d\u59cb\u5316\u7684\u901f\u5ea6\u6bd4dlmalloc\u6162\u5f88\u591a.\n\n\n\u7531\u4e8e\u5bf9\u4e8e\u6bcf\u4e2a\u7ebf\u7a0b\u5b58\u5728TC, \u7a7a\u95f4\u6d6a\u8d39\u76f8\u5bf9dlmalloc\u4f1a\u591a\u4e00\u4e9b.\u867d\u7136\u5b58\u5728\u5404\u79cd\u7b97\u6cd5\u548c\u4f18\u5316\u4e86tcmalloc\u4e2d\u6570\u636e\u5757\u7684\u7ed3\u6784,\u4f46\u5728\u7ebf\u7a0b\u6570\u591a\u548c\u5185\u5b58\u8bf7\u6c42\u6b21\u6570\u5927\u7684\u60c5\u51b5\u4e0b,\u4f9d\u7136\u4e0d\u53ef\u907f\u514d\u5730\u5728TC\u4e2d\u6d6a\u8d39\u4e86\u5185\u5b58.\n\n\n\u5185\u5b58\u788e\u7247\u7387\u9ad8. \u5c5e\u4e8e\u4e2a\u4eba\u7406\u89e3.\u5728tcmalloc\u4e2d,\u53ea\u5bf9\u76f8\u8fde\u7684pages(spans)\u8fdb\u884c\u5408\u5e76,\u800cpages\u7684\u5355\u4f4d\u4e3a4K, \u76f8\u5f53\u4e8e,\u8fd9\u4e2apage\u4e2d\u53ea\u8981\u5b58\u5728\u88ab\u4f7f\u7528\u7684\u5185\u5b58,\u5c31\u6c38\u8fdc\u4e0d\u4f1a\u4e0e\u524d\u540e\u7684page\u8fdb\u884c\u5408\u5e76. \u800c\u5728dlmalloc\u4e2d,\u5b58\u5728\u8fb9\u754c\u6807\u8bb0\u6cd5,\u4efb\u4f55\u4e00\u4e2a\u91ca\u653e\u7684\u5185\u5b58\u5757(\u4efb\u610f\u5927\u5c0f),\u53ea\u8981\u5176\u76f8\u8fde\u5757\u6709\u7a7a\u95f2,\u5219\u8fdb\u884c\u5408\u5e76.\n\n\n\n\n\u5bf9mem\u6d4b\u8bd5\u7684\u6570\u636e\u603b\u7ed3\n\n\n\n\n\n\n\n\n\n\n\u5bf9\u56fe\u8868\u7684\u51e0\u4e2a\u8bf4\u660e:\n\n\n\n\n\u56fe\u8868\u662f\u5728\u7ebf\u7a0b\u6570\u4e3a4\u7684\u57fa\u7840\u4e0a\u505a\u7684\u6d4b\u8bd5. \u5e76\u4e14\u662f\u5728\u8fde\u7eed\u5206\u914d\u4e00\u5b9a\u6b21\u6570\u7684\u5185\u5b58\u540e\u518d\u8fde\u7eed\u91ca\u653e,\u6570\u636e\u53ea\u80fd\u4ece\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53cd\u6620\u4e86tcmalloc\u4e0edlmalloc\u7684\u6027\u80fd\u5dee\u5f02.\n\n\n\u672c\u6b21\u6d4b\u8bd5\u662f\u8ba1\u7b97\u51fa4\u4e2a\u7ebf\u7a0b\u7684\u5185\u5b58\u8bf7\u6c42\u548c\u91ca\u653e\u7684\u5e73\u5747\u65f6\u95f4, \u548c\u6807\u51c6\u504f\u5dee.\u7531\u4e8e\u56fe\u8868\u7ef4\u5ea6\u4e0d\u591f,\u53ea\u4f7f\u7528\u4e86\u5e73\u5747\u65f6\u95f4\u4f5c\u4e3a\u5b9e\u9645\u7684\u6027\u80fd\u6bd4\u8f83.\n\n\n\u6d4b\u8bd5\u65f6\u7684\u4e24\u4e2a\u53d8\u91cf\u5206\u522b\u4e3a, \u5355\u6b21\u7533\u8bf7\u5185\u5b58\u5927\u5c0f,\u548c\u7533\u8bf7\u6b21\u6570,\u6027\u80fd\u6307\u6807\u4e3a\u6267\u884c\u6240\u6709\u5185\u5b58\u7533\u8bf7\u91ca\u653e\u7684\u7ebf\u7a0b\u5e73\u5747\u65f6\u95f4.\n\n\n\u8be5\u6570\u636e\u4e0d\u5305\u542b\u5185\u5b58\u5206\u914d\u5668\u521d\u59cb\u5316\u7684\u65f6\u95f4(\u5373,\u7b2c\u4e00\u6b21\u5185\u5b58\u5206\u914d\u65f6\u95f4).\u5b9e\u9645\u4e0a,\u5185\u5b58\u5206\u914d\u5668\u521d\u59cb\u5316,tcmalloc\u82b1\u8d39\u7684\u65f6\u95f4\u662fdlmalloc\u591a.\u4f46\u53ea\u662f\u9488\u5bf9\u7b2c\u4e00\u6b21,\u6240\u4ee5,\u4e0d\u8bb0\u5f55\u5230\u56fe\u6807\u6570\u636e\u4e2d.\n\n\n\u4ee5\u4e0b\u6240\u6709\u63d0\u5230\u7684\u5185\u5b58\u7533\u8bf7\u6570,\u5982\u672a\u8bf4\u660e,\u90fd\u662f\u6307\u5355\u6b21\u5185\u5b58\u7533\u8bf7\u7684\u5927\u5c0f.\n\n\n\n\n\n\n\n\n\u5206\u6790:\n\n\n\n\ntcmalloc \u5185\u5b58\u5206\u914d\u6982\u8981:\n\n\ntcmalloc \u4e2d\u5b58\u5728\u5206\u7ea7\u8bf7\u6c42\u5185\u5b58\u7684\u673a\u5236. \u5206\u4e3a3\u7ea7,\u5206\u522b\u4e3aTC(ThreadCache), CC(Central Cache) \u548c PH(PageHeap)\n\n\nTC \u5411CC \u7533\u8bf7\u5185\u5b58, CC \u5411PH\u7533\u8bf7\u5185\u5b58. \u800c\u4ed6\u4eec\u4e4b\u95f4\u7684\u5185\u5b58\u662f\u6279\u91cf\u79fb\u52a8,\u4e00\u822c\u4e3a\u7533\u8bf7\u5185\u5b58\u5bf9\u9f50\u540e\u7684N\u500d\u8fdb\u884c\u79fb\u52a8.\n\n\nTC \u5b58\u5728\u7ebf\u7a0b\u5c40\u90e8\u7a7a\u95f4\u4e2d. \u5411TC\u7533\u8bf7\u5185\u5b58\u4e0d\u9700\u8981\u52a0\u89e3\u9501,\u5411CC\u548cPH \u7533\u8bf7\u5185\u5b58\u9700\u8981\u52a0\u89e3\u9501.\n\n\n\n\n\n\n\n\ndlmalloc \u5185\u5b58\u5206\u914d\u6982\u8981:\n\n\n\n\ndlmalloc\u6bcf\u6b21\u5185\u5b58\u7533\u8bf7\u90fd\u4f1a\u6267\u884c\u52a0\u89e3\u9501\u64cd\u4f5c.\n\n\n256byte\u4ee5\u4e0b\u7684\u5185\u5b58,\u4ece\u5c0f\u5185\u5b58\u5206\u914d.256byte\u4ee5\u4e0a\u7684\u4ece\u5927\u5185\u5b58\u5206\u914d.\u5728\u7a7a\u95f2\u5185\u5b58\u4e0d\u591f\u5e76\u4e14\u7533\u8bf7\u5185\u5b58\u5927\u4e8e256K\u7684,\u76f4\u63a5\u7531mmap\u5206\u914d.\n\n\n\n\n\n\n\n\n\u9996\u5148,\u4ece\u56fe\u8868\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u7ed3\u8bba,\u5728\u5355\u6b21\u5185\u5b5830K\u4ee5\u5185\u7684\u5185\u5b58\u5206\u914d\u548c\u91ca\u653e, \u6548\u7387\u4e0a,tcmalloc\u6bd4dlmalloc\u9ad8,\u5e76\u4e14\u57281K\u4ee5\u5185,\u7533\u8bf7\u6b21\u6570\u5927\u4e8e26\u6b21\u7684\u60c5\u51b5\u4e0b,\u751a\u81f3\u53ef\u4ee5\u8fbe\u523010\u500d\u6027\u80fd.\u539f\u56e0\u662f,\u5728tcmalloc\u4e2d,\u6240\u6709\u5c0f\u4e8e256k\u7684\u5185\u5b58\u90fd\u4f1a\u4f18\u5148\u4eceTC(\u907f\u514d\u52a0\u89e3\u9501\u64cd\u4f5c)\u5206\u914d, \u5728TC\u4e0d\u591f\u7684\u60c5\u51b5\u4e0b,\u5411CC\u7533\u8bf7 2 - 32 \u500d\u7684\u5185\u5b58\u6570\u91cf,\u5e76\u5b58\u653e\u5230TC\u4e2d,\u76f8\u5f53\u4e8e, N(N\n2)\u6b21\u5185\u5b58\u8bf7\u6c42\u624d\u6267\u884c1\u6b21\u52a0\u89e3\u9501.\u800cdlmalloc\u6bcf\u6b21\u5185\u5b58\u8bf7\u6c42\u90fd\u4f1a\u52a0\u89e3\u9501.\u6240\u4ee5,tcmalloc\u5728\u5c0f\u5185\u5b58\u5206\u914d\u4e0a,\u6027\u80fd\u9ad8\u4e8edlmalloc.\n\n\n\n\n\u800c\u572830K - 256K,\u5728\u67d0\u4e9b\u533a\u57df\u5185,tcmalloc\u7684\u6027\u80fd\u53cd\u800c\u4e0d\u5982dlmalloc. \u53ef\u80fd\u539f\u56e0\u5982\u4e0b: tcmalloc\u5728\u6bcf\u6b21\u5f80CC\u4e2d\u62f7\u8d1d\u6570\u636e\u65f6, \u6709\u4e2a\u5927\u5c0f\u4e0a\u9650\u4e3a64K,\u4e5f\u6709\u4e00\u4e2a\u6700\u5c0f\u4e0b\u9650\u4e3a2\u500d\u8bf7\u6c42\u5185\u5b58\u5bf9\u9f50\u540e\u7684\u5927\u5c0f. \u6240\u4ee5,\u5728\u8fd9\u4e2a\u533a\u95f4\u5185,\u76f8\u5f53\u4e8e\u6bcf2\u6b21\u5185\u5b58\u8bf7\u6c42\u90fd\u4f1a\u52a0\u89e3\u4e00\u6b21\u9501. \u800cCC\u4e5f\u6709\u5b58\u5728\u5185\u5b58\u4e0d\u8db3\u7684\u60c5\u51b5,\u4e5f\u4f1a\u51fa\u73b0\u52a0\u89e3\u9501,\u8fdb\u4e00\u6b65\u5411PH\u7533\u8bf7\u7a7a\u95f4. \u6240\u4ee5,\u5c31\u76f8\u5f53\u4e8e\u6bcf\u6b21\u5185\u5b58\u7533\u8bf7\u90fd\u4f1a\u52a0\u89e3\u9501.\u81f3\u4e8e,\u5728\u7533\u8bf7\u6b21\u6570\u8fbe\u5230\u4e00\u5b9a\u503c\u4e4b\u540e,tcmalloc\u7684\u6027\u80fd\u53c8\u9ad8\u4e8edlmalloc\u7684\u539f\u56e0\u662f:CC\u4e0ePH\u4e4b\u95f4\u7684\u5185\u5b58\u79fb\u52a8\u7684\u503c\u662f\u52a8\u6001\u4fee\u6b63\u7684,\u4e5f\u5c31\u662f\u8bf4,\u5728\u7533\u8bf7\u6b21\u6570\u8fbe\u5230\u4e00\u5b9a\u503c\u4e4b\u540e,CC\u5411PH\u7533\u8bf7\u7684\u5185\u5b58\u6570\u53d8\u5927,\u800c\u8bf7\u6c42\u6b21\u6570\u51cf\u5c11,\u5bfc\u81f4tcmalloc\u7684\u6027\u80fd\u518d\u6b21\u63d0\u5347.\n\n\n\n\n\n\n256K \u7684\u60c5\u51b5\u4e0b,tcmalloc\u7684\u6027\u80fd\u4e5f\u7565\u597d\u4e8edlmalloc. \u539f\u56e0\u672a\u77e5.\u5206\u6790\u5982\u4e0b. \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b,\u5bf9\u4e8edlmalloc\u800c\u8a00,\u5982\u679c\u6ca1\u6709\u8db3\u591f\u7a7a\u95f2\u5185\u5b58(\u672c\u6b21\u6d4b\u8bd5\u4e2d\u4e0d\u53ef\u80fd\u6709\u8db3\u591f\u7a7a\u95f2\u5185\u5b58), dlmalloc\u4f1a\u76f4\u63a5\u8c03\u7528mmap\u8fdb\u884c\u5185\u5b58\u5206\u914d, \u76f8\u5f53\u4e0e\u4e00\u6b21\u52a0\u89e3\u9501,\u4e00\u6b21\u7cfb\u7edf\u8c03\u7528\u7684\u65f6\u95f4.\u800ctcmalloc\u4f9d\u7136\u5411PH\u7533\u8bf7\u5185\u5b58,\u5f53\u7136PH\u4e5f\u4f1a\u76f4\u63a5\u4ece\u7cfb\u7edf\u5206\u914d.\n\n\n\n\n\n\n\n\n\n\n\n\n\u7ed3\u8bba: (\u4ee5\u4e0b\u7ed3\u8bba,\u53ea\u67091\u4ece\u56fe\u8868\u4e2d\u5f97\u51fa)\n\n\n\n\n\u5927\u91cf\u5c0f\u5185\u5b58\u8bf7\u6c42\u7684\u60c5\u51b5\u4e0b,tcmalloc\u6027\u80fd\u9ad8\u4e8edlmalloc, \u8282\u7701\u4e86\u52a0\u89e3\u9501\u7684\u65f6\u95f4.\n\n\n\u5982\u679c\u53ea\u5b58\u5728\u5c11\u91cf\u7684\u5185\u5b58\u8bf7\u6c42,\u5373\u4f7f\u662f\u5c0f\u5185\u5b58,\u4ece\u603b\u7684\u7533\u8bf7\u5185\u5b58\u65f6\u95f4\u4e0a,dlmalloc\u4f1a\u4f18\u4e8etcmalloc,\u539f\u56e0\u662f,\u5728\u7b2c\u4e00\u6b21\u5185\u5b58\u7533\u8bf7\u65f6,tcmalloc\u521d\u59cb\u5316\u7684\u65f6\u95f4\u662fdlmalloc\u7684\u8fd110\u500d.\n\n\n\u4ece\u4ee3\u7801\u4e2d\u5206\u6790,tcmalloc\u7684\u5185\u5b58\u5229\u7528\u7387\u5c0f\u4e8edlmalloc,\u867d\u7136,tcmalloc\u4f7f\u7528\u4e86\u5404\u79cd\u7b97\u6cd5\u6765\u63d0\u9ad8\u5185\u5b58\u5229\u7528\u7387,\u4f46\u4f9d\u7136\u65e0\u6cd5\u907f\u514d\u7ebf\u7a0b\u5c40\u90e8\u7a7a\u95f4\u4e2d\u7684\u5185\u5b58\u6d6a\u8d39.\n\n\n\n\n\n\n\n\n\u8be5\u6d4b\u8bd5\u7684\u5c40\u9650\u6027:\n\n\n\n\n\u7531\u4e8e\u8be5\u6d4b\u8bd5\u662f\u8fde\u7eed\u5185\u5b58\u7533\u8bf7\u4e4b\u540e,\u8fde\u7eed\u91ca\u653e,\u6240\u4ee5\u65e0\u6cd5\u6d4b\u8bd5\u7533\u8bf7\u5df2\u91ca\u653e\u5185\u5b58\u7684\u6548\u7387.\u4f46\u4ece\u4ee3\u7801\u4e0a\u548ctcmalloc/dlmalloc\u52a0\u89e3\u9501\u7684\u673a\u5236\u4e0a\u770b, tcmalloc \u4f9d\u7136\u4f1a\u4f18\u4e8e dlmalloc.\n\n\n\u65e0\u6cd5\u6d4b\u8bd5\u5bf9\u4e8e\u751f\u547d\u5468\u671f\u8d85\u957f\u7684\u8fdb\u7a0b,\u5185\u5b58\u7684\u788e\u7247\u7387.", 
            "title": "tcmalloc2.1 \u6d45\u6790"
        }, 
        {
            "location": "/2014-05-12-tcmalloc2.1\u6d45\u6790/#tcmalloc21", 
            "text": "\u6765\u6e90: https://pengzhangdev.github.io/tcmalloc2.1%E6%B5%85%E6%9E%90/", 
            "title": "tcmalloc2.1 \u6d45\u6790"
        }, 
        {
            "location": "/2014-05-12-tcmalloc2.1\u6d45\u6790/#_1", 
            "text": "tcmalloc(thread cached malloc) \u662f\u7531google\u4e3a\u5e76\u53d1\u7a0b\u5e8f\u800c\u5f00\u53d1\u7684\u5185\u5b58\u5206\u914d\u7ba1\u7406\u5668.tcmalloc\u81f4\u529b\u4e8e\u51cf\u5c11\u591a\u7ebf\u7a0b\u5185\u5b58\u8bf7\u6c42\u65f6\u5bf9\u9501\u7684\u7ade\u4e89, \u5728\u5bf9\u5c0f\u5185\u5b58\u7684\u7533\u8bf7\u65f6,\u53ef\u4ee5\u5728\u65e0\u9700\u9501\u7684\u60c5\u51b5\u4e0b\u9ad8\u6548\u83b7\u53d6\u5185\u5b58;\u800c\u5728\u83b7\u53d6\u5927\u5185\u5b58\u65f6,\u4f7f\u7528\u9ad8\u6821\u7684spinlocks.\u6b63\u56e0\u4e3atcmalloc\u662f\u5728\u7ebf\u7a0b\u5c40\u90e8\u7a7a\u95f4(TLS)\u9884\u5148\u5b58\u50a8\u90e8\u5206\u7a7a\u95f2\u5185\u5b58\u7528\u4e8e\u5206\u914d, \u5728\u7a0b\u5e8f\u521a\u542f\u52a8\u65f6,\u5176\u6240\u5360\u7528\u7684\u5185\u5b58\u4f1a\u6bd4dlmalloc\u6216\u5176\u4ed6\u7684\u5185\u5b58\u7ba1\u7406\u5668\u66f4\u5927,\u4f46\u5176\u589e\u957f\u901f\u5e45\u5ea6\u6bd4\u5176\u4ed6\u7ba1\u7406\u5668\u5c0f,\u6240\u4ee5,\u5728\u540e\u671f,\u5b9e\u9645\u5360\u7528\u5185\u5b58\u7a7a\u95f4\u4f1a\u76f8\u63a5\u8fd1.", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/2014-05-12-tcmalloc2.1\u6d45\u6790/#_2", 
            "text": "", 
            "title": "\u539f\u7406\u7b80\u6790"
        }, 
        {
            "location": "/2014-05-12-tcmalloc2.1\u6d45\u6790/#overview", 
            "text": "tcmalloc\u4e3a\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u5206\u914d\u4e00\u4e2a\u7ebf\u7a0b\u672c\u5730\u7f13\u5b58(Thread Cache, \u4ee5\u4e0b\u7b80\u79f0TC)\uff0e\u6240\u6709\u5c0f\u5bf9\u8c61( 256K)\u90fd\u4f1a\u4f18\u5148\u4eceThreadCache\u5206\u914d\uff0e\u800c\u5f53ThreadCache\u6ca1\u6709\u8db3\u591f\u7a7a\u95f2\u5185\u5b58\u65f6\uff0c\u5c31\u4f1a\u4eceCentralCache(\u4ee5\u4e0b\u7b80\u79f0CC)\u7533\u8bf7\u5185\u5b58.\u800c\u5f53Thread Cache\u5185\u5b58\u5bcc\u88d5\u65f6,\u4f1a\u5c06\u5185\u5b58\u8fd4\u56de\u7ed9Central Cache. Central Cache\u662f\u4ee5\u8fdb\u7a0b\u4e3a\u5355\u4f4d\u5b58\u5728,ThreadCache\u662f\u4ee5\u7ebf\u7a0b\u4e3a\u5355\u4f4d\u5b58\u5728.\u5bf9\u4e8e\u5927\u5185\u5b58( 256K), \u76f4\u63a5\u4ecePage Heap(\u4ee5\u4e0b\u7b80\u79f0PH)\u6309\u9875\u5bf9\u9f50(4K)\u7533\u8bf7.\u901a\u5e38\u60c5\u51b5\u4e0b,\u4e00\u8fde\u4e32\u7684\u9875\u9762(4k)\u53ef\u4ee5\u591a\u4e2a\u5c0f\u5185\u5b58\u5e8f\u5217,\u6bcf\u4e2a\u5e8f\u5217\u5143\u7d20\u7b49\u5927\u5c0f.TC, CC, PH \u7684\u5173\u7cfb\u662f, TC \u5411CC\u7533\u8bf7\u5185\u5b58\u5e76GC\u7ed9CC. CC \u5411PH \u7533\u8bf7\u5185\u5b58\u5e76GC\u7ed9PH.\u5728TC\u4e2d\u7684\u6570\u636e\u5355\u4f4d\u65f6\u5b57\u8282,\u6309\u5927\u5c0f\u4e3a\u5355\u4f4d\u5206\u7c7b,\u6bcf\u4e2a\u7c7b\u4e2d\u65f6\u94fe\u8868.\u5728PH\u4e2d\u7684\u6570\u636e\u5355\u4f4d\u65f6Page(4K),\u6309PageNum\u5206\u7c7b,\u6bcf\u4e2a\u5206\u7c7b\u5185\u90e8\u7528\u94fe\u8868\u7ba1\u7406,\u7b2cPageNum\u7c7b\u7684\u94fe\u8868\u7ed3\u70b9\u4e3aPageNum\u4e2aPage.\u5728CC\u4e2d\u5b58\u5728\u6700\u591a\u7684\u6570\u636e\u7ed3\u6784,\u5b83\u8fde\u63a5\u7740TC\u548cPH.\u5176\u5b58\u653e\u4e86\u6765\u81eaCC\u7684slot\u7ed3\u6784,\u548c\u6765\u81eaPH\u7684PH\u7684span\u7ed3\u6784.\u6570\u636e\u7684\u79fb\u52a8. \u6240\u6709\u7684\u6570\u636e\u4eceTC - CC - PH\u90fd\u662f\u6279\u91cf(batch)\u79fb\u52a8.\u4eceTC\u7533\u8bf7\u6216\u91ca\u653e\u7684\u5185\u5b58\u90fd\u4f1a\u4f18\u5148\u4eceCC\u7684slots\u6570\u7ec4\u5904\u7406.slots\u5b58\u653e\u7684\u5c31\u662f\u6700\u8fd1\u4eceTC\u91ca\u653e\u7684\u5185\u5b58,\u7528\u4e8e\u5feb\u901f\u7684TC\u5185\u5b58\u7533\u8bf7.\u5982\u679cslots\u6761\u4ef6\u4e0d\u6ee1\u8db3,\u5c31\u4f1a\u64cd\u4f5cCC\u4e2d\u7684spans\u5bf9\u8c61.\u6240\u6709\u79fb\u52a8\u7684\u6570\u636e\u7684\u5927\u5c0f\u548cTC\u4e2d\u7684\u6700\u5927\u5927\u5c0f\u90fd\u662f\u5728\u52a8\u6001\u8c03\u6574\u7684.", 
            "title": "overview"
        }, 
        {
            "location": "/2014-05-12-tcmalloc2.1\u6d45\u6790/#_3", 
            "text": "\u4e0a\u56fe\u4e3a\u5c0f\u5185\u5b58\u7ba1\u7406\u65f6\u7684sizemap\u5206\u7c7b\u7684\u793a\u610f\u56fe.\u5c0f\u5185\u5b58\u7684\u7ba1\u7406\u90fd\u5904\u4e8eThreadCache\u4e2d.\u6240\u6709\u5bf9\u4e8e256k\u4ee5\u4e0b\u7684\u5185\u5b58\u7533\u8bf7\u90fd\u662f\u4eceTC\u4e2d\u83b7\u53d6.\u4e2a\u4eba\u628a\u5c0f\u5185\u5b58\u5206\u914d,\u7406\u89e3\u4e3a3\u7ea7\u5185\u5b58\u8bf7\u6c42.\u8fdb\u7a0b\u5411TC\u8bf7\u6c42\u5185\u5b58, TC\u5411CC\u8bf7\u6c42\u5185\u5b58,CC\u5411PH\u8bf7\u6c42\u5185\u5b58.    \u8fdb\u7a0b\u5411TC\u8bf7\u6c42\u548c\u91ca\u653e\u5185\u5b58\u5185\u5b58   TC\u5185\u5b58\u7ba1\u7406\n  \u9996\u5148, \u5728\u8fdb\u7a0b\u7a7a\u95f4\u4e2d,\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7ebf\u7a0b,\u5b58\u5728\u4e0e\u5176\u5bf9\u5e94\u7684TC, \u6240\u6709\u7684TC\u88ab\u7528\u94fe\u8868\u4e32\u8054,\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u4e2a\u7ebf\u7a0b\u72ec\u6709.\u901a\u8fc7\u8fd9\u79cd,\u6bcf\u4e00\u4e2aTC\u90fd\u53ef\u4ee5\u770b\u5230\u4efb\u4f55\u4e00\u4e2aTC.\u5982\u4e0a\u56fe,\u5728TC\u4e2d\u5bf9\u5185\u5b58\u8fdb\u884c\u4e86\u5206\u7c7b\u7ba1\u7406,\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u7684\u5185\u5b58\u5927\u5c0f\u90fd\u4f1a\u5411\u4e0a\u53d6\u6574\u5230\u5bf9\u5e94\u5206\u7c7b,\u7136\u540e\u76f4\u63a5\u4ece\u5bf9\u5e94\u7684\u94fe\u8868\u4e2d\u53d6\u51fa\u4e00\u9879.   \u8fdb\u7a0b\u5411TC\u7533\u8bf7\u5185\u5b58   \u5c06\u8bf7\u6c42\u5185\u5b58\u5411\u4e0a\u5bf9\u5176\u5230size class.  \u4ece\u5bf9\u5e94size class\u4e2d\u67e5\u627e\u7a7a\u95f2\u5185\u5b58, \u5982\u679c\u5b58\u5728,\u76f4\u63a5\u8fd4\u56de.  \u5982\u679csize class\u4e2d\u65e0\u7a7a\u95f2\u5185\u5b58,\u5219\u89e6\u53d1\u5411CC\u8bf7\u6c42\u5185\u5b58\u7684\u673a\u5236.     \u8fdb\u7a0b\u5411TC\u91ca\u653e\u5185\u5b58   \u4ece\u91ca\u653e\u5185\u5b58\u7684\u5730\u5740,\u67e5\u627e\u5bf9\u5e94\u7684pageID.  \u5982\u679cpage ID \u5c5e\u4e8eTC, \u5e76\u4e14TC\u7684Heap\u5b58\u5728,\u5219\u91ca\u653e\u5230TC\u4e2d  \u5982\u679cPageID\u5c5e\u4e8eTC,\u800cTC\u7684Heap\u4e0d\u5b58\u5728(\u8de8\u7ebf\u7a0b\u5185\u5b58\u7533\u8bf7\u548c\u91ca\u653e, \u7533\u8bf7\u7ebf\u7a0b\u88ab\u9500\u6bc1\u7684\u60c5\u51b5\u4e0b),\u5219\u91ca\u653e\u5230CC\u4e2d,\u53c2\u8003TC\u5411CC\u91ca\u653e\u5185\u5b58  \u5982\u679cpageID\u5c5e\u4e8ePH\u4e2d(\u5927\u5185\u5b58), \u5219\u76f4\u63a5\u91ca\u653e\u5230PH\u4e2d.       TC\u5411CC\u8bf7\u6c42\u548c\u91ca\u653e\u5185\u5b58    CC\u7684\u5185\u5b58\u7ba1\u7406.\n    \u5728CC\u4e2d\u540c\u6837\u7ef4\u62a4\u4e86\u4e0eTC\u4e2d\u5bf9\u5e94\u7684\u5206\u7c7b\u7bb1\u5b50.\u6bcf\u4e2a\u7c7b\u522b\u4e2d\u662f\u4e00\u4e2aCentralFreeList\u7c7b. \u8be5\u7c7b\u4e2d\u7ef4\u62a4\u4e86\u4e00\u4e2aslots\u53cc\u5411\u94fe\u8868,\u7528\u4e8e\u5feb\u901f\u5206\u914d\u5185\u5b58\u7ed9CC\u5e76\u63a5\u6536\u91ca\u653e\u7684\u5185\u5b58, \u5176\u5185\u5b58\u7c92\u5ea6\u4e0eTC\u4e2d\u76f8\u540c.\u540c\u6837,\u8be5\u7c7b\u4e2d\u4e5f\u7ef4\u62a4\u4e86\u4e24\u4e2aspan\u53cc\u5411\u94fe\u8868,empty(\u4e0d\u5305\u542b\u7a7a\u95f2\u5757)\u548cnonempty(\u5305\u542b\u7a7a\u95f2\u5757).span\u4f1a\u5728\u8fd9\u4e24\u4e2a\u94fe\u8868\u4e2d\u79fb\u52a8.Span\u662f\u4e2a\u4ec0\u4e48\u4e1c\u897f\u5462?\u5b83\u662fPH\u5185\u5b58\u7ba1\u7406\u7684\u4e00\u4e2a\u7c92\u5ea6,\u5176\u8868\u793a\u7684\u5185\u5b58\u5927\u5c0f\u4e3apage(4K)\u7684\u500d\u6570.\u540c\u65f6,\u5b83\u5305\u542b\u4e86\u66f4\u5c0f\u7684\u7c92\u5ea6\u5355\u4f4dobjects. \u6240\u4ee5,\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u662fCC\u548cPH\u4e4b\u95f4\u79fb\u52a8\u7684\u5185\u5b58\u5355\u5143.\u6240\u4ee5,Span\u548cslots\u7684\u5173\u7cfb\u662f,spans\u53ef\u4ee5\u62c6\u5206\u6210slots  \u8fd9\u91cc,\u6211\u4eec\u8ba4\u4e3aspan\u5c5e\u4e8ePH\u7684,\u6240\u4ee5,\u8ddfspan\u7684\u76f8\u5173\u64cd\u4f5c\u6211\u4eec\u5728PH\u8bb2\u89e3.  ```  \n    class CentralFreeList {\n       // ...  private : \n    //... \n\n   // We keep linked lists of empty and non-empty spans. \n   size_t     size_class_ ;       // My size class \n   Span       empty_ ;            // Dummy header for list of empty spans \n   Span       nonempty_ ;         // Dummy header for list of non-empty spans \n   size_t     num_spans_ ;        // Number of spans in empty_ plus nonempty_ \n   size_t     counter_ ;          // Number of free objects in cache entry \n\n   // Here we reserve space for TCEntry cache slots.  Space is preallocated \n   // for the largest possible number of entries than any one size class may \n   // accumulate.  Not all size classes are allowed to accumulate \n   // kMaxNumTransferEntries, so there is some wasted space for those size \n   // classes. \n   TCEntry   tc_slots_ [ kMaxNumTransferEntries ]; \n\n   // ...  };  // Information kept for a span (a contiguous run of pages).  struct   Span   { \n   PageID          start ;            // Starting page number \n   Length          length ;           // Number of pages in span \n   Span *           next ;             // Used when in link list \n   Span *           prev ;             // Used when in link list \n   void *           objects ;          // Linked list of free objects \n   unsigned   int    refcount   :   16 ;    // Number of non-free objects // \u5f53refcount\u4e3a0, \u5219\u91ca\u653e\u7ed9PageHeap. \n   unsigned   int    sizeclass   :   8 ;    // Size-class for small objects (or 0)  // \u8fd9\u4e2a\u662fTC\u7684 SizeClass \u5206\u7c7b.\u56e0\u4e3a\u6bcf\u4e2a\u5206\u7c7b\u5bf9\u5e94\u4e00\u4e2aCentralFreeList,\u6bcf\u4e2aList\u5bf9\u5e941\u4e2aslots\u548c2\u4e2aspans. \u6240\u4ee5,spans\u4e2d\u7684objects\u90fd\u7edf\u4e00\u5c5e\u4e8e\u67d0\u4e2aSizeClass, \u8fd9\u91cc\u9700\u8981\u7ef4\u62a4\u8fd9\u4e2a\u6570\u636e\u5bf9object\u7684. \n   unsigned   int    location   :   2 ;     // Is the span on a freelist, and if so, which?  // \u5728empty/nonempty list? \n   unsigned   int    sample   :   1 ;       // Sampled object?  #undef SPAN_HISTORY  #ifdef SPAN_HISTORY \n   // For debugging, we can keep a log events per span \n   int   nexthistory ; \n   char   history [ 64 ]; \n   int   value [ 64 ];  #endif \n\n   // What freelist the span is on: IN_USE if on none, or normal or returned \n   enum   {   IN_USE ,   ON_NORMAL_FREELIST ,   ON_RETURNED_FREELIST   };  };   ```    TC\u5411CC\u8bf7\u6c42\u5185\u5b58\n    TC\u53ea\u6709\u5728\u5176\u5bf9\u5e94\u7684\u5206\u7c7b\u4e2d,\u4e0d\u5b58\u5728\u7a7a\u95f2\u5757\u65f6,\u624d\u4f1a\u5411CC\u7684\u5bf9\u5e94\u5206\u7c7b\u7533\u8bf7batch_size\u7684\u7a7a\u95f2\u5757.   \u6839\u636e\u5f53\u524d\u8bf7\u6c42\u7684\u5185\u5b58,\u627e\u5230\u5bf9\u5e94\u7684\u5206\u7c7b,\u548c\u8be5\u5206\u7c7b\u4e0b\u7684\u9ed8\u8ba4CC\u8bf7\u6c42\u7684\u5bf9\u8c61\u4e2a\u6570( batch_size ). \u5728\u8be5\u5206\u7c7bfree list\u7684\u6700\u5927\u957f\u5ea6\u548c batch_size \u4e2d\u53d6\u6700\u5c0f\u503c\u4e3a\u9700\u8981\u7533\u8bf7\u7684\u5bf9\u8c61\u4e2a\u6570( num_to_move ).  \u57fa\u4e8e\u6162\u542f\u52a8\u7b97\u6cd5,\u7f13\u6162\u589e\u52a0\u5f53\u524d\u5206\u7c7b\u7684free list\u5bb9\u91cf.  \u4eceCC\u7684\u5bf9\u5e94\u5206\u7c7b\u4e2d\u7684slots\u5bf9\u50cf,\u83b7\u53d6\u76f8\u5e94\u6570\u91cf\u7684objects.  \u5982\u679cslots\u4e0d\u6ee1\u8db3,\u5219\u4ecespans\u5bf9\u8c61\u4e2d\u83b7\u53d6\u76f8\u5e94\u7684objects.  \u5982\u679cspans\u4e0d\u6ee1\u8db3(nonempty\u4e3aNULL),\u5219\u89e6\u53d1CC\u5411PH\u8bf7\u6c42\u5185\u5b58.   ```\n    inline void* ThreadCache::Allocate(size_t size, size_t cl) {\n      // size \u5df2\u7ecf\u88ab\u5411\u4e0a\u5bf9\u9f50, cl\u4e3a\u5206\u7c7b\u7684\u7bb1\u53f7\n      ASSERT(size  = kMaxSize);\n      // kMaxSzie == 256 * 1024\n      ASSERT(size == Static::sizemap()- ByteSizeForClass(cl));\n      // sizemap() \u4e3a\u5206\u7c7b\u7684\u6570\u7ec4.\u6bcf\u4e2a\u6210\u5458\u4e3a\u94fe\u8868.\n      // ByteSizeForClass\u662f\u53d6\u51fa\u5bf9\u5e94\u7bb1\u53f7\u5185\u7684\u7406\u8bba\u5185\u5b58\u5927\u5c0f.    // \u4ee5\u4e0aassert \u68c0\u67e5,\u7406\u5e94\u5728\u8c03\u7528\u8be5\u51fd\u6570\u4e4b\u524d\u4fdd\u8bc1.\n\n  FreeList* list =  list_[cl];\n  if (list- empty()) {\n    return FetchFromCentralCache(cl, size);\n  }\n  size_ -= size;\n  return list- Pop();\n}  ```  \u6211\u4eec\u91cd\u70b9\u63cf\u8ff0\u4e0b,TC\u5411CC\u7533\u8bf7\u5185\u5b58\u7684\u8fc7\u7a0b.\u9996\u5148,\u6211\u4eec\u9700\u8981\u77e5\u9053,CC\u4e5f\u6309\u7167TC\u7684\u5185\u5b58\u5206\u7c7b\u65b9\u5f0f,\u5b58\u5728\u5404\u4e2a\u5206\u7c7b\u7684\u7bb1\u5b50.\u6240\u4ee5,\u5b9e\u9645\u4e0a\u662f\u5411CC\u4e2d\u7684\u5bf9\u5e94\u5206\u7c7b\u83b7\u53d6\u4e00\u8fde\u4e32\u7684\u7a7a\u95f2\u5185\u5b58.\u9996\u5148,\u6211\u4eec\u5f97\u786e\u5b9a,\u79fb\u52a8\u7684\u5185\u5b58\u6570\u91cf,\u4e5f\u5c31\u662f\u5bf9\u5e94\u5206\u7c7b\u7684\u5185\u5b58\u5757\u4e2a\u6570.\u9ed8\u8ba4\u60c5\u51b5\u4e0b, \u6709\u4e00\u4e2a\u89c4\u5219\u786e\u5b9a\u6bcf\u4e2a\u5206\u7c7b\u5bf9\u5e94\u7684\u8be5\u79fb\u52a8\u7684\u5185\u5b58\u6570\u91cf.\u4ee564K\u4e3a\u57fa\u51c6,\u9664\u4ee5\u5bf9\u5e94\u5206\u7c7b\u7684\u5185\u5b58\u5927\u5c0f,\u7b97\u51fa\u6765\u7684\u4e3a\u79fb\u52a8\u7684\u5185\u5b58\u6570\u91cf.\u4f46\u662f,\u5bf9\u4e8e\u4e00\u4e9b\u6781\u5c0f\u5185\u5b58,\u8fd9\u4e2a\u503c\u5c06\u5f88\u5927,\u6240\u4ee5,\u6211\u4eec\u9650\u5236\u6700\u5927\u4e3a32768\u4e2a,\u540c\u7406,\u5bf9\u4e8e\u6781\u5927\u5185\u5b58,\u8fd9\u4e2a\u503c =1,\u4f1a\u5bfc\u81f4\u8fd9\u4e2a\u5206\u7c7b\u7684\u5185\u5b58\u8bf7\u6c42\u6bcf\u6b21\u90fd\u5411CC\u8bf7\u6c42,\u6240\u4ee5,\u6211\u4eec\u8fd9\u53ea\u6700\u5c0f\u4e3a2,\u4fdd\u8bc1\u6700\u591a\u6bcf2\u6b21\u5411CC\u8bf7\u6c42\u4e00\u6b21\u5185\u5b58.\u4e0b\u9762\u4e3a,\u9ed8\u8ba4\u7684\u5206\u7c7b\u548c\u5bf9\u5e94\u7684\u79fb\u52a8\u6570\u91cf.         idx  class_size  num_to_move_objs  num_to_move_pages      1  8  8192  2    2  16  4096  2    3  32  2048  2    4  48  1365  2    5  64  1024  2    6  80  819  2    7  96  682  2    8  112  585  2    9  128  512  2    10  144  455  2    11  160  409  2    12  176  372  2    13  192  341  2    14  208  315  2    15  224  292  2    16  240  273  2    17  256  256  2    18  288  227  2    19  320  204  2    20  352  186  2    21  384  170  2    22  416  157  2    23  448  146  2    24  480  136  2    25  512  128  2    26  576  113  2    27  640  102  2    28  704  93  2    29  768  85  2    30  832  78  2    31  896  73  2    32  960  68  2    33  1024  64  2    34  1152  56  2    35  1280  51  2    36  1408  46  2    37  1536  42  2    38  1792  36  2    39  2048  32  2    40  2304  28  2    41  2560  25  2    42  2816  23  3    43  3072  21  2    44  3328  19  3    45  4096  16  2    46  4608  14  3    47  5120  12  2    48  6144  10  3    49  6656  9  5    50  8192  8  2    51  9216  7  5    52  10240  6  4    53  12288  5  3    54  13312  4  5    55  16384  4  2    56  20480  3  5    57  24576  2  3    58  26624  2  7    59  32768  2  4    60  40960  2  5    61  49152  2  6    62  57344  2  7    63  65536  2  8    64  73728  2  9    65  81920  2  10    66  90112  2  11    67  98304  2  12    68  106496  2  13    69  114688  2  14    70  122880  2  15    71  131072  2  16    72  139264  2  17    73  147456  2  18    74  155648  2  19    75  163840  2  20    76  172032  2  21    77  180224  2  22    78  188416  2  23    79  196608  2  24    80  204800  2  25    81  212992  2  26    82  221184  2  27    83  229376  2  28    84  237568  2  29    85  245760  2  30    86  253952  2  31    87  262144  2  32          \u4ee5\u4e0a\u53ea\u662f\u9ed8\u8ba4\u503c , \u8fd9\u4e2a\u503c\u662f\u4f1a\u968f\u7740\u5185\u5b58\u7533\u8bf7\u6b21\u6570\u7684\u589e\u52a0\u800c\u8c03\u6574 ,   google \u7ed9\u8fd9\u4e2a\u7b97\u6cd5\u53d6\u540d\u4e3a\u6162\u542f\u52a8 ( slow-start ) \u7b97\u6cd5 .   \u6211\u4eec\u6765\u770b\u4e0b . \u9996\u5148 ,   list \u6709\u4e2a\u6700\u5927\u503c , \u6211\u4eec\u80fd\u79fb\u52a8\u7684\u5927\u5c0f\u4e3a list \u6700\u5927\u957f\u5ea6\u548c\u9ed8\u8ba4\u4e2d\u7684\u6700\u5c0f\u503c .   \u4e3a\u4e86\u4fdd\u8bc1 , \u5728\u5927\u91cf\u7533\u8bf7\u65f6\u7684\u6548\u7387 ,   \u5728 max   length     \u9ed8\u8ba4\u503c\u65f6 , \u6211\u4eec\u6162\u6162\u589e\u957f max   length ,   \u9632\u6b62\u6d6a\u8d39\u7a7a\u95f4 , \u53c8\u80fd\u6709\u6548\u5730\u9010\u6e10\u63d0\u9ad8\u6548\u7387 .   \u5728 max   length     \u9ed8\u8ba4\u503c\u65f6 , \u8981\u4e48\u65f6\u5927\u91cf\u8bf7\u6c42 , \u8981\u4e48\u662f\u7531\u4e8e\u8bf7\u6c42\u7684\u5185\u5b58\u5f88\u5927 , \u5bfc\u81f4\u9ed8\u8ba4\u503c\u5c0f , \u6240\u4ee5 , \u8fd9\u4e2a\u65f6\u5019 , \u53ef\u4ee5\u6bcf\u6b21\u589e\u52a0\u9ed8\u8ba4\u503c\u5927\u5c0f . \u4f46\u6700\u5927\u79fb\u52a8\u6570\u4f9d\u7136\u65f6\u9ed8\u8ba4\u7684\u79fb\u52a8\u6570 . \n\n     ``` \n         //   slow-start \n                 ( setq   batch_size   num_to_move ) \n                 ( setq   list_length   get_list_length_max_length ) \n                 ( fetch-mem   ( min   batch_size   list_length )) \n                 ( set-list-max-length  \n                         ( if   (   list_length   batch_size ) \n                                (+   list_length   1 ) \n                               (+   list_length   batch_size ))) \n\n         //   Remove   some   objects   of   class   cl   from   central   cache   and   add   to   thread   heap . \n         //   On   success ,   return   the   first   object   for   immediate   use ;   otherwise   return   NULL . \n         void *   ThreadCache :: FetchFromCentralCache ( size_t   cl ,   size_t   byte_size )   { \n           FreeList*   list   =   list_ [ cl ] ; \n           ASSERT(list- empty()) ; \n           //   batch_size   \u4e3a\u9ed8\u8ba4\u7684\u79fb\u52a8\u6570\u91cf \n           const   int   batch_size   =   Static : : sizemap () - num_objects_to_move ( cl ); \n\n           //   \u8003\u8651\u5230list\u7684\u5927\u5c0f,\u6211\u4eec\u53d6list\u6700\u5927\u957f\u5ea6\u548cbatch_size\u4e2d\u7684\u6700\u5c0f\u503c. \n           const   int   num_to_move   =   min int (list- max_length(),   batch_size) ; \n           void   *start,   *end ; \n           //   \u4eceCC\u83b7\u53d6\u5185\u5b58,   \u53ea\u662f\u7b80\u5355\u7684\u94fe\u8868\u5220\u9664\u64cd\u4f5c \n           int   fetch_count   =   Static : : central_cache () [ cl ] . RemoveRange ( \n               start ,   end ,   num_to_move ); \n\n           ASSERT((start   ==   NULL)   ==   (fetch_count   ==   0)) ; \n           if   (--fetch_count   =   0)   { \n             //   size_\u4e3a\u83b7\u53d6\u5230\u7684\u5185\u5b58\u5927\u5c0f \n             size_   +=   byte_size   *   fetch_count ; \n             //   \u6dfb\u52a0\u5230\u5355\u5411\u94fe\u8868\u4e2d.\u94fe\u8868\u63d2\u5165\u64cd\u4f5c. \n             list- PushRange(fetch_count,   SLL_Next(start),   end) ; \n           } \n\n           //   \u5982\u679c list \u7684\u6700\u5927\u957f\u5ea6     \u9ed8\u8ba4\u79fb\u52a8\u957f\u5ea6 ,   \u5219 list \u6700\u5927\u957f\u5ea6 + 1 ,   \u6162\u6162\u9760\u8fd1\u9ed8\u8ba4\u79fb\u52a8\u957f\u5ea6 . \n           if   ( list- max_length ()     batch_size )   { \n             list- set_max_length(list- max_length()   +   1) ; \n           }   else   { \n             //   \u5426\u5219,\u6211\u4eec\u76f4\u63a5\u589e\u957fbatch_size   \u957f\u5ea6,   \u5f53\u7136\u4e0d\u5141\u8bb8\u65e0\u9650\u589e\u957f. \n             int   new_length   =   min int (list- max_length()   +   batch_size, \n                                       kMaxDynamicFreeListLength) ; \n             //   \u5fc5\u987b\u4fdd\u8bc1max_length   \u65f6batch_size\u7684\u6574\u6570\u500d,\u8fd9\u6837\u624d\u80fd\u505a\u5230\u5728N\u6b21batch_size\u7684\u79fb\u52a8\u6b63\u597d\u91ca\u653e\u5b8clist,   \u800c\u4e0d\u9700\u8981\u5206\u5272. \n             new_length   -=   new_length   %   batch_size ; \n             ASSERT(new_length   %   batch_size   ==   0) ; \n             list- set_max_length(new_length) ; \n           } \n           return   start ; \n         } \n     ``` \n\n     \u8fd9\u91cc\u5b9e\u9645\u4ece CC \u83b7\u53d6\u7a7a\u95f2\u7a7a\u95f4\u7684\u51fd\u6570\u662f RemoveRange \u51fd\u6570 . \u9996\u5148\u5e38\u8bd5\u76f4\u63a5\u4ece slots \u4e2d\u83b7\u53d6 , \u5982\u679c slots \u4e0d\u591f , \u5219\u518d\u4ece spans \u83b7\u53d6 . \n\n     ``` \n         int   CentralFreeList :: RemoveRange ( void   ** start ,   void   ** end ,   int   N )   { \n           ASSERT(N     0) ; \n           lock_.Lock() ; \n           if   (N   ==   Static : : sizemap () - num_objects_to_move ( size_class_ )   \n               used_slots_     0 )   { \n             int   slot   =   -- used_slots_ ; \n             ASSERT(slot   =   0) ; \n             TCEntry   *entry   =   tc_slots_ [ slot ] ; \n             *start   =   entry- head ; \n             *end   =   entry- tail ; \n             lock_.Unlock() ; \n             return   N ; \n           } \n\n           int   result   =   0 ; \n           void *   head   =   NULL ; \n           void *   tail   =   NULL ; \n           //   TODO :   Prefetch   multiple   TCEntries ? \n           tail   =   FetchFromSpansSafe (); \n           if   ( tail   !=   NULL )   { \n             SLL_SetNext(tail,   NULL) ; \n             head   =   tail ; \n             result   =   1 ; \n             while   (result     N)   { \n               void   *t   =   FetchFromSpans() ; \n               if   (!t)   break ; \n               SLL_Push( head,   t) ; \n               result++ ; \n             } \n           } \n           lock_ . Unlock (); \n           * start   =   head ; \n           * end   =   tail ; \n           return   result ; \n         } \n\n         int   SizeMap :: NumMoveSize ( size_t   size )   { \n           if   (size   ==   0)   return   0 ; \n\n           int   num   =   static_cast int (64.0   *   1024.0   /   size) ; \n           if   (num     2)   num   =   2 ; \n\n           if   (num     FLAGS_tcmalloc_transfer_num_objects) \n             num   =   FLAGS_tcmalloc_transfer_num_objects ; \n\n           return   num ; \n         }  ```  *   TC \u5411 CC \u91ca\u653e\u5185\u5b58 \n     TC \u5411 CC \u91ca\u653e\u5185\u5b58\u7684\u6761\u4ef6\u662f , \u5728\u8fdb\u7a0b\u5411 TC \u91ca\u653e\u5185\u5b58\u65f6 , TC \u5bf9\u5e94\u7684\u5206\u7c7b free   list \u7684   ` length     max_length `   \u6216\u8005   TC \u7684\u603b   ` size     max_size ` ,   \u5206\u522b\u89e6\u53d1 ListTooLong \u548c Scavenge \u5185\u5b58\u56de\u6536 . \n\n     ListTooLong   \u56de\u6536\u5185\u5b58\u89c4\u5219 : \n\n         *   \u5982\u679c   ` list   length     batch_size `   , \u5219\u6e05\u7a7a\u94fe\u8868 .   \u8fd9\u79cd\u60c5\u51b5\u4e0b , \u53ea\u6709\u975e\u9891\u7e41\u5185\u5b58\u8bf7\u6c42 , \u624d\u4f1a   ` length     batch_size ` ,   \u6240\u4ee5 ,   \u5728\u65f6\u95f4\u548c\u7a7a\u95f4\u4e0a , \u8003\u8651\u4f18\u5148\u7a7a\u95f4 , \u91ca\u653e\u5185\u5b58 . \n         *   \u5982\u679c   ` list   length     batch_size ` ,   \u5219\u91ca\u653e   ` batch_size `   \u4e2a object . \u5e76\u4e14\u51cf\u5c11 list \u7684 max   length ,   \u5c3d\u53ef\u80fd\u5229\u7528\u6162\u542f\u52a8 ,   \u51cf\u5c11\u7a7a\u95f4\u6d6a\u8d39\u7684\u95ee\u9898 . \n\n     Scavenge \u56de\u6536\u5185\u5b58\u89c4\u5219 : \n\n         *   \u904d\u5386 TC \u4e2d\u6240\u6709\u7684 free   list ,   \u5c06 ( lowwatermark     0 ) \u7684 list   \u91ca\u653e   ( lowwatermark   /   2   ) \u4e2a objects . \n         *   \u5982\u679c lowwatermark     0 \u7684   ` list   length     batch_size ` ,   \u5219\u66f4\u65b0` max_length `   \u4e3a   ` max_length   -   batch_size ` ,   \u5229\u7528\u6162\u542f\u52a8\u7b97\u6cd5 , \u51cf\u6162\u5185\u5b58\u589e\u957f\u7684\u901f\u5ea6 . \n         *   \u91cd\u7f6e\u6240\u6709 list \u7684   lowwatermark \u4e3a\u5f53\u524d\u7684 length .( lowwatermark \u4f1a\u5728 list \u7684 length \u51cf\u5c0f\u65f6\u66f4\u65b0 , \u59cb\u7ec8\u4fdd\u6301\u4e3a list \u6700\u5c0f\u7684 length ). \n         *   \u5077\u53d6\u5176\u4ed6 TC \u7684   ` max_length ` . \u7531\u4e8e\u5f53\u524d TC \u5bb9\u91cf\u4e0d\u591f , \u6240\u4ee5 , \u5077\u53d6\u5176\u4ed6 TC \u5bb9 \n         \u91cf , \u4fdd\u8bc1\u65e0\u7528\u7ebf\u7a0b\u4e0d\u4f1a\u6d6a\u8d39\u8fc7\u591a\u7a7a\u95f4 . \n\n     TC \u5bb9\u91cf\u5077\u53d6 : \n\n         *   \u5982\u679c\u5b58\u5728\u65e0\u4eba\u8ba4\u9886\u7684\u5185\u5b58 ( \u65e0\u4eba\u8ba4\u9886\u5185\u5b58 : \u7ebf\u7a0b\u7ed3\u675f\u540e ( TC \u7684 Heap \u88ab\u91ca\u653e ) \u7684\u5185\u5b58 ,   \u6700\u5927\u4e3a   8u   *   4     20 ), \u5219\u4f18\u5148\u4ece\u5176\u9886\u53d6\u9700\u8981\u7684\u5185\u5b58 , \u589e\u5927\u5f53\u524d\u7ebf\u7a0b\u7684\u5bb9\u91cf . \n         *   \u4e0a\u8ff0\u6761\u4ef6\u4e0d\u6ee1\u8db3 , \u5219\u904d\u5386\u6240\u6709\u7684 TC ,   \u5982\u679c\u67d0\u4e2a TC \u7684\u5bb9\u91cf     kMinThreadCacheSize   ( kMaxSize   *   2   =   512K )   ,   \u5219\u5077\u53d6\u5176\u5bb9\u91cf . \n\n     ``` cpp         \n         void   ThreadCache :: ListTooLong ( FreeList *   list ,   size_t   cl )   { \n           const   int   batch_size   =   Static : : sizemap () - num_objects_to_move ( cl ); \n           //   \u5982\u679clist\u957f\u5ea6\u5c0f\u4e8e   batch_size,   \u91ca\u653e\u6240\u6709,   \u5426\u5219,   \u91ca\u653ebatch_size\u4e2a\u5757. \n           ReleaseToCentralCache(list,   cl,   batch_size) ; \n\n           if   (list- max_length()     batch_size)   { \n             //   Slow   start   the   max_length   so   we   don t   overreserve. \n             list- set_max_length(list- max_length()   +   1) ; \n           }   else   if   ( list- max_length ()     batch_size )   { \n             //   If   we   consistently   go   over   max_length,   shrink   max_length.    If   we   don t \n             //   shrink   it,   some   amount   of   memory   will   always   stay   in   this   freelist. \n             list- set_length_overages(list- length_overages()   +   1) ; \n             if   (list- length_overages()     kMaxOverages)   { \n               ASSERT(list- max_length()     batch_size) ; \n               list- set_max_length(list- max_length()   -   batch_size) ; \n               list- set_length_overages(0) ; \n             } \n           } \n         } \n     ``` \n\n     ReleaseToCentralCache \u4e2d\u6267\u884c\u4e86 , \u5c06\u94fe\u8868\u8fd4\u56de\u7ed9 CC \u7684\u52a8\u4f5c , \u91cc\u9762\u6d89\u53ca\u5230\u4e86 slots \u7ed3\u6784 , \u6211\u4eec\u6765\u770b\u4e0b . \n\n     ``` \n         //   Remove   some   objects   of   class   cl   from   thread   heap   and   add   to   central   cache \n         void   ThreadCache :: ReleaseToCentralCache ( FreeList *   src ,   size_t   cl ,   int   N )   { \n           ASSERT(src   ==   list_ [ cl ] ) ; \n           if   (N     src- length())   N   =   src- length() ; \n           size_t   delta_bytes   =   N   *   Static : : sizemap () - ByteSizeForClass ( cl ); \n\n           //   We   return   prepackaged   chains   of   the   correct   size   to   the   central   cache. \n           //   TODO :   Use   the   same   format   internally   in   the   thread   caches ? \n           int   batch_size   =   Static :: sizemap () - num_objects_to_move ( cl ); \n           while   (N     batch_size)   { \n             void   *tail,   *head ; \n             src- PopRange(batch_size,   head,   tail) ; \n             Static : : central_cache () [ cl ] . InsertRange ( head ,   tail ,   batch_size ); \n             N   -=   batch_size ; \n           } \n           void   * tail ,   * head ; \n           src- PopRange ( N ,   head ,   tail ); \n           Static :: central_cache () [ cl ] . InsertRange ( head ,   tail ,   N ); \n           size_   - =   delta_bytes ; \n         } \n     ``` \n\n     \u8fd9\u4e2a\u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u4ece TC \u91ca\u653e\u5230 CC \u65f6\u8c03\u7528 . \n\n     ``` \n         void   CentralFreeList :: InsertRange ( void   * start ,   void   * end ,   int   N )   { \n           SpinLockHolder   h( lock_) ; \n           if   (N   ==   Static : : sizemap () - num_objects_to_move ( size_class_ )   \n             MakeCacheSpace ())   { \n             //   slots   \u662f\u5b58\u5728 CC   \u7684\u94fe\u8868\u4e2d\u7684\u7ed3\u6784 . \n             //   \u6bcf\u4e2a CC \u7684\u94fe\u8868\u8282\u70b9\u662f slots . \n             //   \u6bcf\u4e2a slots \u4e2d\u7684\u6570\u636e\u6b63\u597d\u662f TC \u4e2d\u79fb\u52a8\u6570\u636e\u7684\u5927\u5c0f . \n             int   slot   =   used_slots_ ++ ; \n             ASSERT(slot   =0) ; \n             ASSERT(slot     max_cache_size_) ; \n             TCEntry   *entry   =   tc_slots_ [ slot ] ; \n             entry- head   =   start ; \n             entry- tail   =   end ; \n             return ; \n           } \n           ReleaseListToSpans ( start ); \n         } \n     ``` \n\n     ``` \n         void   ThreadCache :: Scavenge ()   { \n           //   If   the   low-water   mark   for   the   free   list   is   L,   it   means   we   would \n           //   not   have   had   to   allocate   anything   from   the   central   cache   even   if \n           //   we   had   reduced   the   free   list   size   by   L.    We   aim   to   get   closer   to \n           //   that   situation   by   dropping   L/2   nodes   from   the   free   list.    This \n           //   may   not   release   much   memory,   but   if   so   we   will   call   scavenge   again \n           //   pretty   soon   and   the   low-water   marks   will   be   high   on   that   call. \n           //int64   start   =   CycleClock : : Now (); \n           for   (int   cl   =   0 ;   cl     kNumClasses ;   cl++)   { \n             FreeList*   list   =   list_ [ cl ] ; \n             const   int   lowmark   =   list- lowwatermark() ; \n             //   \u9996\u5148\u6e05\u7406   lowmark     0   \u7684.\u5c31\u7b97\u67d0\u4e9blowmark\u503c\u4e0d\u5bf9,   \u5728\u8be5\u8f6e\u7ed3\u675f\u540e,\u4f1a\u901a\u8fc7clear_lowwatermark()\u91cd\u7f6e,\u4e0b\u4e00\u6b21\u5c06\u4f1a\u6210\u529f\u91ca\u653e\u5927\u91cf\u5185\u5b58. \n             if   (lowmark     0)   { \n               const   int   drop   =   (lowmark     1)   ?   lowmark/2   :   1 ; \n               ReleaseToCentralCache(list,   cl,   drop) ; \n\n               //   Shrink   the   max   length   if   it   isn t   used.    Only   shrink   down   to \n               //   batch_size   --   if   the   thread   was   active   enough   to   get   the   max_length \n               //   above   batch_size,   it   will   likely   be   that   active   again.    If \n               //   max_length   shinks   below   batch_size,   the   thread   will   have   to \n               //   go   through   the   slow-start   behavior   again.    The   slow-start   is   useful \n               //   mainly   for   threads   that   stay   relatively   idle   for   their   entire \n               //   lifetime. \n               //   \u7531\u4e8e\u8be5TC\u5185\u5b58\u5feb\u6ee1\u4e86,\u6240\u4ee5,\u6211\u4eec\u51cf\u5c11batch_size,   \u51cf\u6162\u6162\u542f\u52a8\u7b97\u6cd5,\u4fdd\u8bc1\u7a7a\u95f4\u4e0d\u4f1a\u6d6a\u8d39\u592a\u591a. \n               const   int   batch_size   =   Static : : sizemap () - num_objects_to_move ( cl ); \n               if   (list- max_length()     batch_size)   { \n                 list- set_max_length( \n                     max int (list- max_length()   -   batch_size,   batch_size)) ;   //   \u51cf\u5c11\u540e\u548cbatch_size\u4e2d\u7684\u6700\u5927\u503c. \n               } \n             } \n             list- clear_lowwatermark ();    // \u6e05\u7406\u4f4e\u6c34\u5e73\u6807\u5fd7\u4f4d . \u5176\u5b9e\u5c31\u662f\u8bbe\u7f6e\u4e3a\u5f53\u524d\u957f\u5ea6 ... \n           } \n           //   \u65e0\u803b\u5730\u5077\u53d6\u5176\u4ed6\u7ebf\u7a0b\u7684\u5bb9\u91cf . \n           IncreaseCacheLimit (); \n         } \n     ``` \n\n     \u4ee5\u4e0a\u662f\u5185\u5b58\u91ca\u653e\u7684\u60c5\u51b5 , \u8fd8\u6709\u4e2a\u4fdd\u8bc1\u81ea\u5df1\u7ebf\u7a0b\u5bb9\u91cf\u5145\u88d5\u7684\u65e0\u803b\u505a\u6cd5\u662f , \u5077\u53d6\u5176\u4ed6\u7ebf\u7a0b\u7684\u5bb9\u91cf . \u5077\u53d6\u4e34\u8fd1 10 \u4e2a TC \u7684   1     16 \u5bb9\u91cf .   \u5f53\u7136 , \u5982\u679c\u5176\u5bb9\u91cf\u5c0f\u4e8e\u6700\u5c0f\u503c , \u5c31\u653e\u8fc7\u4e86\uff0e\u4e5f\u5c31\u662f\u8bf4 , \u5bf9\u4e8e\u5f88\u5c11\u542f\u52a8\u6162\u542f\u52a8\u7684\u7ebf\u7a0b , \u5176\u7ebf\u7a0b\u5bb9\u91cf\u5c06\u4f1a\u7531\u4e8e\u88ab\u5077\u53d6\u800c\u6301\u7eed\u51cf\u5c11 ,   \u6709\u6548\u63a7\u5236\u4e86\u8fd9\u79cd\u7ebf\u7a0b\u5185\u5b58\u7684\u6d6a\u8d39 , \u901a\u8fc7\u8fd9\u79cd\u673a\u5236 , \u6709\u6548\u5730\u4fdd\u8bc1\u8fdb\u7a0b\u95f4\u7a7a\u95f4\u4e0d\u4f1a\u6d6a\u8d39\u592a\u591a .   \u9700\u6c42\u5927\u7684\u7ebf\u7a0b\u53ef\u4ee5\u83b7\u5f97\u66f4\u591a\u7684\u5bb9\u91cf , \u800c\u9700\u6c42\u5c0f\u7684\u7ebf\u7a0b\u83b7\u53d6\u5c11\u7684\u5bb9\u91cf . \u5982\u679c\u5b58\u5728\u65e0\u4eba\u8ba4\u9886\u7684\u5185\u5b58 , \u54b1\u4eec\u5c31\u5077\u4e86 !! \u6240\u8c13\u65e0\u4eba\u8ba4\u9886\u7684\u5185\u5b58 , \u662f\u6307\u7ebf\u7a0b\u88ab\u91ca\u653e\u540e ,   \u5176\u91ca\u653e\u7684\u5185\u5b58 . \n\n     ``` cpp \n         void   ThreadCache :: IncreaseCacheLimitLocked ()   { \n           if   (unclaimed_cache_space_     0)   { \n             //   Possibly   make   unclaimed_cache_space_   negative. \n             unclaimed_cache_space_   -=   kStealAmount ; \n             max_size_   +=   kStealAmount ; \n             return ; \n           } \n           //   Don t   hold   pageheap_lock   too   long .    Try   to   steal   from   10   other \n           //   threads   before   giving   up .    The   i     10   condition   also   prevents   an \n           //   infinite   loop   in   case   none   of   the   existing   thread   heaps   are \n           //   suitable   places   to   steal   from . \n           for   ( int   i   =   0 ;   i     10 ; \n                ++ i ,   next_memory_steal_   =   next_memory_steal_- next_ )   { \n             //   Reached   the   end   of   the   linked   list.    Start   at   the   beginning. \n             if   (next_memory_steal_   ==   NULL)   { \n               ASSERT(thread_heaps_   !=   NULL) ; \n               //   next_memory_steal_   \u5728\u521d\u59cb\u5316\u65f6\u9ed8\u8ba4\u4e3aTC\u7684Heap\u7684\u94fe\u8868\u5934. \n               //   \u6240\u4ee5,\u8fd9\u4e2a\u5faa\u73af\u4f1a\u4e0d\u505c\u8f6e\u6d41\u5077\u53d6\u94fe\u8868\u91cc\u7684\u6240\u6709\u7ebf\u7a0b,\u5305\u62ec\u81ea\u5df1. \n               next_memory_steal_   =   thread_heaps_ ; \n             } \n             if   ( next_memory_steal_   ==   this   || \n                 next_memory_steal_- max_size_   =   kMinThreadCacheSize )   { \n               continue ; \n             } \n             next_memory_steal_- max_size_   - =   kStealAmount ; \n             max_size_   +=   kStealAmount ; \n\n             next_memory_steal_   =   next_memory_steal_- next_ ; \n             return ; \n           } \n         } \n     ```     CC\u5411PH \u7533\u8bf7\u548c\u91ca\u653e\u5185\u5b58    PH\u7684\u5185\u5b58\u7ba1\u7406  PH\u7684\u7ba1\u7406,\u8ddfTC\u4e00\u6837\u4e5f\u662f\u8fdb\u884c\u4e86\u5206\u7c7b,\u633a\u590d\u6742\u7684.\u9996\u5148, \u6240\u6709\u7684\u5185\u5b58,\u6620\u5c04\u5230\u8fdb\u7a0b\u7a7a\u95f4\u7684\u5185\u5b58,\u90fd\u4f1a\u5360\u636e\u7740PH\u4e2d\u7684\u67d0\u4e2alist. PH\u7684\u5185\u5b58\u662f\u76f4\u63a5\u4ece\u7cfb\u7edf\u7684sbrk\u6216\u8005mmap\u5206\u914d\u7684.\u540c\u6837, \u5927\u5185\u5b58\u4e5f\u662f\u4ecePH\u5206\u914d\u7684,\u6240\u4ee5,\u5b83\u5f88\u590d\u6742!  PH\u7684\u5206\u7c7b,\u662f\u6309page\u6570\u91cf\u8fdb\u884c.  free_  \u4ece  0 - kMaxPages , \u6bcf\u4e2a\u6570\u7ec4\u6210\u5458\u5305\u542b\u6570\u7ec4\u4e0b\u6807\u4e2apages, \u4e5f\u5c31\u662f  free_ \u5305\u542b1\u4e2apage\u957f\u5ea6\u7684Spans.\u6bcf\u4e2a\u6570\u7ec4\u6210\u5458\u5305\u542b2\u4e2a\u53cc\u5411\u73af\u5f62\u94fe\u8868normal\u548creturned.\u800c\u5927\u4e8ekMaxPages\u7684\u5f52\u5c5e\u5230large \u4e2d.  normal: \u5b58\u653e\u7a7a\u95f2\u7684span list.  returned: \u5b58\u653e\u901a\u8fc7madvise\u7684  MADV_FREE  \u65b9\u5f0f\u91ca\u653e\u7684span.\u524d\u63d0\u65f6\u7cfb\u7edf\u652f\u6301  MADV_FREE  \u6216  MADV_DONTNEED  \u5426\u5219\u5c31\u4e0d\u91ca\u653e\u5185\u5b58.  \u6240\u8c13madvise\u7684 MADV_FREE  \u91ca\u653e\u5185\u5b58, \u662f\u5185\u6838\u5b9e\u73b0\u7684\u4e00\u79cdlazy free\u65b9\u5f0f.\u5728process\u901a\u8fc7 madvise MADV_FREE  \u65b9\u5f0f\u901a\u77e5kernel, \u67d0\u6bb5pages\u4e2d\u7684\u6570\u636e\u4e0d\u518d\u4f7f\u7528\u4e86,\u5982\u679ckernel\u9700\u8981,\u53ef\u4ee5\u6e05\u695a.\u5982\u679cprocess\u5148\u4e8ekernel\u518d\u6b21\u8bbf\u95ee\u4e86\u8be5\u533a\u57df,process\u53ef\u4ee5\u5feb\u901f\u83b7\u53d6\u5230\u8be5\u4f4d\u7f6e\u7684\u539f\u5148\u6570\u636e. \u5982\u679ckernel\u5148\u4e8eprocess\u9700\u8981\u8be5pages,\u5219\u5f53process\u8bbf\u95ee\u65f6,\u4f1a\u83b7\u5f97\u88ab\u6e05\u7a7a\u7684pages.  \u5982\u679c\u6211\u4eec\u7cfb\u7edf\u4e0d\u652f\u6301 MADV_FREE , \u5219\u4f7f\u7528 MADV_DONTNEED .  MADV_DONTNEED \u4e0e MADV_FREE \u7684\u533a\u522b\u5728\u4e8e, MADV_DONTNEED \u7684\u60c5\u51b5\u4e0b,\u4e0d\u7ba1\u4ec0\u4e48\u60c5\u51b5\u4e0b\u518d\u6b21\u8bbf\u95ee\u8fd9\u6bb5pages, \u83b7\u5f97\u7684\u603b\u662f\u88ab\u6e050\u7684\u5185\u5b58\u533a\u57df.  more info about MADV_FREE and MADV_DONTNEED  \u5bf9\u4e8espan, span\u4e2dobjects\u7684\u5730\u5740\u548c span\u7684PageID\u4e4b\u95f4, \u5728PH\u4e2d\u5b58\u5728\u76f8\u5e94\u7684\u7b97\u6cd5\u8fdb\u884c\u6620\u5c04. PageMap \u662f\u4e00\u4e2a\u57fa\u6570\u6811(radix tree), \u80fd\u5c06\u67d0\u4e2a\u5730\u5740\u6620\u5c04\u5230\u5bf9\u5e94\u7684span. \u800cPageMapCache\u662fHashTable\u80fd\u5c06\u5bf9\u5e94\u7684PageId\u6620\u5c04\u5230\u5176size class.  ```\n    // We segregate spans of a given size into two circular linked\n    // lists: one for normal spans, and one for spans whose memory\n    // has been returned to the system.\n    struct SpanList {\n      Span        normal;    // \u5b58\u653e\u88ab\u6620\u5c04\u5230\u8fdb\u7a0b\u7a7a\u95f4\u7684spans..\n      Span        returned;  // \u5b58\u653e\u5df2\u7ecf\u88ab\u91ca\u653e\u56de\u7cfb\u7edf\u7684spans..(?)\n    };  // List of free spans of length  = kMaxPages\nSpanList large_; // \u6240\u6709  128 pages\u7684spans, \u90fd\u5f52\u5c5e\u5230\u8be5list\n\n// Array mapping from span length to a doubly linked list of free spans\nSpanList free_[kMaxPages]; // kMaxPages = 1   (20 - kPageShift) (= 128); \u4e5f\u5c31\u662f\u8bf4\u6709128\u4e2a\u5206\u7c7b.  ```    CC \u5411PH \u5185\u5b58\u7533\u8bf7  CC\u5411PH\u7533\u8bf7\u5185\u5b58\u7684\u6761\u4ef6\u662f,\u5f53\u524dCentralFreeList\u4e2d\u7a7a\u95f2span\u4e0d\u591f.\u6240\u6709\u5411PH\u7533\u8bf7\u7684\u5185\u5b58\u90fd\u662fPage\u7684N\u500d,\u6240\u4ee5,\u53c2\u6570\u662fN. PageHeap::New(Length n).  * \u9996\u5148, \u641c\u7d22\u6240\u6709  = N (N  = kMaxPages)\u7684free list, \u67e5\u627e\u6700\u7b26\u5408\u8981\u6c42\u7684span.\u5982\u679c\u627e\u5230,\u5219\u76f4\u63a5\u4ece\u53cc\u5411\u94fe\u8868\u4e2d\u5220\u9664. \u5982\u679cspan\u6bd4\u8981\u6c42\u7684\u5927,\u5219\u5207\u5206(Carve),\u5c06\u5269\u4e0b\u7684\u65b0\u7533\u8bf7\u4e00\u4e2aspan,\u653e\u5165\u5bf9\u5e94\u7684size class\u4e2d.\u8fd9\u79cd\u7b97\u6cd5\u67e5\u627e\u6700\u9002\u5408\u7684,\u4f46\u4f1a\u5bfc\u81f4\u5730\u5740\u4e0d\u8fde\u7eed.\n* \u5982\u679c\u6240\u6709\u7684free list\u4e2d\u6ca1\u6709\u5339\u914d\u7684,\u5219\u904d\u5386large list.\u7531\u4e8elarge list\u4e2d\u662f\u672a\u6392\u5e8f\u7684, \u6240\u4ee5, \u5728\u641c\u7d22\u65f6, \u9700\u8981\u4e0d\u505c\u5730\u8bb0\u5f55\u6700\u63a5\u8fd1\u8bf7\u6c42\u5927\u5c0f\u7684span. \u6240\u4ee5\u8be5\u7b97\u6cd5\u662fO(n), \u8d39\u65f6.\n* \u5982\u679c\u4ee5\u4e0a\u67e5\u627e\u90fd\u5931\u8d25,\u5219PH\u5c31\u5411\u7cfb\u7edf\u7533\u8bf7N pages \u5e76\u5b58\u5165\u5bf9\u5e94\u7684size class.\u7136\u540e\u4ece\u5934\u5f00\u59cb.\u5982\u679c\u7533\u8bf7\u5931\u8d25,\u5219\u8fd4\u56deNULL.  \u6211\u4eec\u5ef6\u7eed\u4e4b\u524dTC\u5411CC\u8bf7\u6c42\u5185\u5b58\u65f6\u7684\u60c5\u51b5,\u5728slots\u4e0d\u591f\u65f6,\u4f1a\u5411spans\u8bf7\u6c42.\u5982\u4e0b\u4ee3\u7801:  ```\n    void  CentralFreeList::FetchFromSpansSafe() {\n      // \u7b2c\u4e00\u6b21\u5c1d\u8bd5,\u5982\u679c\u5931\u8d25,\u5219\u610f\u5473\u7740spans\u7a7a\u95f4\u4e0d\u591f,\u9700\u8981\u5411PH\u7533\u8bf7\u5185\u5b58.\n      void  t = FetchFromSpans();\n      if (!t) {\n        // \u5411PH\u7533\u8bf7\u5185\u5b58,\u5e76\u5212\u5206\u83b7\u53d6\u7684spans,\u7528\u4e8e\u8be5\u5206\u7c7b\u7684slots.\n        Populate();\n        // \u518d\u6b21\u5c1d\u8bd5\u83b7\u53d6objects.\n        t = FetchFromSpans();\n      }\n      return t;\n    }  //   Fetch   memory   from   the   system   and   add   to   the   central   cache   freelist .  void   CentralFreeList :: Populate ()   { \n   //   Release   central   list   lock   while   operating   on   pageheap \n   lock_.Unlock() ; \n   //   \u83b7\u53d6\u8be5\u7c7b\u522b\u5bf9\u5e94\u7684\u9700\u8981\u4ecePH\u83b7\u53d6\u7684page\u6570\u91cf.\u5177\u4f53\u6570\u503c\u53ef\u4ee5\u53c2\u8003\u4e0a\u9762slots\u5206\u7c7b\u7684\u6570\u636e. \n   const   size_t   npages   =   Static : : sizemap () - class_to_pages ( size_class_ ); \n\n   Span*   span ; \n   { \n     SpinLockHolder   h( Static : : pageheap_lock ()); \n     //   \u4ecePH   \u83b7\u53d6npages \n     span   =   Static : : pageheap () - New ( npages ); \n     //   \u5c06\u8fd9\u4e2aspan\u4e0e\u8be5\u7c7b\u522b\u5728PH\u4e2d\u5bf9\u5e94\u8d77\u6765. \n     if   (span)   Static : : pageheap () - RegisterSizeClass ( span ,   size_class_ ); \n   } \n   if   ( span   ==   NULL )   { \n     Log(kLog,   __FILE__,   __LINE__, \n         tcmalloc :   allocation   failed ,   npages     kPageShift ); \n     lock_.Lock() ; \n     return ; \n   } \n   ASSERT ( span- length   ==   npages ); \n   //   Cache   sizeclass   info   eagerly .    Locking   is   not   necessary . \n   //   ( Instead   of   being   eager ,   we   could   just   replace   any   stale   info \n   //   about   this   span ,   but   that   seems   to   be   no   better   in   practice .) \n   for   ( int   i   =   0 ;   i     npages ;   i ++)   { \n     //   \u5c06pages\u7684\u4fe1\u606f\u548c\u5bf9\u5e94\u7684size_class   \u6ce8\u518c\u5230PH\u4e2d\u7684hash\u8868\u4e2d,   \u4e5f\u5c31\u662fPageMapCache \n     Static : : pageheap () - CacheSizeClass ( span - start   +   i ,   size_class_ ); \n   } \n\n   //   Split   the   block   into   pieces   and   add   to   the   free-list \n   //   TODO :   coloring   of   objects   to   avoid   cache   conflicts ? \n   //   \u5206\u5272\u8be5 span \u4e2d objects \u5230\u5f53\u524d\u7684 free-list \u4e2d . \n   void **   tail   =   span- objects ; \n   char *   ptr   =   reinterpret_cast char * ( span- start     kPageShift ); \n   char *   limit   =   ptr   +   ( npages     kPageShift ); \n   const   size_t   size   =   Static :: sizemap () - ByteSizeForClass ( size_class_ ); \n   int   num   =   0 ; \n   while   ( ptr   +   size   =   limit )   { \n     *tail   =   ptr ; \n     tail   =   reinterpret_cast void** (ptr) ; \n     ptr   +=   size ; \n     num++ ; \n   } \n   ASSERT ( ptr   =   limit ); \n   * tail   =   NULL ; \n   span- refcount   =   0 ;   //   No   sub-object   in   use   yet \n\n   //   Add   span   to   list   of   non-empty   spans \n   lock_ . Lock (); \n   //   \u5c06\u8be5 span \u6dfb\u52a0\u5230 noneempty \u5217\u8868\u4e2d . \n   tcmalloc :: DLL_Prepend ( nonempty_ ,   span ); \n   ++ num_spans_ ; \n   counter_   +=   num ;  }   ```  ```\n    void  CentralFreeList::FetchFromSpans() {\n      // \u68c0\u67e5nonempty list, \u5982\u679c\u4e3a\u7a7a,\u610f\u5473\u7740\u6ca1\u6709\u7a7a\u95f2\u7684span.\n      if (tcmalloc::DLL_IsEmpty( nonempty_)) return NULL;\n      Span  span = nonempty_.next;     ASSERT ( span- objects   !=   NULL ); \n   //   span \u7684 refcount   \u6307\u5411\u88ab\u4f7f\u7528\u6b21\u6570 .   \u6bcf\u4e00\u6b21\u88ab\u5206\u914d\u5185\u5b58 , \u5f15\u7528 ++,   \u91ca\u653e\u65f6\u5f15\u7528 -- .  \n   //   \u5728\u91ca\u653e\u65f6 , \u5982\u679c refcount \u4e3a 0 ,   \u5c31\u4f1a\u91ca\u653e\u7ed9 PH . \n   span- refcount ++; \n   void *   result   =   span- objects ; \n   //   \u52a0\u5165\u5230\u94fe\u8868 \n   span- objects   =   *( reinterpret_cast void ** ( result )); \n   if   ( span- objects   ==   NULL )   { \n     //   Move   to   empty   list \n     tcmalloc : : DLL_Remove ( span ); \n     tcmalloc : : DLL_Prepend ( empty_ ,   span ); \n     Event(span,   E ,   0) ; \n   } \n   counter_-- ; \n   return   result ;  }   ```  \u4e0b\u9762,\u6211\u4eec\u770b\u4e0bPH\u7684\u5185\u5b58\u5206\u914d, \u4e5f\u5c31\u662fPageHeap::New(Length n)\u7684\u903b\u8f91.  ```\n    Span* PageHeap::New(Length n) {\n      ASSERT(Check());\n      ASSERT(n   0);    // \u641c\u7d22span\u89c4\u5219.\n  Span* result = SearchFreeAndLargeLists(n);\n  if (result != NULL)\n    return result;\n\n  // ...\n\n  // \u589e\u957f\u5185\u5b58, \u5b9e\u9645\u662f\u6267\u884c\u7cfb\u7edf\u8c03\u7528\n  // Grow the heap and try again.\n  if (!GrowHeap(n)) {\n    ASSERT(Check());\n    return NULL;\n  }\n  return SearchFreeAndLargeLists(n);\n}  ```  ```\n    Span* PageHeap::SearchFreeAndLargeLists(Length n) {\n      ASSERT(Check());\n      ASSERT(n   0);     //   Find   first   size   =   n   that   has   a   non-empty   list \n   //   \u4ece n \u5f00\u59cb\u67e5\u627e , \u5bfb\u627e\u7b2c\u4e00\u4e2a\u975e\u7a7a\u7684\u94fe\u8868 . \n   for   ( Length   s   =   n ;   s     kMaxPages ;   s ++)   { \n     Span*   ll   =   free_ [ s ] .normal ; \n     //   If   we re   lucky,   ll   is   non-empty,   meaning   it   has   a   suitable   span. \n     if   (!DLL_IsEmpty(ll))   { \n       ASSERT(ll- next- location   ==   Span : : ON_NORMAL_FREELIST ); \n       //   \u627e\u5230,   \u7136\u540e,\u6211\u4eec\u5c1d\u8bd5\u5206\u5272. \n       return   Carve(ll- next,   n) ; \n     } \n     //   Alternatively ,   maybe   there s   a   usable   returned   span . \n     //   returned   \u662f\u901a\u8fc7 madvice \u91ca\u653e\u7684\u5185\u5b58 . \n     ll   =   free_ [ s ] . returned ; \n     if   (! DLL_IsEmpty ( ll ))   { \n       //   We   did   not   call   EnsureLimit   before,   to   avoid   releasing   the   span \n       //   that   will   be   taken   immediately   back. \n       //   Calling   EnsureLimit   here   is   not   very   expensive,   as   it   fails   only   if \n       //   there   is   no   more   normal   spans   (and   it   fails   efficiently) \n       //   or   SystemRelease   does   not   work   (there   is   probably   no   returned   spans). \n       if   (EnsureLimit(n))   { \n         //   ll   may   have   became   empty   due   to   coalescing \n         if   (!DLL_IsEmpty(ll))   { \n           ASSERT(ll- next- location   ==   Span : : ON_RETURNED_FREELIST ); \n           return   Carve(ll- next,   n) ; \n         } \n       } \n     } \n   } \n   //   No   luck   in   free   lists ,   our   last   chance   is   in   a   larger   class . \n   //   \u8fd9\u662f\u4e2a\u4e0d\u5e78\u7684\u6d88\u606f , \u6211\u4eec\u53ea\u80fd\u641c\u7d22\u6700\u540e\u4e00\u4e2a large_   \u94fe\u8868 . \n   return   AllocLarge ( n );    //   May   be   NULL  }   ```  \u7531\u4e8e large_  \u4e2d\u7684\u5bf9\u8c61\u6ca1\u6709\u6392\u5e8f,\u6240\u4ee5,\u9700\u8981\u904d\u5386\u6240\u6709,\u4e0d\u505c\u5730\u5339\u914d. \u8fd9\u4e2a\u64cd\u4f5c\u8d39\u65f6, \u4f46\u57fa\u672c\u4e0a\u903b\u8f91\u8fdb\u5230\u8fd9\u91cc\u7684\u51e0\u7387\u4e0d\u9ad8.\u8fd9\u91cc\u4f1a\u68c0\u67e5PH\u7684\u5bb9\u91cf,\u5e76\u6267\u884c\u53ef\u80fd\u9700\u8981\u7684\u5185\u5b58\u91ca\u653e.  ```\n    Span  PageHeap::AllocLarge(Length n) {\n      // find the best span (closest to n in size).\n      // The following loops implements address-ordered best-fit.\n      Span  best = NULL;     \u641c\u7d22 normal   list \n   for   ( Span *   span   =   large_ . normal . next ; \n        span   !=   large_ . normal ; \n        span   =   span- next )   { \n     if   (span- length   =   n)   { \n       if   ((best   ==   NULL) \n           ||   (span- length     best- length) \n           ||   ((span- length   ==   best- length)     (span- start     best- start)))   { \n         best   =   span ; \n         ASSERT(best- location   ==   Span : : ON_NORMAL_FREELIST ); \n       } \n     } \n   } \n\n   Span   * bestNormal   =   best ; \n\n   //   \u641c\u7d22 returned   list . \n   for   ( Span *   span   =   large_ . returned . next ; \n        span   !=   large_ . returned ; \n        span   =   span- next )   { \n     if   (span- length   =   n)   { \n       if   ((best   ==   NULL) \n           ||   (span- length     best- length) \n           ||   ((span- length   ==   best- length)     (span- start     best- start)))   { \n         best   =   span ; \n         ASSERT(best- location   ==   Span : : ON_RETURNED_FREELIST ); \n       } \n     } \n   } \n\n   //   best \u6765\u81ea normal \n   if   ( best   ==   bestNormal )   { \n     return   best   ==   NULL   ?   NULL   :   Carve ( best ,   n ); \n   } \n\n   //   best   \u6765\u81ea returned ,   \u6211\u4eec\u5982\u679c\u53d6\u56de best , \u9700\u8981\u5224\u65ad PH \u662f\u5426\u8fbe\u5230\u5bb9\u91cf\u4e0a\u9650 . \n   //   \u53ea\u662f\u68c0\u67e5 . \n   //   true   \u4e3a\u672a\u8fbe\u5230\u4e0a\u9650 . \u53c2\u6570 false \u8868\u793a , \u8fbe\u5230\u4e0a\u9650 , \u4e0d\u91ca\u653e\u5185\u5b58 . \n   if   ( EnsureLimit ( n ,   false ))   { \n     return   Carve(best,   n) ; \n   } \n\n   //   \u5bb9\u91cf\u4e0a\u9650 , \u91ca\u653e\u5185\u5b58 . \n   //   \u91ca\u653e\u5185\u5b58\u7684\u903b\u8f91\u4e0e TC \u7684\u7c7b\u4f3c , \u4ece\u6bcf\u4e2a list \u4e2d\u91ca\u653e\u4e00\u90e8\u5206 . \n   //   \u6700\u540e\u8c03\u7528 TCMalloc_SystemRelease   \u8fdb\u884c madvise \u91ca\u653e . \n   //   \u7cfb\u7edf\u5fc5\u987b\u652f\u6301 madvise ,   \u5426\u5219 tcmalloc \u65e0\u6cd5\u5de5\u4f5c . \n   if   ( EnsureLimit ( n ,   true ))   { \n     //   best   could   have   been   destroyed   by   coalescing. \n     //   bestNormal   is   not   a   best-fit,   and   it   could   be   destroyed   as   well. \n     //   We   retry,   the   limit   is   already   ensured : \n     return   AllocLarge ( n ); \n   } \n\n   //   If   bestNormal   existed ,   EnsureLimit   would   succeeded : \n   ASSERT ( bestNormal   ==   NULL ); \n   //   We   are   not   allowed   to   take   best   from   returned   list . \n   return   NULL ;  }   ```  \u6211\u4eec\u6765\u770b\u4e0b\u5206\u5272\u7684\u884c\u4e3a.\u8ddfdlmalloc\u5206\u5272\u5185\u5b58\u4e00\u6837\u7684. \u90fd\u662f\u5c06\u5269\u4e0b\u7684\u91cd\u65b0\u63d2\u5165\u5230\u5bf9\u5e94\u7684\u5206\u533a\u4e2d.  ```\n    Span  PageHeap::Carve(Span  span, Length n) {\n      ASSERT(n   0);\n      ASSERT(span- location != Span::IN_USE);\n      const int old_location = span- location;\n      // \u4ece\u94fe\u8868\u4e2d\u79fb\u9664.\n      RemoveFromFreeList(span);\n      span- location = Span::IN_USE;\n      Event(span, 'A', n);    const int extra = span- length - n;\n  ASSERT(extra  = 0);\n  if (extra   0) {\n    // \u5c06\u5269\u4f59\u90e8\u5206\u751f\u6210\u65b0\u7684span\n    Span* leftover = NewSpan(span- start + n, extra);\n    leftover- location = old_location;\n    Event(leftover,  S , extra);\n    RecordSpan(leftover);\n    // \u63d2\u5165\u5bf9\u5e94\u7684list\n    PrependToFreeList(leftover);\n    span- length = n;\n    // \u5c06span\u7684\u5730\u5740\u533a\u57df\u548cspan\u7684\u5b88\u5730\u5740\u5728radix tree\u4e2d\u5bf9\u5e94\u8d77\u6765.\n    pagemap_.set(span- start + n - 1, span);\n  }\n  ASSERT(Check());\n  return span;\n}  ```  \u7136\u540e\u6211\u4eec\u770b\u4e0bGrowHeap, \u662f\u5982\u4f55\u4ece\u7cfb\u7edf\u83b7\u53d6\u5185\u5b58\u7684  ```\n    bool PageHeap::GrowHeap(Length n) {\n      ASSERT(kMaxPages  = kMinSystemAlloc);\n      if (n   kMaxValidPages) return false;\n      // \u5224\u65ad\u9700\u8981\u8bf7\u6c42\u7684page\u6570\u91cf.\n      Length ask = (n kMinSystemAlloc) ? n : static_cast (kMinSystemAlloc);\n      size_t actual_size;\n      void* ptr = NULL;    // \u786e\u5b9a\u6dfb\u52a0ask\u7684\u6570\u91cf\u540e,\u6ca1\u6709\u8fbe\u5230\u5bb9\u91cf\u8981\u6c42\n  if (EnsureLimit(ask)) {\n      ptr = TCMalloc_SystemAlloc(ask   kPageShift,  actual_size, kPageSize);\n  }\n  if (ptr == NULL) {\n    if (n   ask) {\n      // Try growing just  n  pages\n      ask = n;\n      if (EnsureLimit(ask)) {\n        ptr = TCMalloc_SystemAlloc(ask   kPageShift,  actual_size, kPageSize);\n      }\n    }\n    if (ptr == NULL) return false;\n  }\n  ask = actual_size   kPageShift;\n  RecordGrowth(ask   kPageShift);\n\n  // \u8bb0\u5f55\u7cfb\u7edf\u5df2\u7ecf\u5206\u914d\u7684page\u6570\u91cf.\n  uint64_t old_system_bytes = stats_.system_bytes;\n  stats_.system_bytes += (ask   kPageShift);\n  const PageID p = reinterpret_cast uintptr_t (ptr)   kPageShift;\n  ASSERT(p   0);\n\n  // If we have already a lot of pages allocated, just pre allocate a bunch of\n  // memory for the page map. This prevents fragmentation by pagemap metadata\n  // when a program keeps allocating and freeing large blocks.\n  if (old_system_bytes   kPageMapBigAllocationThreshold\n        stats_.system_bytes  = kPageMapBigAllocationThreshold) {\n    pagemap_.PreallocateMoreMemory();\n  }\n\n  // Make sure pagemap_ has entries for all of the new pages.\n  // Plus ensure one before and one after so coalescing code\n  // does not need bounds-checking.\n  // \u4e0e\u524d\u4e00\u4e2a\u5408\u5e76,\u5982\u679c\u524d\u4e00\u4e2a\u662f\u7a7a\u95f2\u7684\u8bdd.\n  if (pagemap_.Ensure(p-1, ask+2)) {\n    // Pretend the new area is allocated and then Delete() it to cause\n    // any necessary coalescing to occur.\n    Span* span = NewSpan(p, ask);\n    RecordSpan(span);\n    Delete(span);\n    ASSERT(Check());\n    return true;\n  } else {\n    // We could not allocate memory within  pagemap_ \n    // TODO: Once we can return memory to the system, return the new span\n    return false;\n  }\n}  ```  \u7136\u540e,\u5c31\u662f\u8ddf\u7cfb\u7edf\u4e92\u52a8\u7684  TCMalloc::SystemAlloc .\u5176\u4e2d\u6709\u4e24\u4e2aallocator, mmap\u548c\nsbrk.\u5b83\u4f1a\u904d\u5386\u6240\u6709\u7684allocs, \u76f4\u5230\u80fd\u6210\u529f\u5206\u914d\u5185\u5b58.\u5728\u6211\u4eec\u7684\u7cfb\u7edf\u4e0a,\u5148\u5c1d\u8bd5sbrk,\u7136\u540e\u624d\u662fmmap.  void* DefaultSysAllocator::Alloc(size_t size, size_t *actual_size,\n                                     size_t alignment) {\n      for (int i = 0; i   kMaxAllocators; i++) {\n        if (!failed_[i]   allocs_[i] != NULL) {\n          void* result = allocs_[i]- Alloc(size, actual_size, alignment);\n          if (result != NULL) {\n            return result;\n          }\n          failed_[i] = true;\n        }\n      }\n      // After both failed, reset \"failed_\" to false so that a single failed\n      // allocation won't make the allocator never work again.\n      for (int i = 0; i   kMaxAllocators; i++) {\n        failed_[i] = false;\n      }\n      return NULL;\n    }    CC \u5411PH \u91ca\u653e\u5185\u5b58  CC\u5411PH\u91ca\u653e\u5185\u5b58\u7684\u6761\u4ef6\u662f, slots\u6ee1,\u5e76\u4e14span\u4e2dobjects\u5168\u90e8\u56de\u6536 (refcount\u4e3a0). \u524d\u6587\u63d0\u5230,CC\u548cPH\u4e4b\u95f4\u79fb\u52a8\u7684\u5355\u4f4d\u65f6span, \u6240\u4ee5, \u91ca\u653e\u65f6\u9700\u8981\u7684\u53c2\u6570\u5c31\u662f span. PageHeap::Delete(Span * span). \u8be5\u51fd\u6570\u7684\u4f5c\u7528\u5c31\u662f\u5c06\u91ca\u653e\u7684\u5185\u5b58\u4e0e\u5176\u524d\u540e\u7a7a\u95f2\u5185\u5b58\u5408\u5e76,\u63d2\u5165size class.  * \u9996\u5148,\u4ecePageMap\u83b7\u53d6\u5230\u76f8\u8fde\u7684span, \u5982\u679c\u5b83\u4eec\u90fd\u662f\u7a7a\u95f2\u7684,\u5219\u8fdb\u884c\u5408\u5e76.\n* \u5c06\u5408\u5e76\u540e\u7684\u65b0span\u6216\u8005\u4e0d\u9700\u8981\u5408\u5e76\u7684span\u63d2\u5165\u5bf9\u5e94\u7684free list\u4e2d.\n* PageHeap\u68c0\u67e5\u662f\u5426\u9700\u8981\u91ca\u653e\u5185\u5b58\u5230\u7cfb\u7edf.\u8fd9\u91cc\u91ca\u653e\u7684\u673a\u5236\u4e0eTC\u91ca\u653e\u7684\u673a\u5236\u6709\u70b9\u4e0d\u540c,\u4e0d\u4f1a\u9488\u5bf9\u67d0\u4e2a\u5206\u7c7b\u5927\u5c0f\u8fdb\u884c\u91ca\u653e,\u800c\u662f\u9488\u5bf9\u6574\u4e2aPH\u8fdb\u884c\u91ca\u653e.  void PageHeap::Delete(Span* span) {\n      ASSERT(Check());\n      ASSERT(span- location == Span::IN_USE);\n      ASSERT(span- length   0);\n      ASSERT(GetDescriptor(span- start) == span);\n      ASSERT(GetDescriptor(span- start + span- length - 1) == span);\n      const Length n = span- length;\n      span- sizeclass = 0;\n      span- sample = 0;\n      // \u8bbe\u7f6e\u4e3a\u5728normal list\n      span- location = Span::ON_NORMAL_FREELIST;\n      Event(span, 'D', span- length);\n      // \u4e0e\u524d\u540e\u5408\u5e76\n      MergeIntoFreeList(span);  // Coalesces if possible\n      // \u5185\u5b58\u91ca\u653e\u7684\u903b\u8f91.\n      IncrementalScavenge(n);\n      ASSERT(Check());\n    }  \u9996\u5148\u6211\u4eec\u770b\u4e0b\u5408\u5e76\u7684\u903b\u8f91. \u8ddfdlmalloc\u5176\u5b9e\u6ca1\u5dee. \u5373\u4f7f\u6839\u636espan\u7684\u83b7\u53d6\u5230\u5bf9\u5e94\u7684 pageID,\u7136\u540e\u67e5\u627e(pageID - 1) \u7684page\u548c(pageID +\uff11)\u7684page,\u5982\u679c\u90fd\u4e3a\u7a7a\u95f2,\u5408\u5e76.  ```\n    void PageHeap::MergeIntoFreeList(Span* span) {\n      ASSERT(span- location != Span::IN_USE);    const PageID p = span- start;\n  const Length n = span- length;\n  // GetDescriptor \u5c31\u662f\u901a\u8fc7pagemap, \u5c06pageID\u6620\u5c04\u6210span\u7684\u5730\u5740.\n  Span* prev = GetDescriptor(p-1);\n  // \u8fd9\u91cc\u7684location, \u4e0d\u662f\u8ddf\u5730\u5740\u76f8\u5173\u7684,\u800c\u662f\u8868\u793a\u8fd9\u4e2aspan\u5b58\u5728\u7684list(normal or returned)\n  // \u8fd9\u91cc\u662f\u4fdd\u8bc1, normal\u4e2d\u7684span\u4e0d\u4f1a\u548creturned\u4e2d\u7684span\u8fdb\u884c\u5408\u5e76.\n  if (prev != NULL   prev- location == span- location) {\n    // Merge preceding span into this span\n    ASSERT(prev- start + prev- length == p);\n    const Length len = prev- length;\n    // \u5c06\u4e0a\u4e00\u4e2aspan\u4ece\u961f\u5217\u79fb\u9664\n    RemoveFromFreeList(prev);\n    // \u5220\u9664span\u5bf9\u8c61\n    DeleteSpan(prev);\n    // \u5408\u5e76\u9996\u5730\u5740\n    span- start -= len;\n    // \u5408\u5e76\u957f\u5ea6\n    span- length += len;\n    // \u5c06\u65b0span\u7684pageID\u548cspan\u7684\u5730\u5740\u5728pagemap\u4e2d\u8fdb\u884c\u6620\u5c04\n    pagemap_.set(span- start, span);\n    Event(span,  L , len);\n  }\n  // same as above\n  Span* next = GetDescriptor(p+n);\n  if (next != NULL   next- location == span- location) {\n    // Merge next span into this span\n    ASSERT(next- start == p+n);\n    const Length len = next- length;\n    RemoveFromFreeList(next);\n    DeleteSpan(next);\n    span- length += len;\n    pagemap_.set(span- start + span- length - 1, span);\n    Event(span,  R , len);\n  }\n\n  // \u91cd\u65b0\u5c06\u751f\u6210\u7684span\u63d2\u5165\u76f8\u5e94\u7684list\u4e2d.\n  PrependToFreeList(span);\n}  ```  \u4e0b\u9762,\u6211\u4eec\u770b\u4e0b\u589e\u91cf\u91ca\u653e\u51fd\u6570IncrementalScavenge.\u5b83\u4e0d\u662f\u6bcf\u6b21\u90fd\u8fdb\u884c\u5185\u5b58\u91ca\u653e.\u5f53\u67d0\u6b64\u5185\u5b58\u672a\u91ca\u653e\u7684\u60c5\u51b5\u4e0b,\u4f1a\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4. \u6240\u4ee5,PH\u7684\u5bb9\u91cf\u662f\u5141\u8bb8\u8d85\u8fc7\u7684.  ```\n    void PageHeap::IncrementalScavenge(Length n) {\n      // Fast path; not yet time to release memory\n      // scaveng_counter_ \u662f\u4e00\u4e2a\u8d85\u65f6\u8ba1\u6570,\u5355\u4f4d\u4e3apage\u6570.\n      scavenge_counter_ -= n;\n      if (scavenge_counter_  = 0) return;  // Not yet time to scavenge    // \u56de\u6536\u7387, \u5982\u679c\u8fc7\u4f4e,\u5219\u4e0d\u56de\u6536\n  const double rate = FLAGS_tcmalloc_release_rate;\n  if (rate  = 1e-6) {\n    // Tiny release rate means that releasing is disabled.\n    scavenge_counter_ = kDefaultReleaseDelay;\n    return;\n  }\n\n  // \u5c1d\u8bd5\u91ca\u653e\u4e00\u4e2a\u9875\u9762, \u5b9e\u9645\u4e0a\u662f\u4ee5span\u4e3a\u5355\u4f4d\u91ca\u653e. \u4e5f\u5c31\u662f\u8bf4,\n  // \u9875\u9762\u6570\u4f1a\u5bf9\u9f50\u5230\u4e00\u4e2aspan\u4e2d,\u7136\u540e\u91ca\u653e\u8be5span.\n  Length released_pages = ReleaseAtLeastNPages(1);\n\n  // \u5b9e\u9645\u6ca1\u5f52\u8fd8,\u5219\u7b49\u5f85\u9ed8\u8ba4\u957f\u5ea6.\n  // \u6ca1\u5f52\u8fd8\u7684\u539f\u56e0\u662f, \u7cfb\u7edf\u4e0d\u652f\u6301madvise\u6216\u8005\u5185\u5b58\u91ca\u653e\u5931\u8d25.\n  if (released_pages == 0) {\n    // Nothing to scavenge, delay for a while.\n    // kDefaultReleaseDelay = 1   18; \u57fa\u672c\u7b49\u4e8e\u662f\u4e0d\u518d\u91ca\u653e\u5185\u5b58.\n    scavenge_counter_ = kDefaultReleaseDelay;\n  } else {\n    // Compute how long to wait until we return memory.\n    // FLAGS_tcmalloc_release_rate==1 means wait for 1000 pages\n    // after releasing one page.\n    // \u91ca\u653e\u6210\u529f,\u5219\u8ba1\u7b97\u4e0b\u4e00\u6b21\u7b49\u5f85\u65f6\u95f4.\n    const double mult = 1000.0 / rate;\n    double wait = mult * static_cast double (released_pages);\n    if (wait   kMaxReleaseDelay) {\n      // Avoid overflow and bound to reasonable range.\n      wait = kMaxReleaseDelay;\n    }\n    scavenge_counter_ = static_cast int64_t (wait);\n  }\n}  ```  \u6211\u4eec\u770b\u4e0bReleaseAtLeastNPages, \u8fd9\u4e1c\u897f\u91ca\u653e\u7684\u5355\u4f4d\u4e3aspan, \u6240\u4ee5,\u4f20\u5165\u7684\u53c2\u6570, page\u6570\u91cf,\u5b9e\u9645\u4e0a\u662f\u6307\u6700\u5c0f\u9700\u8981\u91ca\u653e\u957f\u5ea6,\u8fbe\u5230\u4e86\u6216\u8005\u6ca1\u6709\u53ef\u91ca\u653e\u7684span,\u5219\u505c\u6b62, \u5426\u5219,\u6301\u7eed\u91ca\u653e.  ```\n    Length PageHeap::ReleaseAtLeastNPages(Length num_pages) {\n      Length released_pages = 0;    // Round robin through the lists of free spans, releasing the last\n  // span in each list.  Stop after releasing at least num_pages\n  // or when there is nothing more to release.\n  while (released_pages   num_pages   stats_.free_bytes   0) {\n    for (int i = 0; i   kMaxPages+1   released_pages   num_pages;\n         i++, release_index_++) {\n      if (release_index_   kMaxPages) release_index_ = 0;\n      SpanList* slist = (release_index_ == kMaxPages) ?\n           large_ :  free_[release_index_];\n      if (!DLL_IsEmpty( slist- normal)) {\n        // \u83b7\u53d6normal\u975e\u7a7a\u7684list, \u91ca\u653e\u5176\u6700\u540e\u4e00\u4e2aspan.\n        Length released_len = ReleaseLastNormalSpan(slist);\n        // Some systems do not support release\n        if (released_len == 0) return released_pages;\n        released_pages += released_len;\n      }\n    }\n  }\n  return released_pages;\n}  ```  \u5728ReleaseLastNormalSpan\u4e2d,\u5c31\u662f\u53d6\u51falist\u4e2d\u6700\u540e\u4e00\u4e2aspan, \u8c03\u7528 TCMalloc::SystemRelease,\u91ca\u653e.\u800c TCMalloc::SystemRelease\u4e2d,\u5b9e\u9645\u8c03\u7528\u7684\u662fmadvise\u5b9e\u73b0.", 
            "title": "\u5c0f\u5bf9\u8c61\u5185\u5b58\u5206\u914d"
        }, 
        {
            "location": "/2014-05-12-tcmalloc2.1\u6d45\u6790/#_4", 
            "text": "\u5728\u5206\u6790\u5c0f\u5185\u5b58\u65f6,\u5728\u8bf7\u6c42\u5185\u5b58\u6570   kMaxSize(256k)\u65f6, \u5219\u6267\u884c\u5927\u5185\u5b58\u5206\u914d. \u5927\u5185\u5b58\u7684\u5206\u914d\u67d0\u4e9b\u89c4\u5219\u4e0eCC\u5411PH\u7533\u8bf7\u5185\u5b58\u4e00\u6837.   \u6839\u636e\u8bf7\u6c42\u5927\u5c0f,\u5bf9\u9f50\u5230PH\u7684\u5206\u7c7b\u4e2d\u6700\u63a5\u8fd1\u7684\u5927\u5c0f, \u83b7\u53d6\u5230  num_pages .  \u6267\u884c  PageHeap::New(Length n) , \u4e0eCC\u5411PH\u7533\u8bf7\u5185\u5b58\u4e00\u6837.   \u800c\u5185\u5b58\u91ca\u653e, \u6211\u4eec\u5728\u5c0f\u5185\u5b58\u65f6,\u5df2\u7ecf\u63d0\u5230. \u5e76\u4e14,\u5176\u884c\u4e3a\u8ddfCC\u5411PH\u91ca\u653e\u5185\u5b58\u903b\u8f91\u4e00\u6837.   \u6839\u636e\u88ab\u91ca\u653e\u7684\u5185\u5b58, \u83b7\u53d6\u5176pageID.  \u5982\u679cpageID\u5c5e\u4e8espan, \u5219\u8c03\u7528  PageHeap::Delete(Span* span)  .", 
            "title": "\u5927\u5bf9\u8c61\u5185\u5b58\u5206\u914d"
        }, 
        {
            "location": "/2014-05-12-tcmalloc2.1\u6d45\u6790/#_5", 
            "text": "", 
            "title": "\u7b97\u6cd5"
        }, 
        {
            "location": "/2014-05-12-tcmalloc2.1\u6d45\u6790/#review", 
            "text": "", 
            "title": "\u4ee3\u7801review"
        }, 
        {
            "location": "/2014-05-12-tcmalloc2.1\u6d45\u6790/#_6", 
            "text": "", 
            "title": "\u603b\u7ed3"
        }, 
        {
            "location": "/2014-05-12-tcmalloc2.1\u6d45\u6790/#tcmalloc", 
            "text": "\u6211\u4eec\u53ef\u4ee5\u5c06tcmalloc\u4e2d\u7684\u6a21\u5757\u4e0edlmalloc\u4e2d\u4f5c\u6620\u5c04. CC \u770b\u6210dlmalloc\u4e2d\u5c0f\u5185\u5b58\u6a21\u5757, PH\u770b\u6210dlmalloc\u4e2d\u7684\u5927\u5185\u5b58\u6a21\u5757.\u5219tcmalloc\u4e2d\u591a\u4e86\u4e00\u4e2a\u65e0\u9501\u7684TC\u6a21\u5757.\u6240\u4ee5,\u5728\u5c0f\u5185\u5b58\u4e0a\u5b58\u5728\u7684\u4e00\u4e2a\u4f18\u52bf\u662f,\u53ef\u4ee5\u5728\u4e00\u5b9a\u8303\u56f4\u5185\u65e0\u9501\u83b7\u53d6\u548c\u91ca\u653e\u5185\u5b58.  \u7b2c\u4e00\u6761\u4f18\u52bf\u7684\u524d\u63d0\u662f,TC\u7a7a\u95f4\u8db3\u591f. \u4f46\u5c31\u7b97\u7a7a\u95f4\u4e0d\u591f\u7684\u60c5\u51b5\u4e0b, TC\u5411CC\u8bf7\u6c42\u5185\u5b58, \u6700\u591a\u4e5f\u662f\u6bcf2\u6b21TC\u8bf7\u6c42\u9700\u8981\u52a0\u89e3\u4e00\u6b21\u9501.\u800cCC\u5411PH\u8bf7\u6c42\u5185\u5b58,\u5728\u5c0f\u5185\u5b58\u7684\u60c5\u51b5\u4e0b,\u6c38\u8fdc\u4e0d\u53ef\u80fd\u51fa\u73b0\u6bcf\u4e00\u6b21CC\u8bf7\u6c42\u89e6\u53d1\u4e00\u6b21PH\u8bf7\u6c42.", 
            "title": "tcmalloc\u4f18\u52bf"
        }, 
        {
            "location": "/2014-05-12-tcmalloc2.1\u6d45\u6790/#tcmalloc_1", 
            "text": "tcmalloc\u7684\u52a3\u52bf,\u5f88\u660e\u663e,\u7531\u4e8e\u5b58\u57283\u7ea7\u5185\u5b58\u8bf7\u6c42,\u548c\u5927\u91cf\u5185\u5b58\u7684\u9884\u5206\u914d, \u5176\u521d\u59cb\u5316\u7684\u901f\u5ea6\u6bd4dlmalloc\u6162\u5f88\u591a.  \u7531\u4e8e\u5bf9\u4e8e\u6bcf\u4e2a\u7ebf\u7a0b\u5b58\u5728TC, \u7a7a\u95f4\u6d6a\u8d39\u76f8\u5bf9dlmalloc\u4f1a\u591a\u4e00\u4e9b.\u867d\u7136\u5b58\u5728\u5404\u79cd\u7b97\u6cd5\u548c\u4f18\u5316\u4e86tcmalloc\u4e2d\u6570\u636e\u5757\u7684\u7ed3\u6784,\u4f46\u5728\u7ebf\u7a0b\u6570\u591a\u548c\u5185\u5b58\u8bf7\u6c42\u6b21\u6570\u5927\u7684\u60c5\u51b5\u4e0b,\u4f9d\u7136\u4e0d\u53ef\u907f\u514d\u5730\u5728TC\u4e2d\u6d6a\u8d39\u4e86\u5185\u5b58.  \u5185\u5b58\u788e\u7247\u7387\u9ad8. \u5c5e\u4e8e\u4e2a\u4eba\u7406\u89e3.\u5728tcmalloc\u4e2d,\u53ea\u5bf9\u76f8\u8fde\u7684pages(spans)\u8fdb\u884c\u5408\u5e76,\u800cpages\u7684\u5355\u4f4d\u4e3a4K, \u76f8\u5f53\u4e8e,\u8fd9\u4e2apage\u4e2d\u53ea\u8981\u5b58\u5728\u88ab\u4f7f\u7528\u7684\u5185\u5b58,\u5c31\u6c38\u8fdc\u4e0d\u4f1a\u4e0e\u524d\u540e\u7684page\u8fdb\u884c\u5408\u5e76. \u800c\u5728dlmalloc\u4e2d,\u5b58\u5728\u8fb9\u754c\u6807\u8bb0\u6cd5,\u4efb\u4f55\u4e00\u4e2a\u91ca\u653e\u7684\u5185\u5b58\u5757(\u4efb\u610f\u5927\u5c0f),\u53ea\u8981\u5176\u76f8\u8fde\u5757\u6709\u7a7a\u95f2,\u5219\u8fdb\u884c\u5408\u5e76.", 
            "title": "tcmalloc\u52a3\u52bf"
        }, 
        {
            "location": "/2014-05-12-tcmalloc2.1\u6d45\u6790/#mem", 
            "text": "\u5bf9\u56fe\u8868\u7684\u51e0\u4e2a\u8bf4\u660e:   \u56fe\u8868\u662f\u5728\u7ebf\u7a0b\u6570\u4e3a4\u7684\u57fa\u7840\u4e0a\u505a\u7684\u6d4b\u8bd5. \u5e76\u4e14\u662f\u5728\u8fde\u7eed\u5206\u914d\u4e00\u5b9a\u6b21\u6570\u7684\u5185\u5b58\u540e\u518d\u8fde\u7eed\u91ca\u653e,\u6570\u636e\u53ea\u80fd\u4ece\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53cd\u6620\u4e86tcmalloc\u4e0edlmalloc\u7684\u6027\u80fd\u5dee\u5f02.  \u672c\u6b21\u6d4b\u8bd5\u662f\u8ba1\u7b97\u51fa4\u4e2a\u7ebf\u7a0b\u7684\u5185\u5b58\u8bf7\u6c42\u548c\u91ca\u653e\u7684\u5e73\u5747\u65f6\u95f4, \u548c\u6807\u51c6\u504f\u5dee.\u7531\u4e8e\u56fe\u8868\u7ef4\u5ea6\u4e0d\u591f,\u53ea\u4f7f\u7528\u4e86\u5e73\u5747\u65f6\u95f4\u4f5c\u4e3a\u5b9e\u9645\u7684\u6027\u80fd\u6bd4\u8f83.  \u6d4b\u8bd5\u65f6\u7684\u4e24\u4e2a\u53d8\u91cf\u5206\u522b\u4e3a, \u5355\u6b21\u7533\u8bf7\u5185\u5b58\u5927\u5c0f,\u548c\u7533\u8bf7\u6b21\u6570,\u6027\u80fd\u6307\u6807\u4e3a\u6267\u884c\u6240\u6709\u5185\u5b58\u7533\u8bf7\u91ca\u653e\u7684\u7ebf\u7a0b\u5e73\u5747\u65f6\u95f4.  \u8be5\u6570\u636e\u4e0d\u5305\u542b\u5185\u5b58\u5206\u914d\u5668\u521d\u59cb\u5316\u7684\u65f6\u95f4(\u5373,\u7b2c\u4e00\u6b21\u5185\u5b58\u5206\u914d\u65f6\u95f4).\u5b9e\u9645\u4e0a,\u5185\u5b58\u5206\u914d\u5668\u521d\u59cb\u5316,tcmalloc\u82b1\u8d39\u7684\u65f6\u95f4\u662fdlmalloc\u591a.\u4f46\u53ea\u662f\u9488\u5bf9\u7b2c\u4e00\u6b21,\u6240\u4ee5,\u4e0d\u8bb0\u5f55\u5230\u56fe\u6807\u6570\u636e\u4e2d.  \u4ee5\u4e0b\u6240\u6709\u63d0\u5230\u7684\u5185\u5b58\u7533\u8bf7\u6570,\u5982\u672a\u8bf4\u660e,\u90fd\u662f\u6307\u5355\u6b21\u5185\u5b58\u7533\u8bf7\u7684\u5927\u5c0f.     \u5206\u6790:   tcmalloc \u5185\u5b58\u5206\u914d\u6982\u8981:  tcmalloc \u4e2d\u5b58\u5728\u5206\u7ea7\u8bf7\u6c42\u5185\u5b58\u7684\u673a\u5236. \u5206\u4e3a3\u7ea7,\u5206\u522b\u4e3aTC(ThreadCache), CC(Central Cache) \u548c PH(PageHeap)  TC \u5411CC \u7533\u8bf7\u5185\u5b58, CC \u5411PH\u7533\u8bf7\u5185\u5b58. \u800c\u4ed6\u4eec\u4e4b\u95f4\u7684\u5185\u5b58\u662f\u6279\u91cf\u79fb\u52a8,\u4e00\u822c\u4e3a\u7533\u8bf7\u5185\u5b58\u5bf9\u9f50\u540e\u7684N\u500d\u8fdb\u884c\u79fb\u52a8.  TC \u5b58\u5728\u7ebf\u7a0b\u5c40\u90e8\u7a7a\u95f4\u4e2d. \u5411TC\u7533\u8bf7\u5185\u5b58\u4e0d\u9700\u8981\u52a0\u89e3\u9501,\u5411CC\u548cPH \u7533\u8bf7\u5185\u5b58\u9700\u8981\u52a0\u89e3\u9501.     dlmalloc \u5185\u5b58\u5206\u914d\u6982\u8981:   dlmalloc\u6bcf\u6b21\u5185\u5b58\u7533\u8bf7\u90fd\u4f1a\u6267\u884c\u52a0\u89e3\u9501\u64cd\u4f5c.  256byte\u4ee5\u4e0b\u7684\u5185\u5b58,\u4ece\u5c0f\u5185\u5b58\u5206\u914d.256byte\u4ee5\u4e0a\u7684\u4ece\u5927\u5185\u5b58\u5206\u914d.\u5728\u7a7a\u95f2\u5185\u5b58\u4e0d\u591f\u5e76\u4e14\u7533\u8bf7\u5185\u5b58\u5927\u4e8e256K\u7684,\u76f4\u63a5\u7531mmap\u5206\u914d.     \u9996\u5148,\u4ece\u56fe\u8868\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u7ed3\u8bba,\u5728\u5355\u6b21\u5185\u5b5830K\u4ee5\u5185\u7684\u5185\u5b58\u5206\u914d\u548c\u91ca\u653e, \u6548\u7387\u4e0a,tcmalloc\u6bd4dlmalloc\u9ad8,\u5e76\u4e14\u57281K\u4ee5\u5185,\u7533\u8bf7\u6b21\u6570\u5927\u4e8e26\u6b21\u7684\u60c5\u51b5\u4e0b,\u751a\u81f3\u53ef\u4ee5\u8fbe\u523010\u500d\u6027\u80fd.\u539f\u56e0\u662f,\u5728tcmalloc\u4e2d,\u6240\u6709\u5c0f\u4e8e256k\u7684\u5185\u5b58\u90fd\u4f1a\u4f18\u5148\u4eceTC(\u907f\u514d\u52a0\u89e3\u9501\u64cd\u4f5c)\u5206\u914d, \u5728TC\u4e0d\u591f\u7684\u60c5\u51b5\u4e0b,\u5411CC\u7533\u8bf7 2 - 32 \u500d\u7684\u5185\u5b58\u6570\u91cf,\u5e76\u5b58\u653e\u5230TC\u4e2d,\u76f8\u5f53\u4e8e, N(N 2)\u6b21\u5185\u5b58\u8bf7\u6c42\u624d\u6267\u884c1\u6b21\u52a0\u89e3\u9501.\u800cdlmalloc\u6bcf\u6b21\u5185\u5b58\u8bf7\u6c42\u90fd\u4f1a\u52a0\u89e3\u9501.\u6240\u4ee5,tcmalloc\u5728\u5c0f\u5185\u5b58\u5206\u914d\u4e0a,\u6027\u80fd\u9ad8\u4e8edlmalloc.   \u800c\u572830K - 256K,\u5728\u67d0\u4e9b\u533a\u57df\u5185,tcmalloc\u7684\u6027\u80fd\u53cd\u800c\u4e0d\u5982dlmalloc. \u53ef\u80fd\u539f\u56e0\u5982\u4e0b: tcmalloc\u5728\u6bcf\u6b21\u5f80CC\u4e2d\u62f7\u8d1d\u6570\u636e\u65f6, \u6709\u4e2a\u5927\u5c0f\u4e0a\u9650\u4e3a64K,\u4e5f\u6709\u4e00\u4e2a\u6700\u5c0f\u4e0b\u9650\u4e3a2\u500d\u8bf7\u6c42\u5185\u5b58\u5bf9\u9f50\u540e\u7684\u5927\u5c0f. \u6240\u4ee5,\u5728\u8fd9\u4e2a\u533a\u95f4\u5185,\u76f8\u5f53\u4e8e\u6bcf2\u6b21\u5185\u5b58\u8bf7\u6c42\u90fd\u4f1a\u52a0\u89e3\u4e00\u6b21\u9501. \u800cCC\u4e5f\u6709\u5b58\u5728\u5185\u5b58\u4e0d\u8db3\u7684\u60c5\u51b5,\u4e5f\u4f1a\u51fa\u73b0\u52a0\u89e3\u9501,\u8fdb\u4e00\u6b65\u5411PH\u7533\u8bf7\u7a7a\u95f4. \u6240\u4ee5,\u5c31\u76f8\u5f53\u4e8e\u6bcf\u6b21\u5185\u5b58\u7533\u8bf7\u90fd\u4f1a\u52a0\u89e3\u9501.\u81f3\u4e8e,\u5728\u7533\u8bf7\u6b21\u6570\u8fbe\u5230\u4e00\u5b9a\u503c\u4e4b\u540e,tcmalloc\u7684\u6027\u80fd\u53c8\u9ad8\u4e8edlmalloc\u7684\u539f\u56e0\u662f:CC\u4e0ePH\u4e4b\u95f4\u7684\u5185\u5b58\u79fb\u52a8\u7684\u503c\u662f\u52a8\u6001\u4fee\u6b63\u7684,\u4e5f\u5c31\u662f\u8bf4,\u5728\u7533\u8bf7\u6b21\u6570\u8fbe\u5230\u4e00\u5b9a\u503c\u4e4b\u540e,CC\u5411PH\u7533\u8bf7\u7684\u5185\u5b58\u6570\u53d8\u5927,\u800c\u8bf7\u6c42\u6b21\u6570\u51cf\u5c11,\u5bfc\u81f4tcmalloc\u7684\u6027\u80fd\u518d\u6b21\u63d0\u5347.    256K \u7684\u60c5\u51b5\u4e0b,tcmalloc\u7684\u6027\u80fd\u4e5f\u7565\u597d\u4e8edlmalloc. \u539f\u56e0\u672a\u77e5.\u5206\u6790\u5982\u4e0b. \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b,\u5bf9\u4e8edlmalloc\u800c\u8a00,\u5982\u679c\u6ca1\u6709\u8db3\u591f\u7a7a\u95f2\u5185\u5b58(\u672c\u6b21\u6d4b\u8bd5\u4e2d\u4e0d\u53ef\u80fd\u6709\u8db3\u591f\u7a7a\u95f2\u5185\u5b58), dlmalloc\u4f1a\u76f4\u63a5\u8c03\u7528mmap\u8fdb\u884c\u5185\u5b58\u5206\u914d, \u76f8\u5f53\u4e0e\u4e00\u6b21\u52a0\u89e3\u9501,\u4e00\u6b21\u7cfb\u7edf\u8c03\u7528\u7684\u65f6\u95f4.\u800ctcmalloc\u4f9d\u7136\u5411PH\u7533\u8bf7\u5185\u5b58,\u5f53\u7136PH\u4e5f\u4f1a\u76f4\u63a5\u4ece\u7cfb\u7edf\u5206\u914d.       \u7ed3\u8bba: (\u4ee5\u4e0b\u7ed3\u8bba,\u53ea\u67091\u4ece\u56fe\u8868\u4e2d\u5f97\u51fa)   \u5927\u91cf\u5c0f\u5185\u5b58\u8bf7\u6c42\u7684\u60c5\u51b5\u4e0b,tcmalloc\u6027\u80fd\u9ad8\u4e8edlmalloc, \u8282\u7701\u4e86\u52a0\u89e3\u9501\u7684\u65f6\u95f4.  \u5982\u679c\u53ea\u5b58\u5728\u5c11\u91cf\u7684\u5185\u5b58\u8bf7\u6c42,\u5373\u4f7f\u662f\u5c0f\u5185\u5b58,\u4ece\u603b\u7684\u7533\u8bf7\u5185\u5b58\u65f6\u95f4\u4e0a,dlmalloc\u4f1a\u4f18\u4e8etcmalloc,\u539f\u56e0\u662f,\u5728\u7b2c\u4e00\u6b21\u5185\u5b58\u7533\u8bf7\u65f6,tcmalloc\u521d\u59cb\u5316\u7684\u65f6\u95f4\u662fdlmalloc\u7684\u8fd110\u500d.  \u4ece\u4ee3\u7801\u4e2d\u5206\u6790,tcmalloc\u7684\u5185\u5b58\u5229\u7528\u7387\u5c0f\u4e8edlmalloc,\u867d\u7136,tcmalloc\u4f7f\u7528\u4e86\u5404\u79cd\u7b97\u6cd5\u6765\u63d0\u9ad8\u5185\u5b58\u5229\u7528\u7387,\u4f46\u4f9d\u7136\u65e0\u6cd5\u907f\u514d\u7ebf\u7a0b\u5c40\u90e8\u7a7a\u95f4\u4e2d\u7684\u5185\u5b58\u6d6a\u8d39.     \u8be5\u6d4b\u8bd5\u7684\u5c40\u9650\u6027:   \u7531\u4e8e\u8be5\u6d4b\u8bd5\u662f\u8fde\u7eed\u5185\u5b58\u7533\u8bf7\u4e4b\u540e,\u8fde\u7eed\u91ca\u653e,\u6240\u4ee5\u65e0\u6cd5\u6d4b\u8bd5\u7533\u8bf7\u5df2\u91ca\u653e\u5185\u5b58\u7684\u6548\u7387.\u4f46\u4ece\u4ee3\u7801\u4e0a\u548ctcmalloc/dlmalloc\u52a0\u89e3\u9501\u7684\u673a\u5236\u4e0a\u770b, tcmalloc \u4f9d\u7136\u4f1a\u4f18\u4e8e dlmalloc.  \u65e0\u6cd5\u6d4b\u8bd5\u5bf9\u4e8e\u751f\u547d\u5468\u671f\u8d85\u957f\u7684\u8fdb\u7a0b,\u5185\u5b58\u7684\u788e\u7247\u7387.", 
            "title": "\u5bf9mem\u6d4b\u8bd5\u7684\u6570\u636e\u603b\u7ed3"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/", 
            "text": "dlmalloc\u6d45\u6790\n\n\n\n\nversion 1.0 by Werther Zhang @ 2014.03.15 Write done @WizNote\n\n\nVersion 1.1   by Werther Zhang @ 2014.03.20 Export to @Word\n\n\nVersion  1.2  by Werther Zhang @ 2016.07.02 Move to @leanote\n\n\n\n\ndlmalloc\u4ecb\u7ecd\n\n\ndlmalloc\u5728\u67d0\u4e9b\u7a0b\u5ea6\u4e0a\u8bf4\uff0c\u662f\u6700\u597d\u7684\u5185\u5b58\u7ba1\u7406\u5de5\u5177\u4e4b\u4e00\u3002\u5b83\u662f\u7531Doug Lea \u57281987\u5e74\u5f00\u59cb\u7f16\u5199\uff0c\u6240\u4ee5\u5927\u90e8\u5206\u4eba\u4f1a\u79f0\u547c\u5b83\u4e3aDoug Lea's Malloc\uff0c \u7b80\u79f0dlmalloc\u3002\n\n\n\u7b97\u6cd5\u6982\u89c8\n\n\ndlmalloc \u6839\u636e\u5185\u5b58\u7c92\u5ea6\u7684\u5927\u5c0f\u5206\u522b\u4f7f\u7528chunk\u548csegment\u8fdb\u884c\u7ba1\u7406\u3002Segment\u662f\u901a\u8fc7sbrk\u5206\u914d\uff0c\u7c7b\u4f3c\u8fdb\u7a0b\u7684\u6570\u636e\u6bb5\uff0c\u5c5e\u4e8e\u6781\u5c11\u9047\u5230\u7684\u60c5\u51b5\u3002Dlmalloc\u4e2d\u5927\u91cf\u5b58\u5728\u7684\u5185\u5b58\u5757\u662fchunk\u3002Chunk\u7684\u7ed3\u6784\u5982\u4e0b\u3002\n\n\n\u88ab\u7528\u6237\u4f7f\u7528\u7684chunk\u7ed3\u6784\u770b\u8d77\u6765\u50cf\u4e0b\u9762\u8fd9\u6837\uff08\u975e\u7cbe\u786e\u56fe\uff09\uff1a\n\n\n\n\n\u800c\u672a\u88ab\u4f7f\u7528\u7684chunk\u770b\u8d77\u6765\u5982\u4e0b\uff08\u975e\u7cbe\u786e\u56fe\uff09\uff1a\n\n\n\n\n\n\u5728\u865a\u62df\u5730\u5740\u4e0a\uff0cdlmalloc\u4f1a\u4fdd\u8bc1\u7a7a\u95f2\u7684\u5185\u5b58\u5757\u5b58\u5728\u201c\u5b64\u5c9b\u6548\u5e94\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4efb\u4e00\u5757\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u524d\u540e\u5fc5\u5b9a\u662f\u88ab\u4f7f\u7528\u7684\u5185\u5b58\u5757\u3002\u56e0\u4e3a\u5728free\u6216\u8005\u5176\u4ed6\u4efb\u4f55\u65f6\u5019\uff0cdlmalloc\u603b\u662f\u4f1a\u5408\u5e76\u7a7a\u95f2\u7684\u5185\u5b58\u5757\u3002\n\n\n\u5bf9 \u4e8echunk\uff0c\u6839\u636e\u5176\u5927\u5c0f\uff0c\u5206\u4e3a\u5927\u5185\u5b58\u548c\u5c0f\u5185\u5b58\u3002\u5c0f\u5185\u5b58\u753132\u4e2a\u53cc\u5411\u94fe\u8868\u901a\u8fc7\u5206\u7bb1\uff08\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u5bf9\u5e94\u4e00\u4e2a\u5927\u5c0f\uff0c\u6bcf\u4e2a\u7bb1\u5b50\u4e2d\u5b58\u653e\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff09\u8fdb\u884c\u7ba1\u7406\uff0c\u800c\u5927 \u5185\u5b58\u7edf\u4e00\u7531bitwise tries\u6811\u901a\u8fc7\u5206\u7bb1\uff08\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u5bf9\u5e94\u4e00\u4e2a\u5185\u5b58\u8303\u56f4\uff0c\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u4e2d\u5b58\u653e\u4e00\u68f5\u6811\uff0c\u6bcf\u4e00\u68f5\u6811\u4e2d\u82e5\u6709\u7b49\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u7531\u53cc\u5411\u94fe\u8868\u7ba1\u7406\uff09 \u8fdb\u884c\u7ba1\u7406\u3002\n\n\n\u6bcf\u4e00\u4e2achunk\u7684\u5927\u5c0f\u5fc5\u987b\u4e3a8byte\u7684\u6574\u6570\u500d\u3002\u6240\u4ee5\u5728\u2019size of chunk\u2019 \u57df\u7684\u4f4e\u4e09\u4f4d\u5b58\u653e\u4e86\u8be5chunk\u5c5e\u6027\u7684\u6807\u5fd7\u4f4d\u3002\n\n\nP (PINUSE_BIT) \u4f4d, \u4fdd \u5b58\u5728\u5185\u5b58\u5757\u5927\u5c0f(\u4e00\u822c\u662f\u53cc\u5b57\u8282\u7684\u500d\u6570)\u7684\u672a\u4f7f\u7528\u7684\u4f4e\u4f4d, \u662f\u4e00\u4e2a\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u662f\u5426\u88ab\u4f7f\u7528\u7684bit\u4f4d.\u5982\u679c\u8fd9\u4e2abit\u4f4d\u88ab\u6e05\u7406\u4e86,\u90a3\u4e48\u5728\u5f53\u524d\u5185\u5b58\u5757 \u4e4b \u524d\u7684\u4e00\u4e2a\u5b57 \u5927\u5c0f\u6570\u636e\u4fdd\u5b58\u7740\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u7528\u4e8e\u5bfb\u627e\u524d\u4e00\u4e2a\u5185\u5b58\u5757.\u800c \u7b2c\u4e00\u4e2a\u5185\u5b58\u5757\u8fd9\u4e2abit\u4f4d\u603b\u662f\u88ab\u7f6e\u4e0a\u7684,\u9632\u6b62\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u5185\u5b58\u533a\u57df.\u5982\u679c\u67d0\u4e2a \u5185 \u5b58\u5757\u7684 pinuse\u88ab\u8bbe\u7f6e\u4e86,\u4f60\u5c31\u65e0\u6cd5\u51b3\u5b9a\u4e0a\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u5e76\u4e14\u5982\u679c\u4f60\u771f\u7684\u5c1d \u8bd5\u8fd9 \u4e48\u505a\u4e86,\u6709\u53ef\u80fd\u5185\u5b58\u8bbf\u95ee\u51fa\u9519.\n\n\nC (CINUSE_BIT) bit\u4f4d, \u4fdd\u5b58\u5728\u5185\u5b58\u5757\u7684\u7b2c\u4e8c\u4f4e\u7684bit\u4f4d,\u5197\u4f59\u5730\u8bb0\u5f55\u7740\u5f53\u524d\u5757\u662f \u5426\u88ab\u4f7f\u7528\u4e86(\u9664\u975e\u5f53\u524d\u5185\u5b58\u5757\u662f\u88ab\u6620\u5c04\u7684).\u8fd9\u4e2a\u5197\u4f59\u4fe1\u606f\u7528\u4e8e\u5728free\u548crealloc\u64cd \u4f5c\u65f6\u7684\u68c0\u67e5,\u5e76\u4e14\u51cf\u5c11\u5728\u6267\u884cfree\u548c\u5408\u5e76\u5185\u5b58\u5757\u65f6\u7684\u95f4\u63a5\u64cd\u4f5c.\n\n\n\u4efb\u4f55\u65b0\u5206\u914d\u7684\u5185\u5b58\u5757\u5fc5\u987b\u90fd\u8bbe\u7f6e\u4e86cinuse\u548cpinuse.\u8fd9\u610f\u5473\u7740,\u4efb\u4f55\u5206\u914d\u4e86\u7684\u5185 \u5b58\u5757\u7684\u8fb9\u754c\u8981\u4e48\u662f\u4e00\u4e2a\u5148\u524d\u5206\u914d\u5e76\u4e14\u4ecd\u7136\u5728\u4f7f\u7528(in-use)\u7684\u5185 \u5b58\u5757,\u8981\u4e48\u662f\u5b83\u81ea \u5df1\u7684\u5927\u5185\u5b58\u533a\u57df(segment)\u7684\u5730\u5740.\u8fd9\u6837\u786e\u4fdd\u6240\u6709\u7684\u5185\u5b58\u7533\u8bf7(allocations)\u90fd\u662f\u4ece\u4efb\u4f55\u80fd\u627e\u5230\u7684\u5185\u5b58\u5757\u7684\u201c\u6700\u4f4e\u201d\u90e8\u5206 \u83b7\u53d6.\u8fdb\u4e00\u6b65\u5730\u8bf4,\u4e0d\u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u7a7a\u95f2\u5185 \u5b58\u5757\u5728\u7269\u7406\u4e0a\u7d27\u90bb\u7740\u53e6 \u4e00\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757,\u6240\u4ee5\u6bcf\u4e00\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757\u88ab\u8bc1\u5b9e\u5728\u4f7f\u7528 (inuse)\u7684\u5185\u5b58\u5757\u6216\u8005\u5185\u5b58\u5c3e \u90e8\u4e4b\u524d\u548c\u4e4b\u540e.\n\n\n\u6ce8\u610f: \u5f53\u524d\u5757\u7684 \u2019foot\u2019\u5b9e\u9645\u4e0a\u4ee3\u8868\u7740\u4e0b\u4e00\u4e2a\u5185\u5b58\u5757\u7684prev_foot.\u8fd9\u4f7f\u5bf9\u9f50\u7b49\u64cd \u4f5c\u5904\u7406\u53d8\u5f97\u5bb9\u6613\u4f46\u4f1a\u4f7f\u4eba\u5728\u6269\u5c55\u6216\u7ef4\u62a4\u8fd9\u4efd\u4ee3\u7801\u65f6\u611f\u5230\u56f0\u60d1.\n\n\n\u4ee5\u4e0b\u662f\u5bf9\u7279\u6b8a\u7684\u5185\u5b58\u5757\u7684\u8bf4\u660e:\n\n\n\n\n\u7279 \u6b8a\u7684\u5185\u5b58\u5757\u2019top\u2019\u662f\u6700\u9876\u4e0a\u7684\u53ef\u7528\u5185\u5b58\u5757(i.e., \u7d27\u90bb\u7740\u53ef\u7528\u5185\u5b58\u7684\u8fb9\u754c). \u8fd9\u5757\u5185\u5b58\u5757\u4f1a\u88ab\u7279\u6b8a\u5bf9\u5f85. Top \u5185\u5b58\u5757\u4e0d\u4f1a\u88ab\u5305\u542b\u5728\u4efb\u4f55\u7684\u5185\u5b58\u5206 \u7c7b\u7bb1\u91cc, \u53ea\u6709\u5728\u6ca1\u6709\u4efb\u4f55\u5176\u4ed6\u5185\u5b58\u5757\u53ef\u4f7f\u7528\u65f6,\u624d\u88ab\u4f7f\u7528,\u5e76\u4e14\u5728\u5b83\u975e\u5e38\u5927\u65f6(\u67e5\u770b M_TRIM_THRESHOLD) \u4f1a\u88ab\u91ca\u653e\u4e00\u90e8\u5206\u56de\u7cfb\u7edf.\u5728\u5b9e\u9645 \u4e0a,top\u5185\u5b58\u5757\u4e00\u822c\u88ab\u8ba4 \u4e3a\u662f\u6bd4\u5176\u4ed6\u6240\u6709\u7684\u5185\u5b58\u5757\u90fd\u5927.Top\u5185\u5b58\u5757\u4ece\u6765\u4e0d\u4f1a\u66f4\u65b0\u5b83\u7684\u5c3e\u90e8\u6570\u636e\u533a\u57df\u56e0 \u4e3a\u6839\u672c\u6ca1\u6709\u5185\u5b58\u5757\u4f1a\u5728\u7d22\u5f15\u4e0a\u7d27\u8ddf\u5176\u540e.\u4f46\u662f,\u7a7a\u95f4 \u8fd8\u662f\u4f1a\u5206\u914d\u7ed9\u5b83 (TOP_FOOT_SIZE) \u7528\u6237\u505a\u5185\u5b58\u5757\u7684\u62c6\u5206\u548c\u5408\u5e76,\u5f53\u7a7a\u95f4\u9700\u8981\u6269\u5c55\u65f6.\n\n\ndv chunk \u662f\u4fdd\u5b58\u4e86\u6700\u8fd1\u88ab\u4f7f\u7528\u5e76\u5207\u5272\u8fc7\u7684\u5185\u5b58\u5757\uff0c\u4fdd\u5b58\u5728\u5168\u5c40\u7684gm\u4e2d\u3002\u5b83\u4e0d\u5f52\u5c5e\u5230\u53cc\u5411\u94fe\u8868\u6216\u8005\u6811\u4e2d\u7ba1\u7406\u3002\u4f46\u5f53\u5b83\u88ab\u66ff\u6362\u65f6\uff0c\u4e5f\u4f1a\u52a0\u5165\u5185\u5b58\u7ba1\u7406\u4e2d\u3002\n\n\nBitwise trie \u6811, \u5b9e\u9645\u4e0a\u662f\u7ed3\u5408\u4e86\u4e8c\u53c9\u6811\u548ctrie\u6811(\u53c8\u53eb\u5b57\u5178\u6811, \u524d\u7f00\u6570).\u4e8c\u53c9\u6811\u53ea\u6709\u5de6\u53f3\u5b50\u6811. Trie\u6811\u662f\u4e00\u79cd\u6709\u5e8f\u6811,\u7528\u4e8e\u4fdd\u5b58\u5173\u8054\u6570\u7ec4,\u7c7b\u4f3c hash table, \u6709key \u548c value \u7ed3\u6784. \u5982\u4e0b\u56fe.key \u5b9e\u9645\u4e0a\u5c31\u662f\u5230\u8fbevalue\u7684\u8def\u5f84.\u800cbitwise trie, \u5b83\u662f\u5c06 key\u8bbe\u7f6e\u4e3a0/1, \u6240\u4ee5, \u662f\u4e00\u68f5\u4e8c\u53c9\u6811.\u5728dlmalloc\u7684bitwise trie tree\u4e2d, 0 \u4ee3\u8868\u8fdb\u5165\u5de6\u5b50\u6811, 1 \u4ee3\u8868\u8fdb\u5165\u53f3\u5b50 \u6811. \u800ckey\u7684\u957f\u5ea6\u5bf9\u5e94\u8def\u5f84\u7684\u6df1\u5ea6.\u53c2\u8003 [treebins\u548c\u6811\u7ba1\u7406\u56fe\u89e3] \u7684\u56fe,\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u8981\u67e5\u627e\u7684\u662f512\u5bf9\u5e94\u7684\u7ed3\u70b9, \u5219\u5c06520\u5bf9 \u5e94\u4e8c\u8fdb\u5236\u7801\u662f1000001000, \u5bf9\u5e94\u7684\u7bb1\u5b50\u53f7\u662f2\u53f7,\u5219\u5176\u8868\u793a\u7684\u5185\u5b58\u8303\u56f4\u4e3a256, \u7279\u5f81\u7801\u957f\u5ea6\u4e3a8, \u4e5f\u5c31\u662f00001000.\u8003\u8651\u5230, \u6240\u6709\u8bf7 \u6c42\u5927\u5c0f\u4e3a8byte\u500d\u6570,\u6240\u4ee5, \u5b9e\u9645\u7279\u5f81\u7801\u4e3a00001, \u6811\u6df1\u4e3a5, \u524d4\u5c42\u4e3a\u5de6\u5b50\u6811,\u7b2c\u4e94\u5c42\u4e3a\u53f3\u5b50\u6811.\u4f46\u521a\u624d\u63cf\u8ff0\u7684\u662ftrie\u6811\u548c bitwise trie \u6811, \u4e0d\u662fdlmalloc\u4f7f\u7528\u7684\u6811.\n\n\n\n\n\n\n\u975eMSPACE\u4ee3\u7801\u903b\u8f91\u5206\u6790\n\n\nstruct\n \nmalloc_chunk\n \n{\n\n\nsize_t\n               \nprev_foot\n;\n  \n/* \u5982\u679c\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7a7a\u95f2,\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f */\n\n\nsize_t\n               \nhead\n;\n       \n/* \u5927\u5c0f\u548cinuse bit\u4f4d*/\n\n\nstruct\n \nmalloc_chunk\n*\n \nfd\n;\n         \n/* \u5982\u679c\u662f\u7a7a\u95f2\u5185\u5b58\u5757,\u6307\u5411\u53cc\u5411\u94fe\u8868*/\n\n\nstruct\n \nmalloc_chunk\n*\n \nbk\n;\n\n\n};\n\n\n\ntypedef\n \nstruct\n \nmalloc_chunk\n  \nmchunk\n;\n\n\ntypedef\n \nstruct\n \nmalloc_chunk\n*\n \nmchunkptr\n;\n\n\ntypedef\n \nstruct\n \nmalloc_chunk\n*\n \nsbinptr\n;\n  \n/* \u5185\u5b58\u5757\u5206\u7c7b\u7bb1\u7684\u7c7b\u578b */\n\ufeff\u200b\n\n\n\n\n\n\nhead \u57df\u4e2d\u53d8\u91cf\u7684\u8bf4\u660e:\n\n\nPINUSE_BIT \u5728\u524d\u4e00\u4e2a\u76f8\u90bb\u7684\u5185\u5b58\u5757\u88ab\u4f7f\u7528\u65f6,\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u88ab\u7f6e\u4e0a. CINUSE_BIT \u5728\u5f53\u524d\u5185\u5b58\u5757\u88ab\u4f7f\u7528\u65f6,\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u88ab\u7f6e\u4e0a. FLAG4_BIT \u5728\u5f53\u524d\u7248\u672c\u7684dlmalloc\u4e2d\u672a\u88ab\u4f7f\u7528\n\n\n\n\u5982 \u4f55\u505a\u5230\u5728head\u4e2d\u65e2\u5b58\u653e\u5757\u5927\u5c0f\u53c8\u5b58\u653e\u6807\u5fd7\u4f4d\u7684\u5462?\u9996\u5148\u63d0\u5230\u4e00\u70b9\u662f,\u6240\u6709\u7684\u5757\u7684 \u5927\u5c0f\u90fd\u662f\u6309\u6700\u5c118bit\u5bf9\u9f50\u7684,\u6362\u53e5\u8bdd\u8bf4,\u8868\u793a\u5927\u5c0f\u7684\u6570\u5b57,\u4f4e3\u4f4d\u5fc5\u5b9a\u4e3a 0,\u6240\u4ee5\u5c31\u6709 \u6548\u5730\u5229\u7528\u4e86\u4f4e3\u4f4d\u5b58\u653e\u6807\u5fd7\u4f4d.\u6240\u4ee5,\u83b7\u53d6chunk\u7684\u5927\u5c0f\u7528\u4e0b\u9762\u7684\u5b8f,\u5c06head\u7684\u4f4e\u4e09 \u4f4d\u6e05\u62100,\u53d6\u51fa.\n\n\n\n#define chunksize(p)        ((p)-\nhead \n ~(FLAG_BITS))\n\n\n\n\n\n\n\u4e0b\u9762\u4ecb\u7ecd\u4e0bdlmalloc\u7ef4\u62a4\u7684\u4e00\u4e2a\u5168\u5c40\u6570\u636e\u7ed3\u6784.\n\n\n2579\n \nstruct\n \nmalloc_state\n \n{\n \n\n2580\n   \nbinmap_t\n   \nsmallmap\n;\n  \n// 32bit, \u5c0f\u5185\u5b58\u7bb1\u5b50\u7684\u4f4d\u56fe.\n\n\n2581\n   \nbinmap_t\n   \ntreemap\n;\n    \n// 32bit, \u5927\u5185\u5b58\u7bb1\u5b50\u7684\u4f4d\u56fe\n\n\n2582\n   \nsize_t\n     \ndvsize\n;\n           \n//  dv chunk \u7684\u5927\u5c0f\n\n\n2583\n   \nsize_t\n     \ntopsize\n;\n          \n//  top chunk\u7684\u5927\u5c0f\n\n\n2584\n   \nchar\n*\n      \nleast_addr\n;\n    \n//  dlmalloc\u7ba1\u7406\u7684\u5185\u5b58\u7684\u6700\u5c0f\u5730\u5740,\u4e5f\u5c31\u662f\u6700\u5c0f\u7684segment \u57fa\u5730\u5740.\n\n\n2585\n   \nmchunkptr\n  \ndv\n;\n            \n// dv chunk. \u6700\u8fd1\u88ab\u5206\u5272\u4f7f\u7528\u7684chunk\n\n\n2586\n   \nmchunkptr\n  \ntop\n;\n           \n// top chunk. \u9876\u90e8,\u9760\u8fd1\u6709\u6548\u5185\u5b58\u7684chunk,\u8be6\u89c1\u603b\u7ed3\u56fe.\n\n\n2587\n   \nsize_t\n     \ntrim_check\n;\n    \n// \u68c0\u67e5top chunk\u5927\u5c0f\u662f\u5426\u8d85\u7684\u51fd\u6570.\n\n\n2588\n   \nsize_t\n     \nrelease_checks\n;\n  \n\n2589\n   \nsize_t\n     \nmagic\n;\n \n\n2590\n   \nmchunkptr\n  \nsmallbins\n[(\nNSMALLBINS\n+\n1\n)\n*\n2\n];\n   \n// 32\u4e2a\u94fe\u8868\u5934\n\n\n2591\n   \ntbinptr\n    \ntreebins\n[\nNTREEBINS\n];\n           \n// 32\u68f5\u6811\n\n\n2592\n   \nsize_t\n     \nfootprint\n;\n \n\n2593\n   \nsize_t\n     \nmax_footprint\n;\n \n\n2594\n   \nsize_t\n     \nfootprint_limit\n;\n \n/* zero means no limit */\n \n\n2595\n   \nflag_t\n     \nmflags\n;\n \n\n2596\n \n#\nif\n \nUSE_LOCKS\n \n\n2597\n   \nMLOCK_T\n    \nmutex\n;\n     \n/* locate lock among fields that rarely change */\n \n\n2598\n \n#\nendif\n \n/* USE_LOCKS */\n \n\n2599\n   \nmsegment\n   \nseg\n;\n        \n//  segment\u94fe\u8868.\n\n\n2600\n   \nvoid\n*\n      \nextp\n;\n      \n/* Unused but available for extensions */\n \n\n2601\n   \nsize_t\n     \nexts\n;\n \n\n2602\n \n};\n\ufeff\u200b\n\n\n\n\n\n\nmchunkptr  smallbins[(NSMALLBINS+1)*2];  \n\n\n\n\n\n\u8fd9\u91cc\u4f1a\u6709\u4e2a\u7591\u95ee,\u7406\u8bba\u4e0a, 32\u4e2a\u94fe\u8868\u5934,\u6211\u4eec\u4f1a\u4f7f\u7528\nstruct malloc_chunk  smallbins[NSMALLBINS];\n  \u4f46\u8fd9\u91cc\u4e0d\u4f7f\u7528\u7684\u539f\u56e0\u662f, \u5bf9\u4e8e\u94fe\u8868\u5934\u800c\u8a00,  \nmalloc_chunk\n\u7684 \nprev_foot\n\u548c\nhead\n\u4e24\u4e2a\u57df\u662f\u6ca1\u6709\u88ab\u4f7f\u7528\u7684,\u5b9e\u9645\u9700\u8981\u7684\u5927\u5c0f\u662f2\u4e2a\u6307\u9488\u5927 \u5c0f.\u6240\u4ee5,dlmalloc\u4f7f\u7528\u4e86\u8986\u76d6\u7684\u65b9\u6cd5. \u524d\u4e00\u4e2a malloc_state \u7684fb/bk \u8e29\u4e86\u540e\u4e00\u4e2a\u7684 malloc_state\u7684 prev_foot/head.\u6240\u4ee5\u5927\u5c0f\u5e94\u8be5\u4e3a 32 * 8 + 8, \u4e5f\u5c31\u662f33 * 2 \u4e2a\u6307\u9488\u5927\u5c0f.\n\n\n\n\n\u88ab\u8986\u76d6\u7684\u6570\u636e\u7ed3\u6784\n\n\n\u5f53\u5185\u5b58\u5757\u672a\u88ab\u4f7f\u7528\u65f6,\u4ed6\u4eec\u4f5c\u4e3a\u5217\u8868\u6216\u8005\u6811\u7684\u8282\u70b9.\n\n\n\u5c0f\u5185\u5b58(\u201cSmall\u201d) \u5757\u5b58\u50a8\u5728\u73af\u5f62\u53cc\u5411\u94fe\u8868\u4e2d,\u770b\u8d77\u6765\u50cf\u5982\u4e0b\u8fd9\u6837.\n\n\n\n\n\u800c \u5927 \u7684\u5185\u5b58\u5757\u4f7f\u7528\u5185\u5b58\u5757\u5927\u5c0f\u4e3a\u5173\u952e\u5b57\u7684bitwise digital tree (\u53c8\u53ebaka tree).\u56e0\u4e3amalloc_tree_trunks\u53ea\u662f \u7528\u4e8e\u5927\u5c0f\u5927\u4e8e256bytes\u7684\u7a7a\u95f2\u5185\u5b58\u5757,\u4ed6\u4eec \u7684\u5927\u5c0f\u4e0d\u4f1a\u53d7\u5230\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u7684\u9650\u5236.\u6bcf \u4e00\u4e2a\u8282\u70b9\u7684\u7ed3\u6784\u770b\u8d77\u6765\u50cf\u5982\u4e0b\u8fd9 \u6837.\n\n\n\n\n\u6bcf\u4e00\u68f5\u6811\u90fd\u62e5\u6709\u552f\u4e00\u7684\u5185\u5b58\u5757\u5927\u5c0f.\u800c\u5177\u6709\u540c\u6837\u5927\u5c0f\u7684\u5185\u5b58\u5757\u4f1a\u88ab\u5b89\u6392\u5728\u53cc\u5411\u94fe \u8868\u91cc,\u4e0e\u6700\u8001\u7684\u5185\u5b58\u5757\u4e00\u8d77(\u6307,\u4ee5FIFO\u7684\u89c4\u5219,\u4e0b\u4e00\u4e2a\u8981\u88ab\u4f7f\u7528\u7684\u5185\u5b58\u5757).\u5982\u679c\u4e00 \u4e2a\u5177\u6709\u540c\u6837\u5927\u5c0f\u7684\u5185\u5b58\u5757\u88ab\u63d2\u5165,\u5b83\u5c31\u4f1a\u7528\u7c7b\u4f3c\u5c0f\u5185\u5b58\u7684fb/bk\u7684\u6307\u9488\u4e00\u6837\u7684\u65b9\u5f0f,\u4ece \u539f\u6709\u7684\u8282\u70b9\u79fb\u9664.\n\n\n\n\u6bcf \u4e00 \u68f5\u6811\u5305\u542b\u5927\u5c0f\u4e3a2\u7684\u4e58\u65b9\u8303\u56f4\u7684\u5185\u5b58\u5757(\u6700\u5c0f\u4e3a0x100 \n= x \n 0x180),\u5728\u6811 \u7684\u6bcf\u4e00\u5c42\u90fd\u4f1a\u88ab\u5206\u6210\u4e00\u534a,\u5373\u5c0f\u7684\u4e00\u534a (0x100 \n= x \n 0x140)\u4f5c\u4e3a\u5de6\u5b50\u6811,\u5927\u7684\u4e00 \u534a\u4f5c\u4e3a\u53f3\u5b50\u6811(0x140 \n= x \n 0x180).\n\n\n\n\u901a\u8fc7\u4f7f\u7528\u8fd9\u79cd\u89c4\u5219,\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u5305\u542b\u7684\u5185\u5b58\u5757\u5927\u5c0f\u90fd\u5c0f\u96e8\u5176\u53f3\u5b50\u6811.\n\n\n\nSmallbins\u548c\u53cc\u5411\u94fe\u8868\u7ba1\u7406\u5c0f\u5185\u5b58\u56fe\u89e3\u3002\n\n\n\n\nTreebins\u548c\u6811\u7ba1\u7406\u5927\u5185\u5b58\u7684\u56fe\u89e3\uff1a\n\n\n\n\ndlmalloc\u4ee3\u7801\u5206\u6790\n\n\ndlmalloc \u5bf9\u5c0f\u5185\u5b58\u5206\u914d\u6709\u5982\u4e0b5\u4e2a\u89c4\u5219(\u6309\u4f18\u5148\u7ea7\u987a\u5e8f)\uff1a \n\n\n\n\n\u5982\u679c\u4e0e\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u5339\u914d\u7684\u7bb1\u5b50\u5b58\u5728\u7a7a\u95f2,\u5219\u4f7f\u7528\u5f53\u524d\u7bb1\u5b50\uff0c\u5426\u5219\u4f7f\u7528\u4e34\u8fd1\u7684 \u7bb1\u5b50\u3002\u5728\u80fd\u4e0d\u5206\u5272\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\u5c3d\u91cf\u4e0d\u5206\u5272\u5185\u5b58\u3002 \n\n\n\u5982\u679cdv chunk\u8db3\u591f\u5927\uff0c\u90a3\u4e48\u4f7f\u7528dv chunk\u3002 dv chunk\u662f\u6307\u6700\u8fd1\u4e00\u6b21\u5c0f\u5185\u5b58 \u7533\u8bf7\u65f6\u4f7f\u7528\u7684\u5185\u5b58\u5757\u3002 \u8fd9\u4e2a\u89c4\u5219\u662f\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u5206\u914d\u7684\u5185\u5b58\u8fde\u7eed\u3002 \n\n\n\u5728smallbin\u548ctreebin\u4e2d\u5bfb\u627e\u53ef\u4ee5\u4f7f\u7528\u7684\u5185\u5b58\u5757\uff0c\u5e76\u5206\u5272\u3002\u5c06\u5269\u4e0b\u7684\u5185\u5b58 \u5757\u4fdd\u5b58\u5230dv chunk\u4e2d\u3002 \n\n\n\u5982\u679ctop chunk \u8db3\u591f\u5927\uff0c\u5219\u4f7f\u7528top chunk\n\n\n\u5982\u679c\u8bf7\u6c42\u5185\u5b58\u5b9e\u5728\u592a\u5927\uff0c\u5219\u4f7f\u7528\u7cfb\u7edf\u5206\u914d\u5185\u5b58\u3002\n\n\n\n\n\n\u5927\u5185\u5b58\u5206\u914d\u7684\u89c4\u5219\uff1a\n\n\n\n\n\u5728treebin\u4e2d\u627e\u5230\u6700\u9002\u5408\u7684\u6700\u5c0f\u5185\u5b58\uff0c\u5982\u679c\u5b83\u6bd4dv chunk\u7684\u66f4\u5408\u9002\uff0c\u5c31\u4f7f\u7528\u5b83\uff0c \u5982\u679c\u6709\u9700\u8981\u5c31\u5206\u5272\u5b83\u3002 \n\n\n\u5982\u679cdv chunk \u6bd4\u5176\u4ed6\u6240\u6709\u7684\u66f4\u5408\u9002\uff0c\u4f7f\u7528dv chunk\u3002 \n\n\n\u5982\u679ctop \u8db3\u591f\u5927\uff0c\u4f7f\u7528top chunk\u3002 \n\n\n\u5982\u679c\u8bf7\u6c42\u7684\u5927\u5c0f \n= mmap threshold, \u5219\u4f7f\u7528\u7cfb\u7edf\u7684mmap\u3002\n\n\n\u76f4\u63a5\u4ece\u7cfb\u7edf\u5206\u914d\u5185\u5b58\u5e76\u4f7f\u7528\u3002\n\n\n\n\n\n\n\u5c0f\u5185\u5b58\u89c4\u5219\u4e00\n\n\n\n\n4597\n     \nif\n \n(\nbytes\n \n=\n \nMAX_SMALL_REQUEST\n)\n \n{\n\n\n\n\n\n\n// MAX_SMALL_REQUEST \u5b9e\u73b0\n2577 #define MAX_SMALL_REQUEST (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)\n\n\n\n\n\n\u8fd9\u91ccbytes\u4e3a\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f, \nMAX_SMALL_REQUEST\n\u5c31\u662f\u4e4b\u524d\u63d0\u5230\u8fc7\u7684\u6700\u5927\u7684\u5c0f\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u5c31\u662f256byte,\u5373,256byte\u4ee5\u4e0b\u7684\u6240\u6709\u5185\u5b58\u90fd\u662f\u5728\u53cc\u5411\u94fe\u8868\u4e2d\u5339\u914d.\n\n\n\n4600\n       \nnb\n \n=\n \n(\nbytes\n \n \nMIN_REQUEST\n)\n?\n \nMIN_CHUNK_SIZE\n \n:\n \npad_request\n(\nbytes\n);\n\n\n\n\n\n\n2225\n \n#\ndefine\n \nMIN_REQUEST\n         \n(\nMIN_CHUNK_SIZE\n \n-\n \nCHUNK_OVERHEAD\n \n-\n \nSIZE_T_ONE\n)\n\n\n\n2228\n \n#\ndefine\n \npad_request\n(\nreq\n)\n \\\n\n2229\n    \n(((\nreq\n)\n \n+\n \nCHUNK_OVERHEAD\n \n+\n \nCHUNK_ALIGN_MASK\n)\n \n \n~\nCHUNK_ALIGN_MASK\n)\n\n\n\n\n\n\n\u8fd9\u91ccnb\u5c31\u662f\u52a0\u4e0a\u534f\u8bae\u6570\u636e\u540e\u7684\u5b9e\u9645dlmalloc\u4f1a\u5206\u914d\u7684\u5185\u5b58\u5757\u5927\u5c0f.\u524d\u6587\u7b14\u8005\u63d0\u5230\u8fc7,\u5c0f\u5185\u5b58\u5757\u7684\u6700\u5c0f\u503c\u4e3a8byte,\u6240\u4ee5,\u4e0d\u8bba\u7533\u8bf7\u7684\u5185\u5b58\u591a\u5c0f,\u90fd\u4f7f\u7528\u6700\u5c0f\u503c.\n\n\n\n4601      idx = small_index(nb);\n\n\n\n\n\n2572\n \n#\ndefine\n \nSMALLBIN_SHIFT\n    \n(\n3U\n)\n\n\n\n2825\n \n#\ndefine\n \nsmall_index\n(\ns\n)\n      \n(\nbindex_t\n)((\ns\n)\n  \n \nSMALLBIN_SHIFT\n)\n\n\n\n\n\n\n\u8fd9\u91ccidx\u5f97\u5230\u7684\u662f\u8be5\u5185\u5b58\u5757\u5bf9\u5e94\u7684smallbin\u7bb1\u5b50\u7684\u7bb1\u53f7.\u524d\u6587\u5728\u63d0\u5230head\u65f6,\u63d0\u5230\u8fc7,\u5c0f\u5185\u5b58\u5757\u7684\u5927\u5c0f\u4e3a8byte\u7684\u500d\u6570,\u6240\u4ee5,\u53f3\u79fb3\u4f4d\u6765\u5b9a\u4f4d\u5bf9\u5e94\u7bb1\u5b50\u7684\u7bb1\u53f7.\n\n\n\n4602\n       \nsmallbits\n \n=\n \ngm\n-\nsmallmap\n \n \nidx\n;\n\n\n\n\n\n\nsmallmap \u662f\u5404\u4e2a\u7bb1\u5b50\u7684\u4f4d\u56fe,32bit,\u5bf9\u5e9432\u4e2a\u7bb1\u5b50,\u6bcf\u4e00\u4f4d\u4e3a1\u8868\u793a\u8be5\u7bb1\u53f7\u4e2d\u6709\u5bf9\n\u5e94\u5927\u5c0f\u7684\u5185\u5b58\u5757,\u4e3a0\u5219\u8868\u793a\u6ca1\u6709.\u8be5\u884c\u4ee3\u7801\u662f\u628a\u5bf9\u5e94\u7bb1\u53f7\u7684\u6bd4\u7279\u4f4d\u79fb\u5230\u6700\u53f3\u4fa7.\n\n\n\n4604\n       \nif\n \n((\nsmallbits\n \n \n0x3U\n)\n \n!=\n \n0\n)\n \n{\n\n\n4605\n         \nmchunkptr\n \nb\n,\n \np\n;\n\n\n4606\n         \nidx\n \n+=\n \n~\nsmallbits\n \n \n1\n;\n       \n/* Uses next bin if idx empty */\n\n\n4607\n         \nb\n \n=\n \nsmallbin_at\n(\ngm\n,\n \nidx\n);\n\n\n\n\n\n\n\u8fd9\u91cc 0x3U \u4f4e8\u4f4d\u5c31\u662f 0000 0011. \u6240\u4ee5,smallbits\n0x3U \u4e3a\u771f\u7684\u6761\u4ef6\u5982\u4e0b:(\u4e0a\u6587\u63d0\u5230,smallbits\u7684\u6700\u53f3\u4f4d\u8868\u793aidx\u7bb1\u53f7\u662f\u5426\u6709\u7a7a\u95f2\u5757)\n\n\n\n\n\u4f4e2\u4f4d\u4e3a 11. idx\u6709\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u6709\u7a7a\u95f2\u5757.\n\n\n\u4f4e2\u4f4d\u4e3a 10. idx\u65e0\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u6709\u7a7a\u95f2\u5757.\n\n\n\u4f4e2\u4f4d\u4e3a 01. idx\u6709\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u65e0\u7a7a\u95f2\u5757.\n\n\n\n\n4606\u884c\u662f\u5728\u91cd\u65b0\u5b9a\u4f4d\u5230\u771f\u6b63\u6709\u7a7a\u95f2\u5757\u7684\u7bb1\u53f7. ~smallbits \n 1 \u5728\u5f53\u524d\u7bb1\u5b50\u4e3a0\u7684\n\u60c5\u51b5\u4e0b,\u503c\u4e3a1;\u5f53\u524d\u7bb1\u5b50\u4e3a1\u7684\u60c5\u51b5\u4e0b,\u503c\u4e3a0.\u6240\u4ee5\u662f\u6709\u9650\u662f\u7528\u6b63\u597d\u6ee1\u8db3\u5927\u5c0f\u7684\u7bb1\n\u5b50.\n\n\n\n2831 #define smallbin_at(M, i)\n((sbinptr)((void*)\n((M)-\nsmallbins[(i)\n1])))\n\n\n\n\n\ni \u5c31\u662f idx, \u800cM\u5219\u662fgm(\n\u9700\u8981\u5728\u4e0a\u6587\u9884\u5148\u63cf\u8ff0gm\u7ed3\u6784\u4f53\u6210\u5458\u4f5c\u7528\n).smallbins(\n\u9700\u5728\u4e0a\u6587\u63cf\u8ff0\n)\u5c31\u662f\u53cc\u5411\u94fe\u8868\u6570\u7ec4,\u4e5f\u5c31\u662f\u5bf9\u5e94\u7bb1\u53f7\u5185\u90e8\u7684\u7a7a\u95f2\u5757\u94fe\u8868\u7684\u9996\u5730\u5740.\n\n\n\u503c\u5f97\u9ad8\u5174\u7684\u662f,\u6211\u4eec\u62ff\u5230\u94fe\u8868\u4e86,\u63a5\u4e0b\u6765\u5c31\u662f\u53d6\u51fa\u7a7a\u95f2\u5757,\u548c\u4e00\u4e9b\u6807\u5fd7\u4f4d\u7684\u5904\u7406\u4e86.\n\n\n\n4608        p = b-\nfd;\n4609        assert(chunksize(p) == small_index2size(idx));\n4610        unlink_first_small_chunk(gm, b, p, idx);\n4611        set_inuse_and_pinuse(gm, p, small_index2size(idx));\n4612        mem = chunk2mem(p);\n4613        check_malloced_chunk(gm, mem, nb);\n4614        goto postaction;\n\n\n\n\n\nfd\u57df\u662f\u524d\u4e00\u4e2a\u94fe\u8868\u8282\u70b9.\u800cB\u662f\u8868\u5934, \u4e5f\u5c31\u662f\u8bf4,\u6211\u4eec\u53d6\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20,\u53d6\u5230\u6211\u4eec\u9700\u8981\u7684\u5185\u5b58\u5757\u5730\u5740.\u8fd9\u4e2aassert\u5176\u5b9e\u5c31\u662f\u786e\u8ba4\u4e0b,\u5f53\u524d\u7684\u7bb1\u53f7\u7684\u5185\u5b58\u5757\u5927\u5c0f\u8ddf\u5f53\u524d\u5185\u5b58\u5757\u7684\u5927\u5c0f\u662f\u5426\u5339\u914d.\n\n\n\n\n3629#define unlink_first_small_chunk(M, B, P, I) {\\\n3630  mchunkptr F = P-\nfd;\\\n3631  assert(P != B);\\\n3632  assert(P != F);\\\n3633  assert(chunksize(P) == small_index2size(I));\\\n3634  if (B == F) {\\\n3635    clear_smallmap(M, I);\\\n3636  }\\\n3637  else if (RTCHECK(ok_address(M, F) \n F-\nbk == P)) {\\\n3638    F-\nbk = B;\\\n3639    B-\nfd = F;\\\n3640  }\\\n3641  else {\\\n3642    CORRUPTION_ERROR_ACTION(M);\\\n3643  }\\\n3644}\n\n\n\n\n\n2921#define clear_smallmap(M,i)     ((M)-\nsmallmap \n= ~idx2bit(i))\n\n\n\n\n\n\u8fd9\u91cc B P F\u7684\u5173\u7cfb\u662f F -\n P -\n B , \u6240\u4ee5,\u7406\u8bba\u4e0a, P \u4e0d\u7b49\u4e8eF \u4e5f\u4e0d\u7b49\u4e8eB,\u5982\n\u679c\u76f8\u7b49,\u5c31\u610f\u5473\u7740\u662f\u7a7a\u94fe\u8868(\u53ea\u6709\u8868\u5934).\u800c\u5982\u679cB == F,  \u610f\u5473\u7740\u8be5\u94fe\u8868\u4e2d\u53ea\u6709\u4e00\n\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757.\u53d6\u51fa\u8be5\u5185\u5b58\u5757\u4e4b\u540e,\u54b1\u4eec\u8981\u628a\u8be5\u7bb1\u5b50\u6807\u8bb0\u4e3a\u7a7a(3635, 2921).\u5f53\u7136,\n\u66f4\u591a\u7684\u60c5\u51b5\u662f\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9P.\n\n\n\n// 4611 \u884c\u51fd\u6570\u5b9e\u73b0\n\n3058#define set_inuse_and_pinuse(M,p,s)\\\n3059  ((p)-\nhead = (s|PINUSE_BIT|CINUSE_BIT),\\\n3060  ((mchunkptr)(((char*)(p)) + (s)))-\nhead |= PINUSE_BIT)\n\n\n\n\n\n\u8fd9\u5c31\u662f\u5728P \u7684head\u4e2d\u7f6e\u4e0aCINUSE\u4f4d\u548cP \u7684\u4e0b\u4e00\u5757\u5185\u5b58\u7684head\u4e2d\u8bbe\u7f6e\u4e0aPINUSE\u4f4d.\n\n\n\u6700\u540emem = chunk2mem(p);  \u5c31\u662f\u53d6\u51fa\u4f20\u9012\u4e2a\u7528\u6237\u7684\u6709\u6548\u5185\u5b58\u5730\u5740,.\ncheck_malloced_chunk(gm, mem, nb); \u662f\u8c03\u8bd5\u7528\u7684,\u68c0\u67e5\u8be5\u5206\u914d\u7684\u5185\u5b58\u5757\u7684\u5404\u4e2a\n\u5c5e\u6027\u662f\u5426\u6b63\u5e38.\n\n\n\u5230\u6b64,\u5c0f\u5185\u5b58\u7684,\u6b63\u597d\u7b26\u5408\u6216\u6b63\u597d\u4e34\u8fd1\u7bb1\u5b50\u6709\u7a7a\u95f2\u5757\u7684\u903b\u8f91\u5206\u6790\u5b8c\u6210,\u54b1\u4eec\u62ff\u5230\u4e86\n\u9700\u8981\u7684\u5185\u5b58.\n\n\n\u5c0f\u5185\u5b58\u89c4\u5219\u4e09\n\n\n\u4e0b\u9762,\u662f\u4e0a\u8ff0\u60c5\u51b5\u4e0d\u6ee1\u8db3,\u4e5f\u5c31\u662f\u5f53\u524d\u5185\u5b58\u8bf7\u6c42\u5bf9\u5e94\u7684\u7bb1\u53f7idx\u7684smallbits\u4f4e2\u4f4d\u4e3a 00 ,\u4e5f\u5c31\u662f\u8bf4,\u6ca1\u6709\u7a7a\u95f2\u5757.\n\n\n4617      else if (nb \n gm-\ndvsize) {\n4618        if (smallbits != 0) {\n\n\n\n\n\n(\ndvsize\u9700\u8981\u5728gm\u7684\u5206\u6790\u4e2d\u63cf\u8ff0\u6389\n)  smallbits != 0 \u610f\u5473\u7740,\u5728\u6bd4\u8bf7\u6c42\u7684\u5185\u5b58\u5757\u5927\u7684\u7bb1\u5b50\u4e2d,\u603b\u6709\u7a7a\u95f2\u5757\u5b58\u5728.\u6240\u4ee5\u63a5\u4e0b\u6765\u7684\u76ee\u7684\u662f\u627e\u5230\u6700\u5c0f\u7684\u7a7a\u95f2\u5757.\n\n\n4622          binmap_t leftbits = (smallbits \n idx) \n left_bits(idx2bit(idx));\n4623          binmap_t leastbit = least_bit(leftbits);\n4624          compute_bit2idx(leastbit, i);\n\n\n\n\n\n2917#define idx2bit(i)              ((binmap_t)(1) \n (i))\n\n2929#define least_bit(x)         ((x) \n -(x))\n\n2932#define left_bits(x)         ((x\n1) | -(x\n1))\n\n\n\n\n\n4622 \u884c \u4f4d\u4e0e\u7684\u53f3\u64cd\u4f5c\u6570\u662f\u4e00\u4e2a32bit\u7684\u6570\uff0c\u8be5\u6570\u7684\u4f4e\uff08idx+1\uff09\u4f4d\u4e3a0,\u5176\u4f59\u4f4d\u4e3a1;\u5de6\u64cd\u4f5c\u6570\u5c31\u662f\u5bf9\u5e94\u4f4eidx\u4f4d\u4e3a0,\u540c\u65f6\u4ee3\u7801\u903b\u8f91\u8d70\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\uff0c\u4f4e\uff08idx+2\uff09\u4e3a0\u3002\nleast_bit \u7684\u529f\u80fd\u662f\uff0c\u4fdd\u7559leftbits\u4e2d\u4ece\u53f3\u5f80\u5de6\u7684\u7b2c\u4e00\u4e2a\u4e3a1\u7684\u4f4d\uff0c\u5176\u4f59\u4f4d\u4e3a0. \u5219\u8be5leastbit\u5bf9\u5e94\u7684\u5c31\u662f\u7b26\u5408\u8bf7\u6c42\u7684\u6700\u5c0f\u5185\u5b58\u5757\u7684\u4f4d\u56fe\u3002compute_bit2idx \u662f\u5c06leastit\u4f4d\u56fe\u8f6c\u6362\u6210\u7bb1\u53f7\u3002 \u8fd9\u91cc i \u5c31\u662f\u83b7\u53d6\u5230\u7684\u7bb1\u53f7\u3002\n\n\n4625          b = smallbin_at(gm, i);\n4626          p = b-\nfd;\n4627          assert(chunksize(p) == small_index2size(i));\n4628          unlink_first_small_chunk(gm, b, p, i);\n\n\n\n\n\n\u62ff\u5230\u7bb1\u53f7\u4e4b\u540e\uff0c\u8fd9\u5757\u7684\u903b\u8f91\u4e0e\u4e0a\u6587\u89c4\u5219\u4e00\u7684\u903b\u8f91\u4e00\u6837\u3002\n\n\n4629          rsize = small_index2size(i) - nb;\n\n\n\n\n\n\u53d6\u51fa\u5f53\u524d\u7bb1\u5b50\u7684\u5185\u5b58\u5757\u5927\u5c0f\uff0c\u51cf\u53bb\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u5269\u4f59\u7684\u5185\u5b58\u5757\uff0c\u8fd9\u4e2a\u5269\u4f59\u5185\u5b58\u5757\u4f1a\u653e\u5230dv chunk\u4e2d\u3002\n\n\n4631          if (SIZE_T_SIZE != 4 \n rsize \n MIN_CHUNK_SIZE)\n4632            set_inuse_and_pinuse(gm, p, small_index2size(i));\n4633          else {\n4634            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);\n4635            r = chunk_plus_offset(p, nb);\n4636            set_size_and_pinuse_of_free_chunk(r, rsize);\n4637            replace_dv(gm, r, rsize);\n4638          }\n\n\n\n\n\n2269#define chunk_plus_offset(p, s)  ((mchunkptr)(((char*)(p)) + (s)))\n\n2284#define set_size_and_pinuse_of_free_chunk(p, s)\\\n2285  ((p)-\nhead = (s|PINUSE_BIT), set_foot(p, s))\n\n3063#define set_size_and_pinuse_of_inuse_chunk(M, p, s)\\\n3064  ((p)-\nhead = (s|PINUSE_BIT|CINUSE_BIT))\n\n3584#define insert_small_chunk(M, P, S) {\\\n3585  bindex_t I  = small_index(S);\\\n3586  mchunkptr B = smallbin_at(M, I);\\\n3587  mchunkptr F = B;\\\n3588  assert(S \n= MIN_CHUNK_SIZE);\\\n3589  if (!smallmap_is_marked(M, I))\\\n        // \u5982\u679c\u662f\u5bf9\u5e94\u7bb1\u53f7\u539f\u72b6\u6001\u4e3a0,\u5219\u7f6e1.\n3590    mark_smallmap(M, I);\\\n3591  else if (RTCHECK(ok_address(M, B-\nfd)))\\\n3592    F = B-\nfd;\\\n3593  else {\\\n3594    CORRUPTION_ERROR_ACTION(M);\\\n3595  }\\\n3596  B-\nfd = P;\\\n3597  F-\nbk = P;\\\n3598  P-\nfd = F;\\\n3599  P-\nbk = B;\\\n3600}\n\n3648#define replace_dv(M, P, S) {\\\n3649  size_t DVS = M-\ndvsize;\\\n3650  assert(is_small(DVS));\\\n3651  if (DVS != 0) {\\\n3652    mchunkptr DV = M-\ndv;\\\n3653    insert_small_chunk(M, DV, DVS);\\\n3654  }\\\n3655  M-\ndvsize = S;\\\n3656  M-\ndv = P;\\\n3657}\n\n\n\n\n\n\u5982\u679c\u5269\u4f59\u5927\u5c0frsize\u5c0f\u4e8eMIN_CHUNK_SIZE\uff0c\u54b1\u4eec\u76f4\u63a5\u5c06\u6240\u6709\u5185\u5b58\u5206\u914d\u7ed9\u7528\u6237\u3002\u5426\u5219\u5219\u5206\u5272\u5185\u5b58\uff0c\u5e76\u5c06\u5269\u4f59\u7684\u5185\u5b58\u5757\u8f6c\u6210mchunkptr\uff0c \u5373 r\u3002\u6211\u4eec\u7136\u540e\uff0cr\u76f8\u5f53\u4e8e\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u5757\uff0c\u6211\u4eec\u8bbe\u7f6e\u5176head\u5c5e\u6027\uff08size\uff0cPINUSE_BIT\uff0cCINUSE_BIT\uff09\u3002\nreplace_dv \u4e2d\uff0c\u6211\u4eec\u5148\u83b7\u5f97dv size\uff0c\u786e\u8ba4\u662f\u5c0f\u5185\u5b58\u5757\u3002\u7136\u540e\uff0c\u5c31\u662f\u628adv\u5185\u5b58\u5757\u63d2\u5165\u5230\u5bf9\u5e94\u7684\u7bb1\u53f7\u91cc\u3002\u5c31\u8ddf\u4e4b\u524d\uff0c\u6839\u636e\u5927\u5c0f\u83b7\u53d6\u5230\u5bf9\u5e94\u7bb1\u53f7\u7684\u94fe\u8868\u5934\u7684\u903b\u8f91\u4e00\u6837\uff0c\n\u53ea\u662f\u8fd9\u91cc\u662f\u5c06\u5185\u5b58\u5757\u63d2\u5165\u53cc\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002\nok\uff0c \u63d2\u5165\u5b8c\u6210\u540e\uff0c\u54b1\u4eec\u628a\u521a\u624d\u5206\u5272\u5269\u4e0b\u7684\u5185\u5b58\u5b58\u653e\u5230dv chunk\u4e2d\u3002\n\n\n4639          mem = chunk2mem(p);\n4640          check_malloced_chunk(gm, mem, nb);\n4641          goto postaction;\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u8fd4\u56de\u5185\u5b58\u7ed9\u7528\u6237\uff0c\u89c4\u5219\u4e09\u7b2c\u4e00\u90e8\u5206\u5185\u5b58\u5206\u914d\u7ed3\u675f\u3002\n\n\n4644        else if (gm-\ntreemap != 0 \n (mem = tmalloc_small(gm, nb))\n!= 0) {\n4645          check_malloced_chunk(gm, mem, nb);\n4646          goto postaction;\n\n\n\n\n\n\u8fd9\u91ccelse \u5bf9\u5e94\u201c4618        if (smallbits != 0) {\u201d \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u5c0f\u5185\u5b58\u7684\n=\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u7684\u6240\u6709\u7bb1\u5b50\u4e0d\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5feb\u3002 \u7136\u540e\uff0c\u6211\u4eec\u68c0\u67e5treemap\u4e2d\u662f\u5426\u5b58\u5728\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u8c03\u7528tmalloc_small\u3002\n\n\n2833#define treebin_at(M,i)     (\n((M)-\ntreebins[i]))\n\n4527-static void* tmalloc_small(mstate m, size_t nb) {\n...\n4531  binmap_t leastbit = least_bit(m-\ntreemap);\n4532  compute_bit2idx(leastbit, i);\n4533  v = t = *treebin_at(m, i);\n4534  rsize = chunksize(t) - nb;\n\n\n\n\n\nleast_bit\n \u7684\u4f5c\u7528\u5c31\u662f\u4fdd\u7559\u6700\u53f3\u4fa7\u4e3a1\u7684bit\u4f4d\uff0c\u5176\u4f59\u4f4d\u4e3a0.\u6240\u4ee5\uff0c\nleast_bit\n\u548c\ncompute_bit2idx\n\u7684\u5171\u540c\u4f5c\u7528\u5c31\u662f\u5728treemap\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u53ef\u7528\u5185\u5b58\u7bb1\u5b50\u3002v\u548ct\u5373\u4e3a\u627e\u5230\u7684\u5185\u5b58\u5757\u6811\u7684\u6839\u8282\u70b9\u3002\n\n\n4536  while ((t = leftmost_child(t)) != 0) {\n4537    size_t trem = chunksize(t) - nb;\n4538    if (trem \n rsize) {\n4539      rsize = trem;\n4540      v = t;\n4541    }\n4542  }\n\n\n\n\n\n\u8fd9\u6bb5\u4ee3\u7801\u662f\u5bfb\u627et\u7684\u6700\u5de6\u5b50\u6811\u3002\u5728\u524d\u6587\u6211\u4eec\u4ecb\u7ecd\u8fc7aka\u6811\uff0c\u6bcf\u4e00\u68f5\u6811\u7684\u505a\u5b50\u6811\u603b\u5c0f\u4e8e\u5176\u53f3\u5b50\u6811\u3002\u8be5\u4ee3\u7801\u5c31\u662f\u5728\u5bfb\u627e\u6ee1\u8db3\u7528\u4e8e\u8bf7\u6c42\u5927\u5c0fnb\u7684\u6700\u63a5\u8fd1\u7684\u6811\u7684\u8282\u70b9\u3002\uff08\u8003\u8651\u5230\u8bf7\u6c42\u7684\u5b57\u8282nb\n=256byte, \u800c\u5728tree\u4e2d\u6700\u5c0f\u7684chunksize \n 256byte \u6240\u4ee5,\u4e0d\u4f1a\u51fa\u73b0\u8d1f\u6570.\uff09\n\n\n4545    mchunkptr r = chunk_plus_offset(v, nb);\n4546    assert(chunksize(v) == rsize + nb);\n4547    if (RTCHECK(ok_next(v, r))) {\n4548      unlink_large_chunk(m, v);\n4549      if (rsize \n MIN_CHUNK_SIZE)\n4550        set_inuse_and_pinuse(m, v, (rsize + nb));\n4551      else {\n4552        set_size_and_pinuse_of_inuse_chunk(m, v, nb);\n4553        set_size_and_pinuse_of_free_chunk(r, rsize);\n4554        replace_dv(m, r, rsize);\n4555      }\n4556      return chunk2mem(v);\n4557    }\n4558  }\n\n\n\n\n\n(NOT READY)\n\u8fd9\u6bb5\u4ee3\u7801\u8ddf\u4e0a\u6587\u5c0f\u5185\u5b58\u627e\u5230\u540e\u5904\u7406\u7684\u4ee3\u7801\u76f8\u4f3c\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\uff0cunlink_large_chunk\uff0c\u6240\u4ee5\u6211\u4eec\u770b\u4e0bunlink_large_chunk\u7684\u5b9e\u73b0.\u8fd9\u4e2a\u8fc7\u7a0b\u6709\u4e09\u4e2a\u6b65\u9aa4\n\n\n\n\n\u5982\u679c\u7ed3\u70b9X\u662f\u94fe\u8868\u7684\u7ed3\u70b9,\u5219\u5c06\u5176\u91cd\u94fe\u8868\u4e2d\u5220\u9664.\n\n\n\u5982\u679cX\u662f\u8be5\u5927\u5c0f\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9,\u4f46\u662f\u4e0d\u662f\u53f6\u5b50\u7ed3\u70b9,\u5b83\u5fc5\u987b\u7528\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u66ff\u6362.\u8fd9\u91cc\u67e5\u627e\u53f6\u5b50\u7ed3\u70b9\u7684\u65b9\u6cd5\u662f\u4ece\u6700\u53f3\u4fa7\u5f00\u59cb.\n\n\n\u5982\u679cX\u662f\u94fe\u8868\u7684\u5934(\u62e5\u6709parent linker),\u5c31\u9700\u8981\u91cd\u65b0\u5c06\u5176x\u7684\u7236\u7ed3\u70b9\u4e0e\u66ff\u6362x\u7684\u7ed3\u70b9\u91cd\u65b0\u8fde\u63a5.\n\n\n\n\n3730#define unlink_large_chunk(M, X) {\\\n3731  tchunkptr XP = X-\nparent;\\\n3732  tchunkptr R;\\\n\n\n\n\n\n3733  if (X-\nbk != X) {\\\n3734    tchunkptr F = X-\nfd;\\\n3735    R = X-\nbk;\\\n3736    if (RTCHECK(ok_address(M, F) \n F-\nbk == X \n R-\nfd == X)) {\\\n3737      F-\nbk = R;\\\n3738      R-\nfd = F;\\\n3739    }\\\n3740    else {\\\n3741      CORRUPTION_ERROR_ACTION(M);\\\n3742    }\\\n3743  }\\\n\n\n\n\n\n\u8fd9\u91cc\u662f\u7b2c\u4e00\u79cd\u60c5\u51b5,\u5373x\u662f\u5c5e\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9.\n\n\n3744  else {\\\n3745    tchunkptr* RP;\\\n3746    if (((R = *(RP = \n(X-\nchild[1]))) != 0) ||\\\n3747        ((R = *(RP = \n(X-\nchild[0]))) != 0)) {\\\n3748      tchunkptr* CP;\\\n3749      while ((*(CP = \n(R-\nchild[1])) != 0) ||\\\n3750             (*(CP = \n(R-\nchild[0])) != 0)) {\\\n3751        R = *(RP = CP);\\\n3752      }\\\n3753      if (RTCHECK(ok_address(M, RP)))\\\n3754        *RP = 0;\\\n3755      else {\\\n3756        CORRUPTION_ERROR_ACTION(M);\\\n3757      }\\\n3758    }\\\n3759  }\\\n\n\n\n\n\n\u8fd9\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5.\n\n\n3760  if (XP != 0) {\\ \n3761    tbinptr* H = treebin_at(M, X-\nindex);\\ \n3762    if (X == *H) {\\ \n3763      if ((*H = R) == 0) \\ \n3764        clear_treemap(M, X-\nindex);\\ \n3765    }\\ \n3766    else if (RTCHECK(ok_address(M, XP))) {\\ \n3767      if (XP-\nchild[0] == X) \\ \n3768        XP-\nchild[0] = R;\\ \n3769      else \\ \n3770        XP-\nchild[1] = R;\\ \n3771    }\\ \n3772    else\\ \n3773      CORRUPTION_ERROR_ACTION(M);\\ \n3774    if (R != 0) {\\ \n3775      if (RTCHECK(ok_address(M, R))) {\\ \n3776        tchunkptr C0, C1;\\ \n3777        R-\nparent = XP;\\ \n3778        if ((C0 = X-\nchild[0]) != 0) {\\ \n3779          if (RTCHECK(ok_address(M, C0))) {\\ \n3780            R-\nchild[0] = C0;\\ \n3781            C0-\nparent = R;\\ \n3782          }\\ \n3783          else\\ \n3784            CORRUPTION_ERROR_ACTION(M);\\ \n3785        }\\ \n3786        if ((C1 = X-\nchild[1]) != 0) {\\ \n3787          if (RTCHECK(ok_address(M, C1))) {\\ \n3788            R-\nchild[1] = C1;\\ \n3789            C1-\nparent = R;\\ \n3790          }\\ \n3791          else\\ \n3792            CORRUPTION_ERROR_ACTION(M);\\ \n3793        }\\ \n3794      }\\ \n3795      else\\ \n3796        CORRUPTION_ERROR_ACTION(M);\\ \n3797    }\\ \n3798  }\\ \n\n\n\n\n\n\u8fd9\u662f\u7b2c\u4e09\u79cd\u60c5\u51b5.\n\n\n\n\u4ee5\u4e0a,\u72ec\u5c5e\u4e8e\u5c0f\u5185\u5b58\u7684\u5206\u914d\u89c4\u5219\u7ed3\u675f!\n\n\n4650    else if (bytes \n= MAX_REQUEST)\n4651      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in\nsys alloc) */\n\n\n\n\n\n2224#define MAX_REQUEST         ((-((MCHUNK_SIZE + CHUNK_ALIGN_MASK) \n ~CHUNK_ALIGN_MASK)) \n 2)\n\n\n\n\n\n\u8fd9\u91cc,\u5f53\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\n= MAX_REQUEST\u65f6,\u6211\u4eec\u5f3a\u5236\u5206\u914d\u5931\u8d25.\nCHUNK_ALIGN_MASK\n \u4e3a \n2 * sizeof(void *) - 1\n,\u572832bit\u4e0a\u4e3a7.\u6240\u4ee5MAX_REQUEST\u662f\u4e00\u4e2a\u6781\u5927\u7684\u6570.\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b,\u6211\u4eec\u5c06nb\u8bbe\u7f6e\u4e3affffffff,\u5f3a\u5236\u5931\u8d25.\n\n\n\u5927\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e00\n\n\n\u7c7b\u4f3c\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e00,\u4ece\u6811\u4e2d\u627e\u5230\u6700\u9002\u5408\u7684\u5185\u5b58\u5757.\n\n\n4652    else {\n4653      nb = pad_request(bytes);\n4654      if (gm-\ntreemap != 0 \n (mem = tmalloc_large(gm, nb)) != 0) {\n4655        check_malloced_chunk(gm, mem, nb);\n4656        goto postaction;\n4657      }\n4658    }\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u7684\u91cd\u70b9\u662f\ntmalloc_large\n,\u5b83\u4e0e\ntmalloc_small\n\u7684\u5dee\u522b\u662f:\ntmalloc_small\n\u662f\u7528\u4e8e\u5c0f\u5185\u5b58\u5206\u914d\u7684,\u53ea\u9700\u8981\u5728treemap\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u6709\u6548\u6811,\u53d6\u51fa\u6811\u4e2d\u6700\u5c0f\u5185\u5b58\u5373\u53ef;\u800c\ntmalloc_large\n\u662f\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219,\u5728\u6240\u670932\u68f5\u6811\u4e2d\u627e\u5230\u6700\u5339\u914d\u5927\u5c0f\u7684\u5185\u5b58\u5757.\n\n\n4456static void* tmalloc_large(mstate m, size_t nb) {\n4457  tchunkptr v = 0;\n4458  size_t rsize = -nb; /* Unsigned negation */\n4459  tchunkptr t;\n4460  bindex_t idx;\n4461  compute_tree_index(nb, idx);\n4462  if ((t = *treebin_at(m, idx)) != 0) {\n\n\n\n\n\nrsize \u4e3a\u6781\u5927\u6570. \ncompute_tree_index\n\u901a\u8fc7\u8bf7\u6c42\u7684\u5927\u5c0fnb,\u4ecetreebinmap\u4e2d\u8ba1\u7b97\u51fa\u7bb1\u53f7.\ntreebin_at\n \u5219\u662f\u53d6\u51faidx\u7bb1\u53f7\u4e2d\u5bf9\u5e94\u7684\u6811\u6839\u7ed3\u70b9.\n\n\n2880#define compute_tree_index(S, I)\\\n2881{\\\n2882  size_t X = S \n TREEBIN_SHIFT;\\\n2883  if (X == 0)\\\n2884    I = 0;\\\n2885  else if (X \n 0xFFFF)\\\n2886    I = NTREEBINS-1;\\\n2887  else {\\\n2888    unsigned int Y = (unsigned int)X;\\\n2889    unsigned int N = ((Y - 0x100) \n 16) \n 8;\\\n2890    unsigned int K = (((Y \n= N) - 0x1000) \n 16) \n 4;\\\n2891    N += K;\\\n2892    N += K = (((Y \n= K) - 0x4000) \n 16) \n 2;\\\n2893    K = 14 - N + ((Y \n= K) \n 15);\\\n2894    I = (K \n 1) + ((S \n (K + (TREEBIN_SHIFT-1)) \n 1));\\\n2895  }\\\n2896}\n\n\n\n\n\n\u4ee5\u4e0a\u8ba1\u7b97\u7684\u7ed3\u679c\u5982\u4e0b,idx\u4e3a\u5bf9\u5e94\u7bb1\u53f7,mem\u5bf9\u5e94\u8be5\u7bb1\u5b50\u4e2d\u6700\u5c0f\u7684\u5185\u5b58\u5927\u5c0f.\n\n\nidx 0 mem 256 hex: 100\nidx 1 mem 384 hex: 180\nidx 2 mem 512 hex: 200\nidx 3 mem 768 hex: 300\nidx 4 mem 1024 hex: 400\nidx 5 mem 1536 hex: 600\nidx 6 mem 2048 hex: 800\nidx 7 mem 3072 hex: c00\nidx 8 mem 4096 hex: 1000\nidx 9 mem 6144 hex: 1800\nidx 10 mem 8192 hex: 2000\nidx 11 mem 12288 hex: 3000\nidx 12 mem 16384 hex: 4000\nidx 13 mem 24576 hex: 6000\nidx 14 mem 32768 hex: 8000\nidx 15 mem 49152 hex: c000\nidx 16 mem 65536 hex: 10000\nidx 17 mem 98304 hex: 18000\nidx 18 mem 131072 hex: 20000\nidx 19 mem 196608 hex: 30000\nidx 20 mem 262144 hex: 40000\nidx 21 mem 393216 hex: 60000\nidx 22 mem 524288 hex: 80000\nidx 23 mem 786432 hex: c0000\nidx 24 mem 1048576 hex: 100000\nidx 25 mem 1572864 hex: 180000\nidx 26 mem 2097152 hex: 200000\nidx 27 mem 3145728 hex: 300000\nidx 28 mem 4194304 hex: 400000\nidx 29 mem 6291456 hex: 600000\nidx 30 mem 8388608 hex: 800000\nidx 31 mem 12582912 hex: c00000\n\n\n\n\n\n4463    /* Traverse tree for this bin looking for node with size == nb */\n4464    size_t sizebits = nb \n leftshift_for_tree_index(idx);\n4465    tchunkptr rst = 0;  /* The deepest untaken right subtree */\n4466    for (;;) {\n4467      tchunkptr rt;\n4468      size_t trem = chunksize(t) - nb;\n4469      if (trem \n rsize) {\n4470        v = t;\n4471        if ((rsize = trem) == 0)\n4472          break;\n4473      }\n4474      rt = t-\nchild[1];\n4475      t = t-\nchild[(sizebits \n (SIZE_T_BITSIZE-SIZE_T_ONE)) \n 1];\n4476      if (rt != 0 \n rt != t)\n4477        rst = rt;\n4478      if (t == 0) {\n4479        t = rst; /* set t to least subtree holding sizes \n nb */\n4480        break;\n4481      }\n4482      sizebits \n= 1;\n4483    }\n\n\n\n\n\n\u8fd9\u662f\u6811\u7684\u641c\u7d22\u7b97\u6cd5,\u6211\u4eec\u6765\u8be6\u7ec6\u770b\u4e0b.\u9996\u5148sizebits\u53d8\u91cf,\u7c7b\u4f3cbinmap,\u6bcf\u4e00\u4f4d\u5bf9\u5e94\u6811\u7684\u5bf9\u5e94\u6df1\u5ea6\u7684\u5de6\u53f3\u5b50\u6811,\u53ef\u4ee5\u8ba4\u4e3a\u662f\u904d\u5386\u6811\u7684key bits.\n\n\n2904#define leftshift_for_tree_index(i) \\\n2905   ((i == NTREEBINS-1)? 0 : \\\n2906    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) \n 1) + TREEBIN_SHIFT - 2)))\n\n\n\n\n\n1601#define SIZE_T_BITSIZE      (sizeof(size_t) \n 3)\n1606#define SIZE_T_ONE          ((size_t)1)\n2574#define TREEBIN_SHIFT     (8U)\n\n\n\n\n\nleftshift_for_tree_index\n \u5b8f\u5c06\u5173\u952e\u7801\u79fb\u52a8\u5230\u4e86\u6700\u5de6.\u8ba1\u7b97\u7684\u7ed3\u679c\u4e3a (25 - (i \n 1)). \u76f8\u5bf9\u4e8e\u7bb1\u5b500, \u5185\u5b58\u8303\u56f4\u4e3a128, \u5173\u952e\u7801\u957f\u5ea6\u4e3a 7, \nleftshift_for_tree_index\n\u8ba1\u7b97\u7684\u7ed3\u679c\u4e3a25. \u6240\u4ee5,\u5c06 nb \n 25 , \u5c31\u662f\u5c06\u5173\u952e\u7801\u79fb\u52a8\u5230\u6700\u5de6\u7aef.\n\n\n\u7136\u540e\u6211\u4eec\u770bfor\u5faa\u73af\u5185\u90e8\u7684,\u8fd9\u5c31\u662f\u5728\u904d\u5386\u6811\u4e86.\n\n\n4467      tchunkptr rt;\n4468      size_t trem = chunksize(t) - nb;\n4469      if (trem \n rsize) {\n4470        v = t;\n4471        if ((rsize = trem) == 0)\n4472          break;\n4473      }\n\n\n\n\n\n\u4e0e \u5bfb\u627e\u6700\u5339\u914dnb\u6700\u8fd1\u7684\u70b9.\u5f53\u7136,\u5982\u679c\u627e\u5230\u5927\u5c0f\u76f8\u7b49\u7684,\u5c31\u76f4\u63a5\u8df3\u51fa, \u8fd9\u4e2a\u8df3\u51fa\u6761\u4ef6\u53ef\u80fd\u662f\u5173\u952e\u7801\u8fd8\u672a\u641c\u7d22\u5b8c.\u8fd9\u91cc\u5c31\u53ef\u4ee5\u770b\u51fa, dlmalloc\u6811\u4e0e bitwise trie\u6811\u7684\u5dee\u5f02,\u503c\u5728\u7279\u5f81\u7801\u7684\u8def\u5f84\u4e0a\u7684\u4efb\u610f\u70b9. \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u4e48\u505a\u5462?\u56e0\u4e3adlmalloc\u7684\u5206\u7bb1\u673a\u5236,\u5bfc\u81f4\u4e86,\u5982\u679c\u641c\u7d22\u5b8c\u5173\u952e\u7801,\u5219 \u8be5\u7ed3\u70b9\u5fc5\u5b9a\u53ea\u5b58\u5728\u53f6\u5b50\u7ed3\u70b9\u4e0a. \u5728\u8fd9\u4e2a\u524d\u63d0\u4e0b,\u4e3a\u4e86\u8282\u7701\u5185\u5b58\u7a7a\u95f4, \u5728\u63d2\u5165\u7ed3\u70b9\u65f6,\u53ea\u8981\u5728\u5173\u952e\u7801\u7684\u8def\u5f84\u4e0a\u4e0d\u5b58\u5728\u88ab\u5360\u7528\u7684\u70b9,\u5c31\u5c06\u8be5\u503c\u63d2\u5165. \u5728\u67e5\u770b\u4e86 \ninsert_large_chunk\n \u540e\u4f1a\u6709\u66f4\u6e05\u6670\u7684\u4f53\u4f1a.\n\n\n4474      rt = t-\nchild[1];\n4475      t = t-\nchild[(sizebits \n (SIZE_T_BITSIZE-SIZE_T_ONE)) \n 1];\n4476      if (rt != 0 \n rt != t)\n4477        rst = rt;\n4478      if (t == 0) {\n4479        t = rst; /* set t to least subtree holding sizes \n nb */\n4480        break;\n4481      }\n4482      sizebits \n= 1;\n\n\n\n\n\n(sizebits \n (SIZE_T_BITSIZE-SIZE_T_ONE))\n \u8fd9\u4e2a\u5c31\u662f\u6bcf\u4e00\u5c42\u6811\u7684\u7279\u5f81\u7801\u4e86.\u7ed3\u5408\u4e0a\u9762sizebits\u7684\u503c,\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u4e3a \nnb \n (6 + (i \n 1))\n. \u5982\u679c,\u6211\u4eec\u518d\u7ed3\u5408\ncompute_tree_index\n \u4e2d\u7684\u7ed3\u679c,\u5f97\u5230\u5982\u4e0b\u8868.idx\u4e3a\u7bb1\u53f7,mem\u4e3a\u8be5\u7bb1\u5b50\u4e2d\u7684\u6700\u5c0f\u5185\u5b58,hex\u4e3a\u8be5\u503c\u768416\u8fdb\u5236,mid\u4e3a\u533a\u5206\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u7279\u5f81\u7801,bitshift\u4e3a\u7279\u5f81\u7801\u7684\u65e0\u6548\u4f4d\u6570. \u6bd4\u5982,\u7bb1\u5b501\u4e2d,dix\u4e3a1,\u5176\u8868\u793a\u7684\u5185\u5b58\u8303\u56f4\u4e3a[384, 512),\u5219\u5176\u5de6\u5b50\u6811\u8868\u793a\u8303\u56f4\u4e3a[384,448),\u53f3\u5b50\u6811\u4e3a[448,512).448\u5373\u4e3a\u8be5\u6811\u7684\u7b2c\u4e00\u5c42\u7684\u7279\u5f81\u7801,\u4e5f\u5c31\u662f111000000.\u5982\u679cnb \n 448, \u5219\u7b2c7\u4f4d\u4e3a0,\u5426\u5219\u7b2c7\u4f4d\u4e3a1.\u6240\u4ee5,\u53ea\u8981\u901a\u8fc7\u5c06size \n bitshift \u4e4b\u540e\u4e0e1 \u505a\u4f4d\u4e0e\u8fd0\u7b97,\u5c31\u53ef\u4ee5\u5224\u65ad\u51fa\u5728\u8be5\u6811\u5bf9\u5e94\u5c42\u8be5\u8fdb\u5165\u5176\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811.\n\n\nidx 0 mem 256 hex: 100  mid: 101000000 bitshift: 6\nidx 1 mem 384 hex: 180 mid: 111000000 bitshift: 6\nidx 2 mem 512 hex: 200 mid: 1110000000 bitshift: 7\nidx 3 mem 768 hex: 300 mid: 1010000000 bitshift: 7\nidx 4 mem 1024 hex: 400 mid: 10100000000 bitshift: 8\nidx 5 mem 1536 hex: 600 mid: 11100000000 bitshift: 8\nidx 6 mem 2048 hex: 800 mid: 101000000000 bitshift: 9\nidx 7 mem 3072 hex: c00 mid: 111000000000 bitshift: 9\nidx 8 mem 4096 hex: 1000 mid: 1010000000000 bitshift: 10\nidx 9 mem 6144 hex: 1800 mid: 1110000000000 bitshift: 10\nidx 10 mem 8192 hex: 2000 mid: 10100000000000 bitshift: 11\nidx 11 mem 12288 hex: 3000 mid: 11100000000000 bitshift: 11\nidx 12 mem 16384 hex: 4000 mid: 101000000000000 bitshift: 12\nidx 13 mem 24576 hex: 6000 mid: 111000000000000 bitshift: 12\nidx 14 mem 32768 hex: 8000 mid: 1010000000000000 bitshift: 13\nidx 15 mem 49152 hex: c000 mid: 1110000000000000 bitshift: 13\nidx 16 mem 65536 hex: 10000 mid 10100000000000000 bitshift: 14\nidx 17 mem 98304 hex: 18000 mid 11100000000000000 bitshift: 14\nidx 18 mem 131072 hex: 20000 mid 101000000000000000 bitshift: 15\nidx 19 mem 196608 hex: 30000 mid 111000000000000000 bitshift: 15\nidx 20 mem 262144 hex: 40000 mid 1010000000000000000 bitshift: 16\nidx 21 mem 393216 hex: 60000 mid 1110000000000000000 bitshift: 16\nidx 22 mem 524288 hex: 80000 mid 10100000000000000000 bitshift: 17\nidx 23 mem 786432 hex: c0000 mid 11100000000000000000 bitshift: 17\nidx 24 mem 1048576 hex: 100000 mid 101000000000000000000 bitshift: 18\nidx 25 mem 1572864 hex: 180000 mid 111000000000000000000 bitshift: 18\nidx 26 mem 2097152 hex: 200000 mid 1010000000000000000000 bitshift: 19\nidx 27 mem 3145728 hex: 300000 mid 1110000000000000000000 bitshift: 19\nidx 28 mem 4194304 hex: 400000 mid 10100000000000000000000 bitshift: 20\nidx 29 mem 6291456 hex: 600000 mid 11100000000000000000000 bitshift: 20\nidx 30 mem 8388608 hex: 800000 mid 101000000000000000000000 bitshift: 21\nidx 31 mem 12582912 hex: c00000 bitshift: 31\n\n\n\n\n\n// \u56fe, dlammloc \u6811\u7684\u56fe.\n\n\n4485  if (t == 0 \n v == 0) { /* set t to root of next non-empty treebin */\n4486    binmap_t leftbits = left_bits(idx2bit(idx)) \n m-\ntreemap;\n4487    if (leftbits != 0) {\n4488      bindex_t i;\n4489      binmap_t leastbit = least_bit(leftbits);\n4490      compute_bit2idx(leastbit, i);\n4491      t = *treebin_at(m, i);\n4492    }\n4493  }\n\n\n\n\n\n\u8fd9\u91cc\u5bf9\u5e94\u4e0a\u6587\u7684\n4462  if ((t = *treebin_at(m, idx)) != 0) {\n , \u4e5f\u5c31\u662f\u8bf4\u5728\u5f53\u524d\u5927\u5c0f\u7684\u7bb1\u5b50\u5185\u4e0d\u5b58\u5728\u7a7a\u95f2\u7684\u5185\u5b58\u5757,\u6240\u4ee5\u6211\u4eec\u8981\u628at\u8bbe\u7f6e\u4e3a\u6700\u8fd1\u7684\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u7bb1\u53f7.\nleft_bits\n \u548c \nleast_bit\n \u8ddf\u4e0a\u6587\u5c0f\u5185\u5b58\u5bfb\u627e\u6700\u8fd1\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u7bb1\u5b50\u7b97\u6cd5\u4e00\u6837.\n\n\n4495  while (t != 0) { /* find smallest of tree or subtree */\n4496    size_t trem = chunksize(t) - nb;\n4497    if (trem \n rsize) {\n4498      rsize = trem;\n4499      v = t;\n4500    }\n4501    t = leftmost_child(t);\n4502  }\n\n\n\n\n\n\u8fd9\u91cc\u8ddf\ntmalloc_small\n\u5bfb\u627e\u6700\u5de6\u5b50\u6811(\u6700\u5c0f\u5185\u5b58)\u7684\u7b97\u6cd5\u4e00\u6837.\u8fd9\u6bb5\u4ee3\u7801\u5bf9\u4e0a\u9762\u7684\u4e24\u79cd\u60c5\u51b5\u90fd\u6709\u6548.\u5373,\u5982\u679c\u5728\u5bf9\u5e94\u7bb1\u53f7\u6709\u7a7a\u95f2\u5185\u5b58,\u5728\u57fa\u4e8e\u6811\u7684\u641c\u7d22\u7b97\u6cd5\u627e\u5230\u7684t\u5c31\u662f\u6700\u5339\u914dnb\u7684\u5927\u5c0f,\u6240\u4ee5\u8fd9\u91cc\u7684while\u5faa\u73af\u7ed3\u679ct\u5c31\u4e0d\u4f1a\u6539\u53d8;\u5982\u679c\u662f,\u5bfb\u627e\u6700\u8fd1\u6709\u7a7a\u95f2\u5757\u7684\u6811,\u90a3\u4e48\u8be5\u6811\u7684\u6700\u5c0f\u5185\u5b58\u90fd\u5927\u4e8e\u8bf7\u6c42\u5927\u5c0fnb,\u6240\u4ee5\u76f4\u63a5\u5bfb\u627e\u6700\u5de6\u5b50\u6811.\n\n\ndlmalloc\u6d45\u6790\n\n\n\n\nversion 1.0 by Werther Zhang @ 2014.03.15 Write done @WizNote\n\n\nVersion 1.1   by Werther Zhang @ 2014.03.20 Export to @Word\n\n\nVersion  1.2  by Werther Zhang @ 2016.07.02 Move to @leanote\n\n\n\n\ndlmalloc\u4ecb\u7ecd\n\n\ndlmalloc\u5728\u67d0\u4e9b\u7a0b\u5ea6\u4e0a\u8bf4\uff0c\u662f\u6700\u597d\u7684\u5185\u5b58\u7ba1\u7406\u5de5\u5177\u4e4b\u4e00\u3002\u5b83\u662f\u7531Doug Lea \u57281987\u5e74\u5f00\u59cb\u7f16\u5199\uff0c\u6240\u4ee5\u5927\u90e8\u5206\u4eba\u4f1a\u79f0\u547c\u5b83\u4e3aDoug Lea's Malloc\uff0c \u7b80\u79f0dlmalloc\u3002\n\n\n\u7b97\u6cd5\u6982\u89c8\n\n\ndlmalloc \u6839\u636e\u5185\u5b58\u7c92\u5ea6\u7684\u5927\u5c0f\u5206\u522b\u4f7f\u7528chunk\u548csegment\u8fdb\u884c\u7ba1\u7406\u3002Segment\u662f\u901a\u8fc7sbrk\u5206\u914d\uff0c\u7c7b\u4f3c\u8fdb\u7a0b\u7684\u6570\u636e\u6bb5\uff0c\u5c5e\u4e8e\u6781\u5c11\u9047\u5230\u7684\u60c5\u51b5\u3002Dlmalloc\u4e2d\u5927\u91cf\u5b58\u5728\u7684\u5185\u5b58\u5757\u662fchunk\u3002Chunk\u7684\u7ed3\u6784\u5982\u4e0b\u3002\n\n\n\u88ab\u7528\u6237\u4f7f\u7528\u7684chunk\u7ed3\u6784\u770b\u8d77\u6765\u50cf\u4e0b\u9762\u8fd9\u6837\uff08\u975e\u7cbe\u786e\u56fe\uff09\uff1a\n\n\n\n\n\u800c\u672a\u88ab\u4f7f\u7528\u7684chunk\u770b\u8d77\u6765\u5982\u4e0b\uff08\u975e\u7cbe\u786e\u56fe\uff09\uff1a\n\n\n\n\n\n\u5728\u865a\u62df\u5730\u5740\u4e0a\uff0cdlmalloc\u4f1a\u4fdd\u8bc1\u7a7a\u95f2\u7684\u5185\u5b58\u5757\u5b58\u5728\u201c\u5b64\u5c9b\u6548\u5e94\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4efb\u4e00\u5757\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u524d\u540e\u5fc5\u5b9a\u662f\u88ab\u4f7f\u7528\u7684\u5185\u5b58\u5757\u3002\u56e0\u4e3a\u5728free\u6216\u8005\u5176\u4ed6\u4efb\u4f55\u65f6\u5019\uff0cdlmalloc\u603b\u662f\u4f1a\u5408\u5e76\u7a7a\u95f2\u7684\u5185\u5b58\u5757\u3002\n\n\n\u5bf9 \u4e8echunk\uff0c\u6839\u636e\u5176\u5927\u5c0f\uff0c\u5206\u4e3a\u5927\u5185\u5b58\u548c\u5c0f\u5185\u5b58\u3002\u5c0f\u5185\u5b58\u753132\u4e2a\u53cc\u5411\u94fe\u8868\u901a\u8fc7\u5206\u7bb1\uff08\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u5bf9\u5e94\u4e00\u4e2a\u5927\u5c0f\uff0c\u6bcf\u4e2a\u7bb1\u5b50\u4e2d\u5b58\u653e\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff09\u8fdb\u884c\u7ba1\u7406\uff0c\u800c\u5927 \u5185\u5b58\u7edf\u4e00\u7531bitwise tries\u6811\u901a\u8fc7\u5206\u7bb1\uff08\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u5bf9\u5e94\u4e00\u4e2a\u5185\u5b58\u8303\u56f4\uff0c\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u4e2d\u5b58\u653e\u4e00\u68f5\u6811\uff0c\u6bcf\u4e00\u68f5\u6811\u4e2d\u82e5\u6709\u7b49\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u7531\u53cc\u5411\u94fe\u8868\u7ba1\u7406\uff09 \u8fdb\u884c\u7ba1\u7406\u3002\n\n\n\u6bcf\u4e00\u4e2achunk\u7684\u5927\u5c0f\u5fc5\u987b\u4e3a8byte\u7684\u6574\u6570\u500d\u3002\u6240\u4ee5\u5728\u2019size of chunk\u2019 \u57df\u7684\u4f4e\u4e09\u4f4d\u5b58\u653e\u4e86\u8be5chunk\u5c5e\u6027\u7684\u6807\u5fd7\u4f4d\u3002\n\n\nP (PINUSE_BIT) \u4f4d, \u4fdd \u5b58\u5728\u5185\u5b58\u5757\u5927\u5c0f(\u4e00\u822c\u662f\u53cc\u5b57\u8282\u7684\u500d\u6570)\u7684\u672a\u4f7f\u7528\u7684\u4f4e\u4f4d, \u662f\u4e00\u4e2a\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u662f\u5426\u88ab\u4f7f\u7528\u7684bit\u4f4d.\u5982\u679c\u8fd9\u4e2abit\u4f4d\u88ab\u6e05\u7406\u4e86,\u90a3\u4e48\u5728\u5f53\u524d\u5185\u5b58\u5757 \u4e4b \u524d\u7684\u4e00\u4e2a\u5b57 \u5927\u5c0f\u6570\u636e\u4fdd\u5b58\u7740\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u7528\u4e8e\u5bfb\u627e\u524d\u4e00\u4e2a\u5185\u5b58\u5757.\u800c \u7b2c\u4e00\u4e2a\u5185\u5b58\u5757\u8fd9\u4e2abit\u4f4d\u603b\u662f\u88ab\u7f6e\u4e0a\u7684,\u9632\u6b62\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u5185\u5b58\u533a\u57df.\u5982\u679c\u67d0\u4e2a \u5185 \u5b58\u5757\u7684 pinuse\u88ab\u8bbe\u7f6e\u4e86,\u4f60\u5c31\u65e0\u6cd5\u51b3\u5b9a\u4e0a\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u5e76\u4e14\u5982\u679c\u4f60\u771f\u7684\u5c1d \u8bd5\u8fd9 \u4e48\u505a\u4e86,\u6709\u53ef\u80fd\u5185\u5b58\u8bbf\u95ee\u51fa\u9519.\n\n\nC (CINUSE_BIT) bit\u4f4d, \u4fdd\u5b58\u5728\u5185\u5b58\u5757\u7684\u7b2c\u4e8c\u4f4e\u7684bit\u4f4d,\u5197\u4f59\u5730\u8bb0\u5f55\u7740\u5f53\u524d\u5757\u662f \u5426\u88ab\u4f7f\u7528\u4e86(\u9664\u975e\u5f53\u524d\u5185\u5b58\u5757\u662f\u88ab\u6620\u5c04\u7684).\u8fd9\u4e2a\u5197\u4f59\u4fe1\u606f\u7528\u4e8e\u5728free\u548crealloc\u64cd \u4f5c\u65f6\u7684\u68c0\u67e5,\u5e76\u4e14\u51cf\u5c11\u5728\u6267\u884cfree\u548c\u5408\u5e76\u5185\u5b58\u5757\u65f6\u7684\u95f4\u63a5\u64cd\u4f5c.\n\n\n\u4efb\u4f55\u65b0\u5206\u914d\u7684\u5185\u5b58\u5757\u5fc5\u987b\u90fd\u8bbe\u7f6e\u4e86cinuse\u548cpinuse.\u8fd9\u610f\u5473\u7740,\u4efb\u4f55\u5206\u914d\u4e86\u7684\u5185 \u5b58\u5757\u7684\u8fb9\u754c\u8981\u4e48\u662f\u4e00\u4e2a\u5148\u524d\u5206\u914d\u5e76\u4e14\u4ecd\u7136\u5728\u4f7f\u7528(in-use)\u7684\u5185 \u5b58\u5757,\u8981\u4e48\u662f\u5b83\u81ea \u5df1\u7684\u5927\u5185\u5b58\u533a\u57df(segment)\u7684\u5730\u5740.\u8fd9\u6837\u786e\u4fdd\u6240\u6709\u7684\u5185\u5b58\u7533\u8bf7(allocations)\u90fd\u662f\u4ece\u4efb\u4f55\u80fd\u627e\u5230\u7684\u5185\u5b58\u5757\u7684\u201c\u6700\u4f4e\u201d\u90e8\u5206 \u83b7\u53d6.\u8fdb\u4e00\u6b65\u5730\u8bf4,\u4e0d\u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u7a7a\u95f2\u5185 \u5b58\u5757\u5728\u7269\u7406\u4e0a\u7d27\u90bb\u7740\u53e6 \u4e00\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757,\u6240\u4ee5\u6bcf\u4e00\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757\u88ab\u8bc1\u5b9e\u5728\u4f7f\u7528 (inuse)\u7684\u5185\u5b58\u5757\u6216\u8005\u5185\u5b58\u5c3e \u90e8\u4e4b\u524d\u548c\u4e4b\u540e.\n\n\n\u6ce8\u610f: \u5f53\u524d\u5757\u7684 \u2019foot\u2019\u5b9e\u9645\u4e0a\u4ee3\u8868\u7740\u4e0b\u4e00\u4e2a\u5185\u5b58\u5757\u7684prev_foot.\u8fd9\u4f7f\u5bf9\u9f50\u7b49\u64cd \u4f5c\u5904\u7406\u53d8\u5f97\u5bb9\u6613\u4f46\u4f1a\u4f7f\u4eba\u5728\u6269\u5c55\u6216\u7ef4\u62a4\u8fd9\u4efd\u4ee3\u7801\u65f6\u611f\u5230\u56f0\u60d1.\n\n\n\u4ee5\u4e0b\u662f\u5bf9\u7279\u6b8a\u7684\u5185\u5b58\u5757\u7684\u8bf4\u660e:\n\n\n\n\n\u7279 \u6b8a\u7684\u5185\u5b58\u5757\u2019top\u2019\u662f\u6700\u9876\u4e0a\u7684\u53ef\u7528\u5185\u5b58\u5757(i.e., \u7d27\u90bb\u7740\u53ef\u7528\u5185\u5b58\u7684\u8fb9\u754c). \u8fd9\u5757\u5185\u5b58\u5757\u4f1a\u88ab\u7279\u6b8a\u5bf9\u5f85. Top \u5185\u5b58\u5757\u4e0d\u4f1a\u88ab\u5305\u542b\u5728\u4efb\u4f55\u7684\u5185\u5b58\u5206 \u7c7b\u7bb1\u91cc, \u53ea\u6709\u5728\u6ca1\u6709\u4efb\u4f55\u5176\u4ed6\u5185\u5b58\u5757\u53ef\u4f7f\u7528\u65f6,\u624d\u88ab\u4f7f\u7528,\u5e76\u4e14\u5728\u5b83\u975e\u5e38\u5927\u65f6(\u67e5\u770b M_TRIM_THRESHOLD) \u4f1a\u88ab\u91ca\u653e\u4e00\u90e8\u5206\u56de\u7cfb\u7edf.\u5728\u5b9e\u9645 \u4e0a,top\u5185\u5b58\u5757\u4e00\u822c\u88ab\u8ba4 \u4e3a\u662f\u6bd4\u5176\u4ed6\u6240\u6709\u7684\u5185\u5b58\u5757\u90fd\u5927.Top\u5185\u5b58\u5757\u4ece\u6765\u4e0d\u4f1a\u66f4\u65b0\u5b83\u7684\u5c3e\u90e8\u6570\u636e\u533a\u57df\u56e0 \u4e3a\u6839\u672c\u6ca1\u6709\u5185\u5b58\u5757\u4f1a\u5728\u7d22\u5f15\u4e0a\u7d27\u8ddf\u5176\u540e.\u4f46\u662f,\u7a7a\u95f4 \u8fd8\u662f\u4f1a\u5206\u914d\u7ed9\u5b83 (TOP_FOOT_SIZE) \u7528\u6237\u505a\u5185\u5b58\u5757\u7684\u62c6\u5206\u548c\u5408\u5e76,\u5f53\u7a7a\u95f4\u9700\u8981\u6269\u5c55\u65f6.\n\n\ndv chunk \u662f\u4fdd\u5b58\u4e86\u6700\u8fd1\u88ab\u4f7f\u7528\u5e76\u5207\u5272\u8fc7\u7684\u5185\u5b58\u5757\uff0c\u4fdd\u5b58\u5728\u5168\u5c40\u7684gm\u4e2d\u3002\u5b83\u4e0d\u5f52\u5c5e\u5230\u53cc\u5411\u94fe\u8868\u6216\u8005\u6811\u4e2d\u7ba1\u7406\u3002\u4f46\u5f53\u5b83\u88ab\u66ff\u6362\u65f6\uff0c\u4e5f\u4f1a\u52a0\u5165\u5185\u5b58\u7ba1\u7406\u4e2d\u3002\n\n\nBitwise trie \u6811, \u5b9e\u9645\u4e0a\u662f\u7ed3\u5408\u4e86\u4e8c\u53c9\u6811\u548ctrie\u6811(\u53c8\u53eb\u5b57\u5178\u6811, \u524d\u7f00\u6570).\u4e8c\u53c9\u6811\u53ea\u6709\u5de6\u53f3\u5b50\u6811. Trie\u6811\u662f\u4e00\u79cd\u6709\u5e8f\u6811,\u7528\u4e8e\u4fdd\u5b58\u5173\u8054\u6570\u7ec4,\u7c7b\u4f3c hash table, \u6709key \u548c value \u7ed3\u6784. \u5982\u4e0b\u56fe.key \u5b9e\u9645\u4e0a\u5c31\u662f\u5230\u8fbevalue\u7684\u8def\u5f84.\u800cbitwise trie, \u5b83\u662f\u5c06 key\u8bbe\u7f6e\u4e3a0/1, \u6240\u4ee5, \u662f\u4e00\u68f5\u4e8c\u53c9\u6811.\u5728dlmalloc\u7684bitwise trie tree\u4e2d, 0 \u4ee3\u8868\u8fdb\u5165\u5de6\u5b50\u6811, 1 \u4ee3\u8868\u8fdb\u5165\u53f3\u5b50 \u6811. \u800ckey\u7684\u957f\u5ea6\u5bf9\u5e94\u8def\u5f84\u7684\u6df1\u5ea6.\u53c2\u8003 [treebins\u548c\u6811\u7ba1\u7406\u56fe\u89e3] \u7684\u56fe,\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u8981\u67e5\u627e\u7684\u662f512\u5bf9\u5e94\u7684\u7ed3\u70b9, \u5219\u5c06520\u5bf9 \u5e94\u4e8c\u8fdb\u5236\u7801\u662f1000001000, \u5bf9\u5e94\u7684\u7bb1\u5b50\u53f7\u662f2\u53f7,\u5219\u5176\u8868\u793a\u7684\u5185\u5b58\u8303\u56f4\u4e3a256, \u7279\u5f81\u7801\u957f\u5ea6\u4e3a8, \u4e5f\u5c31\u662f00001000.\u8003\u8651\u5230, \u6240\u6709\u8bf7 \u6c42\u5927\u5c0f\u4e3a8byte\u500d\u6570,\u6240\u4ee5, \u5b9e\u9645\u7279\u5f81\u7801\u4e3a00001, \u6811\u6df1\u4e3a5, \u524d4\u5c42\u4e3a\u5de6\u5b50\u6811,\u7b2c\u4e94\u5c42\u4e3a\u53f3\u5b50\u6811.\u4f46\u521a\u624d\u63cf\u8ff0\u7684\u662ftrie\u6811\u548c bitwise trie \u6811, \u4e0d\u662fdlmalloc\u4f7f\u7528\u7684\u6811.\n\n\n\n\n\n\n\u975eMSPACE\u4ee3\u7801\u903b\u8f91\u5206\u6790\n\n\nstruct\n \nmalloc_chunk\n \n{\n\n\nsize_t\n               \nprev_foot\n;\n  \n/* \u5982\u679c\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7a7a\u95f2,\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f */\n\n\nsize_t\n               \nhead\n;\n       \n/* \u5927\u5c0f\u548cinuse bit\u4f4d*/\n\n\nstruct\n \nmalloc_chunk\n*\n \nfd\n;\n         \n/* \u5982\u679c\u662f\u7a7a\u95f2\u5185\u5b58\u5757,\u6307\u5411\u53cc\u5411\u94fe\u8868*/\n\n\nstruct\n \nmalloc_chunk\n*\n \nbk\n;\n\n\n};\n\n\n\ntypedef\n \nstruct\n \nmalloc_chunk\n  \nmchunk\n;\n\n\ntypedef\n \nstruct\n \nmalloc_chunk\n*\n \nmchunkptr\n;\n\n\ntypedef\n \nstruct\n \nmalloc_chunk\n*\n \nsbinptr\n;\n  \n/* \u5185\u5b58\u5757\u5206\u7c7b\u7bb1\u7684\u7c7b\u578b */\n\ufeff\u200b\n\n\n\n\n\n\nhead \u57df\u4e2d\u53d8\u91cf\u7684\u8bf4\u660e:\n\n\nPINUSE_BIT \u5728\u524d\u4e00\u4e2a\u76f8\u90bb\u7684\u5185\u5b58\u5757\u88ab\u4f7f\u7528\u65f6,\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u88ab\u7f6e\u4e0a. CINUSE_BIT \u5728\u5f53\u524d\u5185\u5b58\u5757\u88ab\u4f7f\u7528\u65f6,\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u88ab\u7f6e\u4e0a. FLAG4_BIT \u5728\u5f53\u524d\u7248\u672c\u7684dlmalloc\u4e2d\u672a\u88ab\u4f7f\u7528\n\n\n\n\u5982 \u4f55\u505a\u5230\u5728head\u4e2d\u65e2\u5b58\u653e\u5757\u5927\u5c0f\u53c8\u5b58\u653e\u6807\u5fd7\u4f4d\u7684\u5462?\u9996\u5148\u63d0\u5230\u4e00\u70b9\u662f,\u6240\u6709\u7684\u5757\u7684 \u5927\u5c0f\u90fd\u662f\u6309\u6700\u5c118bit\u5bf9\u9f50\u7684,\u6362\u53e5\u8bdd\u8bf4,\u8868\u793a\u5927\u5c0f\u7684\u6570\u5b57,\u4f4e3\u4f4d\u5fc5\u5b9a\u4e3a 0,\u6240\u4ee5\u5c31\u6709 \u6548\u5730\u5229\u7528\u4e86\u4f4e3\u4f4d\u5b58\u653e\u6807\u5fd7\u4f4d.\u6240\u4ee5,\u83b7\u53d6chunk\u7684\u5927\u5c0f\u7528\u4e0b\u9762\u7684\u5b8f,\u5c06head\u7684\u4f4e\u4e09 \u4f4d\u6e05\u62100,\u53d6\u51fa.\n\n\n\n#define chunksize(p)        ((p)-\nhead \n ~(FLAG_BITS))\n\n\n\n\n\n\n\u4e0b\u9762\u4ecb\u7ecd\u4e0bdlmalloc\u7ef4\u62a4\u7684\u4e00\u4e2a\u5168\u5c40\u6570\u636e\u7ed3\u6784.\n\n\n2579\n \nstruct\n \nmalloc_state\n \n{\n \n\n2580\n   \nbinmap_t\n   \nsmallmap\n;\n  \n// 32bit, \u5c0f\u5185\u5b58\u7bb1\u5b50\u7684\u4f4d\u56fe.\n\n\n2581\n   \nbinmap_t\n   \ntreemap\n;\n    \n// 32bit, \u5927\u5185\u5b58\u7bb1\u5b50\u7684\u4f4d\u56fe\n\n\n2582\n   \nsize_t\n     \ndvsize\n;\n           \n//  dv chunk \u7684\u5927\u5c0f\n\n\n2583\n   \nsize_t\n     \ntopsize\n;\n          \n//  top chunk\u7684\u5927\u5c0f\n\n\n2584\n   \nchar\n*\n      \nleast_addr\n;\n    \n//  dlmalloc\u7ba1\u7406\u7684\u5185\u5b58\u7684\u6700\u5c0f\u5730\u5740,\u4e5f\u5c31\u662f\u6700\u5c0f\u7684segment \u57fa\u5730\u5740.\n\n\n2585\n   \nmchunkptr\n  \ndv\n;\n            \n// dv chunk. \u6700\u8fd1\u88ab\u5206\u5272\u4f7f\u7528\u7684chunk\n\n\n2586\n   \nmchunkptr\n  \ntop\n;\n           \n// top chunk. \u9876\u90e8,\u9760\u8fd1\u6709\u6548\u5185\u5b58\u7684chunk,\u8be6\u89c1\u603b\u7ed3\u56fe.\n\n\n2587\n   \nsize_t\n     \ntrim_check\n;\n    \n// \u68c0\u67e5top chunk\u5927\u5c0f\u662f\u5426\u8d85\u7684\u51fd\u6570.\n\n\n2588\n   \nsize_t\n     \nrelease_checks\n;\n  \n\n2589\n   \nsize_t\n     \nmagic\n;\n \n\n2590\n   \nmchunkptr\n  \nsmallbins\n[(\nNSMALLBINS\n+\n1\n)\n*\n2\n];\n   \n// 32\u4e2a\u94fe\u8868\u5934\n\n\n2591\n   \ntbinptr\n    \ntreebins\n[\nNTREEBINS\n];\n           \n// 32\u68f5\u6811\n\n\n2592\n   \nsize_t\n     \nfootprint\n;\n \n\n2593\n   \nsize_t\n     \nmax_footprint\n;\n \n\n2594\n   \nsize_t\n     \nfootprint_limit\n;\n \n/* zero means no limit */\n \n\n2595\n   \nflag_t\n     \nmflags\n;\n \n\n2596\n \n#\nif\n \nUSE_LOCKS\n \n\n2597\n   \nMLOCK_T\n    \nmutex\n;\n     \n/* locate lock among fields that rarely change */\n \n\n2598\n \n#\nendif\n \n/* USE_LOCKS */\n \n\n2599\n   \nmsegment\n   \nseg\n;\n        \n//  segment\u94fe\u8868.\n\n\n2600\n   \nvoid\n*\n      \nextp\n;\n      \n/* Unused but available for extensions */\n \n\n2601\n   \nsize_t\n     \nexts\n;\n \n\n2602\n \n};\n\ufeff\u200b\n\n\n\n\n\n\nmchunkptr  smallbins[(NSMALLBINS+1)*2];  \n\n\n\n\n\n\u8fd9\u91cc\u4f1a\u6709\u4e2a\u7591\u95ee,\u7406\u8bba\u4e0a, 32\u4e2a\u94fe\u8868\u5934,\u6211\u4eec\u4f1a\u4f7f\u7528\nstruct malloc_chunk  smallbins[NSMALLBINS];\n  \u4f46\u8fd9\u91cc\u4e0d\u4f7f\u7528\u7684\u539f\u56e0\u662f, \u5bf9\u4e8e\u94fe\u8868\u5934\u800c\u8a00,  \nmalloc_chunk\n\u7684 \nprev_foot\n\u548c\nhead\n\u4e24\u4e2a\u57df\u662f\u6ca1\u6709\u88ab\u4f7f\u7528\u7684,\u5b9e\u9645\u9700\u8981\u7684\u5927\u5c0f\u662f2\u4e2a\u6307\u9488\u5927 \u5c0f.\u6240\u4ee5,dlmalloc\u4f7f\u7528\u4e86\u8986\u76d6\u7684\u65b9\u6cd5. \u524d\u4e00\u4e2a malloc_state \u7684fb/bk \u8e29\u4e86\u540e\u4e00\u4e2a\u7684 malloc_state\u7684 prev_foot/head.\u6240\u4ee5\u5927\u5c0f\u5e94\u8be5\u4e3a 32 * 8 + 8, \u4e5f\u5c31\u662f33 * 2 \u4e2a\u6307\u9488\u5927\u5c0f.\n\n\n\n\n\u88ab\u8986\u76d6\u7684\u6570\u636e\u7ed3\u6784\n\n\n\u5f53\u5185\u5b58\u5757\u672a\u88ab\u4f7f\u7528\u65f6,\u4ed6\u4eec\u4f5c\u4e3a\u5217\u8868\u6216\u8005\u6811\u7684\u8282\u70b9.\n\n\n\u5c0f\u5185\u5b58(\u201cSmall\u201d) \u5757\u5b58\u50a8\u5728\u73af\u5f62\u53cc\u5411\u94fe\u8868\u4e2d,\u770b\u8d77\u6765\u50cf\u5982\u4e0b\u8fd9\u6837.\n\n\n\n\n\u800c \u5927 \u7684\u5185\u5b58\u5757\u4f7f\u7528\u5185\u5b58\u5757\u5927\u5c0f\u4e3a\u5173\u952e\u5b57\u7684bitwise digital tree (\u53c8\u53ebaka tree).\u56e0\u4e3amalloc_tree_trunks\u53ea\u662f \u7528\u4e8e\u5927\u5c0f\u5927\u4e8e256bytes\u7684\u7a7a\u95f2\u5185\u5b58\u5757,\u4ed6\u4eec \u7684\u5927\u5c0f\u4e0d\u4f1a\u53d7\u5230\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u7684\u9650\u5236.\u6bcf \u4e00\u4e2a\u8282\u70b9\u7684\u7ed3\u6784\u770b\u8d77\u6765\u50cf\u5982\u4e0b\u8fd9 \u6837.\n\n\n\n\n\u6bcf\u4e00\u68f5\u6811\u90fd\u62e5\u6709\u552f\u4e00\u7684\u5185\u5b58\u5757\u5927\u5c0f.\u800c\u5177\u6709\u540c\u6837\u5927\u5c0f\u7684\u5185\u5b58\u5757\u4f1a\u88ab\u5b89\u6392\u5728\u53cc\u5411\u94fe \u8868\u91cc,\u4e0e\u6700\u8001\u7684\u5185\u5b58\u5757\u4e00\u8d77(\u6307,\u4ee5FIFO\u7684\u89c4\u5219,\u4e0b\u4e00\u4e2a\u8981\u88ab\u4f7f\u7528\u7684\u5185\u5b58\u5757).\u5982\u679c\u4e00 \u4e2a\u5177\u6709\u540c\u6837\u5927\u5c0f\u7684\u5185\u5b58\u5757\u88ab\u63d2\u5165,\u5b83\u5c31\u4f1a\u7528\u7c7b\u4f3c\u5c0f\u5185\u5b58\u7684fb/bk\u7684\u6307\u9488\u4e00\u6837\u7684\u65b9\u5f0f,\u4ece \u539f\u6709\u7684\u8282\u70b9\u79fb\u9664.\n\n\n\n\u6bcf \u4e00 \u68f5\u6811\u5305\u542b\u5927\u5c0f\u4e3a2\u7684\u4e58\u65b9\u8303\u56f4\u7684\u5185\u5b58\u5757(\u6700\u5c0f\u4e3a0x100 \n= x \n 0x180),\u5728\u6811 \u7684\u6bcf\u4e00\u5c42\u90fd\u4f1a\u88ab\u5206\u6210\u4e00\u534a,\u5373\u5c0f\u7684\u4e00\u534a (0x100 \n= x \n 0x140)\u4f5c\u4e3a\u5de6\u5b50\u6811,\u5927\u7684\u4e00 \u534a\u4f5c\u4e3a\u53f3\u5b50\u6811(0x140 \n= x \n 0x180).\n\n\n\n\u901a\u8fc7\u4f7f\u7528\u8fd9\u79cd\u89c4\u5219,\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u5305\u542b\u7684\u5185\u5b58\u5757\u5927\u5c0f\u90fd\u5c0f\u96e8\u5176\u53f3\u5b50\u6811.\n\n\n\nSmallbins\u548c\u53cc\u5411\u94fe\u8868\u7ba1\u7406\u5c0f\u5185\u5b58\u56fe\u89e3\u3002\n\n\n\n\nTreebins\u548c\u6811\u7ba1\u7406\u5927\u5185\u5b58\u7684\u56fe\u89e3\uff1a\n\n\n\n\ndlmalloc\u4ee3\u7801\u5206\u6790\n\n\ndlmalloc \u5bf9\u5c0f\u5185\u5b58\u5206\u914d\u6709\u5982\u4e0b5\u4e2a\u89c4\u5219(\u6309\u4f18\u5148\u7ea7\u987a\u5e8f)\uff1a \n\n\n\n\n\u5982\u679c\u4e0e\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u5339\u914d\u7684\u7bb1\u5b50\u5b58\u5728\u7a7a\u95f2,\u5219\u4f7f\u7528\u5f53\u524d\u7bb1\u5b50\uff0c\u5426\u5219\u4f7f\u7528\u4e34\u8fd1\u7684 \u7bb1\u5b50\u3002\u5728\u80fd\u4e0d\u5206\u5272\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\u5c3d\u91cf\u4e0d\u5206\u5272\u5185\u5b58\u3002 \n\n\n\u5982\u679cdv chunk\u8db3\u591f\u5927\uff0c\u90a3\u4e48\u4f7f\u7528dv chunk\u3002 dv chunk\u662f\u6307\u6700\u8fd1\u4e00\u6b21\u5c0f\u5185\u5b58 \u7533\u8bf7\u65f6\u4f7f\u7528\u7684\u5185\u5b58\u5757\u3002 \u8fd9\u4e2a\u89c4\u5219\u662f\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u5206\u914d\u7684\u5185\u5b58\u8fde\u7eed\u3002 \n\n\n\u5728smallbin\u548ctreebin\u4e2d\u5bfb\u627e\u53ef\u4ee5\u4f7f\u7528\u7684\u5185\u5b58\u5757\uff0c\u5e76\u5206\u5272\u3002\u5c06\u5269\u4e0b\u7684\u5185\u5b58 \u5757\u4fdd\u5b58\u5230dv chunk\u4e2d\u3002 \n\n\n\u5982\u679ctop chunk \u8db3\u591f\u5927\uff0c\u5219\u4f7f\u7528top chunk\n\n\n\u5982\u679c\u8bf7\u6c42\u5185\u5b58\u5b9e\u5728\u592a\u5927\uff0c\u5219\u4f7f\u7528\u7cfb\u7edf\u5206\u914d\u5185\u5b58\u3002\n\n\n\n\n\n\u5927\u5185\u5b58\u5206\u914d\u7684\u89c4\u5219\uff1a\n\n\n\n\n\u5728treebin\u4e2d\u627e\u5230\u6700\u9002\u5408\u7684\u6700\u5c0f\u5185\u5b58\uff0c\u5982\u679c\u5b83\u6bd4dv chunk\u7684\u66f4\u5408\u9002\uff0c\u5c31\u4f7f\u7528\u5b83\uff0c \u5982\u679c\u6709\u9700\u8981\u5c31\u5206\u5272\u5b83\u3002 \n\n\n\u5982\u679cdv chunk \u6bd4\u5176\u4ed6\u6240\u6709\u7684\u66f4\u5408\u9002\uff0c\u4f7f\u7528dv chunk\u3002 \n\n\n\u5982\u679ctop \u8db3\u591f\u5927\uff0c\u4f7f\u7528top chunk\u3002 \n\n\n\u5982\u679c\u8bf7\u6c42\u7684\u5927\u5c0f \n= mmap threshold, \u5219\u4f7f\u7528\u7cfb\u7edf\u7684mmap\u3002\n\n\n\u76f4\u63a5\u4ece\u7cfb\u7edf\u5206\u914d\u5185\u5b58\u5e76\u4f7f\u7528\u3002\n\n\n\n\n\n\n\u5c0f\u5185\u5b58\u89c4\u5219\u4e00\n\n\n\n\n4597\n     \nif\n \n(\nbytes\n \n=\n \nMAX_SMALL_REQUEST\n)\n \n{\n\n\n\n\n\n\n// MAX_SMALL_REQUEST \u5b9e\u73b0\n2577 #define MAX_SMALL_REQUEST (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)\n\n\n\n\n\n\u8fd9\u91ccbytes\u4e3a\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f, \nMAX_SMALL_REQUEST\n\u5c31\u662f\u4e4b\u524d\u63d0\u5230\u8fc7\u7684\u6700\u5927\u7684\u5c0f\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u5c31\u662f256byte,\u5373,256byte\u4ee5\u4e0b\u7684\u6240\u6709\u5185\u5b58\u90fd\u662f\u5728\u53cc\u5411\u94fe\u8868\u4e2d\u5339\u914d.\n\n\n\n4600\n       \nnb\n \n=\n \n(\nbytes\n \n \nMIN_REQUEST\n)\n?\n \nMIN_CHUNK_SIZE\n \n:\n \npad_request\n(\nbytes\n);\n\n\n\n\n\n\n2225\n \n#\ndefine\n \nMIN_REQUEST\n         \n(\nMIN_CHUNK_SIZE\n \n-\n \nCHUNK_OVERHEAD\n \n-\n \nSIZE_T_ONE\n)\n\n\n\n2228\n \n#\ndefine\n \npad_request\n(\nreq\n)\n \\\n\n2229\n    \n(((\nreq\n)\n \n+\n \nCHUNK_OVERHEAD\n \n+\n \nCHUNK_ALIGN_MASK\n)\n \n \n~\nCHUNK_ALIGN_MASK\n)\n\n\n\n\n\n\n\u8fd9\u91ccnb\u5c31\u662f\u52a0\u4e0a\u534f\u8bae\u6570\u636e\u540e\u7684\u5b9e\u9645dlmalloc\u4f1a\u5206\u914d\u7684\u5185\u5b58\u5757\u5927\u5c0f.\u524d\u6587\u7b14\u8005\u63d0\u5230\u8fc7,\u5c0f\u5185\u5b58\u5757\u7684\u6700\u5c0f\u503c\u4e3a8byte,\u6240\u4ee5,\u4e0d\u8bba\u7533\u8bf7\u7684\u5185\u5b58\u591a\u5c0f,\u90fd\u4f7f\u7528\u6700\u5c0f\u503c.\n\n\n\n4601      idx = small_index(nb);\n\n\n\n\n\n2572\n \n#\ndefine\n \nSMALLBIN_SHIFT\n    \n(\n3U\n)\n\n\n\n2825\n \n#\ndefine\n \nsmall_index\n(\ns\n)\n      \n(\nbindex_t\n)((\ns\n)\n  \n \nSMALLBIN_SHIFT\n)\n\n\n\n\n\n\n\u8fd9\u91ccidx\u5f97\u5230\u7684\u662f\u8be5\u5185\u5b58\u5757\u5bf9\u5e94\u7684smallbin\u7bb1\u5b50\u7684\u7bb1\u53f7.\u524d\u6587\u5728\u63d0\u5230head\u65f6,\u63d0\u5230\u8fc7,\u5c0f\u5185\u5b58\u5757\u7684\u5927\u5c0f\u4e3a8byte\u7684\u500d\u6570,\u6240\u4ee5,\u53f3\u79fb3\u4f4d\u6765\u5b9a\u4f4d\u5bf9\u5e94\u7bb1\u5b50\u7684\u7bb1\u53f7.\n\n\n\n4602\n       \nsmallbits\n \n=\n \ngm\n-\nsmallmap\n \n \nidx\n;\n\n\n\n\n\n\nsmallmap \u662f\u5404\u4e2a\u7bb1\u5b50\u7684\u4f4d\u56fe,32bit,\u5bf9\u5e9432\u4e2a\u7bb1\u5b50,\u6bcf\u4e00\u4f4d\u4e3a1\u8868\u793a\u8be5\u7bb1\u53f7\u4e2d\u6709\u5bf9\n\u5e94\u5927\u5c0f\u7684\u5185\u5b58\u5757,\u4e3a0\u5219\u8868\u793a\u6ca1\u6709.\u8be5\u884c\u4ee3\u7801\u662f\u628a\u5bf9\u5e94\u7bb1\u53f7\u7684\u6bd4\u7279\u4f4d\u79fb\u5230\u6700\u53f3\u4fa7.\n\n\n\n4604\n       \nif\n \n((\nsmallbits\n \n \n0x3U\n)\n \n!=\n \n0\n)\n \n{\n\n\n4605\n         \nmchunkptr\n \nb\n,\n \np\n;\n\n\n4606\n         \nidx\n \n+=\n \n~\nsmallbits\n \n \n1\n;\n       \n/* Uses next bin if idx empty */\n\n\n4607\n         \nb\n \n=\n \nsmallbin_at\n(\ngm\n,\n \nidx\n);\n\n\n\n\n\n\n\u8fd9\u91cc 0x3U \u4f4e8\u4f4d\u5c31\u662f 0000 0011. \u6240\u4ee5,smallbits\n0x3U \u4e3a\u771f\u7684\u6761\u4ef6\u5982\u4e0b:(\u4e0a\u6587\u63d0\u5230,smallbits\u7684\u6700\u53f3\u4f4d\u8868\u793aidx\u7bb1\u53f7\u662f\u5426\u6709\u7a7a\u95f2\u5757)\n\n\n\n\n\u4f4e2\u4f4d\u4e3a 11. idx\u6709\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u6709\u7a7a\u95f2\u5757.\n\n\n\u4f4e2\u4f4d\u4e3a 10. idx\u65e0\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u6709\u7a7a\u95f2\u5757.\n\n\n\u4f4e2\u4f4d\u4e3a 01. idx\u6709\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u65e0\u7a7a\u95f2\u5757.\n\n\n\n\n4606\u884c\u662f\u5728\u91cd\u65b0\u5b9a\u4f4d\u5230\u771f\u6b63\u6709\u7a7a\u95f2\u5757\u7684\u7bb1\u53f7. ~smallbits \n 1 \u5728\u5f53\u524d\u7bb1\u5b50\u4e3a0\u7684\n\u60c5\u51b5\u4e0b,\u503c\u4e3a1;\u5f53\u524d\u7bb1\u5b50\u4e3a1\u7684\u60c5\u51b5\u4e0b,\u503c\u4e3a0.\u6240\u4ee5\u662f\u6709\u9650\u662f\u7528\u6b63\u597d\u6ee1\u8db3\u5927\u5c0f\u7684\u7bb1\n\u5b50.\n\n\n\n2831 #define smallbin_at(M, i)\n((sbinptr)((void*)\n((M)-\nsmallbins[(i)\n1])))\n\n\n\n\n\ni \u5c31\u662f idx, \u800cM\u5219\u662fgm(\n\u9700\u8981\u5728\u4e0a\u6587\u9884\u5148\u63cf\u8ff0gm\u7ed3\u6784\u4f53\u6210\u5458\u4f5c\u7528\n).smallbins(\n\u9700\u5728\u4e0a\u6587\u63cf\u8ff0\n)\u5c31\u662f\u53cc\u5411\u94fe\u8868\u6570\u7ec4,\u4e5f\u5c31\u662f\u5bf9\u5e94\u7bb1\u53f7\u5185\u90e8\u7684\u7a7a\u95f2\u5757\u94fe\u8868\u7684\u9996\u5730\u5740.\n\n\n\u503c\u5f97\u9ad8\u5174\u7684\u662f,\u6211\u4eec\u62ff\u5230\u94fe\u8868\u4e86,\u63a5\u4e0b\u6765\u5c31\u662f\u53d6\u51fa\u7a7a\u95f2\u5757,\u548c\u4e00\u4e9b\u6807\u5fd7\u4f4d\u7684\u5904\u7406\u4e86.\n\n\n\n4608        p = b-\nfd;\n4609        assert(chunksize(p) == small_index2size(idx));\n4610        unlink_first_small_chunk(gm, b, p, idx);\n4611        set_inuse_and_pinuse(gm, p, small_index2size(idx));\n4612        mem = chunk2mem(p);\n4613        check_malloced_chunk(gm, mem, nb);\n4614        goto postaction;\n\n\n\n\n\nfd\u57df\u662f\u524d\u4e00\u4e2a\u94fe\u8868\u8282\u70b9.\u800cB\u662f\u8868\u5934, \u4e5f\u5c31\u662f\u8bf4,\u6211\u4eec\u53d6\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20,\u53d6\u5230\u6211\u4eec\u9700\u8981\u7684\u5185\u5b58\u5757\u5730\u5740.\u8fd9\u4e2aassert\u5176\u5b9e\u5c31\u662f\u786e\u8ba4\u4e0b,\u5f53\u524d\u7684\u7bb1\u53f7\u7684\u5185\u5b58\u5757\u5927\u5c0f\u8ddf\u5f53\u524d\u5185\u5b58\u5757\u7684\u5927\u5c0f\u662f\u5426\u5339\u914d.\n\n\n\n\n3629#define unlink_first_small_chunk(M, B, P, I) {\\\n3630  mchunkptr F = P-\nfd;\\\n3631  assert(P != B);\\\n3632  assert(P != F);\\\n3633  assert(chunksize(P) == small_index2size(I));\\\n3634  if (B == F) {\\\n3635    clear_smallmap(M, I);\\\n3636  }\\\n3637  else if (RTCHECK(ok_address(M, F) \n F-\nbk == P)) {\\\n3638    F-\nbk = B;\\\n3639    B-\nfd = F;\\\n3640  }\\\n3641  else {\\\n3642    CORRUPTION_ERROR_ACTION(M);\\\n3643  }\\\n3644}\n\n\n\n\n\n2921#define clear_smallmap(M,i)     ((M)-\nsmallmap \n= ~idx2bit(i))\n\n\n\n\n\n\u8fd9\u91cc B P F\u7684\u5173\u7cfb\u662f F -\n P -\n B , \u6240\u4ee5,\u7406\u8bba\u4e0a, P \u4e0d\u7b49\u4e8eF \u4e5f\u4e0d\u7b49\u4e8eB,\u5982\n\u679c\u76f8\u7b49,\u5c31\u610f\u5473\u7740\u662f\u7a7a\u94fe\u8868(\u53ea\u6709\u8868\u5934).\u800c\u5982\u679cB == F,  \u610f\u5473\u7740\u8be5\u94fe\u8868\u4e2d\u53ea\u6709\u4e00\n\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757.\u53d6\u51fa\u8be5\u5185\u5b58\u5757\u4e4b\u540e,\u54b1\u4eec\u8981\u628a\u8be5\u7bb1\u5b50\u6807\u8bb0\u4e3a\u7a7a(3635, 2921).\u5f53\u7136,\n\u66f4\u591a\u7684\u60c5\u51b5\u662f\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9P.\n\n\n\n// 4611 \u884c\u51fd\u6570\u5b9e\u73b0\n\n3058#define set_inuse_and_pinuse(M,p,s)\\\n3059  ((p)-\nhead = (s|PINUSE_BIT|CINUSE_BIT),\\\n3060  ((mchunkptr)(((char*)(p)) + (s)))-\nhead |= PINUSE_BIT)\n\n\n\n\n\n\u8fd9\u5c31\u662f\u5728P \u7684head\u4e2d\u7f6e\u4e0aCINUSE\u4f4d\u548cP \u7684\u4e0b\u4e00\u5757\u5185\u5b58\u7684head\u4e2d\u8bbe\u7f6e\u4e0aPINUSE\u4f4d.\n\n\n\u6700\u540emem = chunk2mem(p);  \u5c31\u662f\u53d6\u51fa\u4f20\u9012\u4e2a\u7528\u6237\u7684\u6709\u6548\u5185\u5b58\u5730\u5740,.\ncheck_malloced_chunk(gm, mem, nb); \u662f\u8c03\u8bd5\u7528\u7684,\u68c0\u67e5\u8be5\u5206\u914d\u7684\u5185\u5b58\u5757\u7684\u5404\u4e2a\n\u5c5e\u6027\u662f\u5426\u6b63\u5e38.\n\n\n\u5230\u6b64,\u5c0f\u5185\u5b58\u7684,\u6b63\u597d\u7b26\u5408\u6216\u6b63\u597d\u4e34\u8fd1\u7bb1\u5b50\u6709\u7a7a\u95f2\u5757\u7684\u903b\u8f91\u5206\u6790\u5b8c\u6210,\u54b1\u4eec\u62ff\u5230\u4e86\n\u9700\u8981\u7684\u5185\u5b58.\n\n\n\u5c0f\u5185\u5b58\u89c4\u5219\u4e09\n\n\n\u4e0b\u9762,\u662f\u4e0a\u8ff0\u60c5\u51b5\u4e0d\u6ee1\u8db3,\u4e5f\u5c31\u662f\u5f53\u524d\u5185\u5b58\u8bf7\u6c42\u5bf9\u5e94\u7684\u7bb1\u53f7idx\u7684smallbits\u4f4e2\u4f4d\u4e3a 00 ,\u4e5f\u5c31\u662f\u8bf4,\u6ca1\u6709\u7a7a\u95f2\u5757.\n\n\n4617      else if (nb \n gm-\ndvsize) {\n4618        if (smallbits != 0) {\n\n\n\n\n\n(\ndvsize\u9700\u8981\u5728gm\u7684\u5206\u6790\u4e2d\u63cf\u8ff0\u6389\n)  smallbits != 0 \u610f\u5473\u7740,\u5728\u6bd4\u8bf7\u6c42\u7684\u5185\u5b58\u5757\u5927\u7684\u7bb1\u5b50\u4e2d,\u603b\u6709\u7a7a\u95f2\u5757\u5b58\u5728.\u6240\u4ee5\u63a5\u4e0b\u6765\u7684\u76ee\u7684\u662f\u627e\u5230\u6700\u5c0f\u7684\u7a7a\u95f2\u5757.\n\n\n4622          binmap_t leftbits = (smallbits \n idx) \n left_bits(idx2bit(idx));\n4623          binmap_t leastbit = least_bit(leftbits);\n4624          compute_bit2idx(leastbit, i);\n\n\n\n\n\n2917#define idx2bit(i)              ((binmap_t)(1) \n (i))\n\n2929#define least_bit(x)         ((x) \n -(x))\n\n2932#define left_bits(x)         ((x\n1) | -(x\n1))\n\n\n\n\n\n4622 \u884c \u4f4d\u4e0e\u7684\u53f3\u64cd\u4f5c\u6570\u662f\u4e00\u4e2a32bit\u7684\u6570\uff0c\u8be5\u6570\u7684\u4f4e\uff08idx+1\uff09\u4f4d\u4e3a0,\u5176\u4f59\u4f4d\u4e3a1;\u5de6\u64cd\u4f5c\u6570\u5c31\u662f\u5bf9\u5e94\u4f4eidx\u4f4d\u4e3a0,\u540c\u65f6\u4ee3\u7801\u903b\u8f91\u8d70\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\uff0c\u4f4e\uff08idx+2\uff09\u4e3a0\u3002\nleast_bit \u7684\u529f\u80fd\u662f\uff0c\u4fdd\u7559leftbits\u4e2d\u4ece\u53f3\u5f80\u5de6\u7684\u7b2c\u4e00\u4e2a\u4e3a1\u7684\u4f4d\uff0c\u5176\u4f59\u4f4d\u4e3a0. \u5219\u8be5leastbit\u5bf9\u5e94\u7684\u5c31\u662f\u7b26\u5408\u8bf7\u6c42\u7684\u6700\u5c0f\u5185\u5b58\u5757\u7684\u4f4d\u56fe\u3002compute_bit2idx \u662f\u5c06leastit\u4f4d\u56fe\u8f6c\u6362\u6210\u7bb1\u53f7\u3002 \u8fd9\u91cc i \u5c31\u662f\u83b7\u53d6\u5230\u7684\u7bb1\u53f7\u3002\n\n\n4625          b = smallbin_at(gm, i);\n4626          p = b-\nfd;\n4627          assert(chunksize(p) == small_index2size(i));\n4628          unlink_first_small_chunk(gm, b, p, i);\n\n\n\n\n\n\u62ff\u5230\u7bb1\u53f7\u4e4b\u540e\uff0c\u8fd9\u5757\u7684\u903b\u8f91\u4e0e\u4e0a\u6587\u89c4\u5219\u4e00\u7684\u903b\u8f91\u4e00\u6837\u3002\n\n\n4629          rsize = small_index2size(i) - nb;\n\n\n\n\n\n\u53d6\u51fa\u5f53\u524d\u7bb1\u5b50\u7684\u5185\u5b58\u5757\u5927\u5c0f\uff0c\u51cf\u53bb\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u5269\u4f59\u7684\u5185\u5b58\u5757\uff0c\u8fd9\u4e2a\u5269\u4f59\u5185\u5b58\u5757\u4f1a\u653e\u5230dv chunk\u4e2d\u3002\n\n\n4631          if (SIZE_T_SIZE != 4 \n rsize \n MIN_CHUNK_SIZE)\n4632            set_inuse_and_pinuse(gm, p, small_index2size(i));\n4633          else {\n4634            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);\n4635            r = chunk_plus_offset(p, nb);\n4636            set_size_and_pinuse_of_free_chunk(r, rsize);\n4637            replace_dv(gm, r, rsize);\n4638          }\n\n\n\n\n\n2269#define chunk_plus_offset(p, s)  ((mchunkptr)(((char*)(p)) + (s)))\n\n2284#define set_size_and_pinuse_of_free_chunk(p, s)\\\n2285  ((p)-\nhead = (s|PINUSE_BIT), set_foot(p, s))\n\n3063#define set_size_and_pinuse_of_inuse_chunk(M, p, s)\\\n3064  ((p)-\nhead = (s|PINUSE_BIT|CINUSE_BIT))\n\n3584#define insert_small_chunk(M, P, S) {\\\n3585  bindex_t I  = small_index(S);\\\n3586  mchunkptr B = smallbin_at(M, I);\\\n3587  mchunkptr F = B;\\\n3588  assert(S \n= MIN_CHUNK_SIZE);\\\n3589  if (!smallmap_is_marked(M, I))\\\n        // \u5982\u679c\u662f\u5bf9\u5e94\u7bb1\u53f7\u539f\u72b6\u6001\u4e3a0,\u5219\u7f6e1.\n3590    mark_smallmap(M, I);\\\n3591  else if (RTCHECK(ok_address(M, B-\nfd)))\\\n3592    F = B-\nfd;\\\n3593  else {\\\n3594    CORRUPTION_ERROR_ACTION(M);\\\n3595  }\\\n3596  B-\nfd = P;\\\n3597  F-\nbk = P;\\\n3598  P-\nfd = F;\\\n3599  P-\nbk = B;\\\n3600}\n\n3648#define replace_dv(M, P, S) {\\\n3649  size_t DVS = M-\ndvsize;\\\n3650  assert(is_small(DVS));\\\n3651  if (DVS != 0) {\\\n3652    mchunkptr DV = M-\ndv;\\\n3653    insert_small_chunk(M, DV, DVS);\\\n3654  }\\\n3655  M-\ndvsize = S;\\\n3656  M-\ndv = P;\\\n3657}\n\n\n\n\n\n\u5982\u679c\u5269\u4f59\u5927\u5c0frsize\u5c0f\u4e8eMIN_CHUNK_SIZE\uff0c\u54b1\u4eec\u76f4\u63a5\u5c06\u6240\u6709\u5185\u5b58\u5206\u914d\u7ed9\u7528\u6237\u3002\u5426\u5219\u5219\u5206\u5272\u5185\u5b58\uff0c\u5e76\u5c06\u5269\u4f59\u7684\u5185\u5b58\u5757\u8f6c\u6210mchunkptr\uff0c \u5373 r\u3002\u6211\u4eec\u7136\u540e\uff0cr\u76f8\u5f53\u4e8e\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u5757\uff0c\u6211\u4eec\u8bbe\u7f6e\u5176head\u5c5e\u6027\uff08size\uff0cPINUSE_BIT\uff0cCINUSE_BIT\uff09\u3002\nreplace_dv \u4e2d\uff0c\u6211\u4eec\u5148\u83b7\u5f97dv size\uff0c\u786e\u8ba4\u662f\u5c0f\u5185\u5b58\u5757\u3002\u7136\u540e\uff0c\u5c31\u662f\u628adv\u5185\u5b58\u5757\u63d2\u5165\u5230\u5bf9\u5e94\u7684\u7bb1\u53f7\u91cc\u3002\u5c31\u8ddf\u4e4b\u524d\uff0c\u6839\u636e\u5927\u5c0f\u83b7\u53d6\u5230\u5bf9\u5e94\u7bb1\u53f7\u7684\u94fe\u8868\u5934\u7684\u903b\u8f91\u4e00\u6837\uff0c\n\u53ea\u662f\u8fd9\u91cc\u662f\u5c06\u5185\u5b58\u5757\u63d2\u5165\u53cc\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002\nok\uff0c \u63d2\u5165\u5b8c\u6210\u540e\uff0c\u54b1\u4eec\u628a\u521a\u624d\u5206\u5272\u5269\u4e0b\u7684\u5185\u5b58\u5b58\u653e\u5230dv chunk\u4e2d\u3002\n\n\n4639          mem = chunk2mem(p);\n4640          check_malloced_chunk(gm, mem, nb);\n4641          goto postaction;\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u8fd4\u56de\u5185\u5b58\u7ed9\u7528\u6237\uff0c\u89c4\u5219\u4e09\u7b2c\u4e00\u90e8\u5206\u5185\u5b58\u5206\u914d\u7ed3\u675f\u3002\n\n\n4644        else if (gm-\ntreemap != 0 \n (mem = tmalloc_small(gm, nb))\n!= 0) {\n4645          check_malloced_chunk(gm, mem, nb);\n4646          goto postaction;\n\n\n\n\n\n\u8fd9\u91ccelse \u5bf9\u5e94\u201c4618        if (smallbits != 0) {\u201d \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u5c0f\u5185\u5b58\u7684\n=\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u7684\u6240\u6709\u7bb1\u5b50\u4e0d\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5feb\u3002 \u7136\u540e\uff0c\u6211\u4eec\u68c0\u67e5treemap\u4e2d\u662f\u5426\u5b58\u5728\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u8c03\u7528tmalloc_small\u3002\n\n\n2833#define treebin_at(M,i)     (\n((M)-\ntreebins[i]))\n\n4527-static void* tmalloc_small(mstate m, size_t nb) {\n...\n4531  binmap_t leastbit = least_bit(m-\ntreemap);\n4532  compute_bit2idx(leastbit, i);\n4533  v = t = *treebin_at(m, i);\n4534  rsize = chunksize(t) - nb;\n\n\n\n\n\nleast_bit\n \u7684\u4f5c\u7528\u5c31\u662f\u4fdd\u7559\u6700\u53f3\u4fa7\u4e3a1\u7684bit\u4f4d\uff0c\u5176\u4f59\u4f4d\u4e3a0.\u6240\u4ee5\uff0c\nleast_bit\n\u548c\ncompute_bit2idx\n\u7684\u5171\u540c\u4f5c\u7528\u5c31\u662f\u5728treemap\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u53ef\u7528\u5185\u5b58\u7bb1\u5b50\u3002v\u548ct\u5373\u4e3a\u627e\u5230\u7684\u5185\u5b58\u5757\u6811\u7684\u6839\u8282\u70b9\u3002\n\n\n4536  while ((t = leftmost_child(t)) != 0) {\n4537    size_t trem = chunksize(t) - nb;\n4538    if (trem \n rsize) {\n4539      rsize = trem;\n4540      v = t;\n4541    }\n4542  }\n\n\n\n\n\n\u8fd9\u6bb5\u4ee3\u7801\u662f\u5bfb\u627et\u7684\u6700\u5de6\u5b50\u6811\u3002\u5728\u524d\u6587\u6211\u4eec\u4ecb\u7ecd\u8fc7aka\u6811\uff0c\u6bcf\u4e00\u68f5\u6811\u7684\u505a\u5b50\u6811\u603b\u5c0f\u4e8e\u5176\u53f3\u5b50\u6811\u3002\u8be5\u4ee3\u7801\u5c31\u662f\u5728\u5bfb\u627e\u6ee1\u8db3\u7528\u4e8e\u8bf7\u6c42\u5927\u5c0fnb\u7684\u6700\u63a5\u8fd1\u7684\u6811\u7684\u8282\u70b9\u3002\uff08\u8003\u8651\u5230\u8bf7\u6c42\u7684\u5b57\u8282nb\n=256byte, \u800c\u5728tree\u4e2d\u6700\u5c0f\u7684chunksize \n 256byte \u6240\u4ee5,\u4e0d\u4f1a\u51fa\u73b0\u8d1f\u6570.\uff09\n\n\n4545    mchunkptr r = chunk_plus_offset(v, nb);\n4546    assert(chunksize(v) == rsize + nb);\n4547    if (RTCHECK(ok_next(v, r))) {\n4548      unlink_large_chunk(m, v);\n4549      if (rsize \n MIN_CHUNK_SIZE)\n4550        set_inuse_and_pinuse(m, v, (rsize + nb));\n4551      else {\n4552        set_size_and_pinuse_of_inuse_chunk(m, v, nb);\n4553        set_size_and_pinuse_of_free_chunk(r, rsize);\n4554        replace_dv(m, r, rsize);\n4555      }\n4556      return chunk2mem(v);\n4557    }\n4558  }\n\n\n\n\n\n(NOT READY)\n\u8fd9\u6bb5\u4ee3\u7801\u8ddf\u4e0a\u6587\u5c0f\u5185\u5b58\u627e\u5230\u540e\u5904\u7406\u7684\u4ee3\u7801\u76f8\u4f3c\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\uff0cunlink_large_chunk\uff0c\u6240\u4ee5\u6211\u4eec\u770b\u4e0bunlink_large_chunk\u7684\u5b9e\u73b0.\u8fd9\u4e2a\u8fc7\u7a0b\u6709\u4e09\u4e2a\u6b65\u9aa4\n\n\n\n\n\u5982\u679c\u7ed3\u70b9X\u662f\u94fe\u8868\u7684\u7ed3\u70b9,\u5219\u5c06\u5176\u91cd\u94fe\u8868\u4e2d\u5220\u9664.\n\n\n\u5982\u679cX\u662f\u8be5\u5927\u5c0f\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9,\u4f46\u662f\u4e0d\u662f\u53f6\u5b50\u7ed3\u70b9,\u5b83\u5fc5\u987b\u7528\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u66ff\u6362.\u8fd9\u91cc\u67e5\u627e\u53f6\u5b50\u7ed3\u70b9\u7684\u65b9\u6cd5\u662f\u4ece\u6700\u53f3\u4fa7\u5f00\u59cb.\n\n\n\u5982\u679cX\u662f\u94fe\u8868\u7684\u5934(\u62e5\u6709parent linker),\u5c31\u9700\u8981\u91cd\u65b0\u5c06\u5176x\u7684\u7236\u7ed3\u70b9\u4e0e\u66ff\u6362x\u7684\u7ed3\u70b9\u91cd\u65b0\u8fde\u63a5.\n\n\n\n\n3730#define unlink_large_chunk(M, X) {\\\n3731  tchunkptr XP = X-\nparent;\\\n3732  tchunkptr R;\\\n\n\n\n\n\n3733  if (X-\nbk != X) {\\\n3734    tchunkptr F = X-\nfd;\\\n3735    R = X-\nbk;\\\n3736    if (RTCHECK(ok_address(M, F) \n F-\nbk == X \n R-\nfd == X)) {\\\n3737      F-\nbk = R;\\\n3738      R-\nfd = F;\\\n3739    }\\\n3740    else {\\\n3741      CORRUPTION_ERROR_ACTION(M);\\\n3742    }\\\n3743  }\\\n\n\n\n\n\n\u8fd9\u91cc\u662f\u7b2c\u4e00\u79cd\u60c5\u51b5,\u5373x\u662f\u5c5e\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9.\n\n\n3744  else {\\\n3745    tchunkptr* RP;\\\n3746    if (((R = *(RP = \n(X-\nchild[1]))) != 0) ||\\\n3747        ((R = *(RP = \n(X-\nchild[0]))) != 0)) {\\\n3748      tchunkptr* CP;\\\n3749      while ((*(CP = \n(R-\nchild[1])) != 0) ||\\\n3750             (*(CP = \n(R-\nchild[0])) != 0)) {\\\n3751        R = *(RP = CP);\\\n3752      }\\\n3753      if (RTCHECK(ok_address(M, RP)))\\\n3754        *RP = 0;\\\n3755      else {\\\n3756        CORRUPTION_ERROR_ACTION(M);\\\n3757      }\\\n3758    }\\\n3759  }\\\n\n\n\n\n\n\u8fd9\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5.\n\n\n3760  if (XP != 0) {\\ \n3761    tbinptr* H = treebin_at(M, X-\nindex);\\ \n3762    if (X == *H) {\\ \n3763      if ((*H = R) == 0) \\ \n3764        clear_treemap(M, X-\nindex);\\ \n3765    }\\ \n3766    else if (RTCHECK(ok_address(M, XP))) {\\ \n3767      if (XP-\nchild[0] == X) \\ \n3768        XP-\nchild[0] = R;\\ \n3769      else \\ \n3770        XP-\nchild[1] = R;\\ \n3771    }\\ \n3772    else\\ \n3773      CORRUPTION_ERROR_ACTION(M);\\ \n3774    if (R != 0) {\\ \n3775      if (RTCHECK(ok_address(M, R))) {\\ \n3776        tchunkptr C0, C1;\\ \n3777        R-\nparent = XP;\\ \n3778        if ((C0 = X-\nchild[0]) != 0) {\\ \n3779          if (RTCHECK(ok_address(M, C0))) {\\ \n3780            R-\nchild[0] = C0;\\ \n3781            C0-\nparent = R;\\ \n3782          }\\ \n3783          else\\ \n3784            CORRUPTION_ERROR_ACTION(M);\\ \n3785        }\\ \n3786        if ((C1 = X-\nchild[1]) != 0) {\\ \n3787          if (RTCHECK(ok_address(M, C1))) {\\ \n3788            R-\nchild[1] = C1;\\ \n3789            C1-\nparent = R;\\ \n3790          }\\ \n3791          else\\ \n3792            CORRUPTION_ERROR_ACTION(M);\\ \n3793        }\\ \n3794      }\\ \n3795      else\\ \n3796        CORRUPTION_ERROR_ACTION(M);\\ \n3797    }\\ \n3798  }\\ \n\n\n\n\n\n\u8fd9\u662f\u7b2c\u4e09\u79cd\u60c5\u51b5.\n\n\n\n\u4ee5\u4e0a,\u72ec\u5c5e\u4e8e\u5c0f\u5185\u5b58\u7684\u5206\u914d\u89c4\u5219\u7ed3\u675f!\n\n\n4650    else if (bytes \n= MAX_REQUEST)\n4651      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in\nsys alloc) */\n\n\n\n\n\n2224#define MAX_REQUEST         ((-((MCHUNK_SIZE + CHUNK_ALIGN_MASK) \n ~CHUNK_ALIGN_MASK)) \n 2)\n\n\n\n\n\n\u8fd9\u91cc,\u5f53\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\n= MAX_REQUEST\u65f6,\u6211\u4eec\u5f3a\u5236\u5206\u914d\u5931\u8d25.\nCHUNK_ALIGN_MASK\n \u4e3a \n2 * sizeof(void *) - 1\n,\u572832bit\u4e0a\u4e3a7.\u6240\u4ee5MAX_REQUEST\u662f\u4e00\u4e2a\u6781\u5927\u7684\u6570.\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b,\u6211\u4eec\u5c06nb\u8bbe\u7f6e\u4e3affffffff,\u5f3a\u5236\u5931\u8d25.\n\n\n\u5927\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e00\n\n\n\u7c7b\u4f3c\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e00,\u4ece\u6811\u4e2d\u627e\u5230\u6700\u9002\u5408\u7684\u5185\u5b58\u5757.\n\n\n4652    else {\n4653      nb = pad_request(bytes);\n4654      if (gm-\ntreemap != 0 \n (mem = tmalloc_large(gm, nb)) != 0) {\n4655        check_malloced_chunk(gm, mem, nb);\n4656        goto postaction;\n4657      }\n4658    }\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u7684\u91cd\u70b9\u662f\ntmalloc_large\n,\u5b83\u4e0e\ntmalloc_small\n\u7684\u5dee\u522b\u662f:\ntmalloc_small\n\u662f\u7528\u4e8e\u5c0f\u5185\u5b58\u5206\u914d\u7684,\u53ea\u9700\u8981\u5728treemap\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u6709\u6548\u6811,\u53d6\u51fa\u6811\u4e2d\u6700\u5c0f\u5185\u5b58\u5373\u53ef;\u800c\ntmalloc_large\n\u662f\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219,\u5728\u6240\u670932\u68f5\u6811\u4e2d\u627e\u5230\u6700\u5339\u914d\u5927\u5c0f\u7684\u5185\u5b58\u5757.\n\n\n4456static void* tmalloc_large(mstate m, size_t nb) {\n4457  tchunkptr v = 0;\n4458  size_t rsize = -nb; /* Unsigned negation */\n4459  tchunkptr t;\n4460  bindex_t idx;\n4461  compute_tree_index(nb, idx);\n4462  if ((t = *treebin_at(m, idx)) != 0) {\n\n\n\n\n\nrsize \u4e3a\u6781\u5927\u6570. \ncompute_tree_index\n\u901a\u8fc7\u8bf7\u6c42\u7684\u5927\u5c0fnb,\u4ecetreebinmap\u4e2d\u8ba1\u7b97\u51fa\u7bb1\u53f7.\ntreebin_at\n \u5219\u662f\u53d6\u51faidx\u7bb1\u53f7\u4e2d\u5bf9\u5e94\u7684\u6811\u6839\u7ed3\u70b9.\n\n\n2880#define compute_tree_index(S, I)\\\n2881{\\\n2882  size_t X = S \n TREEBIN_SHIFT;\\\n2883  if (X == 0)\\\n2884    I = 0;\\\n2885  else if (X \n 0xFFFF)\\\n2886    I = NTREEBINS-1;\\\n2887  else {\\\n2888    unsigned int Y = (unsigned int)X;\\\n2889    unsigned int N = ((Y - 0x100) \n 16) \n 8;\\\n2890    unsigned int K = (((Y \n= N) - 0x1000) \n 16) \n 4;\\\n2891    N += K;\\\n2892    N += K = (((Y \n= K) - 0x4000) \n 16) \n 2;\\\n2893    K = 14 - N + ((Y \n= K) \n 15);\\\n2894    I = (K \n 1) + ((S \n (K + (TREEBIN_SHIFT-1)) \n 1));\\\n2895  }\\\n2896}\n\n\n\n\n\n\u4ee5\u4e0a\u8ba1\u7b97\u7684\u7ed3\u679c\u5982\u4e0b,idx\u4e3a\u5bf9\u5e94\u7bb1\u53f7,mem\u5bf9\u5e94\u8be5\u7bb1\u5b50\u4e2d\u6700\u5c0f\u7684\u5185\u5b58\u5927\u5c0f.\n\n\nidx 0 mem 256 hex: 100\nidx 1 mem 384 hex: 180\nidx 2 mem 512 hex: 200\nidx 3 mem 768 hex: 300\nidx 4 mem 1024 hex: 400\nidx 5 mem 1536 hex: 600\nidx 6 mem 2048 hex: 800\nidx 7 mem 3072 hex: c00\nidx 8 mem 4096 hex: 1000\nidx 9 mem 6144 hex: 1800\nidx 10 mem 8192 hex: 2000\nidx 11 mem 12288 hex: 3000\nidx 12 mem 16384 hex: 4000\nidx 13 mem 24576 hex: 6000\nidx 14 mem 32768 hex: 8000\nidx 15 mem 49152 hex: c000\nidx 16 mem 65536 hex: 10000\nidx 17 mem 98304 hex: 18000\nidx 18 mem 131072 hex: 20000\nidx 19 mem 196608 hex: 30000\nidx 20 mem 262144 hex: 40000\nidx 21 mem 393216 hex: 60000\nidx 22 mem 524288 hex: 80000\nidx 23 mem 786432 hex: c0000\nidx 24 mem 1048576 hex: 100000\nidx 25 mem 1572864 hex: 180000\nidx 26 mem 2097152 hex: 200000\nidx 27 mem 3145728 hex: 300000\nidx 28 mem 4194304 hex: 400000\nidx 29 mem 6291456 hex: 600000\nidx 30 mem 8388608 hex: 800000\nidx 31 mem 12582912 hex: c00000\n\n\n\n\n\n4463    /* Traverse tree for this bin looking for node with size == nb */\n4464    size_t sizebits = nb \n leftshift_for_tree_index(idx);\n4465    tchunkptr rst = 0;  /* The deepest untaken right subtree */\n4466    for (;;) {\n4467      tchunkptr rt;\n4468      size_t trem = chunksize(t) - nb;\n4469      if (trem \n rsize) {\n4470        v = t;\n4471        if ((rsize = trem) == 0)\n4472          break;\n4473      }\n4474      rt = t-\nchild[1];\n4475      t = t-\nchild[(sizebits \n (SIZE_T_BITSIZE-SIZE_T_ONE)) \n 1];\n4476      if (rt != 0 \n rt != t)\n4477        rst = rt;\n4478      if (t == 0) {\n4479        t = rst; /* set t to least subtree holding sizes \n nb */\n4480        break;\n4481      }\n4482      sizebits \n= 1;\n4483    }\n\n\n\n\n\n\u8fd9\u662f\u6811\u7684\u641c\u7d22\u7b97\u6cd5,\u6211\u4eec\u6765\u8be6\u7ec6\u770b\u4e0b.\u9996\u5148sizebits\u53d8\u91cf,\u7c7b\u4f3cbinmap,\u6bcf\u4e00\u4f4d\u5bf9\u5e94\u6811\u7684\u5bf9\u5e94\u6df1\u5ea6\u7684\u5de6\u53f3\u5b50\u6811,\u53ef\u4ee5\u8ba4\u4e3a\u662f\u904d\u5386\u6811\u7684key bits.\n\n\n2904#define leftshift_for_tree_index(i) \\\n2905   ((i == NTREEBINS-1)? 0 : \\\n2906    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) \n 1) + TREEBIN_SHIFT - 2)))\n\n\n\n\n\n1601#define SIZE_T_BITSIZE      (sizeof(size_t) \n 3)\n1606#define SIZE_T_ONE          ((size_t)1)\n2574#define TREEBIN_SHIFT     (8U)\n\n\n\n\n\nleftshift_for_tree_index\n \u5b8f\u5c06\u5173\u952e\u7801\u79fb\u52a8\u5230\u4e86\u6700\u5de6.\u8ba1\u7b97\u7684\u7ed3\u679c\u4e3a (25 - (i \n 1)). \u76f8\u5bf9\u4e8e\u7bb1\u5b500, \u5185\u5b58\u8303\u56f4\u4e3a128, \u5173\u952e\u7801\u957f\u5ea6\u4e3a 7, \nleftshift_for_tree_index\n\u8ba1\u7b97\u7684\u7ed3\u679c\u4e3a25. \u6240\u4ee5,\u5c06 nb \n 25 , \u5c31\u662f\u5c06\u5173\u952e\u7801\u79fb\u52a8\u5230\u6700\u5de6\u7aef.\n\n\n\u7136\u540e\u6211\u4eec\u770bfor\u5faa\u73af\u5185\u90e8\u7684,\u8fd9\u5c31\u662f\u5728\u904d\u5386\u6811\u4e86.\n\n\n4467      tchunkptr rt;\n4468      size_t trem = chunksize(t) - nb;\n4469      if (trem \n rsize) {\n4470        v = t;\n4471        if ((rsize = trem) == 0)\n4472          break;\n4473      }\n\n\n\n\n\n\u4e0e \u5bfb\u627e\u6700\u5339\u914dnb\u6700\u8fd1\u7684\u70b9.\u5f53\u7136,\u5982\u679c\u627e\u5230\u5927\u5c0f\u76f8\u7b49\u7684,\u5c31\u76f4\u63a5\u8df3\u51fa, \u8fd9\u4e2a\u8df3\u51fa\u6761\u4ef6\u53ef\u80fd\u662f\u5173\u952e\u7801\u8fd8\u672a\u641c\u7d22\u5b8c.\u8fd9\u91cc\u5c31\u53ef\u4ee5\u770b\u51fa, dlmalloc\u6811\u4e0e bitwise trie\u6811\u7684\u5dee\u5f02,\u503c\u5728\u7279\u5f81\u7801\u7684\u8def\u5f84\u4e0a\u7684\u4efb\u610f\u70b9. \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u4e48\u505a\u5462?\u56e0\u4e3adlmalloc\u7684\u5206\u7bb1\u673a\u5236,\u5bfc\u81f4\u4e86,\u5982\u679c\u641c\u7d22\u5b8c\u5173\u952e\u7801,\u5219 \u8be5\u7ed3\u70b9\u5fc5\u5b9a\u53ea\u5b58\u5728\u53f6\u5b50\u7ed3\u70b9\u4e0a. \u5728\u8fd9\u4e2a\u524d\u63d0\u4e0b,\u4e3a\u4e86\u8282\u7701\u5185\u5b58\u7a7a\u95f4, \u5728\u63d2\u5165\u7ed3\u70b9\u65f6,\u53ea\u8981\u5728\u5173\u952e\u7801\u7684\u8def\u5f84\u4e0a\u4e0d\u5b58\u5728\u88ab\u5360\u7528\u7684\u70b9,\u5c31\u5c06\u8be5\u503c\u63d2\u5165. \u5728\u67e5\u770b\u4e86 \ninsert_large_chunk\n \u540e\u4f1a\u6709\u66f4\u6e05\u6670\u7684\u4f53\u4f1a.\n\n\n4474      rt = t-\nchild[1];\n4475      t = t-\nchild[(sizebits \n (SIZE_T_BITSIZE-SIZE_T_ONE)) \n 1];\n4476      if (rt != 0 \n rt != t)\n4477        rst = rt;\n4478      if (t == 0) {\n4479        t = rst; /* set t to least subtree holding sizes \n nb */\n4480        break;\n4481      }\n4482      sizebits \n= 1;\n\n\n\n\n\n(sizebits \n (SIZE_T_BITSIZE-SIZE_T_ONE))\n \u8fd9\u4e2a\u5c31\u662f\u6bcf\u4e00\u5c42\u6811\u7684\u7279\u5f81\u7801\u4e86.\u7ed3\u5408\u4e0a\u9762sizebits\u7684\u503c,\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u4e3a \nnb \n (6 + (i \n 1))\n. \u5982\u679c,\u6211\u4eec\u518d\u7ed3\u5408\ncompute_tree_index\n \u4e2d\u7684\u7ed3\u679c,\u5f97\u5230\u5982\u4e0b\u8868.idx\u4e3a\u7bb1\u53f7,mem\u4e3a\u8be5\u7bb1\u5b50\u4e2d\u7684\u6700\u5c0f\u5185\u5b58,hex\u4e3a\u8be5\u503c\u768416\u8fdb\u5236,mid\u4e3a\u533a\u5206\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u7279\u5f81\u7801,bitshift\u4e3a\u7279\u5f81\u7801\u7684\u65e0\u6548\u4f4d\u6570. \u6bd4\u5982,\u7bb1\u5b501\u4e2d,dix\u4e3a1,\u5176\u8868\u793a\u7684\u5185\u5b58\u8303\u56f4\u4e3a[384, 512),\u5219\u5176\u5de6\u5b50\u6811\u8868\u793a\u8303\u56f4\u4e3a[384,448),\u53f3\u5b50\u6811\u4e3a[448,512).448\u5373\u4e3a\u8be5\u6811\u7684\u7b2c\u4e00\u5c42\u7684\u7279\u5f81\u7801,\u4e5f\u5c31\u662f111000000.\u5982\u679cnb \n 448, \u5219\u7b2c7\u4f4d\u4e3a0,\u5426\u5219\u7b2c7\u4f4d\u4e3a1.\u6240\u4ee5,\u53ea\u8981\u901a\u8fc7\u5c06size \n bitshift \u4e4b\u540e\u4e0e1 \u505a\u4f4d\u4e0e\u8fd0\u7b97,\u5c31\u53ef\u4ee5\u5224\u65ad\u51fa\u5728\u8be5\u6811\u5bf9\u5e94\u5c42\u8be5\u8fdb\u5165\u5176\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811.\n\n\nidx 0 mem 256 hex: 100  mid: 101000000 bitshift: 6\nidx 1 mem 384 hex: 180 mid: 111000000 bitshift: 6\nidx 2 mem 512 hex: 200 mid: 1110000000 bitshift: 7\nidx 3 mem 768 hex: 300 mid: 1010000000 bitshift: 7\nidx 4 mem 1024 hex: 400 mid: 10100000000 bitshift: 8\nidx 5 mem 1536 hex: 600 mid: 11100000000 bitshift: 8\nidx 6 mem 2048 hex: 800 mid: 101000000000 bitshift: 9\nidx 7 mem 3072 hex: c00 mid: 111000000000 bitshift: 9\nidx 8 mem 4096 hex: 1000 mid: 1010000000000 bitshift: 10\nidx 9 mem 6144 hex: 1800 mid: 1110000000000 bitshift: 10\nidx 10 mem 8192 hex: 2000 mid: 10100000000000 bitshift: 11\nidx 11 mem 12288 hex: 3000 mid: 11100000000000 bitshift: 11\nidx 12 mem 16384 hex: 4000 mid: 101000000000000 bitshift: 12\nidx 13 mem 24576 hex: 6000 mid: 111000000000000 bitshift: 12\nidx 14 mem 32768 hex: 8000 mid: 1010000000000000 bitshift: 13\nidx 15 mem 49152 hex: c000 mid: 1110000000000000 bitshift: 13\nidx 16 mem 65536 hex: 10000 mid 10100000000000000 bitshift: 14\nidx 17 mem 98304 hex: 18000 mid 11100000000000000 bitshift: 14\nidx 18 mem 131072 hex: 20000 mid 101000000000000000 bitshift: 15\nidx 19 mem 196608 hex: 30000 mid 111000000000000000 bitshift: 15\nidx 20 mem 262144 hex: 40000 mid 1010000000000000000 bitshift: 16\nidx 21 mem 393216 hex: 60000 mid 1110000000000000000 bitshift: 16\nidx 22 mem 524288 hex: 80000 mid 10100000000000000000 bitshift: 17\nidx 23 mem 786432 hex: c0000 mid 11100000000000000000 bitshift: 17\nidx 24 mem 1048576 hex: 100000 mid 101000000000000000000 bitshift: 18\nidx 25 mem 1572864 hex: 180000 mid 111000000000000000000 bitshift: 18\nidx 26 mem 2097152 hex: 200000 mid 1010000000000000000000 bitshift: 19\nidx 27 mem 3145728 hex: 300000 mid 1110000000000000000000 bitshift: 19\nidx 28 mem 4194304 hex: 400000 mid 10100000000000000000000 bitshift: 20\nidx 29 mem 6291456 hex: 600000 mid 11100000000000000000000 bitshift: 20\nidx 30 mem 8388608 hex: 800000 mid 101000000000000000000000 bitshift: 21\nidx 31 mem 12582912 hex: c00000 bitshift: 31\n\n\n\n\n\n// \u56fe, dlammloc \u6811\u7684\u56fe.\n\n\n4485  if (t == 0 \n v == 0) { /* set t to root of next non-empty treebin */\n4486    binmap_t leftbits = left_bits(idx2bit(idx)) \n m-\ntreemap;\n4487    if (leftbits != 0) {\n4488      bindex_t i;\n4489      binmap_t leastbit = least_bit(leftbits);\n4490      compute_bit2idx(leastbit, i);\n4491      t = *treebin_at(m, i);\n4492    }\n4493  }\n\n\n\n\n\n\u8fd9\u91cc\u5bf9\u5e94\u4e0a\u6587\u7684\n4462  if ((t = *treebin_at(m, idx)) != 0) {\n , \u4e5f\u5c31\u662f\u8bf4\u5728\u5f53\u524d\u5927\u5c0f\u7684\u7bb1\u5b50\u5185\u4e0d\u5b58\u5728\u7a7a\u95f2\u7684\u5185\u5b58\u5757,\u6240\u4ee5\u6211\u4eec\u8981\u628at\u8bbe\u7f6e\u4e3a\u6700\u8fd1\u7684\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u7bb1\u53f7.\nleft_bits\n \u548c \nleast_bit\n \u8ddf\u4e0a\u6587\u5c0f\u5185\u5b58\u5bfb\u627e\u6700\u8fd1\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u7bb1\u5b50\u7b97\u6cd5\u4e00\u6837.\n\n\n4495  while (t != 0) { /* find smallest of tree or subtree */\n4496    size_t trem = chunksize(t) - nb;\n4497    if (trem \n rsize) {\n4498      rsize = trem;\n4499      v = t;\n4500    }\n4501    t = leftmost_child(t);\n4502  }\n\n\n\n\n\n\u8fd9\u91cc\u8ddf\ntmalloc_small\n\u5bfb\u627e\u6700\u5de6\u5b50\u6811(\u6700\u5c0f\u5185\u5b58)\u7684\u7b97\u6cd5\u4e00\u6837.\u8fd9\u6bb5\u4ee3\u7801\u5bf9\u4e0a\u9762\u7684\u4e24\u79cd\u60c5\u51b5\u90fd\u6709\u6548.\u5373,\u5982\u679c\u5728\u5bf9\u5e94\u7bb1\u53f7\u6709\u7a7a\u95f2\u5185\u5b58,\u5728\u57fa\u4e8e\u6811\u7684\u641c\u7d22\u7b97\u6cd5\u627e\u5230\u7684t\u5c31\u662f\u6700\u5339\u914dnb\u7684\u5927\u5c0f,\u6240\u4ee5\u8fd9\u91cc\u7684while\u5faa\u73af\u7ed3\u679ct\u5c31\u4e0d\u4f1a\u6539\u53d8;\u5982\u679c\u662f,\u5bfb\u627e\u6700\u8fd1\u6709\u7a7a\u95f2\u5757\u7684\u6811,\u90a3\u4e48\u8be5\u6811\u7684\u6700\u5c0f\u5185\u5b58\u90fd\u5927\u4e8e\u8bf7\u6c42\u5927\u5c0fnb,\u6240\u4ee5\u76f4\u63a5\u5bfb\u627e\u6700\u5de6\u5b50\u6811.\n\n\n\n\n4505  if (v != 0 \n rsize \n (size_t)(m-\ndvsize - nb)) {\n4506    if (RTCHECK(ok_address(m, v))) { /* split */\n4507      mchunkptr r = chunk_plus_offset(v, nb);\n4508      assert(chunksize(v) == rsize + nb);\n4509      if (RTCHECK(ok_next(v, r))) {\n4510        unlink_large_chunk(m, v);\n4511        if (rsize \n MIN_CHUNK_SIZE)\n4512          set_inuse_and_pinuse(m, v, (rsize + nb));\n4513        else {\n4514          set_size_and_pinuse_of_inuse_chunk(m, v, nb);\n4515          set_size_and_pinuse_of_free_chunk(r, rsize);\n4516          insert_chunk(m, r, rsize);\n4517        }\n4518        return chunk2mem(v);\n4519      }\n4520    }\n4521    CORRUPTION_ERROR_ACTION(m);\n4522  }\n4523  return 0;\n\n\n\n\n\n\u63a5\u4e0b\u6765,\u53ea\u8981\u6c42\u9876\u627e\u5230\u7684\u5185\u5b58\u5757\u6bd4dv chunk\u66f4\u5408\u9002,\u5219\u6267\u884c\u4e00\u822c\u7684\u5185\u5b58\u5757\u6536\u5c3e\u5904\u7406,\u7136\u540e\u8fd4\u56de.\u5982\u679cdv chunk\u66f4\u5408\u9002,\u6211\u4eec\u8fd4\u56de0, \u53c2\u8003\u4ee3\u7801\n\n4654      if (gm-\ntreemap != 0 \n (mem = tmalloc_large(gm, nb)) != 0) {\n, \u5c31\u4f1a\u7ee7\u7eed\u6309\u7167\u5185\u5b58\u5206\u914d\u89c4\u5219\u5f80\u4e0b\u8d70.\n\n\n\u5927\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e8c\n\n\n\u5982\u679cnb\u7684\u5927\u5c0f \n dv chunk\u7684\u5927\u5c0f,\u5219\u4f7f\u7528dv chunk\u5206\u914d\u5185\u5b58.\u5c3d\u91cf\u4fdd\u8bc1\u8fde\u7eed\u7684\u5185\u5b58\u8bf7\u6c42\u5728\u865a\u62df\u5185\u5b58\u4e0a\u8fde\u7eed.\n\n\n4660    if (nb \n= gm-\ndvsize) {\n4661      size_t rsize = gm-\ndvsize - nb;\n4662      mchunkptr p = gm-\ndv;\n4663      if (rsize \n= MIN_CHUNK_SIZE) { /* split dv */\n4664        mchunkptr r = gm-\ndv = chunk_plus_offset(p, nb);\n4665        gm-\ndvsize = rsize;\n4666        set_size_and_pinuse_of_free_chunk(r, rsize);\n4667        set_size_and_pinuse_of_inuse_chunk(gm, p, nb);\n4668      }\n4669      else { /* exhaust dv */\n4670        size_t dvs = gm-\ndvsize;\n4671        gm-\ndvsize = 0;\n4672        gm-\ndv = 0;\n4673        set_inuse_and_pinuse(gm, p, dvs);\n4674      }\n4675      mem = chunk2mem(p);\n4676      check_malloced_chunk(gm, mem, nb);\n4677      goto postaction;\n4678    }\n\n\n\n\n\n\u5207\u5206dv chunk, \u7136\u540e\u5c31\u662f\u57fa\u672c\u7684\u57df\u8bbe\u7f6e.\u8fd4\u56de\u7ed9\u7528\u6237.\n\n\n\u5927\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u56db\n\n\n4680    else if (nb \n gm-\ntopsize) { /* Split top */\n4681      size_t rsize = gm-\ntopsize -= nb;\n4682      mchunkptr p = gm-\ntop;\n4683      mchunkptr r = gm-\ntop = chunk_plus_offset(p, nb);\n4684      r-\nhead = rsize | PINUSE_BIT;\n4685      set_size_and_pinuse_of_inuse_chunk(gm, p, nb);\n4686      mem = chunk2mem(p);\n4687      check_top_chunk(gm, gm-\ntop);\n4688      check_malloced_chunk(gm, mem, nb);\n4689      goto postaction;\n4690    }\n\n\n\n\n\n\u8ddfdv chunk\u7c7b\u4f3c.\u96be\u70b9\u5176\u5b9e\u662f\u627e\u5230\u7b26\u5408\u7684chunk.\u50cfdv chunk \u548ctop chunk\u90fd\u662f\u627e\u5230\u4e86\u7684,\u5c31\u76f4\u63a5\u5206\u914d.\n\n\n\u5927\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e94\n\n\n\u8c03\u7528\u7cfb\u7edf\u51fd\u6570\u8fdb\u884c\u5185\u5b58\u5206\u914d.\u8fd9\u91cc\u4f7f\u7528\u5230\u4e86segment.\n\n\n4692    mem = sys_alloc(gm, nb);\n4693\n4694  postaction:\n4695    POSTACTION(gm);\n4696    return mem;\n4697  }\n4698\n4699  return 0;\n\n\n\n\n\n\u5148\u8bf4\u4e0b\nsys_alloc\n\u7684\u89c4\u5219:\n\n\n\n\n\u4f18\u5148\u4f7f\u7528MORECORE(sbrk())\u5206\u914d\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\n\n\n\u4f7f\u7528mmap\u5206\u914d\u4e0d\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\n\n\n\u4f7f\u7528sbrk()\u5206\u914d\u4e0d\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4.\n\n\n\n\nsbrk\u5b9e\u9645\u4e0a\u662f\u5bf9\u8fdb\u7a0b\u7684\u6570\u636e\u6bb5\u8fdb\u884c\u6269\u5c55,\u8fd4\u56de\u589e\u957f\u7684\u533a\u57df\u7684\u57fa\u5730\u5740.\n\n\n4059  /* Directly map large chunks, but only if already initialized */\n4060  if (use_mmap(m) \n nb \n= mparams.mmap_threshold \n m-\ntopsize != 0) {\n4061    void* mem = mmap_alloc(m, nb);\n4062    if (mem != 0)\n4063      return mem;\n4064  }\n\n\n\n\n\n\u5982\u679c\u4f7f\u7528mmap\u7684\u6807\u5fd7\u88ab\u7f6e\u4e0a\u5e76\u4e14nb \n= mmap\u7684\u9600\u503c,\u5219\u76f4\u63a5\u4f7f\u7528mmap.\n\n\n4066  asize = granularity_align(nb + SYS_ALLOC_PADDING);\n\n\n\n\n\n\u505a\u5bf9\u9f50\u5904\u7406.\n\n\n4105  if (MORECORE_CONTIGUOUS \n !use_noncontiguous(m)) {\n4106    char* br = CMFAIL;\n4107    size_t ssize = asize; /* sbrk call size */\n4108    msegmentptr ss = (m-\ntop == 0)? 0 : segment_holding(m, (char*)m-\ntop);\n4109    ACQUIRE_MALLOC_GLOBAL_LOCK();\n\n\n\n\n\n\u6211\u4eec\u770b\u4e0b\nsegment_holding\n\u51fd\u6570.\n\n\n2698static msegmentptr segment_holding(mstate m, char* addr) {\n2699  msegmentptr sp = \nm-\nseg;\n2700  for (;;) {\n2701    if (addr \n= sp-\nbase \n addr \n sp-\nbase + sp-\nsize)\n2702      return sp;\n2703    if ((sp = sp-\nnext) == 0)\n2704      return 0;\n2705  }\n2706}\n\n\n\n\n\nsegment\u5b9e\u9645\u4e0a\u662f\u7531\u5355\u5411\u94fe\u8868\u7ba1\u7406\u7684,\u4f46\u7531\u4e8e\u4f7f\u7528\u5230segment\u7684\u60c5\u51b5\u975e\u5e38\u5c11,\u6240\u4ee5,\u4e5f\u6ca1\u6709\u4ec0\u4e48\u6548\u7387\u95ee\u9898.\n\u8fd9\u91cc\u7684\u529f\u80fd\u5c31\u662f\u5bfb\u627eaddr\u6240\u5c5e\u7684segment\u5757\u7684\u5730\u5740,\u5e76\u8fd4\u56de.\u7ed3\u5408\u4e0a\u9762\u7684,ss\u5b9e\u9645\u4e0a\u5c31\u662ftop chunk\u6240\u5728\u7684segment\u7684\u57fa\u5730\u5740.\n\n\n4111    if (ss == 0) {  /* First time through or recovery */\n4112      char* base = (char*)CALL_MORECORE(0);\n4113      if (base != CMFAIL) {\n4114        size_t fp;\n4115        /* Adjust to end on a page boundary */\n4116        if (!is_page_aligned(base))\n4117          ssize += (page_align((size_t)base) - (size_t)base);\n4118        fp = m-\nfootprint + ssize; /* recheck limits */\n4119        if (ssize \n nb \n ssize \n HALF_MAX_SIZE_T \n\n4120            (m-\nfootprint_limit == 0 ||\n4121             (fp \n m-\nfootprint \n fp \n= m-\nfootprint_limit)) \n\n4122            (br = (char*)(CALL_MORECORE(ssize))) == base) {\n4123          tbase = base;\n4124          tsize = ssize;\n4125        }\n4126      }\n4127    }\n\n\n\n\n\n\u8fd9\u91cc\u5c31\u662f\u5904\u7406top chunk\u4e3aNULL \u65f6\u7684\u60c5\u51b5, \u4e5f\u5c31\u662f\u7b2c\u4e00\u6b21\u8bf7\u6c42\u5185\u5b58\u5206\u914d,\u56e0\u4e3atop\u4e3a0.\nCALL_MORECORE\n\u5b8f\u5c55\u5f00\u6765\u5c31\u662f\nsbrk\n.\u8fd9\u91cc\u662f\u83b7\u53d6\u5f53\u524d\u7684program break\u7684\u5730\u5740.\nssize\u5c31\u662f\u8bf7\u6c42\u589e\u52a0\u7684\u5927\u5c0f,\u7136\u540e\u518d\u6b21\u8c03\u7528sbrk.\n\n\n4128    else {\n4129      /* Subtract out existing available top space from MORECORE request. */\n4130      ssize = granularity_align(nb - m-\ntopsize + SYS_ALLOC_PADDING);\n4131      /* Use mem here only if it did continuously extend old space */\n4132      if (ssize \n HALF_MAX_SIZE_T \n\n4133          (br = (char*)(CALL_MORECORE(ssize))) == ss-\nbase+ss-\nsize) {\n4134        tbase = br;\n4135        tsize = ssize;\n4136      }\n4137    }\n\n\n\n\n\n\u5bf9\u5e94top chunk \u5b58\u5728\u7684\u60c5\u51b5.\u76f4\u63a5\u6269\u5c55top chunk\u6240\u5728\u7684segment.\n\u4e0a\u9762\u4e24\u79cd\u60c5\u51b5\u7684tbase\u90fd\u6307\u5411\u589e\u957f\u7684\u5757\u7684\u57fa\u5730\u5740,tsize\u6307\u5411\u589e\u957f\u7684\u5927\u5c0f.\n\n\n4139    if (tbase == CMFAIL) {    /* Cope with partial failure */\n4140      if (br != CMFAIL) {    /* Try to use/extend the space we did get */\n4141        if (ssize \n HALF_MAX_SIZE_T \n\n4142            ssize \n nb + SYS_ALLOC_PADDING) {\n4143          size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - ssize);\n4144          if (esize \n HALF_MAX_SIZE_T) {\n4145            char* end = (char*)CALL_MORECORE(esize);\n4146            if (end != CMFAIL)\n4147              ssize += esize;\n4148            else {            /* Can\nt use; try to release */\n4149              (void) CALL_MORECORE(-ssize);\n4150              br = CMFAIL;\n4151            }\n4152          }\n4153        }\n4154      }\n4155      if (br != CMFAIL) {    /* Use the space we did get */\n4156        tbase = br;\n4157        tsize = ssize;\n4158      }\n4159      else\n4160        disable_contiguous(m); /* Don\nt try contiguous path in the future */\n4161    }\n4162\n4163    RELEASE_MALLOC_GLOBAL_LOCK();\n\n\n\n\n\n\u5982\u679c\u90e8\u5206\u5931\u8d25\u4e86,\u5373\u4e0a\u6587\u7684tbase\u8d4b\u503c\u65f6,if\u6761\u4ef6\u90e8\u5206\u4e0d\u6ee1,\u4e5f\u5c31\u662f,\u8bf7\u6c42\u7684ssize \n HALF_MAX_SIZE_T(ffffffff/2)\u6216\u8005\u5176\u4ed6\u7684\u60c5\u51b5.\u5219\u6211\u4eec\u7ee7\u7eed\u4f7f\u7528br\u7684\u5730\u5740\u8fdb\u884c\u6269\u5c55.\u4e0d\u8fc7\u4e00\u822c\u60c5\u51b5\u4e0btbase == CMFAIL \u65f6, br == CFAIL.\u4ece\u8fd9\u90e8\u5206\u7684\u4ee3\u7801\u903b\u8f91\u770b,\u5e94\u8be5\u662f\u975e\u8fde\u7eed\u7684sbrk\u7684\u903b\u8f91.\n\n\n4166  if (HAVE_MMAP \n tbase == CMFAIL) {  /* Try MMAP */\n4167    char* mp = (char*)(CALL_MMAP(asize));\n4168    if (mp != CMFAIL) {\n4169      tbase = mp;\n4170      tsize = asize;\n4171      mmap_flag = USE_MMAP_BIT;\n4172    }\n4173  }\n\n\n\n\n\n\u5c1d\u8bd5 mmap.\n\n\n4175  if (HAVE_MORECORE \n tbase == CMFAIL) { /* Try noncontiguous MORECORE */\n4176    if (asize \n HALF_MAX_SIZE_T) {\n4177      char* br = CMFAIL;\n4178      char* end = CMFAIL;\n4179      ACQUIRE_MALLOC_GLOBAL_LOCK();\n4180      br = (char*)(CALL_MORECORE(asize));\n4181      end = (char*)(CALL_MORECORE(0));\n4182      RELEASE_MALLOC_GLOBAL_LOCK();\n4183      if (br != CMFAIL \n end != CMFAIL \n br \n end) {\n4184        size_t ssize = end - br;\n4185        if (ssize \n nb + TOP_FOOT_SIZE) {\n4186          tbase = br;\n4187          tsize = ssize;\n4188        }\n4189      }\n4190    }\n4191  }\n\n\n\n\n\n\u5c1d\u8bd5\u975e\u8fde\u7eed\u7684sbrk.\n\n\n4198    if (!is_initialized(m)) { /* first-time initialization */\n4199      if (m-\nleast_addr == 0 || tbase \n m-\nleast_addr)\n4200        m-\nleast_addr = tbase;\n4201      m-\nseg.base = tbase;\n4202      m-\nseg.size = tsize;\n4203      m-\nseg.sflags = mmap_flag;\n4204      m-\nmagic = mparams.magic;\n4205      m-\nrelease_checks = MAX_RELEASE_CHECK_RATE;\n          // \u521d\u59cb\u5316 \u6240\u6709\u7684\u7bb1\u5b50. 32bit\u5168\u7f6e0\n4206      init_bins(m);\n4207#if !ONLY_MSPACES\n4208      if (is_global(m))\n            // \u521d\u59cb\u5316top chunk.\n4209        init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);\n4210      else\n4211#endif\n4212      {\n4213        /* Offset top by embedded malloc_state */\n4214        mchunkptr mn = next_chunk(mem2chunk(m));\n            // \u521d\u59cb\u5316top chunk.\n4215        init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) -TOP_FOOT_SIZE);\n4216      }\n4217    }\n\n\n\n\n\n\u5728\u8fd9\u91cc,\u624d\u662f\u771f\u6b63\u5730\u5bf9\u5185\u5b58\u7ba1\u7406\u7684\u4e00\u4e9b\u7ed3\u6784\u4f53\u8fdb\u884c\u521d\u59cb\u5316.\n\n\n4219    else {\n4220      /* Try to merge with an existing segment */\n4221      msegmentptr sp = \nm-\nseg;\n4222      /* Only consider most recent segment if traversal suppressed */\n4223      while (sp != 0 \n tbase != sp-\nbase + sp-\nsize)\n4224        sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp-\nnext;\n4225      if (sp != 0 \n\n4226          !is_extern_segment(sp) \n\n4227          (sp-\nsflags \n USE_MMAP_BIT) == mmap_flag \n\n4228          segment_holds(sp, m-\ntop)) { /* append */\n4229        sp-\nsize += tsize;\n4230        init_top(m, m-\ntop, m-\ntopsize + tsize);\n4231      }\n4232      else {\n4233        if (tbase \n m-\nleast_addr)\n4234          m-\nleast_addr = tbase;\n4235        sp = \nm-\nseg;\n4236        while (sp != 0 \n sp-\nbase != tbase + tsize)\n4237          sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp-\nnext;\n4238        if (sp != 0 \n\n4239            !is_extern_segment(sp) \n\n4240            (sp-\nsflags \n USE_MMAP_BIT) == mmap_flag) {\n4241          char* oldbase = sp-\nbase;\n4242          sp-\nbase = tbase;\n4243          sp-\nsize += tsize;\n4244          return prepend_alloc(m, tbase, oldbase, nb);\n4245        }\n4246        else\n4247          add_segment(m, tbase, tsize, mmap_flag);\n4248      }\n4249    }\n\n\n\n\n\n\u903b\u8f91\u5f88\u7b80\u5355,\u5c31\u662f\u5982\u679c\u65b0\u5206\u914d\u7684segemnt\u7684\u57fa\u5730\u5740\u662f\u67d0\u4e2asegment\u7684\u5c3e\u5730\u5740,\u5219\u8fd9\u4e24\u4e2a\u5408\u5e76,\u5426\u5219,\u76f4\u63a5\u5c06\u8be5\u65b0\u7684segment\u52a0\u5165\u5230\u5355\u5411\u94fe\u8868\u4e2d.\n\n\n4251    if (nb \n m-\ntopsize) { /* Allocate from new or extended top space */\n4252      size_t rsize = m-\ntopsize -= nb;\n4253      mchunkptr p = m-\ntop;\n4254      mchunkptr r = m-\ntop = chunk_plus_offset(p, nb);\n4255      r-\nhead = rsize | PINUSE_BIT;\n4256      set_size_and_pinuse_of_inuse_chunk(m, p, nb);\n4257      check_top_chunk(m, m-\ntop);\n4258      check_malloced_chunk(m, chunk2mem(p), nb);\n4259      return chunk2mem(p);\n4260    }\n4261  }\n\n\n\n\n\n\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u5185\u5b58\u5206\u914d,\u5219\u903b\u8f91\u5c06\u4f1a\u5230\u8fd9\u91cc,\u5728top chunk\u521d\u59cb\u5316\u540e,\u5c1d\u8bd5\u4ecetop chunk\u5206\u914d\u5185\u5b58.\n\n\ndlfree\u4ee3\u7801\u5206\u6790\n\n\ndlfree\u5c31\u6ca1\u6709dlmalloc\u90a3\u4e48\u591a\u89c4\u5219\u4e86,\u53ea\u8981\u4fdd\u8bc1\u8fb9\u754c\u6807\u8bb0\u6cd5,\u4fdd\u8bc1\u91ca\u653e\u7684\u5185\u5b58\u5757\u5b58\u653e\u5230\u5bf9\u5e94\u7684\u7bb1\u5b50\u4e2d\u5373\u53ef.\n\n\n4704void dlfree(void* mem) { \n4711  if (mem != 0) {\n\n\n\n\n\n\u68c0\u67e5mem\u5408\u6cd5\u6027.\n\n\n4711  if (mem != 0) {\n        //\u5c06mem\u8f6c\u6362\u6210chunk p\n4712    mchunkptr p  = mem2chunk(mem);\n4713#if FOOTERS\n4714    mstate fm = get_mstate_for(p);\n4715    if (!ok_magic(fm)) {\n4716      USAGE_ERROR_ACTION(fm, p);\n4717      return;\n4718    }\n4719#else /* FOOTERS */\n4720#define fm gm\n4721#endif /* FOOTERS */ \n4722    if (!PREACTION(fm)) {\n          // \u68c0\u67e5\u6807\u5fd7\u4f4d\u662f\u5426\u4e3ainuse.\n4723      check_inuse_chunk(fm, p);\n4724      if (RTCHECK(ok_address(fm, p) \n ok_inuse(p))) {\n            // \u83b7\u53d6chunksize\n4725        size_t psize = chunksize(p);\n            // \u83b7\u53d6\u5728\u5185\u5b58\u4e0a\u76f8\u8fde\u7684\u4e0b\u4e00\u4e2a\u5185\u5b58chunk.\n4726        mchunkptr next = chunk_plus_offset(p, psize); \n\n\n\n\n\n\u5c06\u7528\u6237\u6307\u9488\u8f6c\u6362\u4e3achunk\u7ed3\u6784\u4f53\u5e76\u505a\u5e38\u89c4\u68c0\u67e5.\n\n\n            // \u4e0a\u4e00\u4e2a\u5185\u5b58\u5757\u672a\u88ab\u4f7f\u7528\n4727        if (!pinuse(p)) {\n4728          size_t prevsize = p-\nprev_foot;\n4729          if (is_mmapped(p)) {\n                // \u662f\u901a\u8fc7\u7cfb\u7edfmmap\u5206\u914d\u7684\n4730            psize += prevsize + MMAP_FOOT_PAD;\n4731            if (CALL_MUNMAP((char*)p - prevsize, psize) == 0)\n4732              fm-\nfootprint -= psize;\n4733            goto postaction;\n4734          }\n4735          else {\n               // \u4e0e\u4e0a\u4e00\u4e2a\u5185\u5b58\u5757\u5408\u5e76\n4736            mchunkptr prev = chunk_minus_offset(p, prevsize);\n4737            psize += prevsize;\n4738            p = prev;\n4739            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */\n4740              if (p != fm-\ndv) {\n                    // p \u4e0d\u4e3a dv chunk, \u76f4\u63a5\u79fb\u9664.\n4741                unlink_chunk(fm, p, prevsize);\n4742              }\n4743              else if ((next-\nhead \n INUSE_BITS) == INUSE_BITS) {\n                    // \u5426\u5219,\u5408\u5e76\u5230dv chunk\u4e2d.\n4744                fm-\ndvsize = psize;\n4745                set_free_with_pinuse(p, psize, next);\n4746                goto postaction;\n4747              }\n4748            }\n4749            else\n4750              goto erroraction;\n4751          }\n4752        } \n\n\n\n\n\n\u4e0e\u524d\u4e00\u5757\u5185\u5b58\u5408\u5e76\u7684\u903b\u8f91.\n\n\n4754        if (RTCHECK(ok_next(p, next) \n ok_pinuse(next))) {\n\n\n\n\n\nok_pinuse(next)\u5b9e\u9645\u4e0a\u5c31\u662fcinuse(p). \u53ea\u662f\u8fd9\u91cc\u662f\u68c0\u67e5next\u7684\u6807\u5fd7\u4f4d\u662f\u5426\u6b63\u786e.\n\n\n              // next \u672a\u88ab\u4f7f\u7528, \u5219\u9700\u8981\u5408\u5e76.\n4755          if (!cinuse(next)) {  /* consolidate forward */\n4756            if (next == fm-\ntop) {\n                  // \u5982\u679cnext\u4e3atop, \u5219top\u589e\u957f.\u57fa\u5730\u5740\u6539\u4e3ap.\n4757              size_t tsize = fm-\ntopsize += psize;\n4758              fm-\ntop = p;\n4759              p-\nhead = tsize | PINUSE_BIT;\n4760              if (p == fm-\ndv) {\n                    // \u5982\u679cp\u4e3adv, \u5219\u6e05\u7a7adv.\n4761                fm-\ndv = 0;\n4762                fm-\ndvsize = 0;\n4763              }\n                  // \u68c0\u67e5top chunk\u7684\u5927\u5c0f\u662f\u5426\u9700\u8981\u8c03\u6574,\u9ed8\u8ba4\u6700\u5927\u4e3a 2 * 1024 * 1024\n4764              if (should_trim(fm, tsize))\n4765                sys_trim(fm, 0);\n4766              goto postaction;\n4767            }\n4768            else if (next == fm-\ndv) {\n                  // \u5982\u679cnext\u4e3adiv, \u5219dv\u589e\u957f, \u57fa\u5730\u5740\u6539\u4e3ap\n4769              size_t dsize = fm-\ndvsize += psize;\n4770              fm-\ndv = p;\n4771              set_size_and_pinuse_of_free_chunk(p, dsize);\n4772              goto postaction;\n4773            }\n4774            else {\n                  // next\u4e3a\u666e\u901a\u7684\u5185\u5b58\u5757,\u5c06next\u5408\u5e76\u5230p,\u5e76\u5c06next\u51b2\u94fe\u8868\u6216\u8005\u6811\u4e2d\u5220\u9664.\n4775              size_t nsize = chunksize(next);\n4776              psize += nsize;\n4777              unlink_chunk(fm, next, nsize);\n4778              set_size_and_pinuse_of_free_chunk(p, psize);\n4779              if (p == fm-\ndv) {\n4780                fm-\ndvsize = psize;\n4781                goto postaction;\n4782              }\n4783            }\n              // \u4e0e\u540e\u4e00\u5757\u5185\u5b58\u5408\u5e76\u7684\u903b\u8f91.\n4785          else\n4786            set_free_with_pinuse(p, psize, next);\n\n\n\n\n\n\u5f53\u7136,\u5982\u679c\u4e0d\u9700\u8981\u5408\u5e76,\u5219\u76f4\u63a5\u5220\u9664.\n\n\n\u4ee5\u4e0a\u90fd\u53ea\u662f\u5408\u5e76\u5757,\u5e76\u5220\u9664\u88ab\u5408\u5e76\u7684\u7ed3\u70b9,\u63a5\u4e0b\u6765\u5c31\u662f\u5c06\u5408\u5e76\u540e\u7684\u5757\u63d2\u5165\u5230\u6b63\u786e\u7684\u7bb1\u5b50\u7684\u7ed3\u6784\u4e2d.\n\n\n4788          if (is_small(psize)) {\n                // \u5408\u5e76\u5904\u7406\u540e\u7684\u5185\u5b58\u4e3a\u5c0f\u5185\u5b58\n                // \u5df2\u5728\u4e0a\u6587\u4ecb\u7ecd\u8fc7\u8be5\u51fd\u6570.\n4789            insert_small_chunk(fm, p, psize);\n4790            check_free_chunk(fm, p);\n4791          }\n4792          else {\n                // \u5408\u5e76\u540e\u4e3a\u5927\u5185\u5b58\n4793            tchunkptr tp = (tchunkptr)p;\n4794            insert_large_chunk(fm, tp, psize);\n4795            check_free_chunk(fm, p);\n4796            if (--fm-\nrelease_checks == 0)\n4797              release_unused_segments(fm);\n4798          }\n4799          goto postaction;\n4800        }\n4801      }\n4802    erroraction:\n4803      USAGE_ERROR_ACTION(fm, p);\n4804    postaction:\n4805      POSTACTION(fm);\n4806    }\n4807  }  \n\n\n\n\n\ninsert_small_chunk\n \u5df2\u7ecf\u5728\u4e0a\u6587\u4ecb\u7ecd\u8fc7.\u5b9e\u9645\u884c\u4e3a\u5c31\u662f\u6839\u636e\u5185\u5b58\u5927\u5c0f\u627e\u7bb1\u53f7,\u5982\u679c\u8be5\u7bb1\u5b50\u672c\u8eab\u4e3a\u7a7a,\u5219\u4fee\u6539binmap\u72b6\u6001\u5e76\u63d2\u5165\u8be5chunk.\u5982\u679c\u4e0d\u4e3a\u7a7a,\u5219\u6267\u884c\u53cc\u5411\u94fe\u8868\u63d2\u5165.\n\u800c\ninsert_large_chunk\n\u662f\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u7684\nunlink_large_chunk\n\u7684\u9006\u64cd\u4f5c.\u540c\u6837\u662f\u5b9a\u4f4d\u7bb1\u53f7,\u904d\u5386\u6811.\u7136\u540e\u627e\u5230\u5bf9\u5e94\u8be5\u5927\u5c0f\u7684\u7ed3\u70b9.\u5b83\u5b58\u5728\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5:\n\n\n\n\n\u8be5\u7bb1\u5b50\u4e2d\u4e0d\u5b58\u5728\u6811. \u5219\u521b\u5efa\u5e76\u5c06\u8be5\u7ed3\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9.\n\n\n\u5df2\u5b58\u5728\u6811,\u4f46\u4e0d\u5b58\u5728\u5bf9\u5e94\u5927\u5c0f\u7684\u7ed3\u70b9, \u5219\u63d2\u5165\u7ed3\u70b9.\n\n\n\u5df2\u5b58\u5728\u6811,\u4e14\u5b58\u5728\u5bf9\u5e94\u5927\u5c0f\u7684\u7ed3\u70b9,\u5219\u63d2\u5165\u53cc\u5411\u94fe\u8868\n\n\n\n\n3662#define insert_large_chunk(M, X, S) {\\ \n3663  tbinptr* H;\\ \n3664  bindex_t I;\\ \n3665  compute_tree_index(S, I);\\ \n3666  H = treebin_at(M, I);\\ \n3667  X-\nindex = I;\\ \n3668  X-\nchild[0] = X-\nchild[1] = 0;\\ \n3669  if (!treemap_is_marked(M, I)) {\\ \n3670    mark_treemap(M, I);\\ \n3671    *H = X;\\ \n3672    X-\nparent = (tchunkptr)H;\\ \n3673    X-\nfd = X-\nbk = X;\\ \n3674  }\\\n\n//\u4e0a\u9762\u4e3a\u60c5\u51b5\u4e00. \u5c06treemap \u5bf9\u5e94I\u7684\u4f4d\u7f6e\u7f6e1,\u5e76\u5c06\u8be5\u7ed3\u70b9\u4f5c\u4e3a\u6811\u7684\u6839\u7ed3\u70b9.\n\n3675  else {\\ \n3676    tchunkptr T = *H;\\ \n3677    size_t K = S \n leftshift_for_tree_index(I);\\ \n3678    for (;;) {\\ \n3679      if (chunksize(T) != S) {\\ \n3680        tchunkptr* C = \n(T-\nchild[(K \n (SIZE_T_BITSIZE-SIZE_T_ONE)) \n 1]);\\ \n3681        K \n= 1;\\ \n3682        if (*C != 0)\\ \n3683          T = *C;\\ \n3684        else if (RTCHECK(ok_address(M, C))) {\\ \n3685          *C = X;\\ \n3686          X-\nparent = T;\\ \n3687          X-\nfd = X-\nbk = X;\\ \n3688          break;\\ \n3689        }\\ \n3690        else {\\ \n3691          CORRUPTION_ERROR_ACTION(M);\\ \n3692          break;\\ \n3693        }\\ \n3694      }\\\n// \u4e0a\u9762\u4e3a\u60c5\u51b5\u4e8c, \u5728\u5173\u952e\u7801\u8def\u5f84\u4e0a\u5b58\u5728\u7a7a\u7ed3\u70b9,\u5219\u63d2\u5165\u8be5\u7ed3\u70b9.\n3695      else {\\ \n3696        tchunkptr F = T-\nfd;\\ \n3697        if (RTCHECK(ok_address(M, T) \n ok_address(M, F))) {\\\n3698          T-\nfd = F-\nbk = X;\\ \n3699          X-\nfd = F;\\ \n3700          X-\nbk = T;\\ \n3701          X-\nparent = 0;\\ \n3702          break;\\ \n3703        }\\ \n3704        else {\\ \n3705          CORRUPTION_ERROR_ACTION(M);\\ \n3706          break;\\ \n3707        }\\ \n3708      }\\ \n3709    }\\ \n3710  }\\\n\n// \u4e0a\u9762\u4e3a\u60c5\u51b5\u4e09,\u8be5\u5927\u5c0f\u7684\u7ed3\u70b9\u5b58\u5728,\u5219\u63d2\u5165\u53cc\u5411\u94fe\u8868.\n\n\n\n\n\n\u603b\u7ed3\n\n\n\u6570\u636e\u7ed3\u6784\u603b\u7ed3\n\n\n\n\ndlmalloc\u4e2d\u6309\u7167\u5185\u5b58\u7684\u7c92\u5ea6\u5927\u5c0f,\u5206\u4e3achunk\u548csegment\u4e24\u79cd\u6570\u636e\u7ed3\u6784.\n\n\ndlmalloc\u4e2d\u6309\u7167\u5185\u5b58\u7684\u5927\u5c0f,\u67093\u79cd\u5185\u5b58\u7ba1\u7406\u65b9\u5f0f,\u518d\u52a0\u4e0a\u8fb9\u754c\u6807\u8bb0\u6cd5,\u603b\u5171\u56db\u79cd\u7ba1\u7406\u65b9\u5f0f:\n\n\n\u8fb9\u754c\u6807\u8bb0\u6cd5\uff0c\u5e76\u4e14\u4efb\u610f\u76f8\u8fde\u4e24\u5757\u5185\u5b58\u4e0d\u540c\u4e3a\u7a7a\u95f2\u5185\u5b58.\n\n\n\u53cc\u5411\u94fe\u8868\u7ba1\u7406\u5927\u5c0f\u5c0f\u4e8e256byte\u7684\u5185\u5b58.\n\n\ndlmalloc\u6811\u4e0e\u53cc\u5411\u94fe\u8868\u7ed3\u5408\u7ba1\u7406\u5927\u5c0f\u5927\u4e8e256byte\u7684\u5185\u5b58.\n\n\n\u5355\u5411\u94fe\u8868\u7ba1\u7406segment\u7ed3\u6784.\n\n\n\n\n\n\ndlmalloc\u901a\u8fc7\u4e24\u4e2a\u4f4d\u56fe\u5206\u522b\u7ba1\u7406\u53cc\u5411\u94fe\u8868\u548cdlmalloc\u6811.\n\n\n\n\n+---------------------------segment-------------------------------------+\n+  0X10   |  0X12  |  0x109 |  0x110 |                                  +\n+ chunk0  | chunk1 | chunk2 | chunk3 |            top                   +\n+-----------------------------------------------------------------------+\n\n\n\n\n\n\u4e0a\u9762\u7684\u6570\u5b57\u4e3achunk\u7ed3\u6784\u4f53\u4e2d\u7684size.\nchunk0\u548cchunk1 \u90fd\u4e3a\u5c0f\u5185\u5b58,\u5927\u5c0f\u4e3a0x10, 16byte.\u800c chunk1 \u76840x02\u662f\u8868\u793achunk0\u8868\u793a\u81ea\u5df1\u4f7f\u7528.chunk0 \u5f52\u5c5e\u4e0e\u7bb1\u53f7\u4e3a2,\u7531\u53cc\u5411\u94fe\u8868\u7ba1\u7406.\nchunk2\u548cchunk3 \u4e3a\u5927\u5185\u5b58, \u5927\u5c0f\u4e3a0x108, 264byte. chunk2 \u5927\u5c0f | 0x01\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u88ab\u4f7f\u7528. chunk3 | 0x02 \u56e0\u4e3a\u81ea\u5df1\u5728\u88ab\u4f7f\u7528. \u8fd9\u4e24\u4e2a\u5f52\u5c5e\u4e0e\u7bb1\u53f7\u4e3a0\u7684\u6811\u7ba1\u7406.\n\u6700\u540e \u662ftop\u5757.\n\n\nsetgment\u7531\u7cfb\u7edf\u901a\u8fc7sbrk\u5206\u914d.\ntop \u4ecesegment\u800c\u6765.\u5982\u679ctop\u8d85\u8fc7\u4e00\u4e2a\u9600\u503c,\u5c31\u4f1a\u901a\u8fc7sbrk,\u7f29\u5c0f.\u5982\u679c\u592a\u5c0f,\u901a\u8fc7sbrk\u6269\u5927top.\n\u5404\u4e2achunk \u7531 top\u5207\u5206, \u6216\u8005free\u65f6, \u6216\u8005dv chunk\u88ab\u66ff\u6362\u65f6\u4ea7\u751f.\n\n\n\u7b97\u6cd5\u603b\u7ed3:\n\n\n\n\n\n\n\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\n\n\n\n\n\u8ddf\u636e\u8bf7\u6c42\u5927\u5c0f,\u4f18\u5148\u5bfb\u627e\u6700\u5339\u914d\u7684\u7bb1\u5b50,\u4e4b\u540e\u4e34\u8fd1\u7bb1\u5b50.\u5728\u80fd\u4e0d\u5206\u5272\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\u5c3d\u91cf\u4e0d\u5206\u5272\u5185\u5b58.\n\n\n\u5982\u679cdv chunk\u8db3\u591f\u5927,\u5219\u4f7f\u7528dv chunk.\n\n\n\u5982\u679c\u524d\u4e24\u4e2a\u4e0d\u6ee1\u8db3,\u5219\u5728smallbin\u4e2d\u5bfb\u627e\u6700\u63a5\u8fd1\u8bf7\u6c42\u5927\u5c0f\u7684\u7a7a\u95f2\u5757\u7bb1\u53f7.\n\n\n\u5982\u679ctop \u8db3\u591f\u5927,\u4f7f\u7528top.\n\n\n\u5982\u679c\u8bf7\u6c42\u5185\u5b58\u5b9e\u5728\u592a\u5927,\u5219\u4f7f\u7528\u7cfb\u7edf\u5206\u914d.\n\n\n\n\n\n\n\n\n\u5927\u5185\u5b58\u5206\u914d\u89c4\u5219\n\n\n\n\n\u5982\u679ctreebin\u4e2d\u627e\u5230\u6700\u5408\u9002\u7684\u6700\u5c0f\u5185\u5b58,\u5982\u679c\u5b83\u6bd4dv chunk\u66f4\u5408\u9002,\u5c31\u4f7f\u7528\u5b83.\n\n\n\u5982\u679cdv chunk\u6bd4\u5176\u4ed6\u6240\u6709\u5408\u9002,\u5219\u4f7f\u7528dv chunk.\n\n\n\u5982\u679ctop \u8db3\u591f\u5927,\u5219\u4f7f\u7528top.\n\n\n\u5982\u679c\u8bf7\u6c42\u5927\u5c0f \n= mmap\u7684\u9600\u503c,\u5219\u4f7f\u7528mmap.\n\n\n\u76f4\u63a5\u4ece\u7cfb\u7edf\u5206\u914d\u5185\u5b58.\n\n\n\n\n\n\n\n\n\u5185\u5b58\u91ca\u653e\u89c4\u5219\n\n\n\n\n\u5982\u679c\u5728\u865a\u62df\u5185\u5b58\u4e0a\u7684\u5f53\u524d\u91ca\u653e\u5185\u5b58\u7684\u524d/\u540e\u4e00\u4e2a\u5185\u5b58\u4e3a\u7a7a\u95f2,\u5219\u5408\u5e76.\n\n\n\u5982\u679c\u524d/\u540e\u4e00\u4e2a\u5185\u5b58\u4e3adv chunk, \u5219\u5408\u5e76\u5230dv chunk\n\n\n\u5982\u679c\u540e\u4e00\u4e2a\u5185\u5b58\u4e3atop, \u5219\u5408\u5e76\u5230top\n\n\n\u5982\u679c\u524d/\u540e\u4e00\u4e2a\u5185\u5b58\u4e3a\u666e\u901a\u5185\u5b58\u5757,\u5219\u5220\u9664\u540e,\u67e5\u627e\u5e76\u63d2\u5165\u7b26\u5408\u5927\u5c0f\u7684\u7bb1\u5b50\u4e2d.\n\n\n\n\n\n\n\n\nsmallbin \u548c treebin\u7684\u89c4\u5219.\n\n\n\n\nsmallbin \u4e3a32bit\u6570,\u6ca1\u4e00\u4e2abit\u5bf9\u5e94\u4e00\u4e2a\u7bb1\u5b50\u7684\u72b6\u6001.1 \u4e3a\u6709\u7a7a\u95f2\u5185\u5b58, 0 \u4e3a\u65e0. 32\u4e2a\u7bb1\u5b50\u7684\u5927\u5c0f\u4e3a\u4ee58 \u4e3a\u57fa\u6570, \u4ee58 \u4e3a\u589e\u7387, \u957f\u5ea6\u4e3a32\u7684\u7b49\u5dee\u6570\u5217\n\n\ntreebin\u7684\u72b6\u6001\u4e0esmallbin\u4e00\u81f4. treebin\u7684\u5404\u4e2a\u7bb1\u5b50\u7684\u5927\u5c0f\u89c1\u4e0a\u6587.\n\n\n\n\n\n\n\n\ntreebin\u4e2d\u7684\u6811\u7684\u641c\u7d22\u7b97\u6cd5\n\n\n\n\n\u8be5\u6811\u8868\u793a\u4e00\u6bb5\u5185\u5b58\u8303\u56f4.\u6240\u4ee5\u6ca1\u4e00\u68f5\u5b50\u6811\u7528\u4e8c\u5206\u6cd5\u8868\u793a\u5bf9\u5e94\u7684\u533a\u95f4\u8303\u56f4.\n\n\n\u5de6\u5b50\u6811\u4e0a\u7684\u4efb\u610fchunk\u5927\u5c0f \u90fd\u5c0f\u4e8e\u5176\u53f3\u5b50\u6811\u7684\u4efb\u610fchunk\u7684\u5927\u5c0f,\n\n\n\u53c2\u8003 \ntmalloc_large\n,\ninsert_large_chunk\n \u548c\nunlink_large_chunk\n\u7684\u89e3\u6790.", 
            "title": "dlmalloc \u6d45\u6790"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#dlmalloc", 
            "text": "version 1.0 by Werther Zhang @ 2014.03.15 Write done @WizNote  Version 1.1   by Werther Zhang @ 2014.03.20 Export to @Word  Version  1.2  by Werther Zhang @ 2016.07.02 Move to @leanote", 
            "title": "dlmalloc\u6d45\u6790"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#dlmalloc_1", 
            "text": "dlmalloc\u5728\u67d0\u4e9b\u7a0b\u5ea6\u4e0a\u8bf4\uff0c\u662f\u6700\u597d\u7684\u5185\u5b58\u7ba1\u7406\u5de5\u5177\u4e4b\u4e00\u3002\u5b83\u662f\u7531Doug Lea \u57281987\u5e74\u5f00\u59cb\u7f16\u5199\uff0c\u6240\u4ee5\u5927\u90e8\u5206\u4eba\u4f1a\u79f0\u547c\u5b83\u4e3aDoug Lea's Malloc\uff0c \u7b80\u79f0dlmalloc\u3002", 
            "title": "dlmalloc\u4ecb\u7ecd"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#_1", 
            "text": "dlmalloc \u6839\u636e\u5185\u5b58\u7c92\u5ea6\u7684\u5927\u5c0f\u5206\u522b\u4f7f\u7528chunk\u548csegment\u8fdb\u884c\u7ba1\u7406\u3002Segment\u662f\u901a\u8fc7sbrk\u5206\u914d\uff0c\u7c7b\u4f3c\u8fdb\u7a0b\u7684\u6570\u636e\u6bb5\uff0c\u5c5e\u4e8e\u6781\u5c11\u9047\u5230\u7684\u60c5\u51b5\u3002Dlmalloc\u4e2d\u5927\u91cf\u5b58\u5728\u7684\u5185\u5b58\u5757\u662fchunk\u3002Chunk\u7684\u7ed3\u6784\u5982\u4e0b\u3002  \u88ab\u7528\u6237\u4f7f\u7528\u7684chunk\u7ed3\u6784\u770b\u8d77\u6765\u50cf\u4e0b\u9762\u8fd9\u6837\uff08\u975e\u7cbe\u786e\u56fe\uff09\uff1a   \u800c\u672a\u88ab\u4f7f\u7528\u7684chunk\u770b\u8d77\u6765\u5982\u4e0b\uff08\u975e\u7cbe\u786e\u56fe\uff09\uff1a   \n\u5728\u865a\u62df\u5730\u5740\u4e0a\uff0cdlmalloc\u4f1a\u4fdd\u8bc1\u7a7a\u95f2\u7684\u5185\u5b58\u5757\u5b58\u5728\u201c\u5b64\u5c9b\u6548\u5e94\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4efb\u4e00\u5757\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u524d\u540e\u5fc5\u5b9a\u662f\u88ab\u4f7f\u7528\u7684\u5185\u5b58\u5757\u3002\u56e0\u4e3a\u5728free\u6216\u8005\u5176\u4ed6\u4efb\u4f55\u65f6\u5019\uff0cdlmalloc\u603b\u662f\u4f1a\u5408\u5e76\u7a7a\u95f2\u7684\u5185\u5b58\u5757\u3002 \n\u5bf9 \u4e8echunk\uff0c\u6839\u636e\u5176\u5927\u5c0f\uff0c\u5206\u4e3a\u5927\u5185\u5b58\u548c\u5c0f\u5185\u5b58\u3002\u5c0f\u5185\u5b58\u753132\u4e2a\u53cc\u5411\u94fe\u8868\u901a\u8fc7\u5206\u7bb1\uff08\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u5bf9\u5e94\u4e00\u4e2a\u5927\u5c0f\uff0c\u6bcf\u4e2a\u7bb1\u5b50\u4e2d\u5b58\u653e\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff09\u8fdb\u884c\u7ba1\u7406\uff0c\u800c\u5927 \u5185\u5b58\u7edf\u4e00\u7531bitwise tries\u6811\u901a\u8fc7\u5206\u7bb1\uff08\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u5bf9\u5e94\u4e00\u4e2a\u5185\u5b58\u8303\u56f4\uff0c\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u4e2d\u5b58\u653e\u4e00\u68f5\u6811\uff0c\u6bcf\u4e00\u68f5\u6811\u4e2d\u82e5\u6709\u7b49\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u7531\u53cc\u5411\u94fe\u8868\u7ba1\u7406\uff09 \u8fdb\u884c\u7ba1\u7406\u3002 \n\u6bcf\u4e00\u4e2achunk\u7684\u5927\u5c0f\u5fc5\u987b\u4e3a8byte\u7684\u6574\u6570\u500d\u3002\u6240\u4ee5\u5728\u2019size of chunk\u2019 \u57df\u7684\u4f4e\u4e09\u4f4d\u5b58\u653e\u4e86\u8be5chunk\u5c5e\u6027\u7684\u6807\u5fd7\u4f4d\u3002 \nP (PINUSE_BIT) \u4f4d, \u4fdd \u5b58\u5728\u5185\u5b58\u5757\u5927\u5c0f(\u4e00\u822c\u662f\u53cc\u5b57\u8282\u7684\u500d\u6570)\u7684\u672a\u4f7f\u7528\u7684\u4f4e\u4f4d, \u662f\u4e00\u4e2a\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u662f\u5426\u88ab\u4f7f\u7528\u7684bit\u4f4d.\u5982\u679c\u8fd9\u4e2abit\u4f4d\u88ab\u6e05\u7406\u4e86,\u90a3\u4e48\u5728\u5f53\u524d\u5185\u5b58\u5757 \u4e4b \u524d\u7684\u4e00\u4e2a\u5b57 \u5927\u5c0f\u6570\u636e\u4fdd\u5b58\u7740\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u7528\u4e8e\u5bfb\u627e\u524d\u4e00\u4e2a\u5185\u5b58\u5757.\u800c \u7b2c\u4e00\u4e2a\u5185\u5b58\u5757\u8fd9\u4e2abit\u4f4d\u603b\u662f\u88ab\u7f6e\u4e0a\u7684,\u9632\u6b62\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u5185\u5b58\u533a\u57df.\u5982\u679c\u67d0\u4e2a \u5185 \u5b58\u5757\u7684 pinuse\u88ab\u8bbe\u7f6e\u4e86,\u4f60\u5c31\u65e0\u6cd5\u51b3\u5b9a\u4e0a\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u5e76\u4e14\u5982\u679c\u4f60\u771f\u7684\u5c1d \u8bd5\u8fd9 \u4e48\u505a\u4e86,\u6709\u53ef\u80fd\u5185\u5b58\u8bbf\u95ee\u51fa\u9519. \nC (CINUSE_BIT) bit\u4f4d, \u4fdd\u5b58\u5728\u5185\u5b58\u5757\u7684\u7b2c\u4e8c\u4f4e\u7684bit\u4f4d,\u5197\u4f59\u5730\u8bb0\u5f55\u7740\u5f53\u524d\u5757\u662f \u5426\u88ab\u4f7f\u7528\u4e86(\u9664\u975e\u5f53\u524d\u5185\u5b58\u5757\u662f\u88ab\u6620\u5c04\u7684).\u8fd9\u4e2a\u5197\u4f59\u4fe1\u606f\u7528\u4e8e\u5728free\u548crealloc\u64cd \u4f5c\u65f6\u7684\u68c0\u67e5,\u5e76\u4e14\u51cf\u5c11\u5728\u6267\u884cfree\u548c\u5408\u5e76\u5185\u5b58\u5757\u65f6\u7684\u95f4\u63a5\u64cd\u4f5c. \n\u4efb\u4f55\u65b0\u5206\u914d\u7684\u5185\u5b58\u5757\u5fc5\u987b\u90fd\u8bbe\u7f6e\u4e86cinuse\u548cpinuse.\u8fd9\u610f\u5473\u7740,\u4efb\u4f55\u5206\u914d\u4e86\u7684\u5185 \u5b58\u5757\u7684\u8fb9\u754c\u8981\u4e48\u662f\u4e00\u4e2a\u5148\u524d\u5206\u914d\u5e76\u4e14\u4ecd\u7136\u5728\u4f7f\u7528(in-use)\u7684\u5185 \u5b58\u5757,\u8981\u4e48\u662f\u5b83\u81ea \u5df1\u7684\u5927\u5185\u5b58\u533a\u57df(segment)\u7684\u5730\u5740.\u8fd9\u6837\u786e\u4fdd\u6240\u6709\u7684\u5185\u5b58\u7533\u8bf7(allocations)\u90fd\u662f\u4ece\u4efb\u4f55\u80fd\u627e\u5230\u7684\u5185\u5b58\u5757\u7684\u201c\u6700\u4f4e\u201d\u90e8\u5206 \u83b7\u53d6.\u8fdb\u4e00\u6b65\u5730\u8bf4,\u4e0d\u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u7a7a\u95f2\u5185 \u5b58\u5757\u5728\u7269\u7406\u4e0a\u7d27\u90bb\u7740\u53e6 \u4e00\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757,\u6240\u4ee5\u6bcf\u4e00\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757\u88ab\u8bc1\u5b9e\u5728\u4f7f\u7528 (inuse)\u7684\u5185\u5b58\u5757\u6216\u8005\u5185\u5b58\u5c3e \u90e8\u4e4b\u524d\u548c\u4e4b\u540e. \n\u6ce8\u610f: \u5f53\u524d\u5757\u7684 \u2019foot\u2019\u5b9e\u9645\u4e0a\u4ee3\u8868\u7740\u4e0b\u4e00\u4e2a\u5185\u5b58\u5757\u7684prev_foot.\u8fd9\u4f7f\u5bf9\u9f50\u7b49\u64cd \u4f5c\u5904\u7406\u53d8\u5f97\u5bb9\u6613\u4f46\u4f1a\u4f7f\u4eba\u5728\u6269\u5c55\u6216\u7ef4\u62a4\u8fd9\u4efd\u4ee3\u7801\u65f6\u611f\u5230\u56f0\u60d1. \n\u4ee5\u4e0b\u662f\u5bf9\u7279\u6b8a\u7684\u5185\u5b58\u5757\u7684\u8bf4\u660e:   \u7279 \u6b8a\u7684\u5185\u5b58\u5757\u2019top\u2019\u662f\u6700\u9876\u4e0a\u7684\u53ef\u7528\u5185\u5b58\u5757(i.e., \u7d27\u90bb\u7740\u53ef\u7528\u5185\u5b58\u7684\u8fb9\u754c). \u8fd9\u5757\u5185\u5b58\u5757\u4f1a\u88ab\u7279\u6b8a\u5bf9\u5f85. Top \u5185\u5b58\u5757\u4e0d\u4f1a\u88ab\u5305\u542b\u5728\u4efb\u4f55\u7684\u5185\u5b58\u5206 \u7c7b\u7bb1\u91cc, \u53ea\u6709\u5728\u6ca1\u6709\u4efb\u4f55\u5176\u4ed6\u5185\u5b58\u5757\u53ef\u4f7f\u7528\u65f6,\u624d\u88ab\u4f7f\u7528,\u5e76\u4e14\u5728\u5b83\u975e\u5e38\u5927\u65f6(\u67e5\u770b M_TRIM_THRESHOLD) \u4f1a\u88ab\u91ca\u653e\u4e00\u90e8\u5206\u56de\u7cfb\u7edf.\u5728\u5b9e\u9645 \u4e0a,top\u5185\u5b58\u5757\u4e00\u822c\u88ab\u8ba4 \u4e3a\u662f\u6bd4\u5176\u4ed6\u6240\u6709\u7684\u5185\u5b58\u5757\u90fd\u5927.Top\u5185\u5b58\u5757\u4ece\u6765\u4e0d\u4f1a\u66f4\u65b0\u5b83\u7684\u5c3e\u90e8\u6570\u636e\u533a\u57df\u56e0 \u4e3a\u6839\u672c\u6ca1\u6709\u5185\u5b58\u5757\u4f1a\u5728\u7d22\u5f15\u4e0a\u7d27\u8ddf\u5176\u540e.\u4f46\u662f,\u7a7a\u95f4 \u8fd8\u662f\u4f1a\u5206\u914d\u7ed9\u5b83 (TOP_FOOT_SIZE) \u7528\u6237\u505a\u5185\u5b58\u5757\u7684\u62c6\u5206\u548c\u5408\u5e76,\u5f53\u7a7a\u95f4\u9700\u8981\u6269\u5c55\u65f6.  dv chunk \u662f\u4fdd\u5b58\u4e86\u6700\u8fd1\u88ab\u4f7f\u7528\u5e76\u5207\u5272\u8fc7\u7684\u5185\u5b58\u5757\uff0c\u4fdd\u5b58\u5728\u5168\u5c40\u7684gm\u4e2d\u3002\u5b83\u4e0d\u5f52\u5c5e\u5230\u53cc\u5411\u94fe\u8868\u6216\u8005\u6811\u4e2d\u7ba1\u7406\u3002\u4f46\u5f53\u5b83\u88ab\u66ff\u6362\u65f6\uff0c\u4e5f\u4f1a\u52a0\u5165\u5185\u5b58\u7ba1\u7406\u4e2d\u3002 \nBitwise trie \u6811, \u5b9e\u9645\u4e0a\u662f\u7ed3\u5408\u4e86\u4e8c\u53c9\u6811\u548ctrie\u6811(\u53c8\u53eb\u5b57\u5178\u6811, \u524d\u7f00\u6570).\u4e8c\u53c9\u6811\u53ea\u6709\u5de6\u53f3\u5b50\u6811. Trie\u6811\u662f\u4e00\u79cd\u6709\u5e8f\u6811,\u7528\u4e8e\u4fdd\u5b58\u5173\u8054\u6570\u7ec4,\u7c7b\u4f3c hash table, \u6709key \u548c value \u7ed3\u6784. \u5982\u4e0b\u56fe.key \u5b9e\u9645\u4e0a\u5c31\u662f\u5230\u8fbevalue\u7684\u8def\u5f84.\u800cbitwise trie, \u5b83\u662f\u5c06 key\u8bbe\u7f6e\u4e3a0/1, \u6240\u4ee5, \u662f\u4e00\u68f5\u4e8c\u53c9\u6811.\u5728dlmalloc\u7684bitwise trie tree\u4e2d, 0 \u4ee3\u8868\u8fdb\u5165\u5de6\u5b50\u6811, 1 \u4ee3\u8868\u8fdb\u5165\u53f3\u5b50 \u6811. \u800ckey\u7684\u957f\u5ea6\u5bf9\u5e94\u8def\u5f84\u7684\u6df1\u5ea6.\u53c2\u8003 [treebins\u548c\u6811\u7ba1\u7406\u56fe\u89e3] \u7684\u56fe,\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u8981\u67e5\u627e\u7684\u662f512\u5bf9\u5e94\u7684\u7ed3\u70b9, \u5219\u5c06520\u5bf9 \u5e94\u4e8c\u8fdb\u5236\u7801\u662f1000001000, \u5bf9\u5e94\u7684\u7bb1\u5b50\u53f7\u662f2\u53f7,\u5219\u5176\u8868\u793a\u7684\u5185\u5b58\u8303\u56f4\u4e3a256, \u7279\u5f81\u7801\u957f\u5ea6\u4e3a8, \u4e5f\u5c31\u662f00001000.\u8003\u8651\u5230, \u6240\u6709\u8bf7 \u6c42\u5927\u5c0f\u4e3a8byte\u500d\u6570,\u6240\u4ee5, \u5b9e\u9645\u7279\u5f81\u7801\u4e3a00001, \u6811\u6df1\u4e3a5, \u524d4\u5c42\u4e3a\u5de6\u5b50\u6811,\u7b2c\u4e94\u5c42\u4e3a\u53f3\u5b50\u6811.\u4f46\u521a\u624d\u63cf\u8ff0\u7684\u662ftrie\u6811\u548c bitwise trie \u6811, \u4e0d\u662fdlmalloc\u4f7f\u7528\u7684\u6811.", 
            "title": "\u7b97\u6cd5\u6982\u89c8"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#mspace", 
            "text": "struct   malloc_chunk   {  size_t                 prev_foot ;    /* \u5982\u679c\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7a7a\u95f2,\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f */  size_t                 head ;         /* \u5927\u5c0f\u548cinuse bit\u4f4d*/  struct   malloc_chunk *   fd ;           /* \u5982\u679c\u662f\u7a7a\u95f2\u5185\u5b58\u5757,\u6307\u5411\u53cc\u5411\u94fe\u8868*/  struct   malloc_chunk *   bk ;  };  typedef   struct   malloc_chunk    mchunk ;  typedef   struct   malloc_chunk *   mchunkptr ;  typedef   struct   malloc_chunk *   sbinptr ;    /* \u5185\u5b58\u5757\u5206\u7c7b\u7bb1\u7684\u7c7b\u578b */ \ufeff\u200b", 
            "title": "\u975eMSPACE\u4ee3\u7801\u903b\u8f91\u5206\u6790"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#head", 
            "text": "PINUSE_BIT \u5728\u524d\u4e00\u4e2a\u76f8\u90bb\u7684\u5185\u5b58\u5757\u88ab\u4f7f\u7528\u65f6,\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u88ab\u7f6e\u4e0a. CINUSE_BIT \u5728\u5f53\u524d\u5185\u5b58\u5757\u88ab\u4f7f\u7528\u65f6,\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u88ab\u7f6e\u4e0a. FLAG4_BIT \u5728\u5f53\u524d\u7248\u672c\u7684dlmalloc\u4e2d\u672a\u88ab\u4f7f\u7528  \n\u5982 \u4f55\u505a\u5230\u5728head\u4e2d\u65e2\u5b58\u653e\u5757\u5927\u5c0f\u53c8\u5b58\u653e\u6807\u5fd7\u4f4d\u7684\u5462?\u9996\u5148\u63d0\u5230\u4e00\u70b9\u662f,\u6240\u6709\u7684\u5757\u7684 \u5927\u5c0f\u90fd\u662f\u6309\u6700\u5c118bit\u5bf9\u9f50\u7684,\u6362\u53e5\u8bdd\u8bf4,\u8868\u793a\u5927\u5c0f\u7684\u6570\u5b57,\u4f4e3\u4f4d\u5fc5\u5b9a\u4e3a 0,\u6240\u4ee5\u5c31\u6709 \u6548\u5730\u5229\u7528\u4e86\u4f4e3\u4f4d\u5b58\u653e\u6807\u5fd7\u4f4d.\u6240\u4ee5,\u83b7\u53d6chunk\u7684\u5927\u5c0f\u7528\u4e0b\u9762\u7684\u5b8f,\u5c06head\u7684\u4f4e\u4e09 \u4f4d\u6e05\u62100,\u53d6\u51fa.  #define chunksize(p)        ((p)- head   ~(FLAG_BITS))  \n\u4e0b\u9762\u4ecb\u7ecd\u4e0bdlmalloc\u7ef4\u62a4\u7684\u4e00\u4e2a\u5168\u5c40\u6570\u636e\u7ed3\u6784.  2579   struct   malloc_state   {   2580     binmap_t     smallmap ;    // 32bit, \u5c0f\u5185\u5b58\u7bb1\u5b50\u7684\u4f4d\u56fe.  2581     binmap_t     treemap ;      // 32bit, \u5927\u5185\u5b58\u7bb1\u5b50\u7684\u4f4d\u56fe  2582     size_t       dvsize ;             //  dv chunk \u7684\u5927\u5c0f  2583     size_t       topsize ;            //  top chunk\u7684\u5927\u5c0f  2584     char *        least_addr ;      //  dlmalloc\u7ba1\u7406\u7684\u5185\u5b58\u7684\u6700\u5c0f\u5730\u5740,\u4e5f\u5c31\u662f\u6700\u5c0f\u7684segment \u57fa\u5730\u5740.  2585     mchunkptr    dv ;              // dv chunk. \u6700\u8fd1\u88ab\u5206\u5272\u4f7f\u7528\u7684chunk  2586     mchunkptr    top ;             // top chunk. \u9876\u90e8,\u9760\u8fd1\u6709\u6548\u5185\u5b58\u7684chunk,\u8be6\u89c1\u603b\u7ed3\u56fe.  2587     size_t       trim_check ;      // \u68c0\u67e5top chunk\u5927\u5c0f\u662f\u5426\u8d85\u7684\u51fd\u6570.  2588     size_t       release_checks ;    2589     size_t       magic ;   2590     mchunkptr    smallbins [( NSMALLBINS + 1 ) * 2 ];     // 32\u4e2a\u94fe\u8868\u5934  2591     tbinptr      treebins [ NTREEBINS ];             // 32\u68f5\u6811  2592     size_t       footprint ;   2593     size_t       max_footprint ;   2594     size_t       footprint_limit ;   /* zero means no limit */   2595     flag_t       mflags ;   2596   # if   USE_LOCKS   2597     MLOCK_T      mutex ;       /* locate lock among fields that rarely change */   2598   # endif   /* USE_LOCKS */   2599     msegment     seg ;          //  segment\u94fe\u8868.  2600     void *        extp ;        /* Unused but available for extensions */   2601     size_t       exts ;   2602   }; \ufeff\u200b   mchunkptr  smallbins[(NSMALLBINS+1)*2];    \u8fd9\u91cc\u4f1a\u6709\u4e2a\u7591\u95ee,\u7406\u8bba\u4e0a, 32\u4e2a\u94fe\u8868\u5934,\u6211\u4eec\u4f1a\u4f7f\u7528 struct malloc_chunk  smallbins[NSMALLBINS];   \u4f46\u8fd9\u91cc\u4e0d\u4f7f\u7528\u7684\u539f\u56e0\u662f, \u5bf9\u4e8e\u94fe\u8868\u5934\u800c\u8a00,   malloc_chunk \u7684  prev_foot \u548c head \u4e24\u4e2a\u57df\u662f\u6ca1\u6709\u88ab\u4f7f\u7528\u7684,\u5b9e\u9645\u9700\u8981\u7684\u5927\u5c0f\u662f2\u4e2a\u6307\u9488\u5927 \u5c0f.\u6240\u4ee5,dlmalloc\u4f7f\u7528\u4e86\u8986\u76d6\u7684\u65b9\u6cd5. \u524d\u4e00\u4e2a malloc_state \u7684fb/bk \u8e29\u4e86\u540e\u4e00\u4e2a\u7684 malloc_state\u7684 prev_foot/head.\u6240\u4ee5\u5927\u5c0f\u5e94\u8be5\u4e3a 32 * 8 + 8, \u4e5f\u5c31\u662f33 * 2 \u4e2a\u6307\u9488\u5927\u5c0f.", 
            "title": "head \u57df\u4e2d\u53d8\u91cf\u7684\u8bf4\u660e:"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#_2", 
            "text": "\u5f53\u5185\u5b58\u5757\u672a\u88ab\u4f7f\u7528\u65f6,\u4ed6\u4eec\u4f5c\u4e3a\u5217\u8868\u6216\u8005\u6811\u7684\u8282\u70b9. \n\u5c0f\u5185\u5b58(\u201cSmall\u201d) \u5757\u5b58\u50a8\u5728\u73af\u5f62\u53cc\u5411\u94fe\u8868\u4e2d,\u770b\u8d77\u6765\u50cf\u5982\u4e0b\u8fd9\u6837.   \u800c \u5927 \u7684\u5185\u5b58\u5757\u4f7f\u7528\u5185\u5b58\u5757\u5927\u5c0f\u4e3a\u5173\u952e\u5b57\u7684bitwise digital tree (\u53c8\u53ebaka tree).\u56e0\u4e3amalloc_tree_trunks\u53ea\u662f \u7528\u4e8e\u5927\u5c0f\u5927\u4e8e256bytes\u7684\u7a7a\u95f2\u5185\u5b58\u5757,\u4ed6\u4eec \u7684\u5927\u5c0f\u4e0d\u4f1a\u53d7\u5230\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u7684\u9650\u5236.\u6bcf \u4e00\u4e2a\u8282\u70b9\u7684\u7ed3\u6784\u770b\u8d77\u6765\u50cf\u5982\u4e0b\u8fd9 \u6837.   \u6bcf\u4e00\u68f5\u6811\u90fd\u62e5\u6709\u552f\u4e00\u7684\u5185\u5b58\u5757\u5927\u5c0f.\u800c\u5177\u6709\u540c\u6837\u5927\u5c0f\u7684\u5185\u5b58\u5757\u4f1a\u88ab\u5b89\u6392\u5728\u53cc\u5411\u94fe \u8868\u91cc,\u4e0e\u6700\u8001\u7684\u5185\u5b58\u5757\u4e00\u8d77(\u6307,\u4ee5FIFO\u7684\u89c4\u5219,\u4e0b\u4e00\u4e2a\u8981\u88ab\u4f7f\u7528\u7684\u5185\u5b58\u5757).\u5982\u679c\u4e00 \u4e2a\u5177\u6709\u540c\u6837\u5927\u5c0f\u7684\u5185\u5b58\u5757\u88ab\u63d2\u5165,\u5b83\u5c31\u4f1a\u7528\u7c7b\u4f3c\u5c0f\u5185\u5b58\u7684fb/bk\u7684\u6307\u9488\u4e00\u6837\u7684\u65b9\u5f0f,\u4ece \u539f\u6709\u7684\u8282\u70b9\u79fb\u9664.  \u6bcf \u4e00 \u68f5\u6811\u5305\u542b\u5927\u5c0f\u4e3a2\u7684\u4e58\u65b9\u8303\u56f4\u7684\u5185\u5b58\u5757(\u6700\u5c0f\u4e3a0x100  = x   0x180),\u5728\u6811 \u7684\u6bcf\u4e00\u5c42\u90fd\u4f1a\u88ab\u5206\u6210\u4e00\u534a,\u5373\u5c0f\u7684\u4e00\u534a (0x100  = x   0x140)\u4f5c\u4e3a\u5de6\u5b50\u6811,\u5927\u7684\u4e00 \u534a\u4f5c\u4e3a\u53f3\u5b50\u6811(0x140  = x   0x180).  \u901a\u8fc7\u4f7f\u7528\u8fd9\u79cd\u89c4\u5219,\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u5305\u542b\u7684\u5185\u5b58\u5757\u5927\u5c0f\u90fd\u5c0f\u96e8\u5176\u53f3\u5b50\u6811.  Smallbins\u548c\u53cc\u5411\u94fe\u8868\u7ba1\u7406\u5c0f\u5185\u5b58\u56fe\u89e3\u3002   Treebins\u548c\u6811\u7ba1\u7406\u5927\u5185\u5b58\u7684\u56fe\u89e3\uff1a", 
            "title": "\u88ab\u8986\u76d6\u7684\u6570\u636e\u7ed3\u6784"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#dlmalloc_2", 
            "text": "dlmalloc \u5bf9\u5c0f\u5185\u5b58\u5206\u914d\u6709\u5982\u4e0b5\u4e2a\u89c4\u5219(\u6309\u4f18\u5148\u7ea7\u987a\u5e8f)\uff1a    \u5982\u679c\u4e0e\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u5339\u914d\u7684\u7bb1\u5b50\u5b58\u5728\u7a7a\u95f2,\u5219\u4f7f\u7528\u5f53\u524d\u7bb1\u5b50\uff0c\u5426\u5219\u4f7f\u7528\u4e34\u8fd1\u7684 \u7bb1\u5b50\u3002\u5728\u80fd\u4e0d\u5206\u5272\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\u5c3d\u91cf\u4e0d\u5206\u5272\u5185\u5b58\u3002   \u5982\u679cdv chunk\u8db3\u591f\u5927\uff0c\u90a3\u4e48\u4f7f\u7528dv chunk\u3002 dv chunk\u662f\u6307\u6700\u8fd1\u4e00\u6b21\u5c0f\u5185\u5b58 \u7533\u8bf7\u65f6\u4f7f\u7528\u7684\u5185\u5b58\u5757\u3002 \u8fd9\u4e2a\u89c4\u5219\u662f\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u5206\u914d\u7684\u5185\u5b58\u8fde\u7eed\u3002   \u5728smallbin\u548ctreebin\u4e2d\u5bfb\u627e\u53ef\u4ee5\u4f7f\u7528\u7684\u5185\u5b58\u5757\uff0c\u5e76\u5206\u5272\u3002\u5c06\u5269\u4e0b\u7684\u5185\u5b58 \u5757\u4fdd\u5b58\u5230dv chunk\u4e2d\u3002   \u5982\u679ctop chunk \u8db3\u591f\u5927\uff0c\u5219\u4f7f\u7528top chunk  \u5982\u679c\u8bf7\u6c42\u5185\u5b58\u5b9e\u5728\u592a\u5927\uff0c\u5219\u4f7f\u7528\u7cfb\u7edf\u5206\u914d\u5185\u5b58\u3002   \n\u5927\u5185\u5b58\u5206\u914d\u7684\u89c4\u5219\uff1a   \u5728treebin\u4e2d\u627e\u5230\u6700\u9002\u5408\u7684\u6700\u5c0f\u5185\u5b58\uff0c\u5982\u679c\u5b83\u6bd4dv chunk\u7684\u66f4\u5408\u9002\uff0c\u5c31\u4f7f\u7528\u5b83\uff0c \u5982\u679c\u6709\u9700\u8981\u5c31\u5206\u5272\u5b83\u3002   \u5982\u679cdv chunk \u6bd4\u5176\u4ed6\u6240\u6709\u7684\u66f4\u5408\u9002\uff0c\u4f7f\u7528dv chunk\u3002   \u5982\u679ctop \u8db3\u591f\u5927\uff0c\u4f7f\u7528top chunk\u3002   \u5982\u679c\u8bf7\u6c42\u7684\u5927\u5c0f  = mmap threshold, \u5219\u4f7f\u7528\u7cfb\u7edf\u7684mmap\u3002  \u76f4\u63a5\u4ece\u7cfb\u7edf\u5206\u914d\u5185\u5b58\u5e76\u4f7f\u7528\u3002", 
            "title": "dlmalloc\u4ee3\u7801\u5206\u6790"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#_3", 
            "text": "4597       if   ( bytes   =   MAX_SMALL_REQUEST )   {   // MAX_SMALL_REQUEST \u5b9e\u73b0\n2577 #define MAX_SMALL_REQUEST (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)  \u8fd9\u91ccbytes\u4e3a\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f,  MAX_SMALL_REQUEST \u5c31\u662f\u4e4b\u524d\u63d0\u5230\u8fc7\u7684\u6700\u5927\u7684\u5c0f\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u5c31\u662f256byte,\u5373,256byte\u4ee5\u4e0b\u7684\u6240\u6709\u5185\u5b58\u90fd\u662f\u5728\u53cc\u5411\u94fe\u8868\u4e2d\u5339\u914d.  4600         nb   =   ( bytes     MIN_REQUEST ) ?   MIN_CHUNK_SIZE   :   pad_request ( bytes );   2225   # define   MIN_REQUEST           ( MIN_CHUNK_SIZE   -   CHUNK_OVERHEAD   -   SIZE_T_ONE )  2228   # define   pad_request ( req )  \\ 2229      ((( req )   +   CHUNK_OVERHEAD   +   CHUNK_ALIGN_MASK )     ~ CHUNK_ALIGN_MASK )   \u8fd9\u91ccnb\u5c31\u662f\u52a0\u4e0a\u534f\u8bae\u6570\u636e\u540e\u7684\u5b9e\u9645dlmalloc\u4f1a\u5206\u914d\u7684\u5185\u5b58\u5757\u5927\u5c0f.\u524d\u6587\u7b14\u8005\u63d0\u5230\u8fc7,\u5c0f\u5185\u5b58\u5757\u7684\u6700\u5c0f\u503c\u4e3a8byte,\u6240\u4ee5,\u4e0d\u8bba\u7533\u8bf7\u7684\u5185\u5b58\u591a\u5c0f,\u90fd\u4f7f\u7528\u6700\u5c0f\u503c.  4601      idx = small_index(nb);  2572   # define   SMALLBIN_SHIFT      ( 3U )  2825   # define   small_index ( s )        ( bindex_t )(( s )      SMALLBIN_SHIFT )   \u8fd9\u91ccidx\u5f97\u5230\u7684\u662f\u8be5\u5185\u5b58\u5757\u5bf9\u5e94\u7684smallbin\u7bb1\u5b50\u7684\u7bb1\u53f7.\u524d\u6587\u5728\u63d0\u5230head\u65f6,\u63d0\u5230\u8fc7,\u5c0f\u5185\u5b58\u5757\u7684\u5927\u5c0f\u4e3a8byte\u7684\u500d\u6570,\u6240\u4ee5,\u53f3\u79fb3\u4f4d\u6765\u5b9a\u4f4d\u5bf9\u5e94\u7bb1\u5b50\u7684\u7bb1\u53f7.  4602         smallbits   =   gm - smallmap     idx ;   smallmap \u662f\u5404\u4e2a\u7bb1\u5b50\u7684\u4f4d\u56fe,32bit,\u5bf9\u5e9432\u4e2a\u7bb1\u5b50,\u6bcf\u4e00\u4f4d\u4e3a1\u8868\u793a\u8be5\u7bb1\u53f7\u4e2d\u6709\u5bf9\n\u5e94\u5927\u5c0f\u7684\u5185\u5b58\u5757,\u4e3a0\u5219\u8868\u793a\u6ca1\u6709.\u8be5\u884c\u4ee3\u7801\u662f\u628a\u5bf9\u5e94\u7bb1\u53f7\u7684\u6bd4\u7279\u4f4d\u79fb\u5230\u6700\u53f3\u4fa7.  4604         if   (( smallbits     0x3U )   !=   0 )   {  4605           mchunkptr   b ,   p ;  4606           idx   +=   ~ smallbits     1 ;         /* Uses next bin if idx empty */  4607           b   =   smallbin_at ( gm ,   idx );   \u8fd9\u91cc 0x3U \u4f4e8\u4f4d\u5c31\u662f 0000 0011. \u6240\u4ee5,smallbits 0x3U \u4e3a\u771f\u7684\u6761\u4ef6\u5982\u4e0b:(\u4e0a\u6587\u63d0\u5230,smallbits\u7684\u6700\u53f3\u4f4d\u8868\u793aidx\u7bb1\u53f7\u662f\u5426\u6709\u7a7a\u95f2\u5757)   \u4f4e2\u4f4d\u4e3a 11. idx\u6709\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u6709\u7a7a\u95f2\u5757.  \u4f4e2\u4f4d\u4e3a 10. idx\u65e0\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u6709\u7a7a\u95f2\u5757.  \u4f4e2\u4f4d\u4e3a 01. idx\u6709\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u65e0\u7a7a\u95f2\u5757.   4606\u884c\u662f\u5728\u91cd\u65b0\u5b9a\u4f4d\u5230\u771f\u6b63\u6709\u7a7a\u95f2\u5757\u7684\u7bb1\u53f7. ~smallbits   1 \u5728\u5f53\u524d\u7bb1\u5b50\u4e3a0\u7684\n\u60c5\u51b5\u4e0b,\u503c\u4e3a1;\u5f53\u524d\u7bb1\u5b50\u4e3a1\u7684\u60c5\u51b5\u4e0b,\u503c\u4e3a0.\u6240\u4ee5\u662f\u6709\u9650\u662f\u7528\u6b63\u597d\u6ee1\u8db3\u5927\u5c0f\u7684\u7bb1\n\u5b50.  2831 #define smallbin_at(M, i)\n((sbinptr)((void*) ((M)- smallbins[(i) 1])))  i \u5c31\u662f idx, \u800cM\u5219\u662fgm( \u9700\u8981\u5728\u4e0a\u6587\u9884\u5148\u63cf\u8ff0gm\u7ed3\u6784\u4f53\u6210\u5458\u4f5c\u7528 ).smallbins( \u9700\u5728\u4e0a\u6587\u63cf\u8ff0 )\u5c31\u662f\u53cc\u5411\u94fe\u8868\u6570\u7ec4,\u4e5f\u5c31\u662f\u5bf9\u5e94\u7bb1\u53f7\u5185\u90e8\u7684\u7a7a\u95f2\u5757\u94fe\u8868\u7684\u9996\u5730\u5740.  \u503c\u5f97\u9ad8\u5174\u7684\u662f,\u6211\u4eec\u62ff\u5230\u94fe\u8868\u4e86,\u63a5\u4e0b\u6765\u5c31\u662f\u53d6\u51fa\u7a7a\u95f2\u5757,\u548c\u4e00\u4e9b\u6807\u5fd7\u4f4d\u7684\u5904\u7406\u4e86.  4608        p = b- fd;\n4609        assert(chunksize(p) == small_index2size(idx));\n4610        unlink_first_small_chunk(gm, b, p, idx);\n4611        set_inuse_and_pinuse(gm, p, small_index2size(idx));\n4612        mem = chunk2mem(p);\n4613        check_malloced_chunk(gm, mem, nb);\n4614        goto postaction;  fd\u57df\u662f\u524d\u4e00\u4e2a\u94fe\u8868\u8282\u70b9.\u800cB\u662f\u8868\u5934, \u4e5f\u5c31\u662f\u8bf4,\u6211\u4eec\u53d6\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20,\u53d6\u5230\u6211\u4eec\u9700\u8981\u7684\u5185\u5b58\u5757\u5730\u5740.\u8fd9\u4e2aassert\u5176\u5b9e\u5c31\u662f\u786e\u8ba4\u4e0b,\u5f53\u524d\u7684\u7bb1\u53f7\u7684\u5185\u5b58\u5757\u5927\u5c0f\u8ddf\u5f53\u524d\u5185\u5b58\u5757\u7684\u5927\u5c0f\u662f\u5426\u5339\u914d.   3629#define unlink_first_small_chunk(M, B, P, I) {\\\n3630  mchunkptr F = P- fd;\\\n3631  assert(P != B);\\\n3632  assert(P != F);\\\n3633  assert(chunksize(P) == small_index2size(I));\\\n3634  if (B == F) {\\\n3635    clear_smallmap(M, I);\\\n3636  }\\\n3637  else if (RTCHECK(ok_address(M, F)   F- bk == P)) {\\\n3638    F- bk = B;\\\n3639    B- fd = F;\\\n3640  }\\\n3641  else {\\\n3642    CORRUPTION_ERROR_ACTION(M);\\\n3643  }\\\n3644}  2921#define clear_smallmap(M,i)     ((M)- smallmap  = ~idx2bit(i))  \u8fd9\u91cc B P F\u7684\u5173\u7cfb\u662f F -  P -  B , \u6240\u4ee5,\u7406\u8bba\u4e0a, P \u4e0d\u7b49\u4e8eF \u4e5f\u4e0d\u7b49\u4e8eB,\u5982\n\u679c\u76f8\u7b49,\u5c31\u610f\u5473\u7740\u662f\u7a7a\u94fe\u8868(\u53ea\u6709\u8868\u5934).\u800c\u5982\u679cB == F,  \u610f\u5473\u7740\u8be5\u94fe\u8868\u4e2d\u53ea\u6709\u4e00\n\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757.\u53d6\u51fa\u8be5\u5185\u5b58\u5757\u4e4b\u540e,\u54b1\u4eec\u8981\u628a\u8be5\u7bb1\u5b50\u6807\u8bb0\u4e3a\u7a7a(3635, 2921).\u5f53\u7136,\n\u66f4\u591a\u7684\u60c5\u51b5\u662f\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9P.  // 4611 \u884c\u51fd\u6570\u5b9e\u73b0\n\n3058#define set_inuse_and_pinuse(M,p,s)\\\n3059  ((p)- head = (s|PINUSE_BIT|CINUSE_BIT),\\\n3060  ((mchunkptr)(((char*)(p)) + (s)))- head |= PINUSE_BIT)  \u8fd9\u5c31\u662f\u5728P \u7684head\u4e2d\u7f6e\u4e0aCINUSE\u4f4d\u548cP \u7684\u4e0b\u4e00\u5757\u5185\u5b58\u7684head\u4e2d\u8bbe\u7f6e\u4e0aPINUSE\u4f4d.  \u6700\u540emem = chunk2mem(p);  \u5c31\u662f\u53d6\u51fa\u4f20\u9012\u4e2a\u7528\u6237\u7684\u6709\u6548\u5185\u5b58\u5730\u5740,.\ncheck_malloced_chunk(gm, mem, nb); \u662f\u8c03\u8bd5\u7528\u7684,\u68c0\u67e5\u8be5\u5206\u914d\u7684\u5185\u5b58\u5757\u7684\u5404\u4e2a\n\u5c5e\u6027\u662f\u5426\u6b63\u5e38.  \u5230\u6b64,\u5c0f\u5185\u5b58\u7684,\u6b63\u597d\u7b26\u5408\u6216\u6b63\u597d\u4e34\u8fd1\u7bb1\u5b50\u6709\u7a7a\u95f2\u5757\u7684\u903b\u8f91\u5206\u6790\u5b8c\u6210,\u54b1\u4eec\u62ff\u5230\u4e86\n\u9700\u8981\u7684\u5185\u5b58.", 
            "title": "\u5c0f\u5185\u5b58\u89c4\u5219\u4e00"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#_4", 
            "text": "\u4e0b\u9762,\u662f\u4e0a\u8ff0\u60c5\u51b5\u4e0d\u6ee1\u8db3,\u4e5f\u5c31\u662f\u5f53\u524d\u5185\u5b58\u8bf7\u6c42\u5bf9\u5e94\u7684\u7bb1\u53f7idx\u7684smallbits\u4f4e2\u4f4d\u4e3a 00 ,\u4e5f\u5c31\u662f\u8bf4,\u6ca1\u6709\u7a7a\u95f2\u5757.  4617      else if (nb   gm- dvsize) {\n4618        if (smallbits != 0) {  ( dvsize\u9700\u8981\u5728gm\u7684\u5206\u6790\u4e2d\u63cf\u8ff0\u6389 )  smallbits != 0 \u610f\u5473\u7740,\u5728\u6bd4\u8bf7\u6c42\u7684\u5185\u5b58\u5757\u5927\u7684\u7bb1\u5b50\u4e2d,\u603b\u6709\u7a7a\u95f2\u5757\u5b58\u5728.\u6240\u4ee5\u63a5\u4e0b\u6765\u7684\u76ee\u7684\u662f\u627e\u5230\u6700\u5c0f\u7684\u7a7a\u95f2\u5757.  4622          binmap_t leftbits = (smallbits   idx)   left_bits(idx2bit(idx));\n4623          binmap_t leastbit = least_bit(leftbits);\n4624          compute_bit2idx(leastbit, i);  2917#define idx2bit(i)              ((binmap_t)(1)   (i))\n\n2929#define least_bit(x)         ((x)   -(x))\n\n2932#define left_bits(x)         ((x 1) | -(x 1))  4622 \u884c \u4f4d\u4e0e\u7684\u53f3\u64cd\u4f5c\u6570\u662f\u4e00\u4e2a32bit\u7684\u6570\uff0c\u8be5\u6570\u7684\u4f4e\uff08idx+1\uff09\u4f4d\u4e3a0,\u5176\u4f59\u4f4d\u4e3a1;\u5de6\u64cd\u4f5c\u6570\u5c31\u662f\u5bf9\u5e94\u4f4eidx\u4f4d\u4e3a0,\u540c\u65f6\u4ee3\u7801\u903b\u8f91\u8d70\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\uff0c\u4f4e\uff08idx+2\uff09\u4e3a0\u3002\nleast_bit \u7684\u529f\u80fd\u662f\uff0c\u4fdd\u7559leftbits\u4e2d\u4ece\u53f3\u5f80\u5de6\u7684\u7b2c\u4e00\u4e2a\u4e3a1\u7684\u4f4d\uff0c\u5176\u4f59\u4f4d\u4e3a0. \u5219\u8be5leastbit\u5bf9\u5e94\u7684\u5c31\u662f\u7b26\u5408\u8bf7\u6c42\u7684\u6700\u5c0f\u5185\u5b58\u5757\u7684\u4f4d\u56fe\u3002compute_bit2idx \u662f\u5c06leastit\u4f4d\u56fe\u8f6c\u6362\u6210\u7bb1\u53f7\u3002 \u8fd9\u91cc i \u5c31\u662f\u83b7\u53d6\u5230\u7684\u7bb1\u53f7\u3002  4625          b = smallbin_at(gm, i);\n4626          p = b- fd;\n4627          assert(chunksize(p) == small_index2size(i));\n4628          unlink_first_small_chunk(gm, b, p, i);  \u62ff\u5230\u7bb1\u53f7\u4e4b\u540e\uff0c\u8fd9\u5757\u7684\u903b\u8f91\u4e0e\u4e0a\u6587\u89c4\u5219\u4e00\u7684\u903b\u8f91\u4e00\u6837\u3002  4629          rsize = small_index2size(i) - nb;  \u53d6\u51fa\u5f53\u524d\u7bb1\u5b50\u7684\u5185\u5b58\u5757\u5927\u5c0f\uff0c\u51cf\u53bb\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u5269\u4f59\u7684\u5185\u5b58\u5757\uff0c\u8fd9\u4e2a\u5269\u4f59\u5185\u5b58\u5757\u4f1a\u653e\u5230dv chunk\u4e2d\u3002  4631          if (SIZE_T_SIZE != 4   rsize   MIN_CHUNK_SIZE)\n4632            set_inuse_and_pinuse(gm, p, small_index2size(i));\n4633          else {\n4634            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);\n4635            r = chunk_plus_offset(p, nb);\n4636            set_size_and_pinuse_of_free_chunk(r, rsize);\n4637            replace_dv(gm, r, rsize);\n4638          }  2269#define chunk_plus_offset(p, s)  ((mchunkptr)(((char*)(p)) + (s)))\n\n2284#define set_size_and_pinuse_of_free_chunk(p, s)\\\n2285  ((p)- head = (s|PINUSE_BIT), set_foot(p, s))\n\n3063#define set_size_and_pinuse_of_inuse_chunk(M, p, s)\\\n3064  ((p)- head = (s|PINUSE_BIT|CINUSE_BIT))\n\n3584#define insert_small_chunk(M, P, S) {\\\n3585  bindex_t I  = small_index(S);\\\n3586  mchunkptr B = smallbin_at(M, I);\\\n3587  mchunkptr F = B;\\\n3588  assert(S  = MIN_CHUNK_SIZE);\\\n3589  if (!smallmap_is_marked(M, I))\\\n        // \u5982\u679c\u662f\u5bf9\u5e94\u7bb1\u53f7\u539f\u72b6\u6001\u4e3a0,\u5219\u7f6e1.\n3590    mark_smallmap(M, I);\\\n3591  else if (RTCHECK(ok_address(M, B- fd)))\\\n3592    F = B- fd;\\\n3593  else {\\\n3594    CORRUPTION_ERROR_ACTION(M);\\\n3595  }\\\n3596  B- fd = P;\\\n3597  F- bk = P;\\\n3598  P- fd = F;\\\n3599  P- bk = B;\\\n3600}\n\n3648#define replace_dv(M, P, S) {\\\n3649  size_t DVS = M- dvsize;\\\n3650  assert(is_small(DVS));\\\n3651  if (DVS != 0) {\\\n3652    mchunkptr DV = M- dv;\\\n3653    insert_small_chunk(M, DV, DVS);\\\n3654  }\\\n3655  M- dvsize = S;\\\n3656  M- dv = P;\\\n3657}  \u5982\u679c\u5269\u4f59\u5927\u5c0frsize\u5c0f\u4e8eMIN_CHUNK_SIZE\uff0c\u54b1\u4eec\u76f4\u63a5\u5c06\u6240\u6709\u5185\u5b58\u5206\u914d\u7ed9\u7528\u6237\u3002\u5426\u5219\u5219\u5206\u5272\u5185\u5b58\uff0c\u5e76\u5c06\u5269\u4f59\u7684\u5185\u5b58\u5757\u8f6c\u6210mchunkptr\uff0c \u5373 r\u3002\u6211\u4eec\u7136\u540e\uff0cr\u76f8\u5f53\u4e8e\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u5757\uff0c\u6211\u4eec\u8bbe\u7f6e\u5176head\u5c5e\u6027\uff08size\uff0cPINUSE_BIT\uff0cCINUSE_BIT\uff09\u3002\nreplace_dv \u4e2d\uff0c\u6211\u4eec\u5148\u83b7\u5f97dv size\uff0c\u786e\u8ba4\u662f\u5c0f\u5185\u5b58\u5757\u3002\u7136\u540e\uff0c\u5c31\u662f\u628adv\u5185\u5b58\u5757\u63d2\u5165\u5230\u5bf9\u5e94\u7684\u7bb1\u53f7\u91cc\u3002\u5c31\u8ddf\u4e4b\u524d\uff0c\u6839\u636e\u5927\u5c0f\u83b7\u53d6\u5230\u5bf9\u5e94\u7bb1\u53f7\u7684\u94fe\u8868\u5934\u7684\u903b\u8f91\u4e00\u6837\uff0c\n\u53ea\u662f\u8fd9\u91cc\u662f\u5c06\u5185\u5b58\u5757\u63d2\u5165\u53cc\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002\nok\uff0c \u63d2\u5165\u5b8c\u6210\u540e\uff0c\u54b1\u4eec\u628a\u521a\u624d\u5206\u5272\u5269\u4e0b\u7684\u5185\u5b58\u5b58\u653e\u5230dv chunk\u4e2d\u3002  4639          mem = chunk2mem(p);\n4640          check_malloced_chunk(gm, mem, nb);\n4641          goto postaction;  \u8fd9\u91cc\u6211\u4eec\u8fd4\u56de\u5185\u5b58\u7ed9\u7528\u6237\uff0c\u89c4\u5219\u4e09\u7b2c\u4e00\u90e8\u5206\u5185\u5b58\u5206\u914d\u7ed3\u675f\u3002  4644        else if (gm- treemap != 0   (mem = tmalloc_small(gm, nb))\n!= 0) {\n4645          check_malloced_chunk(gm, mem, nb);\n4646          goto postaction;  \u8fd9\u91ccelse \u5bf9\u5e94\u201c4618        if (smallbits != 0) {\u201d \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u5c0f\u5185\u5b58\u7684 =\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u7684\u6240\u6709\u7bb1\u5b50\u4e0d\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5feb\u3002 \u7136\u540e\uff0c\u6211\u4eec\u68c0\u67e5treemap\u4e2d\u662f\u5426\u5b58\u5728\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u8c03\u7528tmalloc_small\u3002  2833#define treebin_at(M,i)     ( ((M)- treebins[i]))\n\n4527-static void* tmalloc_small(mstate m, size_t nb) {\n...\n4531  binmap_t leastbit = least_bit(m- treemap);\n4532  compute_bit2idx(leastbit, i);\n4533  v = t = *treebin_at(m, i);\n4534  rsize = chunksize(t) - nb;  least_bit  \u7684\u4f5c\u7528\u5c31\u662f\u4fdd\u7559\u6700\u53f3\u4fa7\u4e3a1\u7684bit\u4f4d\uff0c\u5176\u4f59\u4f4d\u4e3a0.\u6240\u4ee5\uff0c least_bit \u548c compute_bit2idx \u7684\u5171\u540c\u4f5c\u7528\u5c31\u662f\u5728treemap\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u53ef\u7528\u5185\u5b58\u7bb1\u5b50\u3002v\u548ct\u5373\u4e3a\u627e\u5230\u7684\u5185\u5b58\u5757\u6811\u7684\u6839\u8282\u70b9\u3002  4536  while ((t = leftmost_child(t)) != 0) {\n4537    size_t trem = chunksize(t) - nb;\n4538    if (trem   rsize) {\n4539      rsize = trem;\n4540      v = t;\n4541    }\n4542  }  \u8fd9\u6bb5\u4ee3\u7801\u662f\u5bfb\u627et\u7684\u6700\u5de6\u5b50\u6811\u3002\u5728\u524d\u6587\u6211\u4eec\u4ecb\u7ecd\u8fc7aka\u6811\uff0c\u6bcf\u4e00\u68f5\u6811\u7684\u505a\u5b50\u6811\u603b\u5c0f\u4e8e\u5176\u53f3\u5b50\u6811\u3002\u8be5\u4ee3\u7801\u5c31\u662f\u5728\u5bfb\u627e\u6ee1\u8db3\u7528\u4e8e\u8bf7\u6c42\u5927\u5c0fnb\u7684\u6700\u63a5\u8fd1\u7684\u6811\u7684\u8282\u70b9\u3002\uff08\u8003\u8651\u5230\u8bf7\u6c42\u7684\u5b57\u8282nb =256byte, \u800c\u5728tree\u4e2d\u6700\u5c0f\u7684chunksize   256byte \u6240\u4ee5,\u4e0d\u4f1a\u51fa\u73b0\u8d1f\u6570.\uff09  4545    mchunkptr r = chunk_plus_offset(v, nb);\n4546    assert(chunksize(v) == rsize + nb);\n4547    if (RTCHECK(ok_next(v, r))) {\n4548      unlink_large_chunk(m, v);\n4549      if (rsize   MIN_CHUNK_SIZE)\n4550        set_inuse_and_pinuse(m, v, (rsize + nb));\n4551      else {\n4552        set_size_and_pinuse_of_inuse_chunk(m, v, nb);\n4553        set_size_and_pinuse_of_free_chunk(r, rsize);\n4554        replace_dv(m, r, rsize);\n4555      }\n4556      return chunk2mem(v);\n4557    }\n4558  }  (NOT READY)\n\u8fd9\u6bb5\u4ee3\u7801\u8ddf\u4e0a\u6587\u5c0f\u5185\u5b58\u627e\u5230\u540e\u5904\u7406\u7684\u4ee3\u7801\u76f8\u4f3c\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\uff0cunlink_large_chunk\uff0c\u6240\u4ee5\u6211\u4eec\u770b\u4e0bunlink_large_chunk\u7684\u5b9e\u73b0.\u8fd9\u4e2a\u8fc7\u7a0b\u6709\u4e09\u4e2a\u6b65\u9aa4   \u5982\u679c\u7ed3\u70b9X\u662f\u94fe\u8868\u7684\u7ed3\u70b9,\u5219\u5c06\u5176\u91cd\u94fe\u8868\u4e2d\u5220\u9664.  \u5982\u679cX\u662f\u8be5\u5927\u5c0f\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9,\u4f46\u662f\u4e0d\u662f\u53f6\u5b50\u7ed3\u70b9,\u5b83\u5fc5\u987b\u7528\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u66ff\u6362.\u8fd9\u91cc\u67e5\u627e\u53f6\u5b50\u7ed3\u70b9\u7684\u65b9\u6cd5\u662f\u4ece\u6700\u53f3\u4fa7\u5f00\u59cb.  \u5982\u679cX\u662f\u94fe\u8868\u7684\u5934(\u62e5\u6709parent linker),\u5c31\u9700\u8981\u91cd\u65b0\u5c06\u5176x\u7684\u7236\u7ed3\u70b9\u4e0e\u66ff\u6362x\u7684\u7ed3\u70b9\u91cd\u65b0\u8fde\u63a5.   3730#define unlink_large_chunk(M, X) {\\\n3731  tchunkptr XP = X- parent;\\\n3732  tchunkptr R;\\  3733  if (X- bk != X) {\\\n3734    tchunkptr F = X- fd;\\\n3735    R = X- bk;\\\n3736    if (RTCHECK(ok_address(M, F)   F- bk == X   R- fd == X)) {\\\n3737      F- bk = R;\\\n3738      R- fd = F;\\\n3739    }\\\n3740    else {\\\n3741      CORRUPTION_ERROR_ACTION(M);\\\n3742    }\\\n3743  }\\  \u8fd9\u91cc\u662f\u7b2c\u4e00\u79cd\u60c5\u51b5,\u5373x\u662f\u5c5e\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9.  3744  else {\\\n3745    tchunkptr* RP;\\\n3746    if (((R = *(RP =  (X- child[1]))) != 0) ||\\\n3747        ((R = *(RP =  (X- child[0]))) != 0)) {\\\n3748      tchunkptr* CP;\\\n3749      while ((*(CP =  (R- child[1])) != 0) ||\\\n3750             (*(CP =  (R- child[0])) != 0)) {\\\n3751        R = *(RP = CP);\\\n3752      }\\\n3753      if (RTCHECK(ok_address(M, RP)))\\\n3754        *RP = 0;\\\n3755      else {\\\n3756        CORRUPTION_ERROR_ACTION(M);\\\n3757      }\\\n3758    }\\\n3759  }\\  \u8fd9\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5.  3760  if (XP != 0) {\\ \n3761    tbinptr* H = treebin_at(M, X- index);\\ \n3762    if (X == *H) {\\ \n3763      if ((*H = R) == 0) \\ \n3764        clear_treemap(M, X- index);\\ \n3765    }\\ \n3766    else if (RTCHECK(ok_address(M, XP))) {\\ \n3767      if (XP- child[0] == X) \\ \n3768        XP- child[0] = R;\\ \n3769      else \\ \n3770        XP- child[1] = R;\\ \n3771    }\\ \n3772    else\\ \n3773      CORRUPTION_ERROR_ACTION(M);\\ \n3774    if (R != 0) {\\ \n3775      if (RTCHECK(ok_address(M, R))) {\\ \n3776        tchunkptr C0, C1;\\ \n3777        R- parent = XP;\\ \n3778        if ((C0 = X- child[0]) != 0) {\\ \n3779          if (RTCHECK(ok_address(M, C0))) {\\ \n3780            R- child[0] = C0;\\ \n3781            C0- parent = R;\\ \n3782          }\\ \n3783          else\\ \n3784            CORRUPTION_ERROR_ACTION(M);\\ \n3785        }\\ \n3786        if ((C1 = X- child[1]) != 0) {\\ \n3787          if (RTCHECK(ok_address(M, C1))) {\\ \n3788            R- child[1] = C1;\\ \n3789            C1- parent = R;\\ \n3790          }\\ \n3791          else\\ \n3792            CORRUPTION_ERROR_ACTION(M);\\ \n3793        }\\ \n3794      }\\ \n3795      else\\ \n3796        CORRUPTION_ERROR_ACTION(M);\\ \n3797    }\\ \n3798  }\\   \u8fd9\u662f\u7b2c\u4e09\u79cd\u60c5\u51b5.  \u4ee5\u4e0a,\u72ec\u5c5e\u4e8e\u5c0f\u5185\u5b58\u7684\u5206\u914d\u89c4\u5219\u7ed3\u675f!  4650    else if (bytes  = MAX_REQUEST)\n4651      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in\nsys alloc) */  2224#define MAX_REQUEST         ((-((MCHUNK_SIZE + CHUNK_ALIGN_MASK)   ~CHUNK_ALIGN_MASK))   2)  \u8fd9\u91cc,\u5f53\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f = MAX_REQUEST\u65f6,\u6211\u4eec\u5f3a\u5236\u5206\u914d\u5931\u8d25. CHUNK_ALIGN_MASK  \u4e3a  2 * sizeof(void *) - 1 ,\u572832bit\u4e0a\u4e3a7.\u6240\u4ee5MAX_REQUEST\u662f\u4e00\u4e2a\u6781\u5927\u7684\u6570.\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b,\u6211\u4eec\u5c06nb\u8bbe\u7f6e\u4e3affffffff,\u5f3a\u5236\u5931\u8d25.", 
            "title": "\u5c0f\u5185\u5b58\u89c4\u5219\u4e09"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#_5", 
            "text": "\u7c7b\u4f3c\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e00,\u4ece\u6811\u4e2d\u627e\u5230\u6700\u9002\u5408\u7684\u5185\u5b58\u5757.  4652    else {\n4653      nb = pad_request(bytes);\n4654      if (gm- treemap != 0   (mem = tmalloc_large(gm, nb)) != 0) {\n4655        check_malloced_chunk(gm, mem, nb);\n4656        goto postaction;\n4657      }\n4658    }  \u8fd9\u91cc\u6211\u4eec\u7684\u91cd\u70b9\u662f tmalloc_large ,\u5b83\u4e0e tmalloc_small \u7684\u5dee\u522b\u662f: tmalloc_small \u662f\u7528\u4e8e\u5c0f\u5185\u5b58\u5206\u914d\u7684,\u53ea\u9700\u8981\u5728treemap\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u6709\u6548\u6811,\u53d6\u51fa\u6811\u4e2d\u6700\u5c0f\u5185\u5b58\u5373\u53ef;\u800c tmalloc_large \u662f\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219,\u5728\u6240\u670932\u68f5\u6811\u4e2d\u627e\u5230\u6700\u5339\u914d\u5927\u5c0f\u7684\u5185\u5b58\u5757.  4456static void* tmalloc_large(mstate m, size_t nb) {\n4457  tchunkptr v = 0;\n4458  size_t rsize = -nb; /* Unsigned negation */\n4459  tchunkptr t;\n4460  bindex_t idx;\n4461  compute_tree_index(nb, idx);\n4462  if ((t = *treebin_at(m, idx)) != 0) {  rsize \u4e3a\u6781\u5927\u6570.  compute_tree_index \u901a\u8fc7\u8bf7\u6c42\u7684\u5927\u5c0fnb,\u4ecetreebinmap\u4e2d\u8ba1\u7b97\u51fa\u7bb1\u53f7. treebin_at  \u5219\u662f\u53d6\u51faidx\u7bb1\u53f7\u4e2d\u5bf9\u5e94\u7684\u6811\u6839\u7ed3\u70b9.  2880#define compute_tree_index(S, I)\\\n2881{\\\n2882  size_t X = S   TREEBIN_SHIFT;\\\n2883  if (X == 0)\\\n2884    I = 0;\\\n2885  else if (X   0xFFFF)\\\n2886    I = NTREEBINS-1;\\\n2887  else {\\\n2888    unsigned int Y = (unsigned int)X;\\\n2889    unsigned int N = ((Y - 0x100)   16)   8;\\\n2890    unsigned int K = (((Y  = N) - 0x1000)   16)   4;\\\n2891    N += K;\\\n2892    N += K = (((Y  = K) - 0x4000)   16)   2;\\\n2893    K = 14 - N + ((Y  = K)   15);\\\n2894    I = (K   1) + ((S   (K + (TREEBIN_SHIFT-1))   1));\\\n2895  }\\\n2896}  \u4ee5\u4e0a\u8ba1\u7b97\u7684\u7ed3\u679c\u5982\u4e0b,idx\u4e3a\u5bf9\u5e94\u7bb1\u53f7,mem\u5bf9\u5e94\u8be5\u7bb1\u5b50\u4e2d\u6700\u5c0f\u7684\u5185\u5b58\u5927\u5c0f.  idx 0 mem 256 hex: 100\nidx 1 mem 384 hex: 180\nidx 2 mem 512 hex: 200\nidx 3 mem 768 hex: 300\nidx 4 mem 1024 hex: 400\nidx 5 mem 1536 hex: 600\nidx 6 mem 2048 hex: 800\nidx 7 mem 3072 hex: c00\nidx 8 mem 4096 hex: 1000\nidx 9 mem 6144 hex: 1800\nidx 10 mem 8192 hex: 2000\nidx 11 mem 12288 hex: 3000\nidx 12 mem 16384 hex: 4000\nidx 13 mem 24576 hex: 6000\nidx 14 mem 32768 hex: 8000\nidx 15 mem 49152 hex: c000\nidx 16 mem 65536 hex: 10000\nidx 17 mem 98304 hex: 18000\nidx 18 mem 131072 hex: 20000\nidx 19 mem 196608 hex: 30000\nidx 20 mem 262144 hex: 40000\nidx 21 mem 393216 hex: 60000\nidx 22 mem 524288 hex: 80000\nidx 23 mem 786432 hex: c0000\nidx 24 mem 1048576 hex: 100000\nidx 25 mem 1572864 hex: 180000\nidx 26 mem 2097152 hex: 200000\nidx 27 mem 3145728 hex: 300000\nidx 28 mem 4194304 hex: 400000\nidx 29 mem 6291456 hex: 600000\nidx 30 mem 8388608 hex: 800000\nidx 31 mem 12582912 hex: c00000  4463    /* Traverse tree for this bin looking for node with size == nb */\n4464    size_t sizebits = nb   leftshift_for_tree_index(idx);\n4465    tchunkptr rst = 0;  /* The deepest untaken right subtree */\n4466    for (;;) {\n4467      tchunkptr rt;\n4468      size_t trem = chunksize(t) - nb;\n4469      if (trem   rsize) {\n4470        v = t;\n4471        if ((rsize = trem) == 0)\n4472          break;\n4473      }\n4474      rt = t- child[1];\n4475      t = t- child[(sizebits   (SIZE_T_BITSIZE-SIZE_T_ONE))   1];\n4476      if (rt != 0   rt != t)\n4477        rst = rt;\n4478      if (t == 0) {\n4479        t = rst; /* set t to least subtree holding sizes   nb */\n4480        break;\n4481      }\n4482      sizebits  = 1;\n4483    }  \u8fd9\u662f\u6811\u7684\u641c\u7d22\u7b97\u6cd5,\u6211\u4eec\u6765\u8be6\u7ec6\u770b\u4e0b.\u9996\u5148sizebits\u53d8\u91cf,\u7c7b\u4f3cbinmap,\u6bcf\u4e00\u4f4d\u5bf9\u5e94\u6811\u7684\u5bf9\u5e94\u6df1\u5ea6\u7684\u5de6\u53f3\u5b50\u6811,\u53ef\u4ee5\u8ba4\u4e3a\u662f\u904d\u5386\u6811\u7684key bits.  2904#define leftshift_for_tree_index(i) \\\n2905   ((i == NTREEBINS-1)? 0 : \\\n2906    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i)   1) + TREEBIN_SHIFT - 2)))  1601#define SIZE_T_BITSIZE      (sizeof(size_t)   3)\n1606#define SIZE_T_ONE          ((size_t)1)\n2574#define TREEBIN_SHIFT     (8U)  leftshift_for_tree_index  \u5b8f\u5c06\u5173\u952e\u7801\u79fb\u52a8\u5230\u4e86\u6700\u5de6.\u8ba1\u7b97\u7684\u7ed3\u679c\u4e3a (25 - (i   1)). \u76f8\u5bf9\u4e8e\u7bb1\u5b500, \u5185\u5b58\u8303\u56f4\u4e3a128, \u5173\u952e\u7801\u957f\u5ea6\u4e3a 7,  leftshift_for_tree_index \u8ba1\u7b97\u7684\u7ed3\u679c\u4e3a25. \u6240\u4ee5,\u5c06 nb   25 , \u5c31\u662f\u5c06\u5173\u952e\u7801\u79fb\u52a8\u5230\u6700\u5de6\u7aef.  \u7136\u540e\u6211\u4eec\u770bfor\u5faa\u73af\u5185\u90e8\u7684,\u8fd9\u5c31\u662f\u5728\u904d\u5386\u6811\u4e86.  4467      tchunkptr rt;\n4468      size_t trem = chunksize(t) - nb;\n4469      if (trem   rsize) {\n4470        v = t;\n4471        if ((rsize = trem) == 0)\n4472          break;\n4473      }  \u4e0e \u5bfb\u627e\u6700\u5339\u914dnb\u6700\u8fd1\u7684\u70b9.\u5f53\u7136,\u5982\u679c\u627e\u5230\u5927\u5c0f\u76f8\u7b49\u7684,\u5c31\u76f4\u63a5\u8df3\u51fa, \u8fd9\u4e2a\u8df3\u51fa\u6761\u4ef6\u53ef\u80fd\u662f\u5173\u952e\u7801\u8fd8\u672a\u641c\u7d22\u5b8c.\u8fd9\u91cc\u5c31\u53ef\u4ee5\u770b\u51fa, dlmalloc\u6811\u4e0e bitwise trie\u6811\u7684\u5dee\u5f02,\u503c\u5728\u7279\u5f81\u7801\u7684\u8def\u5f84\u4e0a\u7684\u4efb\u610f\u70b9. \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u4e48\u505a\u5462?\u56e0\u4e3adlmalloc\u7684\u5206\u7bb1\u673a\u5236,\u5bfc\u81f4\u4e86,\u5982\u679c\u641c\u7d22\u5b8c\u5173\u952e\u7801,\u5219 \u8be5\u7ed3\u70b9\u5fc5\u5b9a\u53ea\u5b58\u5728\u53f6\u5b50\u7ed3\u70b9\u4e0a. \u5728\u8fd9\u4e2a\u524d\u63d0\u4e0b,\u4e3a\u4e86\u8282\u7701\u5185\u5b58\u7a7a\u95f4, \u5728\u63d2\u5165\u7ed3\u70b9\u65f6,\u53ea\u8981\u5728\u5173\u952e\u7801\u7684\u8def\u5f84\u4e0a\u4e0d\u5b58\u5728\u88ab\u5360\u7528\u7684\u70b9,\u5c31\u5c06\u8be5\u503c\u63d2\u5165. \u5728\u67e5\u770b\u4e86  insert_large_chunk  \u540e\u4f1a\u6709\u66f4\u6e05\u6670\u7684\u4f53\u4f1a.  4474      rt = t- child[1];\n4475      t = t- child[(sizebits   (SIZE_T_BITSIZE-SIZE_T_ONE))   1];\n4476      if (rt != 0   rt != t)\n4477        rst = rt;\n4478      if (t == 0) {\n4479        t = rst; /* set t to least subtree holding sizes   nb */\n4480        break;\n4481      }\n4482      sizebits  = 1;  (sizebits   (SIZE_T_BITSIZE-SIZE_T_ONE))  \u8fd9\u4e2a\u5c31\u662f\u6bcf\u4e00\u5c42\u6811\u7684\u7279\u5f81\u7801\u4e86.\u7ed3\u5408\u4e0a\u9762sizebits\u7684\u503c,\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u4e3a  nb   (6 + (i   1)) . \u5982\u679c,\u6211\u4eec\u518d\u7ed3\u5408 compute_tree_index  \u4e2d\u7684\u7ed3\u679c,\u5f97\u5230\u5982\u4e0b\u8868.idx\u4e3a\u7bb1\u53f7,mem\u4e3a\u8be5\u7bb1\u5b50\u4e2d\u7684\u6700\u5c0f\u5185\u5b58,hex\u4e3a\u8be5\u503c\u768416\u8fdb\u5236,mid\u4e3a\u533a\u5206\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u7279\u5f81\u7801,bitshift\u4e3a\u7279\u5f81\u7801\u7684\u65e0\u6548\u4f4d\u6570. \u6bd4\u5982,\u7bb1\u5b501\u4e2d,dix\u4e3a1,\u5176\u8868\u793a\u7684\u5185\u5b58\u8303\u56f4\u4e3a[384, 512),\u5219\u5176\u5de6\u5b50\u6811\u8868\u793a\u8303\u56f4\u4e3a[384,448),\u53f3\u5b50\u6811\u4e3a[448,512).448\u5373\u4e3a\u8be5\u6811\u7684\u7b2c\u4e00\u5c42\u7684\u7279\u5f81\u7801,\u4e5f\u5c31\u662f111000000.\u5982\u679cnb   448, \u5219\u7b2c7\u4f4d\u4e3a0,\u5426\u5219\u7b2c7\u4f4d\u4e3a1.\u6240\u4ee5,\u53ea\u8981\u901a\u8fc7\u5c06size   bitshift \u4e4b\u540e\u4e0e1 \u505a\u4f4d\u4e0e\u8fd0\u7b97,\u5c31\u53ef\u4ee5\u5224\u65ad\u51fa\u5728\u8be5\u6811\u5bf9\u5e94\u5c42\u8be5\u8fdb\u5165\u5176\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811.  idx 0 mem 256 hex: 100  mid: 101000000 bitshift: 6\nidx 1 mem 384 hex: 180 mid: 111000000 bitshift: 6\nidx 2 mem 512 hex: 200 mid: 1110000000 bitshift: 7\nidx 3 mem 768 hex: 300 mid: 1010000000 bitshift: 7\nidx 4 mem 1024 hex: 400 mid: 10100000000 bitshift: 8\nidx 5 mem 1536 hex: 600 mid: 11100000000 bitshift: 8\nidx 6 mem 2048 hex: 800 mid: 101000000000 bitshift: 9\nidx 7 mem 3072 hex: c00 mid: 111000000000 bitshift: 9\nidx 8 mem 4096 hex: 1000 mid: 1010000000000 bitshift: 10\nidx 9 mem 6144 hex: 1800 mid: 1110000000000 bitshift: 10\nidx 10 mem 8192 hex: 2000 mid: 10100000000000 bitshift: 11\nidx 11 mem 12288 hex: 3000 mid: 11100000000000 bitshift: 11\nidx 12 mem 16384 hex: 4000 mid: 101000000000000 bitshift: 12\nidx 13 mem 24576 hex: 6000 mid: 111000000000000 bitshift: 12\nidx 14 mem 32768 hex: 8000 mid: 1010000000000000 bitshift: 13\nidx 15 mem 49152 hex: c000 mid: 1110000000000000 bitshift: 13\nidx 16 mem 65536 hex: 10000 mid 10100000000000000 bitshift: 14\nidx 17 mem 98304 hex: 18000 mid 11100000000000000 bitshift: 14\nidx 18 mem 131072 hex: 20000 mid 101000000000000000 bitshift: 15\nidx 19 mem 196608 hex: 30000 mid 111000000000000000 bitshift: 15\nidx 20 mem 262144 hex: 40000 mid 1010000000000000000 bitshift: 16\nidx 21 mem 393216 hex: 60000 mid 1110000000000000000 bitshift: 16\nidx 22 mem 524288 hex: 80000 mid 10100000000000000000 bitshift: 17\nidx 23 mem 786432 hex: c0000 mid 11100000000000000000 bitshift: 17\nidx 24 mem 1048576 hex: 100000 mid 101000000000000000000 bitshift: 18\nidx 25 mem 1572864 hex: 180000 mid 111000000000000000000 bitshift: 18\nidx 26 mem 2097152 hex: 200000 mid 1010000000000000000000 bitshift: 19\nidx 27 mem 3145728 hex: 300000 mid 1110000000000000000000 bitshift: 19\nidx 28 mem 4194304 hex: 400000 mid 10100000000000000000000 bitshift: 20\nidx 29 mem 6291456 hex: 600000 mid 11100000000000000000000 bitshift: 20\nidx 30 mem 8388608 hex: 800000 mid 101000000000000000000000 bitshift: 21\nidx 31 mem 12582912 hex: c00000 bitshift: 31  // \u56fe, dlammloc \u6811\u7684\u56fe.  4485  if (t == 0   v == 0) { /* set t to root of next non-empty treebin */\n4486    binmap_t leftbits = left_bits(idx2bit(idx))   m- treemap;\n4487    if (leftbits != 0) {\n4488      bindex_t i;\n4489      binmap_t leastbit = least_bit(leftbits);\n4490      compute_bit2idx(leastbit, i);\n4491      t = *treebin_at(m, i);\n4492    }\n4493  }  \u8fd9\u91cc\u5bf9\u5e94\u4e0a\u6587\u7684 4462  if ((t = *treebin_at(m, idx)) != 0) {  , \u4e5f\u5c31\u662f\u8bf4\u5728\u5f53\u524d\u5927\u5c0f\u7684\u7bb1\u5b50\u5185\u4e0d\u5b58\u5728\u7a7a\u95f2\u7684\u5185\u5b58\u5757,\u6240\u4ee5\u6211\u4eec\u8981\u628at\u8bbe\u7f6e\u4e3a\u6700\u8fd1\u7684\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u7bb1\u53f7. left_bits  \u548c  least_bit  \u8ddf\u4e0a\u6587\u5c0f\u5185\u5b58\u5bfb\u627e\u6700\u8fd1\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u7bb1\u5b50\u7b97\u6cd5\u4e00\u6837.  4495  while (t != 0) { /* find smallest of tree or subtree */\n4496    size_t trem = chunksize(t) - nb;\n4497    if (trem   rsize) {\n4498      rsize = trem;\n4499      v = t;\n4500    }\n4501    t = leftmost_child(t);\n4502  }  \u8fd9\u91cc\u8ddf tmalloc_small \u5bfb\u627e\u6700\u5de6\u5b50\u6811(\u6700\u5c0f\u5185\u5b58)\u7684\u7b97\u6cd5\u4e00\u6837.\u8fd9\u6bb5\u4ee3\u7801\u5bf9\u4e0a\u9762\u7684\u4e24\u79cd\u60c5\u51b5\u90fd\u6709\u6548.\u5373,\u5982\u679c\u5728\u5bf9\u5e94\u7bb1\u53f7\u6709\u7a7a\u95f2\u5185\u5b58,\u5728\u57fa\u4e8e\u6811\u7684\u641c\u7d22\u7b97\u6cd5\u627e\u5230\u7684t\u5c31\u662f\u6700\u5339\u914dnb\u7684\u5927\u5c0f,\u6240\u4ee5\u8fd9\u91cc\u7684while\u5faa\u73af\u7ed3\u679ct\u5c31\u4e0d\u4f1a\u6539\u53d8;\u5982\u679c\u662f,\u5bfb\u627e\u6700\u8fd1\u6709\u7a7a\u95f2\u5757\u7684\u6811,\u90a3\u4e48\u8be5\u6811\u7684\u6700\u5c0f\u5185\u5b58\u90fd\u5927\u4e8e\u8bf7\u6c42\u5927\u5c0fnb,\u6240\u4ee5\u76f4\u63a5\u5bfb\u627e\u6700\u5de6\u5b50\u6811.", 
            "title": "\u5927\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e00"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#dlmalloc_3", 
            "text": "version 1.0 by Werther Zhang @ 2014.03.15 Write done @WizNote  Version 1.1   by Werther Zhang @ 2014.03.20 Export to @Word  Version  1.2  by Werther Zhang @ 2016.07.02 Move to @leanote", 
            "title": "dlmalloc\u6d45\u6790"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#dlmalloc_4", 
            "text": "dlmalloc\u5728\u67d0\u4e9b\u7a0b\u5ea6\u4e0a\u8bf4\uff0c\u662f\u6700\u597d\u7684\u5185\u5b58\u7ba1\u7406\u5de5\u5177\u4e4b\u4e00\u3002\u5b83\u662f\u7531Doug Lea \u57281987\u5e74\u5f00\u59cb\u7f16\u5199\uff0c\u6240\u4ee5\u5927\u90e8\u5206\u4eba\u4f1a\u79f0\u547c\u5b83\u4e3aDoug Lea's Malloc\uff0c \u7b80\u79f0dlmalloc\u3002", 
            "title": "dlmalloc\u4ecb\u7ecd"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#_6", 
            "text": "dlmalloc \u6839\u636e\u5185\u5b58\u7c92\u5ea6\u7684\u5927\u5c0f\u5206\u522b\u4f7f\u7528chunk\u548csegment\u8fdb\u884c\u7ba1\u7406\u3002Segment\u662f\u901a\u8fc7sbrk\u5206\u914d\uff0c\u7c7b\u4f3c\u8fdb\u7a0b\u7684\u6570\u636e\u6bb5\uff0c\u5c5e\u4e8e\u6781\u5c11\u9047\u5230\u7684\u60c5\u51b5\u3002Dlmalloc\u4e2d\u5927\u91cf\u5b58\u5728\u7684\u5185\u5b58\u5757\u662fchunk\u3002Chunk\u7684\u7ed3\u6784\u5982\u4e0b\u3002  \u88ab\u7528\u6237\u4f7f\u7528\u7684chunk\u7ed3\u6784\u770b\u8d77\u6765\u50cf\u4e0b\u9762\u8fd9\u6837\uff08\u975e\u7cbe\u786e\u56fe\uff09\uff1a   \u800c\u672a\u88ab\u4f7f\u7528\u7684chunk\u770b\u8d77\u6765\u5982\u4e0b\uff08\u975e\u7cbe\u786e\u56fe\uff09\uff1a   \n\u5728\u865a\u62df\u5730\u5740\u4e0a\uff0cdlmalloc\u4f1a\u4fdd\u8bc1\u7a7a\u95f2\u7684\u5185\u5b58\u5757\u5b58\u5728\u201c\u5b64\u5c9b\u6548\u5e94\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4efb\u4e00\u5757\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u524d\u540e\u5fc5\u5b9a\u662f\u88ab\u4f7f\u7528\u7684\u5185\u5b58\u5757\u3002\u56e0\u4e3a\u5728free\u6216\u8005\u5176\u4ed6\u4efb\u4f55\u65f6\u5019\uff0cdlmalloc\u603b\u662f\u4f1a\u5408\u5e76\u7a7a\u95f2\u7684\u5185\u5b58\u5757\u3002 \n\u5bf9 \u4e8echunk\uff0c\u6839\u636e\u5176\u5927\u5c0f\uff0c\u5206\u4e3a\u5927\u5185\u5b58\u548c\u5c0f\u5185\u5b58\u3002\u5c0f\u5185\u5b58\u753132\u4e2a\u53cc\u5411\u94fe\u8868\u901a\u8fc7\u5206\u7bb1\uff08\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u5bf9\u5e94\u4e00\u4e2a\u5927\u5c0f\uff0c\u6bcf\u4e2a\u7bb1\u5b50\u4e2d\u5b58\u653e\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff09\u8fdb\u884c\u7ba1\u7406\uff0c\u800c\u5927 \u5185\u5b58\u7edf\u4e00\u7531bitwise tries\u6811\u901a\u8fc7\u5206\u7bb1\uff08\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u5bf9\u5e94\u4e00\u4e2a\u5185\u5b58\u8303\u56f4\uff0c\u6bcf\u4e00\u4e2a\u7bb1\u5b50\u4e2d\u5b58\u653e\u4e00\u68f5\u6811\uff0c\u6bcf\u4e00\u68f5\u6811\u4e2d\u82e5\u6709\u7b49\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u7531\u53cc\u5411\u94fe\u8868\u7ba1\u7406\uff09 \u8fdb\u884c\u7ba1\u7406\u3002 \n\u6bcf\u4e00\u4e2achunk\u7684\u5927\u5c0f\u5fc5\u987b\u4e3a8byte\u7684\u6574\u6570\u500d\u3002\u6240\u4ee5\u5728\u2019size of chunk\u2019 \u57df\u7684\u4f4e\u4e09\u4f4d\u5b58\u653e\u4e86\u8be5chunk\u5c5e\u6027\u7684\u6807\u5fd7\u4f4d\u3002 \nP (PINUSE_BIT) \u4f4d, \u4fdd \u5b58\u5728\u5185\u5b58\u5757\u5927\u5c0f(\u4e00\u822c\u662f\u53cc\u5b57\u8282\u7684\u500d\u6570)\u7684\u672a\u4f7f\u7528\u7684\u4f4e\u4f4d, \u662f\u4e00\u4e2a\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u662f\u5426\u88ab\u4f7f\u7528\u7684bit\u4f4d.\u5982\u679c\u8fd9\u4e2abit\u4f4d\u88ab\u6e05\u7406\u4e86,\u90a3\u4e48\u5728\u5f53\u524d\u5185\u5b58\u5757 \u4e4b \u524d\u7684\u4e00\u4e2a\u5b57 \u5927\u5c0f\u6570\u636e\u4fdd\u5b58\u7740\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u7528\u4e8e\u5bfb\u627e\u524d\u4e00\u4e2a\u5185\u5b58\u5757.\u800c \u7b2c\u4e00\u4e2a\u5185\u5b58\u5757\u8fd9\u4e2abit\u4f4d\u603b\u662f\u88ab\u7f6e\u4e0a\u7684,\u9632\u6b62\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u5185\u5b58\u533a\u57df.\u5982\u679c\u67d0\u4e2a \u5185 \u5b58\u5757\u7684 pinuse\u88ab\u8bbe\u7f6e\u4e86,\u4f60\u5c31\u65e0\u6cd5\u51b3\u5b9a\u4e0a\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u5e76\u4e14\u5982\u679c\u4f60\u771f\u7684\u5c1d \u8bd5\u8fd9 \u4e48\u505a\u4e86,\u6709\u53ef\u80fd\u5185\u5b58\u8bbf\u95ee\u51fa\u9519. \nC (CINUSE_BIT) bit\u4f4d, \u4fdd\u5b58\u5728\u5185\u5b58\u5757\u7684\u7b2c\u4e8c\u4f4e\u7684bit\u4f4d,\u5197\u4f59\u5730\u8bb0\u5f55\u7740\u5f53\u524d\u5757\u662f \u5426\u88ab\u4f7f\u7528\u4e86(\u9664\u975e\u5f53\u524d\u5185\u5b58\u5757\u662f\u88ab\u6620\u5c04\u7684).\u8fd9\u4e2a\u5197\u4f59\u4fe1\u606f\u7528\u4e8e\u5728free\u548crealloc\u64cd \u4f5c\u65f6\u7684\u68c0\u67e5,\u5e76\u4e14\u51cf\u5c11\u5728\u6267\u884cfree\u548c\u5408\u5e76\u5185\u5b58\u5757\u65f6\u7684\u95f4\u63a5\u64cd\u4f5c. \n\u4efb\u4f55\u65b0\u5206\u914d\u7684\u5185\u5b58\u5757\u5fc5\u987b\u90fd\u8bbe\u7f6e\u4e86cinuse\u548cpinuse.\u8fd9\u610f\u5473\u7740,\u4efb\u4f55\u5206\u914d\u4e86\u7684\u5185 \u5b58\u5757\u7684\u8fb9\u754c\u8981\u4e48\u662f\u4e00\u4e2a\u5148\u524d\u5206\u914d\u5e76\u4e14\u4ecd\u7136\u5728\u4f7f\u7528(in-use)\u7684\u5185 \u5b58\u5757,\u8981\u4e48\u662f\u5b83\u81ea \u5df1\u7684\u5927\u5185\u5b58\u533a\u57df(segment)\u7684\u5730\u5740.\u8fd9\u6837\u786e\u4fdd\u6240\u6709\u7684\u5185\u5b58\u7533\u8bf7(allocations)\u90fd\u662f\u4ece\u4efb\u4f55\u80fd\u627e\u5230\u7684\u5185\u5b58\u5757\u7684\u201c\u6700\u4f4e\u201d\u90e8\u5206 \u83b7\u53d6.\u8fdb\u4e00\u6b65\u5730\u8bf4,\u4e0d\u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u7a7a\u95f2\u5185 \u5b58\u5757\u5728\u7269\u7406\u4e0a\u7d27\u90bb\u7740\u53e6 \u4e00\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757,\u6240\u4ee5\u6bcf\u4e00\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757\u88ab\u8bc1\u5b9e\u5728\u4f7f\u7528 (inuse)\u7684\u5185\u5b58\u5757\u6216\u8005\u5185\u5b58\u5c3e \u90e8\u4e4b\u524d\u548c\u4e4b\u540e. \n\u6ce8\u610f: \u5f53\u524d\u5757\u7684 \u2019foot\u2019\u5b9e\u9645\u4e0a\u4ee3\u8868\u7740\u4e0b\u4e00\u4e2a\u5185\u5b58\u5757\u7684prev_foot.\u8fd9\u4f7f\u5bf9\u9f50\u7b49\u64cd \u4f5c\u5904\u7406\u53d8\u5f97\u5bb9\u6613\u4f46\u4f1a\u4f7f\u4eba\u5728\u6269\u5c55\u6216\u7ef4\u62a4\u8fd9\u4efd\u4ee3\u7801\u65f6\u611f\u5230\u56f0\u60d1. \n\u4ee5\u4e0b\u662f\u5bf9\u7279\u6b8a\u7684\u5185\u5b58\u5757\u7684\u8bf4\u660e:   \u7279 \u6b8a\u7684\u5185\u5b58\u5757\u2019top\u2019\u662f\u6700\u9876\u4e0a\u7684\u53ef\u7528\u5185\u5b58\u5757(i.e., \u7d27\u90bb\u7740\u53ef\u7528\u5185\u5b58\u7684\u8fb9\u754c). \u8fd9\u5757\u5185\u5b58\u5757\u4f1a\u88ab\u7279\u6b8a\u5bf9\u5f85. Top \u5185\u5b58\u5757\u4e0d\u4f1a\u88ab\u5305\u542b\u5728\u4efb\u4f55\u7684\u5185\u5b58\u5206 \u7c7b\u7bb1\u91cc, \u53ea\u6709\u5728\u6ca1\u6709\u4efb\u4f55\u5176\u4ed6\u5185\u5b58\u5757\u53ef\u4f7f\u7528\u65f6,\u624d\u88ab\u4f7f\u7528,\u5e76\u4e14\u5728\u5b83\u975e\u5e38\u5927\u65f6(\u67e5\u770b M_TRIM_THRESHOLD) \u4f1a\u88ab\u91ca\u653e\u4e00\u90e8\u5206\u56de\u7cfb\u7edf.\u5728\u5b9e\u9645 \u4e0a,top\u5185\u5b58\u5757\u4e00\u822c\u88ab\u8ba4 \u4e3a\u662f\u6bd4\u5176\u4ed6\u6240\u6709\u7684\u5185\u5b58\u5757\u90fd\u5927.Top\u5185\u5b58\u5757\u4ece\u6765\u4e0d\u4f1a\u66f4\u65b0\u5b83\u7684\u5c3e\u90e8\u6570\u636e\u533a\u57df\u56e0 \u4e3a\u6839\u672c\u6ca1\u6709\u5185\u5b58\u5757\u4f1a\u5728\u7d22\u5f15\u4e0a\u7d27\u8ddf\u5176\u540e.\u4f46\u662f,\u7a7a\u95f4 \u8fd8\u662f\u4f1a\u5206\u914d\u7ed9\u5b83 (TOP_FOOT_SIZE) \u7528\u6237\u505a\u5185\u5b58\u5757\u7684\u62c6\u5206\u548c\u5408\u5e76,\u5f53\u7a7a\u95f4\u9700\u8981\u6269\u5c55\u65f6.  dv chunk \u662f\u4fdd\u5b58\u4e86\u6700\u8fd1\u88ab\u4f7f\u7528\u5e76\u5207\u5272\u8fc7\u7684\u5185\u5b58\u5757\uff0c\u4fdd\u5b58\u5728\u5168\u5c40\u7684gm\u4e2d\u3002\u5b83\u4e0d\u5f52\u5c5e\u5230\u53cc\u5411\u94fe\u8868\u6216\u8005\u6811\u4e2d\u7ba1\u7406\u3002\u4f46\u5f53\u5b83\u88ab\u66ff\u6362\u65f6\uff0c\u4e5f\u4f1a\u52a0\u5165\u5185\u5b58\u7ba1\u7406\u4e2d\u3002 \nBitwise trie \u6811, \u5b9e\u9645\u4e0a\u662f\u7ed3\u5408\u4e86\u4e8c\u53c9\u6811\u548ctrie\u6811(\u53c8\u53eb\u5b57\u5178\u6811, \u524d\u7f00\u6570).\u4e8c\u53c9\u6811\u53ea\u6709\u5de6\u53f3\u5b50\u6811. Trie\u6811\u662f\u4e00\u79cd\u6709\u5e8f\u6811,\u7528\u4e8e\u4fdd\u5b58\u5173\u8054\u6570\u7ec4,\u7c7b\u4f3c hash table, \u6709key \u548c value \u7ed3\u6784. \u5982\u4e0b\u56fe.key \u5b9e\u9645\u4e0a\u5c31\u662f\u5230\u8fbevalue\u7684\u8def\u5f84.\u800cbitwise trie, \u5b83\u662f\u5c06 key\u8bbe\u7f6e\u4e3a0/1, \u6240\u4ee5, \u662f\u4e00\u68f5\u4e8c\u53c9\u6811.\u5728dlmalloc\u7684bitwise trie tree\u4e2d, 0 \u4ee3\u8868\u8fdb\u5165\u5de6\u5b50\u6811, 1 \u4ee3\u8868\u8fdb\u5165\u53f3\u5b50 \u6811. \u800ckey\u7684\u957f\u5ea6\u5bf9\u5e94\u8def\u5f84\u7684\u6df1\u5ea6.\u53c2\u8003 [treebins\u548c\u6811\u7ba1\u7406\u56fe\u89e3] \u7684\u56fe,\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u8981\u67e5\u627e\u7684\u662f512\u5bf9\u5e94\u7684\u7ed3\u70b9, \u5219\u5c06520\u5bf9 \u5e94\u4e8c\u8fdb\u5236\u7801\u662f1000001000, \u5bf9\u5e94\u7684\u7bb1\u5b50\u53f7\u662f2\u53f7,\u5219\u5176\u8868\u793a\u7684\u5185\u5b58\u8303\u56f4\u4e3a256, \u7279\u5f81\u7801\u957f\u5ea6\u4e3a8, \u4e5f\u5c31\u662f00001000.\u8003\u8651\u5230, \u6240\u6709\u8bf7 \u6c42\u5927\u5c0f\u4e3a8byte\u500d\u6570,\u6240\u4ee5, \u5b9e\u9645\u7279\u5f81\u7801\u4e3a00001, \u6811\u6df1\u4e3a5, \u524d4\u5c42\u4e3a\u5de6\u5b50\u6811,\u7b2c\u4e94\u5c42\u4e3a\u53f3\u5b50\u6811.\u4f46\u521a\u624d\u63cf\u8ff0\u7684\u662ftrie\u6811\u548c bitwise trie \u6811, \u4e0d\u662fdlmalloc\u4f7f\u7528\u7684\u6811.", 
            "title": "\u7b97\u6cd5\u6982\u89c8"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#mspace_1", 
            "text": "struct   malloc_chunk   {  size_t                 prev_foot ;    /* \u5982\u679c\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7a7a\u95f2,\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u5927\u5c0f */  size_t                 head ;         /* \u5927\u5c0f\u548cinuse bit\u4f4d*/  struct   malloc_chunk *   fd ;           /* \u5982\u679c\u662f\u7a7a\u95f2\u5185\u5b58\u5757,\u6307\u5411\u53cc\u5411\u94fe\u8868*/  struct   malloc_chunk *   bk ;  };  typedef   struct   malloc_chunk    mchunk ;  typedef   struct   malloc_chunk *   mchunkptr ;  typedef   struct   malloc_chunk *   sbinptr ;    /* \u5185\u5b58\u5757\u5206\u7c7b\u7bb1\u7684\u7c7b\u578b */ \ufeff\u200b", 
            "title": "\u975eMSPACE\u4ee3\u7801\u903b\u8f91\u5206\u6790"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#head_1", 
            "text": "PINUSE_BIT \u5728\u524d\u4e00\u4e2a\u76f8\u90bb\u7684\u5185\u5b58\u5757\u88ab\u4f7f\u7528\u65f6,\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u88ab\u7f6e\u4e0a. CINUSE_BIT \u5728\u5f53\u524d\u5185\u5b58\u5757\u88ab\u4f7f\u7528\u65f6,\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u88ab\u7f6e\u4e0a. FLAG4_BIT \u5728\u5f53\u524d\u7248\u672c\u7684dlmalloc\u4e2d\u672a\u88ab\u4f7f\u7528  \n\u5982 \u4f55\u505a\u5230\u5728head\u4e2d\u65e2\u5b58\u653e\u5757\u5927\u5c0f\u53c8\u5b58\u653e\u6807\u5fd7\u4f4d\u7684\u5462?\u9996\u5148\u63d0\u5230\u4e00\u70b9\u662f,\u6240\u6709\u7684\u5757\u7684 \u5927\u5c0f\u90fd\u662f\u6309\u6700\u5c118bit\u5bf9\u9f50\u7684,\u6362\u53e5\u8bdd\u8bf4,\u8868\u793a\u5927\u5c0f\u7684\u6570\u5b57,\u4f4e3\u4f4d\u5fc5\u5b9a\u4e3a 0,\u6240\u4ee5\u5c31\u6709 \u6548\u5730\u5229\u7528\u4e86\u4f4e3\u4f4d\u5b58\u653e\u6807\u5fd7\u4f4d.\u6240\u4ee5,\u83b7\u53d6chunk\u7684\u5927\u5c0f\u7528\u4e0b\u9762\u7684\u5b8f,\u5c06head\u7684\u4f4e\u4e09 \u4f4d\u6e05\u62100,\u53d6\u51fa.  #define chunksize(p)        ((p)- head   ~(FLAG_BITS))  \n\u4e0b\u9762\u4ecb\u7ecd\u4e0bdlmalloc\u7ef4\u62a4\u7684\u4e00\u4e2a\u5168\u5c40\u6570\u636e\u7ed3\u6784.  2579   struct   malloc_state   {   2580     binmap_t     smallmap ;    // 32bit, \u5c0f\u5185\u5b58\u7bb1\u5b50\u7684\u4f4d\u56fe.  2581     binmap_t     treemap ;      // 32bit, \u5927\u5185\u5b58\u7bb1\u5b50\u7684\u4f4d\u56fe  2582     size_t       dvsize ;             //  dv chunk \u7684\u5927\u5c0f  2583     size_t       topsize ;            //  top chunk\u7684\u5927\u5c0f  2584     char *        least_addr ;      //  dlmalloc\u7ba1\u7406\u7684\u5185\u5b58\u7684\u6700\u5c0f\u5730\u5740,\u4e5f\u5c31\u662f\u6700\u5c0f\u7684segment \u57fa\u5730\u5740.  2585     mchunkptr    dv ;              // dv chunk. \u6700\u8fd1\u88ab\u5206\u5272\u4f7f\u7528\u7684chunk  2586     mchunkptr    top ;             // top chunk. \u9876\u90e8,\u9760\u8fd1\u6709\u6548\u5185\u5b58\u7684chunk,\u8be6\u89c1\u603b\u7ed3\u56fe.  2587     size_t       trim_check ;      // \u68c0\u67e5top chunk\u5927\u5c0f\u662f\u5426\u8d85\u7684\u51fd\u6570.  2588     size_t       release_checks ;    2589     size_t       magic ;   2590     mchunkptr    smallbins [( NSMALLBINS + 1 ) * 2 ];     // 32\u4e2a\u94fe\u8868\u5934  2591     tbinptr      treebins [ NTREEBINS ];             // 32\u68f5\u6811  2592     size_t       footprint ;   2593     size_t       max_footprint ;   2594     size_t       footprint_limit ;   /* zero means no limit */   2595     flag_t       mflags ;   2596   # if   USE_LOCKS   2597     MLOCK_T      mutex ;       /* locate lock among fields that rarely change */   2598   # endif   /* USE_LOCKS */   2599     msegment     seg ;          //  segment\u94fe\u8868.  2600     void *        extp ;        /* Unused but available for extensions */   2601     size_t       exts ;   2602   }; \ufeff\u200b   mchunkptr  smallbins[(NSMALLBINS+1)*2];    \u8fd9\u91cc\u4f1a\u6709\u4e2a\u7591\u95ee,\u7406\u8bba\u4e0a, 32\u4e2a\u94fe\u8868\u5934,\u6211\u4eec\u4f1a\u4f7f\u7528 struct malloc_chunk  smallbins[NSMALLBINS];   \u4f46\u8fd9\u91cc\u4e0d\u4f7f\u7528\u7684\u539f\u56e0\u662f, \u5bf9\u4e8e\u94fe\u8868\u5934\u800c\u8a00,   malloc_chunk \u7684  prev_foot \u548c head \u4e24\u4e2a\u57df\u662f\u6ca1\u6709\u88ab\u4f7f\u7528\u7684,\u5b9e\u9645\u9700\u8981\u7684\u5927\u5c0f\u662f2\u4e2a\u6307\u9488\u5927 \u5c0f.\u6240\u4ee5,dlmalloc\u4f7f\u7528\u4e86\u8986\u76d6\u7684\u65b9\u6cd5. \u524d\u4e00\u4e2a malloc_state \u7684fb/bk \u8e29\u4e86\u540e\u4e00\u4e2a\u7684 malloc_state\u7684 prev_foot/head.\u6240\u4ee5\u5927\u5c0f\u5e94\u8be5\u4e3a 32 * 8 + 8, \u4e5f\u5c31\u662f33 * 2 \u4e2a\u6307\u9488\u5927\u5c0f.", 
            "title": "head \u57df\u4e2d\u53d8\u91cf\u7684\u8bf4\u660e:"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#_7", 
            "text": "\u5f53\u5185\u5b58\u5757\u672a\u88ab\u4f7f\u7528\u65f6,\u4ed6\u4eec\u4f5c\u4e3a\u5217\u8868\u6216\u8005\u6811\u7684\u8282\u70b9. \n\u5c0f\u5185\u5b58(\u201cSmall\u201d) \u5757\u5b58\u50a8\u5728\u73af\u5f62\u53cc\u5411\u94fe\u8868\u4e2d,\u770b\u8d77\u6765\u50cf\u5982\u4e0b\u8fd9\u6837.   \u800c \u5927 \u7684\u5185\u5b58\u5757\u4f7f\u7528\u5185\u5b58\u5757\u5927\u5c0f\u4e3a\u5173\u952e\u5b57\u7684bitwise digital tree (\u53c8\u53ebaka tree).\u56e0\u4e3amalloc_tree_trunks\u53ea\u662f \u7528\u4e8e\u5927\u5c0f\u5927\u4e8e256bytes\u7684\u7a7a\u95f2\u5185\u5b58\u5757,\u4ed6\u4eec \u7684\u5927\u5c0f\u4e0d\u4f1a\u53d7\u5230\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u7684\u9650\u5236.\u6bcf \u4e00\u4e2a\u8282\u70b9\u7684\u7ed3\u6784\u770b\u8d77\u6765\u50cf\u5982\u4e0b\u8fd9 \u6837.   \u6bcf\u4e00\u68f5\u6811\u90fd\u62e5\u6709\u552f\u4e00\u7684\u5185\u5b58\u5757\u5927\u5c0f.\u800c\u5177\u6709\u540c\u6837\u5927\u5c0f\u7684\u5185\u5b58\u5757\u4f1a\u88ab\u5b89\u6392\u5728\u53cc\u5411\u94fe \u8868\u91cc,\u4e0e\u6700\u8001\u7684\u5185\u5b58\u5757\u4e00\u8d77(\u6307,\u4ee5FIFO\u7684\u89c4\u5219,\u4e0b\u4e00\u4e2a\u8981\u88ab\u4f7f\u7528\u7684\u5185\u5b58\u5757).\u5982\u679c\u4e00 \u4e2a\u5177\u6709\u540c\u6837\u5927\u5c0f\u7684\u5185\u5b58\u5757\u88ab\u63d2\u5165,\u5b83\u5c31\u4f1a\u7528\u7c7b\u4f3c\u5c0f\u5185\u5b58\u7684fb/bk\u7684\u6307\u9488\u4e00\u6837\u7684\u65b9\u5f0f,\u4ece \u539f\u6709\u7684\u8282\u70b9\u79fb\u9664.  \u6bcf \u4e00 \u68f5\u6811\u5305\u542b\u5927\u5c0f\u4e3a2\u7684\u4e58\u65b9\u8303\u56f4\u7684\u5185\u5b58\u5757(\u6700\u5c0f\u4e3a0x100  = x   0x180),\u5728\u6811 \u7684\u6bcf\u4e00\u5c42\u90fd\u4f1a\u88ab\u5206\u6210\u4e00\u534a,\u5373\u5c0f\u7684\u4e00\u534a (0x100  = x   0x140)\u4f5c\u4e3a\u5de6\u5b50\u6811,\u5927\u7684\u4e00 \u534a\u4f5c\u4e3a\u53f3\u5b50\u6811(0x140  = x   0x180).  \u901a\u8fc7\u4f7f\u7528\u8fd9\u79cd\u89c4\u5219,\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u5305\u542b\u7684\u5185\u5b58\u5757\u5927\u5c0f\u90fd\u5c0f\u96e8\u5176\u53f3\u5b50\u6811.  Smallbins\u548c\u53cc\u5411\u94fe\u8868\u7ba1\u7406\u5c0f\u5185\u5b58\u56fe\u89e3\u3002   Treebins\u548c\u6811\u7ba1\u7406\u5927\u5185\u5b58\u7684\u56fe\u89e3\uff1a", 
            "title": "\u88ab\u8986\u76d6\u7684\u6570\u636e\u7ed3\u6784"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#dlmalloc_5", 
            "text": "dlmalloc \u5bf9\u5c0f\u5185\u5b58\u5206\u914d\u6709\u5982\u4e0b5\u4e2a\u89c4\u5219(\u6309\u4f18\u5148\u7ea7\u987a\u5e8f)\uff1a    \u5982\u679c\u4e0e\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u5339\u914d\u7684\u7bb1\u5b50\u5b58\u5728\u7a7a\u95f2,\u5219\u4f7f\u7528\u5f53\u524d\u7bb1\u5b50\uff0c\u5426\u5219\u4f7f\u7528\u4e34\u8fd1\u7684 \u7bb1\u5b50\u3002\u5728\u80fd\u4e0d\u5206\u5272\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\u5c3d\u91cf\u4e0d\u5206\u5272\u5185\u5b58\u3002   \u5982\u679cdv chunk\u8db3\u591f\u5927\uff0c\u90a3\u4e48\u4f7f\u7528dv chunk\u3002 dv chunk\u662f\u6307\u6700\u8fd1\u4e00\u6b21\u5c0f\u5185\u5b58 \u7533\u8bf7\u65f6\u4f7f\u7528\u7684\u5185\u5b58\u5757\u3002 \u8fd9\u4e2a\u89c4\u5219\u662f\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u5206\u914d\u7684\u5185\u5b58\u8fde\u7eed\u3002   \u5728smallbin\u548ctreebin\u4e2d\u5bfb\u627e\u53ef\u4ee5\u4f7f\u7528\u7684\u5185\u5b58\u5757\uff0c\u5e76\u5206\u5272\u3002\u5c06\u5269\u4e0b\u7684\u5185\u5b58 \u5757\u4fdd\u5b58\u5230dv chunk\u4e2d\u3002   \u5982\u679ctop chunk \u8db3\u591f\u5927\uff0c\u5219\u4f7f\u7528top chunk  \u5982\u679c\u8bf7\u6c42\u5185\u5b58\u5b9e\u5728\u592a\u5927\uff0c\u5219\u4f7f\u7528\u7cfb\u7edf\u5206\u914d\u5185\u5b58\u3002   \n\u5927\u5185\u5b58\u5206\u914d\u7684\u89c4\u5219\uff1a   \u5728treebin\u4e2d\u627e\u5230\u6700\u9002\u5408\u7684\u6700\u5c0f\u5185\u5b58\uff0c\u5982\u679c\u5b83\u6bd4dv chunk\u7684\u66f4\u5408\u9002\uff0c\u5c31\u4f7f\u7528\u5b83\uff0c \u5982\u679c\u6709\u9700\u8981\u5c31\u5206\u5272\u5b83\u3002   \u5982\u679cdv chunk \u6bd4\u5176\u4ed6\u6240\u6709\u7684\u66f4\u5408\u9002\uff0c\u4f7f\u7528dv chunk\u3002   \u5982\u679ctop \u8db3\u591f\u5927\uff0c\u4f7f\u7528top chunk\u3002   \u5982\u679c\u8bf7\u6c42\u7684\u5927\u5c0f  = mmap threshold, \u5219\u4f7f\u7528\u7cfb\u7edf\u7684mmap\u3002  \u76f4\u63a5\u4ece\u7cfb\u7edf\u5206\u914d\u5185\u5b58\u5e76\u4f7f\u7528\u3002", 
            "title": "dlmalloc\u4ee3\u7801\u5206\u6790"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#_8", 
            "text": "4597       if   ( bytes   =   MAX_SMALL_REQUEST )   {   // MAX_SMALL_REQUEST \u5b9e\u73b0\n2577 #define MAX_SMALL_REQUEST (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)  \u8fd9\u91ccbytes\u4e3a\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f,  MAX_SMALL_REQUEST \u5c31\u662f\u4e4b\u524d\u63d0\u5230\u8fc7\u7684\u6700\u5927\u7684\u5c0f\u5185\u5b58\u5757\u7684\u5927\u5c0f,\u5c31\u662f256byte,\u5373,256byte\u4ee5\u4e0b\u7684\u6240\u6709\u5185\u5b58\u90fd\u662f\u5728\u53cc\u5411\u94fe\u8868\u4e2d\u5339\u914d.  4600         nb   =   ( bytes     MIN_REQUEST ) ?   MIN_CHUNK_SIZE   :   pad_request ( bytes );   2225   # define   MIN_REQUEST           ( MIN_CHUNK_SIZE   -   CHUNK_OVERHEAD   -   SIZE_T_ONE )  2228   # define   pad_request ( req )  \\ 2229      ((( req )   +   CHUNK_OVERHEAD   +   CHUNK_ALIGN_MASK )     ~ CHUNK_ALIGN_MASK )   \u8fd9\u91ccnb\u5c31\u662f\u52a0\u4e0a\u534f\u8bae\u6570\u636e\u540e\u7684\u5b9e\u9645dlmalloc\u4f1a\u5206\u914d\u7684\u5185\u5b58\u5757\u5927\u5c0f.\u524d\u6587\u7b14\u8005\u63d0\u5230\u8fc7,\u5c0f\u5185\u5b58\u5757\u7684\u6700\u5c0f\u503c\u4e3a8byte,\u6240\u4ee5,\u4e0d\u8bba\u7533\u8bf7\u7684\u5185\u5b58\u591a\u5c0f,\u90fd\u4f7f\u7528\u6700\u5c0f\u503c.  4601      idx = small_index(nb);  2572   # define   SMALLBIN_SHIFT      ( 3U )  2825   # define   small_index ( s )        ( bindex_t )(( s )      SMALLBIN_SHIFT )   \u8fd9\u91ccidx\u5f97\u5230\u7684\u662f\u8be5\u5185\u5b58\u5757\u5bf9\u5e94\u7684smallbin\u7bb1\u5b50\u7684\u7bb1\u53f7.\u524d\u6587\u5728\u63d0\u5230head\u65f6,\u63d0\u5230\u8fc7,\u5c0f\u5185\u5b58\u5757\u7684\u5927\u5c0f\u4e3a8byte\u7684\u500d\u6570,\u6240\u4ee5,\u53f3\u79fb3\u4f4d\u6765\u5b9a\u4f4d\u5bf9\u5e94\u7bb1\u5b50\u7684\u7bb1\u53f7.  4602         smallbits   =   gm - smallmap     idx ;   smallmap \u662f\u5404\u4e2a\u7bb1\u5b50\u7684\u4f4d\u56fe,32bit,\u5bf9\u5e9432\u4e2a\u7bb1\u5b50,\u6bcf\u4e00\u4f4d\u4e3a1\u8868\u793a\u8be5\u7bb1\u53f7\u4e2d\u6709\u5bf9\n\u5e94\u5927\u5c0f\u7684\u5185\u5b58\u5757,\u4e3a0\u5219\u8868\u793a\u6ca1\u6709.\u8be5\u884c\u4ee3\u7801\u662f\u628a\u5bf9\u5e94\u7bb1\u53f7\u7684\u6bd4\u7279\u4f4d\u79fb\u5230\u6700\u53f3\u4fa7.  4604         if   (( smallbits     0x3U )   !=   0 )   {  4605           mchunkptr   b ,   p ;  4606           idx   +=   ~ smallbits     1 ;         /* Uses next bin if idx empty */  4607           b   =   smallbin_at ( gm ,   idx );   \u8fd9\u91cc 0x3U \u4f4e8\u4f4d\u5c31\u662f 0000 0011. \u6240\u4ee5,smallbits 0x3U \u4e3a\u771f\u7684\u6761\u4ef6\u5982\u4e0b:(\u4e0a\u6587\u63d0\u5230,smallbits\u7684\u6700\u53f3\u4f4d\u8868\u793aidx\u7bb1\u53f7\u662f\u5426\u6709\u7a7a\u95f2\u5757)   \u4f4e2\u4f4d\u4e3a 11. idx\u6709\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u6709\u7a7a\u95f2\u5757.  \u4f4e2\u4f4d\u4e3a 10. idx\u65e0\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u6709\u7a7a\u95f2\u5757.  \u4f4e2\u4f4d\u4e3a 01. idx\u6709\u7a7a\u95f2\u5757,\u6bd4idx\u59271\u7bb1\u53f7\u7684\u65e0\u7a7a\u95f2\u5757.   4606\u884c\u662f\u5728\u91cd\u65b0\u5b9a\u4f4d\u5230\u771f\u6b63\u6709\u7a7a\u95f2\u5757\u7684\u7bb1\u53f7. ~smallbits   1 \u5728\u5f53\u524d\u7bb1\u5b50\u4e3a0\u7684\n\u60c5\u51b5\u4e0b,\u503c\u4e3a1;\u5f53\u524d\u7bb1\u5b50\u4e3a1\u7684\u60c5\u51b5\u4e0b,\u503c\u4e3a0.\u6240\u4ee5\u662f\u6709\u9650\u662f\u7528\u6b63\u597d\u6ee1\u8db3\u5927\u5c0f\u7684\u7bb1\n\u5b50.  2831 #define smallbin_at(M, i)\n((sbinptr)((void*) ((M)- smallbins[(i) 1])))  i \u5c31\u662f idx, \u800cM\u5219\u662fgm( \u9700\u8981\u5728\u4e0a\u6587\u9884\u5148\u63cf\u8ff0gm\u7ed3\u6784\u4f53\u6210\u5458\u4f5c\u7528 ).smallbins( \u9700\u5728\u4e0a\u6587\u63cf\u8ff0 )\u5c31\u662f\u53cc\u5411\u94fe\u8868\u6570\u7ec4,\u4e5f\u5c31\u662f\u5bf9\u5e94\u7bb1\u53f7\u5185\u90e8\u7684\u7a7a\u95f2\u5757\u94fe\u8868\u7684\u9996\u5730\u5740.  \u503c\u5f97\u9ad8\u5174\u7684\u662f,\u6211\u4eec\u62ff\u5230\u94fe\u8868\u4e86,\u63a5\u4e0b\u6765\u5c31\u662f\u53d6\u51fa\u7a7a\u95f2\u5757,\u548c\u4e00\u4e9b\u6807\u5fd7\u4f4d\u7684\u5904\u7406\u4e86.  4608        p = b- fd;\n4609        assert(chunksize(p) == small_index2size(idx));\n4610        unlink_first_small_chunk(gm, b, p, idx);\n4611        set_inuse_and_pinuse(gm, p, small_index2size(idx));\n4612        mem = chunk2mem(p);\n4613        check_malloced_chunk(gm, mem, nb);\n4614        goto postaction;  fd\u57df\u662f\u524d\u4e00\u4e2a\u94fe\u8868\u8282\u70b9.\u800cB\u662f\u8868\u5934, \u4e5f\u5c31\u662f\u8bf4,\u6211\u4eec\u53d6\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20,\u53d6\u5230\u6211\u4eec\u9700\u8981\u7684\u5185\u5b58\u5757\u5730\u5740.\u8fd9\u4e2aassert\u5176\u5b9e\u5c31\u662f\u786e\u8ba4\u4e0b,\u5f53\u524d\u7684\u7bb1\u53f7\u7684\u5185\u5b58\u5757\u5927\u5c0f\u8ddf\u5f53\u524d\u5185\u5b58\u5757\u7684\u5927\u5c0f\u662f\u5426\u5339\u914d.   3629#define unlink_first_small_chunk(M, B, P, I) {\\\n3630  mchunkptr F = P- fd;\\\n3631  assert(P != B);\\\n3632  assert(P != F);\\\n3633  assert(chunksize(P) == small_index2size(I));\\\n3634  if (B == F) {\\\n3635    clear_smallmap(M, I);\\\n3636  }\\\n3637  else if (RTCHECK(ok_address(M, F)   F- bk == P)) {\\\n3638    F- bk = B;\\\n3639    B- fd = F;\\\n3640  }\\\n3641  else {\\\n3642    CORRUPTION_ERROR_ACTION(M);\\\n3643  }\\\n3644}  2921#define clear_smallmap(M,i)     ((M)- smallmap  = ~idx2bit(i))  \u8fd9\u91cc B P F\u7684\u5173\u7cfb\u662f F -  P -  B , \u6240\u4ee5,\u7406\u8bba\u4e0a, P \u4e0d\u7b49\u4e8eF \u4e5f\u4e0d\u7b49\u4e8eB,\u5982\n\u679c\u76f8\u7b49,\u5c31\u610f\u5473\u7740\u662f\u7a7a\u94fe\u8868(\u53ea\u6709\u8868\u5934).\u800c\u5982\u679cB == F,  \u610f\u5473\u7740\u8be5\u94fe\u8868\u4e2d\u53ea\u6709\u4e00\n\u4e2a\u7a7a\u95f2\u5185\u5b58\u5757.\u53d6\u51fa\u8be5\u5185\u5b58\u5757\u4e4b\u540e,\u54b1\u4eec\u8981\u628a\u8be5\u7bb1\u5b50\u6807\u8bb0\u4e3a\u7a7a(3635, 2921).\u5f53\u7136,\n\u66f4\u591a\u7684\u60c5\u51b5\u662f\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9P.  // 4611 \u884c\u51fd\u6570\u5b9e\u73b0\n\n3058#define set_inuse_and_pinuse(M,p,s)\\\n3059  ((p)- head = (s|PINUSE_BIT|CINUSE_BIT),\\\n3060  ((mchunkptr)(((char*)(p)) + (s)))- head |= PINUSE_BIT)  \u8fd9\u5c31\u662f\u5728P \u7684head\u4e2d\u7f6e\u4e0aCINUSE\u4f4d\u548cP \u7684\u4e0b\u4e00\u5757\u5185\u5b58\u7684head\u4e2d\u8bbe\u7f6e\u4e0aPINUSE\u4f4d.  \u6700\u540emem = chunk2mem(p);  \u5c31\u662f\u53d6\u51fa\u4f20\u9012\u4e2a\u7528\u6237\u7684\u6709\u6548\u5185\u5b58\u5730\u5740,.\ncheck_malloced_chunk(gm, mem, nb); \u662f\u8c03\u8bd5\u7528\u7684,\u68c0\u67e5\u8be5\u5206\u914d\u7684\u5185\u5b58\u5757\u7684\u5404\u4e2a\n\u5c5e\u6027\u662f\u5426\u6b63\u5e38.  \u5230\u6b64,\u5c0f\u5185\u5b58\u7684,\u6b63\u597d\u7b26\u5408\u6216\u6b63\u597d\u4e34\u8fd1\u7bb1\u5b50\u6709\u7a7a\u95f2\u5757\u7684\u903b\u8f91\u5206\u6790\u5b8c\u6210,\u54b1\u4eec\u62ff\u5230\u4e86\n\u9700\u8981\u7684\u5185\u5b58.", 
            "title": "\u5c0f\u5185\u5b58\u89c4\u5219\u4e00"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#_9", 
            "text": "\u4e0b\u9762,\u662f\u4e0a\u8ff0\u60c5\u51b5\u4e0d\u6ee1\u8db3,\u4e5f\u5c31\u662f\u5f53\u524d\u5185\u5b58\u8bf7\u6c42\u5bf9\u5e94\u7684\u7bb1\u53f7idx\u7684smallbits\u4f4e2\u4f4d\u4e3a 00 ,\u4e5f\u5c31\u662f\u8bf4,\u6ca1\u6709\u7a7a\u95f2\u5757.  4617      else if (nb   gm- dvsize) {\n4618        if (smallbits != 0) {  ( dvsize\u9700\u8981\u5728gm\u7684\u5206\u6790\u4e2d\u63cf\u8ff0\u6389 )  smallbits != 0 \u610f\u5473\u7740,\u5728\u6bd4\u8bf7\u6c42\u7684\u5185\u5b58\u5757\u5927\u7684\u7bb1\u5b50\u4e2d,\u603b\u6709\u7a7a\u95f2\u5757\u5b58\u5728.\u6240\u4ee5\u63a5\u4e0b\u6765\u7684\u76ee\u7684\u662f\u627e\u5230\u6700\u5c0f\u7684\u7a7a\u95f2\u5757.  4622          binmap_t leftbits = (smallbits   idx)   left_bits(idx2bit(idx));\n4623          binmap_t leastbit = least_bit(leftbits);\n4624          compute_bit2idx(leastbit, i);  2917#define idx2bit(i)              ((binmap_t)(1)   (i))\n\n2929#define least_bit(x)         ((x)   -(x))\n\n2932#define left_bits(x)         ((x 1) | -(x 1))  4622 \u884c \u4f4d\u4e0e\u7684\u53f3\u64cd\u4f5c\u6570\u662f\u4e00\u4e2a32bit\u7684\u6570\uff0c\u8be5\u6570\u7684\u4f4e\uff08idx+1\uff09\u4f4d\u4e3a0,\u5176\u4f59\u4f4d\u4e3a1;\u5de6\u64cd\u4f5c\u6570\u5c31\u662f\u5bf9\u5e94\u4f4eidx\u4f4d\u4e3a0,\u540c\u65f6\u4ee3\u7801\u903b\u8f91\u8d70\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\uff0c\u4f4e\uff08idx+2\uff09\u4e3a0\u3002\nleast_bit \u7684\u529f\u80fd\u662f\uff0c\u4fdd\u7559leftbits\u4e2d\u4ece\u53f3\u5f80\u5de6\u7684\u7b2c\u4e00\u4e2a\u4e3a1\u7684\u4f4d\uff0c\u5176\u4f59\u4f4d\u4e3a0. \u5219\u8be5leastbit\u5bf9\u5e94\u7684\u5c31\u662f\u7b26\u5408\u8bf7\u6c42\u7684\u6700\u5c0f\u5185\u5b58\u5757\u7684\u4f4d\u56fe\u3002compute_bit2idx \u662f\u5c06leastit\u4f4d\u56fe\u8f6c\u6362\u6210\u7bb1\u53f7\u3002 \u8fd9\u91cc i \u5c31\u662f\u83b7\u53d6\u5230\u7684\u7bb1\u53f7\u3002  4625          b = smallbin_at(gm, i);\n4626          p = b- fd;\n4627          assert(chunksize(p) == small_index2size(i));\n4628          unlink_first_small_chunk(gm, b, p, i);  \u62ff\u5230\u7bb1\u53f7\u4e4b\u540e\uff0c\u8fd9\u5757\u7684\u903b\u8f91\u4e0e\u4e0a\u6587\u89c4\u5219\u4e00\u7684\u903b\u8f91\u4e00\u6837\u3002  4629          rsize = small_index2size(i) - nb;  \u53d6\u51fa\u5f53\u524d\u7bb1\u5b50\u7684\u5185\u5b58\u5757\u5927\u5c0f\uff0c\u51cf\u53bb\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u5269\u4f59\u7684\u5185\u5b58\u5757\uff0c\u8fd9\u4e2a\u5269\u4f59\u5185\u5b58\u5757\u4f1a\u653e\u5230dv chunk\u4e2d\u3002  4631          if (SIZE_T_SIZE != 4   rsize   MIN_CHUNK_SIZE)\n4632            set_inuse_and_pinuse(gm, p, small_index2size(i));\n4633          else {\n4634            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);\n4635            r = chunk_plus_offset(p, nb);\n4636            set_size_and_pinuse_of_free_chunk(r, rsize);\n4637            replace_dv(gm, r, rsize);\n4638          }  2269#define chunk_plus_offset(p, s)  ((mchunkptr)(((char*)(p)) + (s)))\n\n2284#define set_size_and_pinuse_of_free_chunk(p, s)\\\n2285  ((p)- head = (s|PINUSE_BIT), set_foot(p, s))\n\n3063#define set_size_and_pinuse_of_inuse_chunk(M, p, s)\\\n3064  ((p)- head = (s|PINUSE_BIT|CINUSE_BIT))\n\n3584#define insert_small_chunk(M, P, S) {\\\n3585  bindex_t I  = small_index(S);\\\n3586  mchunkptr B = smallbin_at(M, I);\\\n3587  mchunkptr F = B;\\\n3588  assert(S  = MIN_CHUNK_SIZE);\\\n3589  if (!smallmap_is_marked(M, I))\\\n        // \u5982\u679c\u662f\u5bf9\u5e94\u7bb1\u53f7\u539f\u72b6\u6001\u4e3a0,\u5219\u7f6e1.\n3590    mark_smallmap(M, I);\\\n3591  else if (RTCHECK(ok_address(M, B- fd)))\\\n3592    F = B- fd;\\\n3593  else {\\\n3594    CORRUPTION_ERROR_ACTION(M);\\\n3595  }\\\n3596  B- fd = P;\\\n3597  F- bk = P;\\\n3598  P- fd = F;\\\n3599  P- bk = B;\\\n3600}\n\n3648#define replace_dv(M, P, S) {\\\n3649  size_t DVS = M- dvsize;\\\n3650  assert(is_small(DVS));\\\n3651  if (DVS != 0) {\\\n3652    mchunkptr DV = M- dv;\\\n3653    insert_small_chunk(M, DV, DVS);\\\n3654  }\\\n3655  M- dvsize = S;\\\n3656  M- dv = P;\\\n3657}  \u5982\u679c\u5269\u4f59\u5927\u5c0frsize\u5c0f\u4e8eMIN_CHUNK_SIZE\uff0c\u54b1\u4eec\u76f4\u63a5\u5c06\u6240\u6709\u5185\u5b58\u5206\u914d\u7ed9\u7528\u6237\u3002\u5426\u5219\u5219\u5206\u5272\u5185\u5b58\uff0c\u5e76\u5c06\u5269\u4f59\u7684\u5185\u5b58\u5757\u8f6c\u6210mchunkptr\uff0c \u5373 r\u3002\u6211\u4eec\u7136\u540e\uff0cr\u76f8\u5f53\u4e8e\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u5757\uff0c\u6211\u4eec\u8bbe\u7f6e\u5176head\u5c5e\u6027\uff08size\uff0cPINUSE_BIT\uff0cCINUSE_BIT\uff09\u3002\nreplace_dv \u4e2d\uff0c\u6211\u4eec\u5148\u83b7\u5f97dv size\uff0c\u786e\u8ba4\u662f\u5c0f\u5185\u5b58\u5757\u3002\u7136\u540e\uff0c\u5c31\u662f\u628adv\u5185\u5b58\u5757\u63d2\u5165\u5230\u5bf9\u5e94\u7684\u7bb1\u53f7\u91cc\u3002\u5c31\u8ddf\u4e4b\u524d\uff0c\u6839\u636e\u5927\u5c0f\u83b7\u53d6\u5230\u5bf9\u5e94\u7bb1\u53f7\u7684\u94fe\u8868\u5934\u7684\u903b\u8f91\u4e00\u6837\uff0c\n\u53ea\u662f\u8fd9\u91cc\u662f\u5c06\u5185\u5b58\u5757\u63d2\u5165\u53cc\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002\nok\uff0c \u63d2\u5165\u5b8c\u6210\u540e\uff0c\u54b1\u4eec\u628a\u521a\u624d\u5206\u5272\u5269\u4e0b\u7684\u5185\u5b58\u5b58\u653e\u5230dv chunk\u4e2d\u3002  4639          mem = chunk2mem(p);\n4640          check_malloced_chunk(gm, mem, nb);\n4641          goto postaction;  \u8fd9\u91cc\u6211\u4eec\u8fd4\u56de\u5185\u5b58\u7ed9\u7528\u6237\uff0c\u89c4\u5219\u4e09\u7b2c\u4e00\u90e8\u5206\u5185\u5b58\u5206\u914d\u7ed3\u675f\u3002  4644        else if (gm- treemap != 0   (mem = tmalloc_small(gm, nb))\n!= 0) {\n4645          check_malloced_chunk(gm, mem, nb);\n4646          goto postaction;  \u8fd9\u91ccelse \u5bf9\u5e94\u201c4618        if (smallbits != 0) {\u201d \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u5c0f\u5185\u5b58\u7684 =\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u7684\u6240\u6709\u7bb1\u5b50\u4e0d\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5feb\u3002 \u7136\u540e\uff0c\u6211\u4eec\u68c0\u67e5treemap\u4e2d\u662f\u5426\u5b58\u5728\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u8c03\u7528tmalloc_small\u3002  2833#define treebin_at(M,i)     ( ((M)- treebins[i]))\n\n4527-static void* tmalloc_small(mstate m, size_t nb) {\n...\n4531  binmap_t leastbit = least_bit(m- treemap);\n4532  compute_bit2idx(leastbit, i);\n4533  v = t = *treebin_at(m, i);\n4534  rsize = chunksize(t) - nb;  least_bit  \u7684\u4f5c\u7528\u5c31\u662f\u4fdd\u7559\u6700\u53f3\u4fa7\u4e3a1\u7684bit\u4f4d\uff0c\u5176\u4f59\u4f4d\u4e3a0.\u6240\u4ee5\uff0c least_bit \u548c compute_bit2idx \u7684\u5171\u540c\u4f5c\u7528\u5c31\u662f\u5728treemap\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u53ef\u7528\u5185\u5b58\u7bb1\u5b50\u3002v\u548ct\u5373\u4e3a\u627e\u5230\u7684\u5185\u5b58\u5757\u6811\u7684\u6839\u8282\u70b9\u3002  4536  while ((t = leftmost_child(t)) != 0) {\n4537    size_t trem = chunksize(t) - nb;\n4538    if (trem   rsize) {\n4539      rsize = trem;\n4540      v = t;\n4541    }\n4542  }  \u8fd9\u6bb5\u4ee3\u7801\u662f\u5bfb\u627et\u7684\u6700\u5de6\u5b50\u6811\u3002\u5728\u524d\u6587\u6211\u4eec\u4ecb\u7ecd\u8fc7aka\u6811\uff0c\u6bcf\u4e00\u68f5\u6811\u7684\u505a\u5b50\u6811\u603b\u5c0f\u4e8e\u5176\u53f3\u5b50\u6811\u3002\u8be5\u4ee3\u7801\u5c31\u662f\u5728\u5bfb\u627e\u6ee1\u8db3\u7528\u4e8e\u8bf7\u6c42\u5927\u5c0fnb\u7684\u6700\u63a5\u8fd1\u7684\u6811\u7684\u8282\u70b9\u3002\uff08\u8003\u8651\u5230\u8bf7\u6c42\u7684\u5b57\u8282nb =256byte, \u800c\u5728tree\u4e2d\u6700\u5c0f\u7684chunksize   256byte \u6240\u4ee5,\u4e0d\u4f1a\u51fa\u73b0\u8d1f\u6570.\uff09  4545    mchunkptr r = chunk_plus_offset(v, nb);\n4546    assert(chunksize(v) == rsize + nb);\n4547    if (RTCHECK(ok_next(v, r))) {\n4548      unlink_large_chunk(m, v);\n4549      if (rsize   MIN_CHUNK_SIZE)\n4550        set_inuse_and_pinuse(m, v, (rsize + nb));\n4551      else {\n4552        set_size_and_pinuse_of_inuse_chunk(m, v, nb);\n4553        set_size_and_pinuse_of_free_chunk(r, rsize);\n4554        replace_dv(m, r, rsize);\n4555      }\n4556      return chunk2mem(v);\n4557    }\n4558  }  (NOT READY)\n\u8fd9\u6bb5\u4ee3\u7801\u8ddf\u4e0a\u6587\u5c0f\u5185\u5b58\u627e\u5230\u540e\u5904\u7406\u7684\u4ee3\u7801\u76f8\u4f3c\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\uff0cunlink_large_chunk\uff0c\u6240\u4ee5\u6211\u4eec\u770b\u4e0bunlink_large_chunk\u7684\u5b9e\u73b0.\u8fd9\u4e2a\u8fc7\u7a0b\u6709\u4e09\u4e2a\u6b65\u9aa4   \u5982\u679c\u7ed3\u70b9X\u662f\u94fe\u8868\u7684\u7ed3\u70b9,\u5219\u5c06\u5176\u91cd\u94fe\u8868\u4e2d\u5220\u9664.  \u5982\u679cX\u662f\u8be5\u5927\u5c0f\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9,\u4f46\u662f\u4e0d\u662f\u53f6\u5b50\u7ed3\u70b9,\u5b83\u5fc5\u987b\u7528\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u66ff\u6362.\u8fd9\u91cc\u67e5\u627e\u53f6\u5b50\u7ed3\u70b9\u7684\u65b9\u6cd5\u662f\u4ece\u6700\u53f3\u4fa7\u5f00\u59cb.  \u5982\u679cX\u662f\u94fe\u8868\u7684\u5934(\u62e5\u6709parent linker),\u5c31\u9700\u8981\u91cd\u65b0\u5c06\u5176x\u7684\u7236\u7ed3\u70b9\u4e0e\u66ff\u6362x\u7684\u7ed3\u70b9\u91cd\u65b0\u8fde\u63a5.   3730#define unlink_large_chunk(M, X) {\\\n3731  tchunkptr XP = X- parent;\\\n3732  tchunkptr R;\\  3733  if (X- bk != X) {\\\n3734    tchunkptr F = X- fd;\\\n3735    R = X- bk;\\\n3736    if (RTCHECK(ok_address(M, F)   F- bk == X   R- fd == X)) {\\\n3737      F- bk = R;\\\n3738      R- fd = F;\\\n3739    }\\\n3740    else {\\\n3741      CORRUPTION_ERROR_ACTION(M);\\\n3742    }\\\n3743  }\\  \u8fd9\u91cc\u662f\u7b2c\u4e00\u79cd\u60c5\u51b5,\u5373x\u662f\u5c5e\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9.  3744  else {\\\n3745    tchunkptr* RP;\\\n3746    if (((R = *(RP =  (X- child[1]))) != 0) ||\\\n3747        ((R = *(RP =  (X- child[0]))) != 0)) {\\\n3748      tchunkptr* CP;\\\n3749      while ((*(CP =  (R- child[1])) != 0) ||\\\n3750             (*(CP =  (R- child[0])) != 0)) {\\\n3751        R = *(RP = CP);\\\n3752      }\\\n3753      if (RTCHECK(ok_address(M, RP)))\\\n3754        *RP = 0;\\\n3755      else {\\\n3756        CORRUPTION_ERROR_ACTION(M);\\\n3757      }\\\n3758    }\\\n3759  }\\  \u8fd9\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5.  3760  if (XP != 0) {\\ \n3761    tbinptr* H = treebin_at(M, X- index);\\ \n3762    if (X == *H) {\\ \n3763      if ((*H = R) == 0) \\ \n3764        clear_treemap(M, X- index);\\ \n3765    }\\ \n3766    else if (RTCHECK(ok_address(M, XP))) {\\ \n3767      if (XP- child[0] == X) \\ \n3768        XP- child[0] = R;\\ \n3769      else \\ \n3770        XP- child[1] = R;\\ \n3771    }\\ \n3772    else\\ \n3773      CORRUPTION_ERROR_ACTION(M);\\ \n3774    if (R != 0) {\\ \n3775      if (RTCHECK(ok_address(M, R))) {\\ \n3776        tchunkptr C0, C1;\\ \n3777        R- parent = XP;\\ \n3778        if ((C0 = X- child[0]) != 0) {\\ \n3779          if (RTCHECK(ok_address(M, C0))) {\\ \n3780            R- child[0] = C0;\\ \n3781            C0- parent = R;\\ \n3782          }\\ \n3783          else\\ \n3784            CORRUPTION_ERROR_ACTION(M);\\ \n3785        }\\ \n3786        if ((C1 = X- child[1]) != 0) {\\ \n3787          if (RTCHECK(ok_address(M, C1))) {\\ \n3788            R- child[1] = C1;\\ \n3789            C1- parent = R;\\ \n3790          }\\ \n3791          else\\ \n3792            CORRUPTION_ERROR_ACTION(M);\\ \n3793        }\\ \n3794      }\\ \n3795      else\\ \n3796        CORRUPTION_ERROR_ACTION(M);\\ \n3797    }\\ \n3798  }\\   \u8fd9\u662f\u7b2c\u4e09\u79cd\u60c5\u51b5.  \u4ee5\u4e0a,\u72ec\u5c5e\u4e8e\u5c0f\u5185\u5b58\u7684\u5206\u914d\u89c4\u5219\u7ed3\u675f!  4650    else if (bytes  = MAX_REQUEST)\n4651      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in\nsys alloc) */  2224#define MAX_REQUEST         ((-((MCHUNK_SIZE + CHUNK_ALIGN_MASK)   ~CHUNK_ALIGN_MASK))   2)  \u8fd9\u91cc,\u5f53\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f = MAX_REQUEST\u65f6,\u6211\u4eec\u5f3a\u5236\u5206\u914d\u5931\u8d25. CHUNK_ALIGN_MASK  \u4e3a  2 * sizeof(void *) - 1 ,\u572832bit\u4e0a\u4e3a7.\u6240\u4ee5MAX_REQUEST\u662f\u4e00\u4e2a\u6781\u5927\u7684\u6570.\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b,\u6211\u4eec\u5c06nb\u8bbe\u7f6e\u4e3affffffff,\u5f3a\u5236\u5931\u8d25.", 
            "title": "\u5c0f\u5185\u5b58\u89c4\u5219\u4e09"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#_10", 
            "text": "\u7c7b\u4f3c\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e00,\u4ece\u6811\u4e2d\u627e\u5230\u6700\u9002\u5408\u7684\u5185\u5b58\u5757.  4652    else {\n4653      nb = pad_request(bytes);\n4654      if (gm- treemap != 0   (mem = tmalloc_large(gm, nb)) != 0) {\n4655        check_malloced_chunk(gm, mem, nb);\n4656        goto postaction;\n4657      }\n4658    }  \u8fd9\u91cc\u6211\u4eec\u7684\u91cd\u70b9\u662f tmalloc_large ,\u5b83\u4e0e tmalloc_small \u7684\u5dee\u522b\u662f: tmalloc_small \u662f\u7528\u4e8e\u5c0f\u5185\u5b58\u5206\u914d\u7684,\u53ea\u9700\u8981\u5728treemap\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u6709\u6548\u6811,\u53d6\u51fa\u6811\u4e2d\u6700\u5c0f\u5185\u5b58\u5373\u53ef;\u800c tmalloc_large \u662f\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219,\u5728\u6240\u670932\u68f5\u6811\u4e2d\u627e\u5230\u6700\u5339\u914d\u5927\u5c0f\u7684\u5185\u5b58\u5757.  4456static void* tmalloc_large(mstate m, size_t nb) {\n4457  tchunkptr v = 0;\n4458  size_t rsize = -nb; /* Unsigned negation */\n4459  tchunkptr t;\n4460  bindex_t idx;\n4461  compute_tree_index(nb, idx);\n4462  if ((t = *treebin_at(m, idx)) != 0) {  rsize \u4e3a\u6781\u5927\u6570.  compute_tree_index \u901a\u8fc7\u8bf7\u6c42\u7684\u5927\u5c0fnb,\u4ecetreebinmap\u4e2d\u8ba1\u7b97\u51fa\u7bb1\u53f7. treebin_at  \u5219\u662f\u53d6\u51faidx\u7bb1\u53f7\u4e2d\u5bf9\u5e94\u7684\u6811\u6839\u7ed3\u70b9.  2880#define compute_tree_index(S, I)\\\n2881{\\\n2882  size_t X = S   TREEBIN_SHIFT;\\\n2883  if (X == 0)\\\n2884    I = 0;\\\n2885  else if (X   0xFFFF)\\\n2886    I = NTREEBINS-1;\\\n2887  else {\\\n2888    unsigned int Y = (unsigned int)X;\\\n2889    unsigned int N = ((Y - 0x100)   16)   8;\\\n2890    unsigned int K = (((Y  = N) - 0x1000)   16)   4;\\\n2891    N += K;\\\n2892    N += K = (((Y  = K) - 0x4000)   16)   2;\\\n2893    K = 14 - N + ((Y  = K)   15);\\\n2894    I = (K   1) + ((S   (K + (TREEBIN_SHIFT-1))   1));\\\n2895  }\\\n2896}  \u4ee5\u4e0a\u8ba1\u7b97\u7684\u7ed3\u679c\u5982\u4e0b,idx\u4e3a\u5bf9\u5e94\u7bb1\u53f7,mem\u5bf9\u5e94\u8be5\u7bb1\u5b50\u4e2d\u6700\u5c0f\u7684\u5185\u5b58\u5927\u5c0f.  idx 0 mem 256 hex: 100\nidx 1 mem 384 hex: 180\nidx 2 mem 512 hex: 200\nidx 3 mem 768 hex: 300\nidx 4 mem 1024 hex: 400\nidx 5 mem 1536 hex: 600\nidx 6 mem 2048 hex: 800\nidx 7 mem 3072 hex: c00\nidx 8 mem 4096 hex: 1000\nidx 9 mem 6144 hex: 1800\nidx 10 mem 8192 hex: 2000\nidx 11 mem 12288 hex: 3000\nidx 12 mem 16384 hex: 4000\nidx 13 mem 24576 hex: 6000\nidx 14 mem 32768 hex: 8000\nidx 15 mem 49152 hex: c000\nidx 16 mem 65536 hex: 10000\nidx 17 mem 98304 hex: 18000\nidx 18 mem 131072 hex: 20000\nidx 19 mem 196608 hex: 30000\nidx 20 mem 262144 hex: 40000\nidx 21 mem 393216 hex: 60000\nidx 22 mem 524288 hex: 80000\nidx 23 mem 786432 hex: c0000\nidx 24 mem 1048576 hex: 100000\nidx 25 mem 1572864 hex: 180000\nidx 26 mem 2097152 hex: 200000\nidx 27 mem 3145728 hex: 300000\nidx 28 mem 4194304 hex: 400000\nidx 29 mem 6291456 hex: 600000\nidx 30 mem 8388608 hex: 800000\nidx 31 mem 12582912 hex: c00000  4463    /* Traverse tree for this bin looking for node with size == nb */\n4464    size_t sizebits = nb   leftshift_for_tree_index(idx);\n4465    tchunkptr rst = 0;  /* The deepest untaken right subtree */\n4466    for (;;) {\n4467      tchunkptr rt;\n4468      size_t trem = chunksize(t) - nb;\n4469      if (trem   rsize) {\n4470        v = t;\n4471        if ((rsize = trem) == 0)\n4472          break;\n4473      }\n4474      rt = t- child[1];\n4475      t = t- child[(sizebits   (SIZE_T_BITSIZE-SIZE_T_ONE))   1];\n4476      if (rt != 0   rt != t)\n4477        rst = rt;\n4478      if (t == 0) {\n4479        t = rst; /* set t to least subtree holding sizes   nb */\n4480        break;\n4481      }\n4482      sizebits  = 1;\n4483    }  \u8fd9\u662f\u6811\u7684\u641c\u7d22\u7b97\u6cd5,\u6211\u4eec\u6765\u8be6\u7ec6\u770b\u4e0b.\u9996\u5148sizebits\u53d8\u91cf,\u7c7b\u4f3cbinmap,\u6bcf\u4e00\u4f4d\u5bf9\u5e94\u6811\u7684\u5bf9\u5e94\u6df1\u5ea6\u7684\u5de6\u53f3\u5b50\u6811,\u53ef\u4ee5\u8ba4\u4e3a\u662f\u904d\u5386\u6811\u7684key bits.  2904#define leftshift_for_tree_index(i) \\\n2905   ((i == NTREEBINS-1)? 0 : \\\n2906    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i)   1) + TREEBIN_SHIFT - 2)))  1601#define SIZE_T_BITSIZE      (sizeof(size_t)   3)\n1606#define SIZE_T_ONE          ((size_t)1)\n2574#define TREEBIN_SHIFT     (8U)  leftshift_for_tree_index  \u5b8f\u5c06\u5173\u952e\u7801\u79fb\u52a8\u5230\u4e86\u6700\u5de6.\u8ba1\u7b97\u7684\u7ed3\u679c\u4e3a (25 - (i   1)). \u76f8\u5bf9\u4e8e\u7bb1\u5b500, \u5185\u5b58\u8303\u56f4\u4e3a128, \u5173\u952e\u7801\u957f\u5ea6\u4e3a 7,  leftshift_for_tree_index \u8ba1\u7b97\u7684\u7ed3\u679c\u4e3a25. \u6240\u4ee5,\u5c06 nb   25 , \u5c31\u662f\u5c06\u5173\u952e\u7801\u79fb\u52a8\u5230\u6700\u5de6\u7aef.  \u7136\u540e\u6211\u4eec\u770bfor\u5faa\u73af\u5185\u90e8\u7684,\u8fd9\u5c31\u662f\u5728\u904d\u5386\u6811\u4e86.  4467      tchunkptr rt;\n4468      size_t trem = chunksize(t) - nb;\n4469      if (trem   rsize) {\n4470        v = t;\n4471        if ((rsize = trem) == 0)\n4472          break;\n4473      }  \u4e0e \u5bfb\u627e\u6700\u5339\u914dnb\u6700\u8fd1\u7684\u70b9.\u5f53\u7136,\u5982\u679c\u627e\u5230\u5927\u5c0f\u76f8\u7b49\u7684,\u5c31\u76f4\u63a5\u8df3\u51fa, \u8fd9\u4e2a\u8df3\u51fa\u6761\u4ef6\u53ef\u80fd\u662f\u5173\u952e\u7801\u8fd8\u672a\u641c\u7d22\u5b8c.\u8fd9\u91cc\u5c31\u53ef\u4ee5\u770b\u51fa, dlmalloc\u6811\u4e0e bitwise trie\u6811\u7684\u5dee\u5f02,\u503c\u5728\u7279\u5f81\u7801\u7684\u8def\u5f84\u4e0a\u7684\u4efb\u610f\u70b9. \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u4e48\u505a\u5462?\u56e0\u4e3adlmalloc\u7684\u5206\u7bb1\u673a\u5236,\u5bfc\u81f4\u4e86,\u5982\u679c\u641c\u7d22\u5b8c\u5173\u952e\u7801,\u5219 \u8be5\u7ed3\u70b9\u5fc5\u5b9a\u53ea\u5b58\u5728\u53f6\u5b50\u7ed3\u70b9\u4e0a. \u5728\u8fd9\u4e2a\u524d\u63d0\u4e0b,\u4e3a\u4e86\u8282\u7701\u5185\u5b58\u7a7a\u95f4, \u5728\u63d2\u5165\u7ed3\u70b9\u65f6,\u53ea\u8981\u5728\u5173\u952e\u7801\u7684\u8def\u5f84\u4e0a\u4e0d\u5b58\u5728\u88ab\u5360\u7528\u7684\u70b9,\u5c31\u5c06\u8be5\u503c\u63d2\u5165. \u5728\u67e5\u770b\u4e86  insert_large_chunk  \u540e\u4f1a\u6709\u66f4\u6e05\u6670\u7684\u4f53\u4f1a.  4474      rt = t- child[1];\n4475      t = t- child[(sizebits   (SIZE_T_BITSIZE-SIZE_T_ONE))   1];\n4476      if (rt != 0   rt != t)\n4477        rst = rt;\n4478      if (t == 0) {\n4479        t = rst; /* set t to least subtree holding sizes   nb */\n4480        break;\n4481      }\n4482      sizebits  = 1;  (sizebits   (SIZE_T_BITSIZE-SIZE_T_ONE))  \u8fd9\u4e2a\u5c31\u662f\u6bcf\u4e00\u5c42\u6811\u7684\u7279\u5f81\u7801\u4e86.\u7ed3\u5408\u4e0a\u9762sizebits\u7684\u503c,\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u4e3a  nb   (6 + (i   1)) . \u5982\u679c,\u6211\u4eec\u518d\u7ed3\u5408 compute_tree_index  \u4e2d\u7684\u7ed3\u679c,\u5f97\u5230\u5982\u4e0b\u8868.idx\u4e3a\u7bb1\u53f7,mem\u4e3a\u8be5\u7bb1\u5b50\u4e2d\u7684\u6700\u5c0f\u5185\u5b58,hex\u4e3a\u8be5\u503c\u768416\u8fdb\u5236,mid\u4e3a\u533a\u5206\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u7279\u5f81\u7801,bitshift\u4e3a\u7279\u5f81\u7801\u7684\u65e0\u6548\u4f4d\u6570. \u6bd4\u5982,\u7bb1\u5b501\u4e2d,dix\u4e3a1,\u5176\u8868\u793a\u7684\u5185\u5b58\u8303\u56f4\u4e3a[384, 512),\u5219\u5176\u5de6\u5b50\u6811\u8868\u793a\u8303\u56f4\u4e3a[384,448),\u53f3\u5b50\u6811\u4e3a[448,512).448\u5373\u4e3a\u8be5\u6811\u7684\u7b2c\u4e00\u5c42\u7684\u7279\u5f81\u7801,\u4e5f\u5c31\u662f111000000.\u5982\u679cnb   448, \u5219\u7b2c7\u4f4d\u4e3a0,\u5426\u5219\u7b2c7\u4f4d\u4e3a1.\u6240\u4ee5,\u53ea\u8981\u901a\u8fc7\u5c06size   bitshift \u4e4b\u540e\u4e0e1 \u505a\u4f4d\u4e0e\u8fd0\u7b97,\u5c31\u53ef\u4ee5\u5224\u65ad\u51fa\u5728\u8be5\u6811\u5bf9\u5e94\u5c42\u8be5\u8fdb\u5165\u5176\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811.  idx 0 mem 256 hex: 100  mid: 101000000 bitshift: 6\nidx 1 mem 384 hex: 180 mid: 111000000 bitshift: 6\nidx 2 mem 512 hex: 200 mid: 1110000000 bitshift: 7\nidx 3 mem 768 hex: 300 mid: 1010000000 bitshift: 7\nidx 4 mem 1024 hex: 400 mid: 10100000000 bitshift: 8\nidx 5 mem 1536 hex: 600 mid: 11100000000 bitshift: 8\nidx 6 mem 2048 hex: 800 mid: 101000000000 bitshift: 9\nidx 7 mem 3072 hex: c00 mid: 111000000000 bitshift: 9\nidx 8 mem 4096 hex: 1000 mid: 1010000000000 bitshift: 10\nidx 9 mem 6144 hex: 1800 mid: 1110000000000 bitshift: 10\nidx 10 mem 8192 hex: 2000 mid: 10100000000000 bitshift: 11\nidx 11 mem 12288 hex: 3000 mid: 11100000000000 bitshift: 11\nidx 12 mem 16384 hex: 4000 mid: 101000000000000 bitshift: 12\nidx 13 mem 24576 hex: 6000 mid: 111000000000000 bitshift: 12\nidx 14 mem 32768 hex: 8000 mid: 1010000000000000 bitshift: 13\nidx 15 mem 49152 hex: c000 mid: 1110000000000000 bitshift: 13\nidx 16 mem 65536 hex: 10000 mid 10100000000000000 bitshift: 14\nidx 17 mem 98304 hex: 18000 mid 11100000000000000 bitshift: 14\nidx 18 mem 131072 hex: 20000 mid 101000000000000000 bitshift: 15\nidx 19 mem 196608 hex: 30000 mid 111000000000000000 bitshift: 15\nidx 20 mem 262144 hex: 40000 mid 1010000000000000000 bitshift: 16\nidx 21 mem 393216 hex: 60000 mid 1110000000000000000 bitshift: 16\nidx 22 mem 524288 hex: 80000 mid 10100000000000000000 bitshift: 17\nidx 23 mem 786432 hex: c0000 mid 11100000000000000000 bitshift: 17\nidx 24 mem 1048576 hex: 100000 mid 101000000000000000000 bitshift: 18\nidx 25 mem 1572864 hex: 180000 mid 111000000000000000000 bitshift: 18\nidx 26 mem 2097152 hex: 200000 mid 1010000000000000000000 bitshift: 19\nidx 27 mem 3145728 hex: 300000 mid 1110000000000000000000 bitshift: 19\nidx 28 mem 4194304 hex: 400000 mid 10100000000000000000000 bitshift: 20\nidx 29 mem 6291456 hex: 600000 mid 11100000000000000000000 bitshift: 20\nidx 30 mem 8388608 hex: 800000 mid 101000000000000000000000 bitshift: 21\nidx 31 mem 12582912 hex: c00000 bitshift: 31  // \u56fe, dlammloc \u6811\u7684\u56fe.  4485  if (t == 0   v == 0) { /* set t to root of next non-empty treebin */\n4486    binmap_t leftbits = left_bits(idx2bit(idx))   m- treemap;\n4487    if (leftbits != 0) {\n4488      bindex_t i;\n4489      binmap_t leastbit = least_bit(leftbits);\n4490      compute_bit2idx(leastbit, i);\n4491      t = *treebin_at(m, i);\n4492    }\n4493  }  \u8fd9\u91cc\u5bf9\u5e94\u4e0a\u6587\u7684 4462  if ((t = *treebin_at(m, idx)) != 0) {  , \u4e5f\u5c31\u662f\u8bf4\u5728\u5f53\u524d\u5927\u5c0f\u7684\u7bb1\u5b50\u5185\u4e0d\u5b58\u5728\u7a7a\u95f2\u7684\u5185\u5b58\u5757,\u6240\u4ee5\u6211\u4eec\u8981\u628at\u8bbe\u7f6e\u4e3a\u6700\u8fd1\u7684\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u7bb1\u53f7. left_bits  \u548c  least_bit  \u8ddf\u4e0a\u6587\u5c0f\u5185\u5b58\u5bfb\u627e\u6700\u8fd1\u5b58\u5728\u7a7a\u95f2\u5185\u5b58\u5757\u7684\u7bb1\u5b50\u7b97\u6cd5\u4e00\u6837.  4495  while (t != 0) { /* find smallest of tree or subtree */\n4496    size_t trem = chunksize(t) - nb;\n4497    if (trem   rsize) {\n4498      rsize = trem;\n4499      v = t;\n4500    }\n4501    t = leftmost_child(t);\n4502  }  \u8fd9\u91cc\u8ddf tmalloc_small \u5bfb\u627e\u6700\u5de6\u5b50\u6811(\u6700\u5c0f\u5185\u5b58)\u7684\u7b97\u6cd5\u4e00\u6837.\u8fd9\u6bb5\u4ee3\u7801\u5bf9\u4e0a\u9762\u7684\u4e24\u79cd\u60c5\u51b5\u90fd\u6709\u6548.\u5373,\u5982\u679c\u5728\u5bf9\u5e94\u7bb1\u53f7\u6709\u7a7a\u95f2\u5185\u5b58,\u5728\u57fa\u4e8e\u6811\u7684\u641c\u7d22\u7b97\u6cd5\u627e\u5230\u7684t\u5c31\u662f\u6700\u5339\u914dnb\u7684\u5927\u5c0f,\u6240\u4ee5\u8fd9\u91cc\u7684while\u5faa\u73af\u7ed3\u679ct\u5c31\u4e0d\u4f1a\u6539\u53d8;\u5982\u679c\u662f,\u5bfb\u627e\u6700\u8fd1\u6709\u7a7a\u95f2\u5757\u7684\u6811,\u90a3\u4e48\u8be5\u6811\u7684\u6700\u5c0f\u5185\u5b58\u90fd\u5927\u4e8e\u8bf7\u6c42\u5927\u5c0fnb,\u6240\u4ee5\u76f4\u63a5\u5bfb\u627e\u6700\u5de6\u5b50\u6811.   4505  if (v != 0   rsize   (size_t)(m- dvsize - nb)) {\n4506    if (RTCHECK(ok_address(m, v))) { /* split */\n4507      mchunkptr r = chunk_plus_offset(v, nb);\n4508      assert(chunksize(v) == rsize + nb);\n4509      if (RTCHECK(ok_next(v, r))) {\n4510        unlink_large_chunk(m, v);\n4511        if (rsize   MIN_CHUNK_SIZE)\n4512          set_inuse_and_pinuse(m, v, (rsize + nb));\n4513        else {\n4514          set_size_and_pinuse_of_inuse_chunk(m, v, nb);\n4515          set_size_and_pinuse_of_free_chunk(r, rsize);\n4516          insert_chunk(m, r, rsize);\n4517        }\n4518        return chunk2mem(v);\n4519      }\n4520    }\n4521    CORRUPTION_ERROR_ACTION(m);\n4522  }\n4523  return 0;  \u63a5\u4e0b\u6765,\u53ea\u8981\u6c42\u9876\u627e\u5230\u7684\u5185\u5b58\u5757\u6bd4dv chunk\u66f4\u5408\u9002,\u5219\u6267\u884c\u4e00\u822c\u7684\u5185\u5b58\u5757\u6536\u5c3e\u5904\u7406,\u7136\u540e\u8fd4\u56de.\u5982\u679cdv chunk\u66f4\u5408\u9002,\u6211\u4eec\u8fd4\u56de0, \u53c2\u8003\u4ee3\u7801 4654      if (gm- treemap != 0   (mem = tmalloc_large(gm, nb)) != 0) { , \u5c31\u4f1a\u7ee7\u7eed\u6309\u7167\u5185\u5b58\u5206\u914d\u89c4\u5219\u5f80\u4e0b\u8d70.", 
            "title": "\u5927\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e00"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#_11", 
            "text": "\u5982\u679cnb\u7684\u5927\u5c0f   dv chunk\u7684\u5927\u5c0f,\u5219\u4f7f\u7528dv chunk\u5206\u914d\u5185\u5b58.\u5c3d\u91cf\u4fdd\u8bc1\u8fde\u7eed\u7684\u5185\u5b58\u8bf7\u6c42\u5728\u865a\u62df\u5185\u5b58\u4e0a\u8fde\u7eed.  4660    if (nb  = gm- dvsize) {\n4661      size_t rsize = gm- dvsize - nb;\n4662      mchunkptr p = gm- dv;\n4663      if (rsize  = MIN_CHUNK_SIZE) { /* split dv */\n4664        mchunkptr r = gm- dv = chunk_plus_offset(p, nb);\n4665        gm- dvsize = rsize;\n4666        set_size_and_pinuse_of_free_chunk(r, rsize);\n4667        set_size_and_pinuse_of_inuse_chunk(gm, p, nb);\n4668      }\n4669      else { /* exhaust dv */\n4670        size_t dvs = gm- dvsize;\n4671        gm- dvsize = 0;\n4672        gm- dv = 0;\n4673        set_inuse_and_pinuse(gm, p, dvs);\n4674      }\n4675      mem = chunk2mem(p);\n4676      check_malloced_chunk(gm, mem, nb);\n4677      goto postaction;\n4678    }  \u5207\u5206dv chunk, \u7136\u540e\u5c31\u662f\u57fa\u672c\u7684\u57df\u8bbe\u7f6e.\u8fd4\u56de\u7ed9\u7528\u6237.", 
            "title": "\u5927\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e8c"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#_12", 
            "text": "4680    else if (nb   gm- topsize) { /* Split top */\n4681      size_t rsize = gm- topsize -= nb;\n4682      mchunkptr p = gm- top;\n4683      mchunkptr r = gm- top = chunk_plus_offset(p, nb);\n4684      r- head = rsize | PINUSE_BIT;\n4685      set_size_and_pinuse_of_inuse_chunk(gm, p, nb);\n4686      mem = chunk2mem(p);\n4687      check_top_chunk(gm, gm- top);\n4688      check_malloced_chunk(gm, mem, nb);\n4689      goto postaction;\n4690    }  \u8ddfdv chunk\u7c7b\u4f3c.\u96be\u70b9\u5176\u5b9e\u662f\u627e\u5230\u7b26\u5408\u7684chunk.\u50cfdv chunk \u548ctop chunk\u90fd\u662f\u627e\u5230\u4e86\u7684,\u5c31\u76f4\u63a5\u5206\u914d.", 
            "title": "\u5927\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u56db"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#_13", 
            "text": "\u8c03\u7528\u7cfb\u7edf\u51fd\u6570\u8fdb\u884c\u5185\u5b58\u5206\u914d.\u8fd9\u91cc\u4f7f\u7528\u5230\u4e86segment.  4692    mem = sys_alloc(gm, nb);\n4693\n4694  postaction:\n4695    POSTACTION(gm);\n4696    return mem;\n4697  }\n4698\n4699  return 0;  \u5148\u8bf4\u4e0b sys_alloc \u7684\u89c4\u5219:   \u4f18\u5148\u4f7f\u7528MORECORE(sbrk())\u5206\u914d\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4  \u4f7f\u7528mmap\u5206\u914d\u4e0d\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4  \u4f7f\u7528sbrk()\u5206\u914d\u4e0d\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4.   sbrk\u5b9e\u9645\u4e0a\u662f\u5bf9\u8fdb\u7a0b\u7684\u6570\u636e\u6bb5\u8fdb\u884c\u6269\u5c55,\u8fd4\u56de\u589e\u957f\u7684\u533a\u57df\u7684\u57fa\u5730\u5740.  4059  /* Directly map large chunks, but only if already initialized */\n4060  if (use_mmap(m)   nb  = mparams.mmap_threshold   m- topsize != 0) {\n4061    void* mem = mmap_alloc(m, nb);\n4062    if (mem != 0)\n4063      return mem;\n4064  }  \u5982\u679c\u4f7f\u7528mmap\u7684\u6807\u5fd7\u88ab\u7f6e\u4e0a\u5e76\u4e14nb  = mmap\u7684\u9600\u503c,\u5219\u76f4\u63a5\u4f7f\u7528mmap.  4066  asize = granularity_align(nb + SYS_ALLOC_PADDING);  \u505a\u5bf9\u9f50\u5904\u7406.  4105  if (MORECORE_CONTIGUOUS   !use_noncontiguous(m)) {\n4106    char* br = CMFAIL;\n4107    size_t ssize = asize; /* sbrk call size */\n4108    msegmentptr ss = (m- top == 0)? 0 : segment_holding(m, (char*)m- top);\n4109    ACQUIRE_MALLOC_GLOBAL_LOCK();  \u6211\u4eec\u770b\u4e0b segment_holding \u51fd\u6570.  2698static msegmentptr segment_holding(mstate m, char* addr) {\n2699  msegmentptr sp =  m- seg;\n2700  for (;;) {\n2701    if (addr  = sp- base   addr   sp- base + sp- size)\n2702      return sp;\n2703    if ((sp = sp- next) == 0)\n2704      return 0;\n2705  }\n2706}  segment\u5b9e\u9645\u4e0a\u662f\u7531\u5355\u5411\u94fe\u8868\u7ba1\u7406\u7684,\u4f46\u7531\u4e8e\u4f7f\u7528\u5230segment\u7684\u60c5\u51b5\u975e\u5e38\u5c11,\u6240\u4ee5,\u4e5f\u6ca1\u6709\u4ec0\u4e48\u6548\u7387\u95ee\u9898.\n\u8fd9\u91cc\u7684\u529f\u80fd\u5c31\u662f\u5bfb\u627eaddr\u6240\u5c5e\u7684segment\u5757\u7684\u5730\u5740,\u5e76\u8fd4\u56de.\u7ed3\u5408\u4e0a\u9762\u7684,ss\u5b9e\u9645\u4e0a\u5c31\u662ftop chunk\u6240\u5728\u7684segment\u7684\u57fa\u5730\u5740.  4111    if (ss == 0) {  /* First time through or recovery */\n4112      char* base = (char*)CALL_MORECORE(0);\n4113      if (base != CMFAIL) {\n4114        size_t fp;\n4115        /* Adjust to end on a page boundary */\n4116        if (!is_page_aligned(base))\n4117          ssize += (page_align((size_t)base) - (size_t)base);\n4118        fp = m- footprint + ssize; /* recheck limits */\n4119        if (ssize   nb   ssize   HALF_MAX_SIZE_T  \n4120            (m- footprint_limit == 0 ||\n4121             (fp   m- footprint   fp  = m- footprint_limit))  \n4122            (br = (char*)(CALL_MORECORE(ssize))) == base) {\n4123          tbase = base;\n4124          tsize = ssize;\n4125        }\n4126      }\n4127    }  \u8fd9\u91cc\u5c31\u662f\u5904\u7406top chunk\u4e3aNULL \u65f6\u7684\u60c5\u51b5, \u4e5f\u5c31\u662f\u7b2c\u4e00\u6b21\u8bf7\u6c42\u5185\u5b58\u5206\u914d,\u56e0\u4e3atop\u4e3a0. CALL_MORECORE \u5b8f\u5c55\u5f00\u6765\u5c31\u662f sbrk .\u8fd9\u91cc\u662f\u83b7\u53d6\u5f53\u524d\u7684program break\u7684\u5730\u5740.\nssize\u5c31\u662f\u8bf7\u6c42\u589e\u52a0\u7684\u5927\u5c0f,\u7136\u540e\u518d\u6b21\u8c03\u7528sbrk.  4128    else {\n4129      /* Subtract out existing available top space from MORECORE request. */\n4130      ssize = granularity_align(nb - m- topsize + SYS_ALLOC_PADDING);\n4131      /* Use mem here only if it did continuously extend old space */\n4132      if (ssize   HALF_MAX_SIZE_T  \n4133          (br = (char*)(CALL_MORECORE(ssize))) == ss- base+ss- size) {\n4134        tbase = br;\n4135        tsize = ssize;\n4136      }\n4137    }  \u5bf9\u5e94top chunk \u5b58\u5728\u7684\u60c5\u51b5.\u76f4\u63a5\u6269\u5c55top chunk\u6240\u5728\u7684segment.\n\u4e0a\u9762\u4e24\u79cd\u60c5\u51b5\u7684tbase\u90fd\u6307\u5411\u589e\u957f\u7684\u5757\u7684\u57fa\u5730\u5740,tsize\u6307\u5411\u589e\u957f\u7684\u5927\u5c0f.  4139    if (tbase == CMFAIL) {    /* Cope with partial failure */\n4140      if (br != CMFAIL) {    /* Try to use/extend the space we did get */\n4141        if (ssize   HALF_MAX_SIZE_T  \n4142            ssize   nb + SYS_ALLOC_PADDING) {\n4143          size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - ssize);\n4144          if (esize   HALF_MAX_SIZE_T) {\n4145            char* end = (char*)CALL_MORECORE(esize);\n4146            if (end != CMFAIL)\n4147              ssize += esize;\n4148            else {            /* Can t use; try to release */\n4149              (void) CALL_MORECORE(-ssize);\n4150              br = CMFAIL;\n4151            }\n4152          }\n4153        }\n4154      }\n4155      if (br != CMFAIL) {    /* Use the space we did get */\n4156        tbase = br;\n4157        tsize = ssize;\n4158      }\n4159      else\n4160        disable_contiguous(m); /* Don t try contiguous path in the future */\n4161    }\n4162\n4163    RELEASE_MALLOC_GLOBAL_LOCK();  \u5982\u679c\u90e8\u5206\u5931\u8d25\u4e86,\u5373\u4e0a\u6587\u7684tbase\u8d4b\u503c\u65f6,if\u6761\u4ef6\u90e8\u5206\u4e0d\u6ee1,\u4e5f\u5c31\u662f,\u8bf7\u6c42\u7684ssize   HALF_MAX_SIZE_T(ffffffff/2)\u6216\u8005\u5176\u4ed6\u7684\u60c5\u51b5.\u5219\u6211\u4eec\u7ee7\u7eed\u4f7f\u7528br\u7684\u5730\u5740\u8fdb\u884c\u6269\u5c55.\u4e0d\u8fc7\u4e00\u822c\u60c5\u51b5\u4e0btbase == CMFAIL \u65f6, br == CFAIL.\u4ece\u8fd9\u90e8\u5206\u7684\u4ee3\u7801\u903b\u8f91\u770b,\u5e94\u8be5\u662f\u975e\u8fde\u7eed\u7684sbrk\u7684\u903b\u8f91.  4166  if (HAVE_MMAP   tbase == CMFAIL) {  /* Try MMAP */\n4167    char* mp = (char*)(CALL_MMAP(asize));\n4168    if (mp != CMFAIL) {\n4169      tbase = mp;\n4170      tsize = asize;\n4171      mmap_flag = USE_MMAP_BIT;\n4172    }\n4173  }  \u5c1d\u8bd5 mmap.  4175  if (HAVE_MORECORE   tbase == CMFAIL) { /* Try noncontiguous MORECORE */\n4176    if (asize   HALF_MAX_SIZE_T) {\n4177      char* br = CMFAIL;\n4178      char* end = CMFAIL;\n4179      ACQUIRE_MALLOC_GLOBAL_LOCK();\n4180      br = (char*)(CALL_MORECORE(asize));\n4181      end = (char*)(CALL_MORECORE(0));\n4182      RELEASE_MALLOC_GLOBAL_LOCK();\n4183      if (br != CMFAIL   end != CMFAIL   br   end) {\n4184        size_t ssize = end - br;\n4185        if (ssize   nb + TOP_FOOT_SIZE) {\n4186          tbase = br;\n4187          tsize = ssize;\n4188        }\n4189      }\n4190    }\n4191  }  \u5c1d\u8bd5\u975e\u8fde\u7eed\u7684sbrk.  4198    if (!is_initialized(m)) { /* first-time initialization */\n4199      if (m- least_addr == 0 || tbase   m- least_addr)\n4200        m- least_addr = tbase;\n4201      m- seg.base = tbase;\n4202      m- seg.size = tsize;\n4203      m- seg.sflags = mmap_flag;\n4204      m- magic = mparams.magic;\n4205      m- release_checks = MAX_RELEASE_CHECK_RATE;\n          // \u521d\u59cb\u5316 \u6240\u6709\u7684\u7bb1\u5b50. 32bit\u5168\u7f6e0\n4206      init_bins(m);\n4207#if !ONLY_MSPACES\n4208      if (is_global(m))\n            // \u521d\u59cb\u5316top chunk.\n4209        init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);\n4210      else\n4211#endif\n4212      {\n4213        /* Offset top by embedded malloc_state */\n4214        mchunkptr mn = next_chunk(mem2chunk(m));\n            // \u521d\u59cb\u5316top chunk.\n4215        init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) -TOP_FOOT_SIZE);\n4216      }\n4217    }  \u5728\u8fd9\u91cc,\u624d\u662f\u771f\u6b63\u5730\u5bf9\u5185\u5b58\u7ba1\u7406\u7684\u4e00\u4e9b\u7ed3\u6784\u4f53\u8fdb\u884c\u521d\u59cb\u5316.  4219    else {\n4220      /* Try to merge with an existing segment */\n4221      msegmentptr sp =  m- seg;\n4222      /* Only consider most recent segment if traversal suppressed */\n4223      while (sp != 0   tbase != sp- base + sp- size)\n4224        sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp- next;\n4225      if (sp != 0  \n4226          !is_extern_segment(sp)  \n4227          (sp- sflags   USE_MMAP_BIT) == mmap_flag  \n4228          segment_holds(sp, m- top)) { /* append */\n4229        sp- size += tsize;\n4230        init_top(m, m- top, m- topsize + tsize);\n4231      }\n4232      else {\n4233        if (tbase   m- least_addr)\n4234          m- least_addr = tbase;\n4235        sp =  m- seg;\n4236        while (sp != 0   sp- base != tbase + tsize)\n4237          sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp- next;\n4238        if (sp != 0  \n4239            !is_extern_segment(sp)  \n4240            (sp- sflags   USE_MMAP_BIT) == mmap_flag) {\n4241          char* oldbase = sp- base;\n4242          sp- base = tbase;\n4243          sp- size += tsize;\n4244          return prepend_alloc(m, tbase, oldbase, nb);\n4245        }\n4246        else\n4247          add_segment(m, tbase, tsize, mmap_flag);\n4248      }\n4249    }  \u903b\u8f91\u5f88\u7b80\u5355,\u5c31\u662f\u5982\u679c\u65b0\u5206\u914d\u7684segemnt\u7684\u57fa\u5730\u5740\u662f\u67d0\u4e2asegment\u7684\u5c3e\u5730\u5740,\u5219\u8fd9\u4e24\u4e2a\u5408\u5e76,\u5426\u5219,\u76f4\u63a5\u5c06\u8be5\u65b0\u7684segment\u52a0\u5165\u5230\u5355\u5411\u94fe\u8868\u4e2d.  4251    if (nb   m- topsize) { /* Allocate from new or extended top space */\n4252      size_t rsize = m- topsize -= nb;\n4253      mchunkptr p = m- top;\n4254      mchunkptr r = m- top = chunk_plus_offset(p, nb);\n4255      r- head = rsize | PINUSE_BIT;\n4256      set_size_and_pinuse_of_inuse_chunk(m, p, nb);\n4257      check_top_chunk(m, m- top);\n4258      check_malloced_chunk(m, chunk2mem(p), nb);\n4259      return chunk2mem(p);\n4260    }\n4261  }  \u5982\u679c\u662f\u7b2c\u4e00\u6b21\u5185\u5b58\u5206\u914d,\u5219\u903b\u8f91\u5c06\u4f1a\u5230\u8fd9\u91cc,\u5728top chunk\u521d\u59cb\u5316\u540e,\u5c1d\u8bd5\u4ecetop chunk\u5206\u914d\u5185\u5b58.", 
            "title": "\u5927\u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219\u4e94"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#dlfree", 
            "text": "dlfree\u5c31\u6ca1\u6709dlmalloc\u90a3\u4e48\u591a\u89c4\u5219\u4e86,\u53ea\u8981\u4fdd\u8bc1\u8fb9\u754c\u6807\u8bb0\u6cd5,\u4fdd\u8bc1\u91ca\u653e\u7684\u5185\u5b58\u5757\u5b58\u653e\u5230\u5bf9\u5e94\u7684\u7bb1\u5b50\u4e2d\u5373\u53ef.  4704void dlfree(void* mem) { \n4711  if (mem != 0) {  \u68c0\u67e5mem\u5408\u6cd5\u6027.  4711  if (mem != 0) {\n        //\u5c06mem\u8f6c\u6362\u6210chunk p\n4712    mchunkptr p  = mem2chunk(mem);\n4713#if FOOTERS\n4714    mstate fm = get_mstate_for(p);\n4715    if (!ok_magic(fm)) {\n4716      USAGE_ERROR_ACTION(fm, p);\n4717      return;\n4718    }\n4719#else /* FOOTERS */\n4720#define fm gm\n4721#endif /* FOOTERS */ \n4722    if (!PREACTION(fm)) {\n          // \u68c0\u67e5\u6807\u5fd7\u4f4d\u662f\u5426\u4e3ainuse.\n4723      check_inuse_chunk(fm, p);\n4724      if (RTCHECK(ok_address(fm, p)   ok_inuse(p))) {\n            // \u83b7\u53d6chunksize\n4725        size_t psize = chunksize(p);\n            // \u83b7\u53d6\u5728\u5185\u5b58\u4e0a\u76f8\u8fde\u7684\u4e0b\u4e00\u4e2a\u5185\u5b58chunk.\n4726        mchunkptr next = chunk_plus_offset(p, psize);   \u5c06\u7528\u6237\u6307\u9488\u8f6c\u6362\u4e3achunk\u7ed3\u6784\u4f53\u5e76\u505a\u5e38\u89c4\u68c0\u67e5.              // \u4e0a\u4e00\u4e2a\u5185\u5b58\u5757\u672a\u88ab\u4f7f\u7528\n4727        if (!pinuse(p)) {\n4728          size_t prevsize = p- prev_foot;\n4729          if (is_mmapped(p)) {\n                // \u662f\u901a\u8fc7\u7cfb\u7edfmmap\u5206\u914d\u7684\n4730            psize += prevsize + MMAP_FOOT_PAD;\n4731            if (CALL_MUNMAP((char*)p - prevsize, psize) == 0)\n4732              fm- footprint -= psize;\n4733            goto postaction;\n4734          }\n4735          else {\n               // \u4e0e\u4e0a\u4e00\u4e2a\u5185\u5b58\u5757\u5408\u5e76\n4736            mchunkptr prev = chunk_minus_offset(p, prevsize);\n4737            psize += prevsize;\n4738            p = prev;\n4739            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */\n4740              if (p != fm- dv) {\n                    // p \u4e0d\u4e3a dv chunk, \u76f4\u63a5\u79fb\u9664.\n4741                unlink_chunk(fm, p, prevsize);\n4742              }\n4743              else if ((next- head   INUSE_BITS) == INUSE_BITS) {\n                    // \u5426\u5219,\u5408\u5e76\u5230dv chunk\u4e2d.\n4744                fm- dvsize = psize;\n4745                set_free_with_pinuse(p, psize, next);\n4746                goto postaction;\n4747              }\n4748            }\n4749            else\n4750              goto erroraction;\n4751          }\n4752        }   \u4e0e\u524d\u4e00\u5757\u5185\u5b58\u5408\u5e76\u7684\u903b\u8f91.  4754        if (RTCHECK(ok_next(p, next)   ok_pinuse(next))) {  ok_pinuse(next)\u5b9e\u9645\u4e0a\u5c31\u662fcinuse(p). \u53ea\u662f\u8fd9\u91cc\u662f\u68c0\u67e5next\u7684\u6807\u5fd7\u4f4d\u662f\u5426\u6b63\u786e.                // next \u672a\u88ab\u4f7f\u7528, \u5219\u9700\u8981\u5408\u5e76.\n4755          if (!cinuse(next)) {  /* consolidate forward */\n4756            if (next == fm- top) {\n                  // \u5982\u679cnext\u4e3atop, \u5219top\u589e\u957f.\u57fa\u5730\u5740\u6539\u4e3ap.\n4757              size_t tsize = fm- topsize += psize;\n4758              fm- top = p;\n4759              p- head = tsize | PINUSE_BIT;\n4760              if (p == fm- dv) {\n                    // \u5982\u679cp\u4e3adv, \u5219\u6e05\u7a7adv.\n4761                fm- dv = 0;\n4762                fm- dvsize = 0;\n4763              }\n                  // \u68c0\u67e5top chunk\u7684\u5927\u5c0f\u662f\u5426\u9700\u8981\u8c03\u6574,\u9ed8\u8ba4\u6700\u5927\u4e3a 2 * 1024 * 1024\n4764              if (should_trim(fm, tsize))\n4765                sys_trim(fm, 0);\n4766              goto postaction;\n4767            }\n4768            else if (next == fm- dv) {\n                  // \u5982\u679cnext\u4e3adiv, \u5219dv\u589e\u957f, \u57fa\u5730\u5740\u6539\u4e3ap\n4769              size_t dsize = fm- dvsize += psize;\n4770              fm- dv = p;\n4771              set_size_and_pinuse_of_free_chunk(p, dsize);\n4772              goto postaction;\n4773            }\n4774            else {\n                  // next\u4e3a\u666e\u901a\u7684\u5185\u5b58\u5757,\u5c06next\u5408\u5e76\u5230p,\u5e76\u5c06next\u51b2\u94fe\u8868\u6216\u8005\u6811\u4e2d\u5220\u9664.\n4775              size_t nsize = chunksize(next);\n4776              psize += nsize;\n4777              unlink_chunk(fm, next, nsize);\n4778              set_size_and_pinuse_of_free_chunk(p, psize);\n4779              if (p == fm- dv) {\n4780                fm- dvsize = psize;\n4781                goto postaction;\n4782              }\n4783            }\n              // \u4e0e\u540e\u4e00\u5757\u5185\u5b58\u5408\u5e76\u7684\u903b\u8f91.\n4785          else\n4786            set_free_with_pinuse(p, psize, next);  \u5f53\u7136,\u5982\u679c\u4e0d\u9700\u8981\u5408\u5e76,\u5219\u76f4\u63a5\u5220\u9664.  \u4ee5\u4e0a\u90fd\u53ea\u662f\u5408\u5e76\u5757,\u5e76\u5220\u9664\u88ab\u5408\u5e76\u7684\u7ed3\u70b9,\u63a5\u4e0b\u6765\u5c31\u662f\u5c06\u5408\u5e76\u540e\u7684\u5757\u63d2\u5165\u5230\u6b63\u786e\u7684\u7bb1\u5b50\u7684\u7ed3\u6784\u4e2d.  4788          if (is_small(psize)) {\n                // \u5408\u5e76\u5904\u7406\u540e\u7684\u5185\u5b58\u4e3a\u5c0f\u5185\u5b58\n                // \u5df2\u5728\u4e0a\u6587\u4ecb\u7ecd\u8fc7\u8be5\u51fd\u6570.\n4789            insert_small_chunk(fm, p, psize);\n4790            check_free_chunk(fm, p);\n4791          }\n4792          else {\n                // \u5408\u5e76\u540e\u4e3a\u5927\u5185\u5b58\n4793            tchunkptr tp = (tchunkptr)p;\n4794            insert_large_chunk(fm, tp, psize);\n4795            check_free_chunk(fm, p);\n4796            if (--fm- release_checks == 0)\n4797              release_unused_segments(fm);\n4798          }\n4799          goto postaction;\n4800        }\n4801      }\n4802    erroraction:\n4803      USAGE_ERROR_ACTION(fm, p);\n4804    postaction:\n4805      POSTACTION(fm);\n4806    }\n4807  }    insert_small_chunk  \u5df2\u7ecf\u5728\u4e0a\u6587\u4ecb\u7ecd\u8fc7.\u5b9e\u9645\u884c\u4e3a\u5c31\u662f\u6839\u636e\u5185\u5b58\u5927\u5c0f\u627e\u7bb1\u53f7,\u5982\u679c\u8be5\u7bb1\u5b50\u672c\u8eab\u4e3a\u7a7a,\u5219\u4fee\u6539binmap\u72b6\u6001\u5e76\u63d2\u5165\u8be5chunk.\u5982\u679c\u4e0d\u4e3a\u7a7a,\u5219\u6267\u884c\u53cc\u5411\u94fe\u8868\u63d2\u5165.\n\u800c insert_large_chunk \u662f\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u7684 unlink_large_chunk \u7684\u9006\u64cd\u4f5c.\u540c\u6837\u662f\u5b9a\u4f4d\u7bb1\u53f7,\u904d\u5386\u6811.\u7136\u540e\u627e\u5230\u5bf9\u5e94\u8be5\u5927\u5c0f\u7684\u7ed3\u70b9.\u5b83\u5b58\u5728\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5:   \u8be5\u7bb1\u5b50\u4e2d\u4e0d\u5b58\u5728\u6811. \u5219\u521b\u5efa\u5e76\u5c06\u8be5\u7ed3\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9.  \u5df2\u5b58\u5728\u6811,\u4f46\u4e0d\u5b58\u5728\u5bf9\u5e94\u5927\u5c0f\u7684\u7ed3\u70b9, \u5219\u63d2\u5165\u7ed3\u70b9.  \u5df2\u5b58\u5728\u6811,\u4e14\u5b58\u5728\u5bf9\u5e94\u5927\u5c0f\u7684\u7ed3\u70b9,\u5219\u63d2\u5165\u53cc\u5411\u94fe\u8868   3662#define insert_large_chunk(M, X, S) {\\ \n3663  tbinptr* H;\\ \n3664  bindex_t I;\\ \n3665  compute_tree_index(S, I);\\ \n3666  H = treebin_at(M, I);\\ \n3667  X- index = I;\\ \n3668  X- child[0] = X- child[1] = 0;\\ \n3669  if (!treemap_is_marked(M, I)) {\\ \n3670    mark_treemap(M, I);\\ \n3671    *H = X;\\ \n3672    X- parent = (tchunkptr)H;\\ \n3673    X- fd = X- bk = X;\\ \n3674  }\\\n\n//\u4e0a\u9762\u4e3a\u60c5\u51b5\u4e00. \u5c06treemap \u5bf9\u5e94I\u7684\u4f4d\u7f6e\u7f6e1,\u5e76\u5c06\u8be5\u7ed3\u70b9\u4f5c\u4e3a\u6811\u7684\u6839\u7ed3\u70b9.\n\n3675  else {\\ \n3676    tchunkptr T = *H;\\ \n3677    size_t K = S   leftshift_for_tree_index(I);\\ \n3678    for (;;) {\\ \n3679      if (chunksize(T) != S) {\\ \n3680        tchunkptr* C =  (T- child[(K   (SIZE_T_BITSIZE-SIZE_T_ONE))   1]);\\ \n3681        K  = 1;\\ \n3682        if (*C != 0)\\ \n3683          T = *C;\\ \n3684        else if (RTCHECK(ok_address(M, C))) {\\ \n3685          *C = X;\\ \n3686          X- parent = T;\\ \n3687          X- fd = X- bk = X;\\ \n3688          break;\\ \n3689        }\\ \n3690        else {\\ \n3691          CORRUPTION_ERROR_ACTION(M);\\ \n3692          break;\\ \n3693        }\\ \n3694      }\\\n// \u4e0a\u9762\u4e3a\u60c5\u51b5\u4e8c, \u5728\u5173\u952e\u7801\u8def\u5f84\u4e0a\u5b58\u5728\u7a7a\u7ed3\u70b9,\u5219\u63d2\u5165\u8be5\u7ed3\u70b9.\n3695      else {\\ \n3696        tchunkptr F = T- fd;\\ \n3697        if (RTCHECK(ok_address(M, T)   ok_address(M, F))) {\\\n3698          T- fd = F- bk = X;\\ \n3699          X- fd = F;\\ \n3700          X- bk = T;\\ \n3701          X- parent = 0;\\ \n3702          break;\\ \n3703        }\\ \n3704        else {\\ \n3705          CORRUPTION_ERROR_ACTION(M);\\ \n3706          break;\\ \n3707        }\\ \n3708      }\\ \n3709    }\\ \n3710  }\\\n\n// \u4e0a\u9762\u4e3a\u60c5\u51b5\u4e09,\u8be5\u5927\u5c0f\u7684\u7ed3\u70b9\u5b58\u5728,\u5219\u63d2\u5165\u53cc\u5411\u94fe\u8868.", 
            "title": "dlfree\u4ee3\u7801\u5206\u6790"
        }, 
        {
            "location": "/2014-03-05-dlmalloc\u6d45\u6790/#_14", 
            "text": "\u6570\u636e\u7ed3\u6784\u603b\u7ed3   dlmalloc\u4e2d\u6309\u7167\u5185\u5b58\u7684\u7c92\u5ea6\u5927\u5c0f,\u5206\u4e3achunk\u548csegment\u4e24\u79cd\u6570\u636e\u7ed3\u6784.  dlmalloc\u4e2d\u6309\u7167\u5185\u5b58\u7684\u5927\u5c0f,\u67093\u79cd\u5185\u5b58\u7ba1\u7406\u65b9\u5f0f,\u518d\u52a0\u4e0a\u8fb9\u754c\u6807\u8bb0\u6cd5,\u603b\u5171\u56db\u79cd\u7ba1\u7406\u65b9\u5f0f:  \u8fb9\u754c\u6807\u8bb0\u6cd5\uff0c\u5e76\u4e14\u4efb\u610f\u76f8\u8fde\u4e24\u5757\u5185\u5b58\u4e0d\u540c\u4e3a\u7a7a\u95f2\u5185\u5b58.  \u53cc\u5411\u94fe\u8868\u7ba1\u7406\u5927\u5c0f\u5c0f\u4e8e256byte\u7684\u5185\u5b58.  dlmalloc\u6811\u4e0e\u53cc\u5411\u94fe\u8868\u7ed3\u5408\u7ba1\u7406\u5927\u5c0f\u5927\u4e8e256byte\u7684\u5185\u5b58.  \u5355\u5411\u94fe\u8868\u7ba1\u7406segment\u7ed3\u6784.    dlmalloc\u901a\u8fc7\u4e24\u4e2a\u4f4d\u56fe\u5206\u522b\u7ba1\u7406\u53cc\u5411\u94fe\u8868\u548cdlmalloc\u6811.   +---------------------------segment-------------------------------------+\n+  0X10   |  0X12  |  0x109 |  0x110 |                                  +\n+ chunk0  | chunk1 | chunk2 | chunk3 |            top                   +\n+-----------------------------------------------------------------------+  \u4e0a\u9762\u7684\u6570\u5b57\u4e3achunk\u7ed3\u6784\u4f53\u4e2d\u7684size.\nchunk0\u548cchunk1 \u90fd\u4e3a\u5c0f\u5185\u5b58,\u5927\u5c0f\u4e3a0x10, 16byte.\u800c chunk1 \u76840x02\u662f\u8868\u793achunk0\u8868\u793a\u81ea\u5df1\u4f7f\u7528.chunk0 \u5f52\u5c5e\u4e0e\u7bb1\u53f7\u4e3a2,\u7531\u53cc\u5411\u94fe\u8868\u7ba1\u7406.\nchunk2\u548cchunk3 \u4e3a\u5927\u5185\u5b58, \u5927\u5c0f\u4e3a0x108, 264byte. chunk2 \u5927\u5c0f | 0x01\u8868\u793a\u524d\u4e00\u4e2a\u5185\u5b58\u5757\u88ab\u4f7f\u7528. chunk3 | 0x02 \u56e0\u4e3a\u81ea\u5df1\u5728\u88ab\u4f7f\u7528. \u8fd9\u4e24\u4e2a\u5f52\u5c5e\u4e0e\u7bb1\u53f7\u4e3a0\u7684\u6811\u7ba1\u7406.\n\u6700\u540e \u662ftop\u5757.  setgment\u7531\u7cfb\u7edf\u901a\u8fc7sbrk\u5206\u914d.\ntop \u4ecesegment\u800c\u6765.\u5982\u679ctop\u8d85\u8fc7\u4e00\u4e2a\u9600\u503c,\u5c31\u4f1a\u901a\u8fc7sbrk,\u7f29\u5c0f.\u5982\u679c\u592a\u5c0f,\u901a\u8fc7sbrk\u6269\u5927top.\n\u5404\u4e2achunk \u7531 top\u5207\u5206, \u6216\u8005free\u65f6, \u6216\u8005dv chunk\u88ab\u66ff\u6362\u65f6\u4ea7\u751f.  \u7b97\u6cd5\u603b\u7ed3:    \u5c0f\u5185\u5b58\u5206\u914d\u89c4\u5219   \u8ddf\u636e\u8bf7\u6c42\u5927\u5c0f,\u4f18\u5148\u5bfb\u627e\u6700\u5339\u914d\u7684\u7bb1\u5b50,\u4e4b\u540e\u4e34\u8fd1\u7bb1\u5b50.\u5728\u80fd\u4e0d\u5206\u5272\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\u5c3d\u91cf\u4e0d\u5206\u5272\u5185\u5b58.  \u5982\u679cdv chunk\u8db3\u591f\u5927,\u5219\u4f7f\u7528dv chunk.  \u5982\u679c\u524d\u4e24\u4e2a\u4e0d\u6ee1\u8db3,\u5219\u5728smallbin\u4e2d\u5bfb\u627e\u6700\u63a5\u8fd1\u8bf7\u6c42\u5927\u5c0f\u7684\u7a7a\u95f2\u5757\u7bb1\u53f7.  \u5982\u679ctop \u8db3\u591f\u5927,\u4f7f\u7528top.  \u5982\u679c\u8bf7\u6c42\u5185\u5b58\u5b9e\u5728\u592a\u5927,\u5219\u4f7f\u7528\u7cfb\u7edf\u5206\u914d.     \u5927\u5185\u5b58\u5206\u914d\u89c4\u5219   \u5982\u679ctreebin\u4e2d\u627e\u5230\u6700\u5408\u9002\u7684\u6700\u5c0f\u5185\u5b58,\u5982\u679c\u5b83\u6bd4dv chunk\u66f4\u5408\u9002,\u5c31\u4f7f\u7528\u5b83.  \u5982\u679cdv chunk\u6bd4\u5176\u4ed6\u6240\u6709\u5408\u9002,\u5219\u4f7f\u7528dv chunk.  \u5982\u679ctop \u8db3\u591f\u5927,\u5219\u4f7f\u7528top.  \u5982\u679c\u8bf7\u6c42\u5927\u5c0f  = mmap\u7684\u9600\u503c,\u5219\u4f7f\u7528mmap.  \u76f4\u63a5\u4ece\u7cfb\u7edf\u5206\u914d\u5185\u5b58.     \u5185\u5b58\u91ca\u653e\u89c4\u5219   \u5982\u679c\u5728\u865a\u62df\u5185\u5b58\u4e0a\u7684\u5f53\u524d\u91ca\u653e\u5185\u5b58\u7684\u524d/\u540e\u4e00\u4e2a\u5185\u5b58\u4e3a\u7a7a\u95f2,\u5219\u5408\u5e76.  \u5982\u679c\u524d/\u540e\u4e00\u4e2a\u5185\u5b58\u4e3adv chunk, \u5219\u5408\u5e76\u5230dv chunk  \u5982\u679c\u540e\u4e00\u4e2a\u5185\u5b58\u4e3atop, \u5219\u5408\u5e76\u5230top  \u5982\u679c\u524d/\u540e\u4e00\u4e2a\u5185\u5b58\u4e3a\u666e\u901a\u5185\u5b58\u5757,\u5219\u5220\u9664\u540e,\u67e5\u627e\u5e76\u63d2\u5165\u7b26\u5408\u5927\u5c0f\u7684\u7bb1\u5b50\u4e2d.     smallbin \u548c treebin\u7684\u89c4\u5219.   smallbin \u4e3a32bit\u6570,\u6ca1\u4e00\u4e2abit\u5bf9\u5e94\u4e00\u4e2a\u7bb1\u5b50\u7684\u72b6\u6001.1 \u4e3a\u6709\u7a7a\u95f2\u5185\u5b58, 0 \u4e3a\u65e0. 32\u4e2a\u7bb1\u5b50\u7684\u5927\u5c0f\u4e3a\u4ee58 \u4e3a\u57fa\u6570, \u4ee58 \u4e3a\u589e\u7387, \u957f\u5ea6\u4e3a32\u7684\u7b49\u5dee\u6570\u5217  treebin\u7684\u72b6\u6001\u4e0esmallbin\u4e00\u81f4. treebin\u7684\u5404\u4e2a\u7bb1\u5b50\u7684\u5927\u5c0f\u89c1\u4e0a\u6587.     treebin\u4e2d\u7684\u6811\u7684\u641c\u7d22\u7b97\u6cd5   \u8be5\u6811\u8868\u793a\u4e00\u6bb5\u5185\u5b58\u8303\u56f4.\u6240\u4ee5\u6ca1\u4e00\u68f5\u5b50\u6811\u7528\u4e8c\u5206\u6cd5\u8868\u793a\u5bf9\u5e94\u7684\u533a\u95f4\u8303\u56f4.  \u5de6\u5b50\u6811\u4e0a\u7684\u4efb\u610fchunk\u5927\u5c0f \u90fd\u5c0f\u4e8e\u5176\u53f3\u5b50\u6811\u7684\u4efb\u610fchunk\u7684\u5927\u5c0f,  \u53c2\u8003  tmalloc_large , insert_large_chunk  \u548c unlink_large_chunk \u7684\u89e3\u6790.", 
            "title": "\u603b\u7ed3"
        }
    ]
}